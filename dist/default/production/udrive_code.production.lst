

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jul 23 16:50:35 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18346
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	idataBANK4,global,class=CODE,delta=2
     9                           	psect	stringtext1,global,class=STRCODE,delta=2
    10                           	psect	stringtext2,global,class=STRCODE,delta=2
    11                           	psect	stringtext3,global,class=STRCODE,delta=2
    12                           	psect	stringtext4,global,class=STRCODE,delta=2
    13                           	psect	stringtext5,global,class=STRCODE,delta=2
    14                           	psect	stringtext6,global,class=STRCODE,delta=2
    15                           	psect	stringtext7,global,class=STRCODE,delta=2
    16                           	psect	stringtext8,global,class=STRCODE,delta=2
    17                           	psect	stringtext9,global,class=STRCODE,delta=2
    18                           	psect	stringtext10,global,class=STRCODE,delta=2
    19                           	psect	stringtext11,global,class=STRCODE,delta=2
    20                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	stringtext12,global,class=STRCODE,delta=2
    23                           	psect	stringtext13,global,class=STRCODE,delta=2
    24                           	psect	stringtext14,global,class=STRCODE,delta=2
    25                           	psect	stringtext15,global,class=STRCODE,delta=2
    26                           	psect	stringtext16,global,class=STRCODE,delta=2
    27                           	psect	stringtext17,global,class=STRCODE,delta=2
    28                           	psect	stringtext18,global,class=STRCODE,delta=2
    29                           	psect	stringtext19,global,class=STRCODE,delta=2
    30                           	psect	stringtext20,global,class=STRCODE,delta=2
    31                           	psect	stringtext21,global,class=STRCODE,delta=2
    32                           	psect	stringtext22,global,class=STRCODE,delta=2
    33                           	psect	stringtext23,global,class=STRCODE,delta=2
    34                           	psect	stringtext24,global,class=STRCODE,delta=2
    35                           	psect	stringtext25,global,class=STRCODE,delta=2
    36                           	psect	stringtext26,global,class=STRCODE,delta=2
    37                           	psect	stringtext27,global,class=STRCODE,delta=2
    38                           	psect	stringtext28,global,class=STRCODE,delta=2
    39                           	psect	stringtext29,global,class=STRCODE,delta=2
    40                           	psect	stringtext30,global,class=STRCODE,delta=2
    41                           	psect	stringtext31,global,class=STRCODE,delta=2
    42                           	psect	stringtext32,global,class=STRCODE,delta=2
    43                           	psect	stringtext33,global,class=STRCODE,delta=2
    44                           	psect	stringtext34,global,class=STRCODE,delta=2
    45                           	psect	stringtext35,global,class=STRCODE,delta=2
    46                           	psect	stringtext36,global,class=STRCODE,delta=2
    47                           	psect	stringtext37,global,class=STRCODE,delta=2
    48                           	psect	stringtext38,global,class=STRCODE,delta=2
    49                           	psect	stringtext39,global,class=STRCODE,delta=2
    50                           	psect	stringtext40,global,class=STRCODE,delta=2
    51                           	psect	stringtext41,global,class=STRCODE,delta=2
    52                           	psect	stringtext42,global,class=STRCODE,delta=2
    53                           	psect	stringtext43,global,class=STRCODE,delta=2
    54                           	psect	stringtext44,global,class=STRCODE,delta=2
    55                           	psect	stringtext45,global,class=STRCODE,delta=2
    56                           	psect	stringtext46,global,class=STRCODE,delta=2
    57                           	psect	stringtext47,global,class=STRCODE,delta=2
    58                           	psect	stringtext48,global,class=STRCODE,delta=2
    59                           	psect	stringtext49,global,class=STRCODE,delta=2
    60                           	psect	stringtext50,global,class=STRCODE,delta=2
    61                           	psect	stringtext51,global,class=STRCODE,delta=2
    62                           	psect	stringtext52,global,class=STRCODE,delta=2
    63                           	psect	stringtext53,global,class=STRCODE,delta=2
    64                           	psect	stringtext54,global,class=STRCODE,delta=2
    65                           	psect	stringtext55,global,class=STRCODE,delta=2
    66                           	psect	stringtext56,global,class=STRCODE,delta=2
    67                           	psect	stringtext57,global,class=STRCODE,delta=2
    68                           	psect	stringtext58,global,class=STRCODE,delta=2
    69                           	psect	stringtext59,global,class=STRCODE,delta=2
    70                           	psect	stringtext60,global,class=STRCODE,delta=2
    71                           	psect	stringtext61,global,class=STRCODE,delta=2
    72                           	psect	cinit,global,class=CODE,merge=1,delta=2
    73                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    74                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    75                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    76                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    77                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    78                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    79                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    80                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    81                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    82                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    83                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    84                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    85                           	psect	inittext,global,class=CODE,delta=2
    86                           	psect	clrtext,global,class=CODE,delta=2
    87                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    88                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    89                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    90                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    91                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    92                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    93                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    94                           	psect	text1,local,class=CODE,merge=1,delta=2
    95                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    96                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    98                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    99                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
   100                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
   101                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
   102                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
   103                           	psect	text10,local,class=CODE,merge=1,delta=2
   104                           	psect	text11,local,class=CODE,merge=1,delta=2
   105                           	psect	text12,local,class=CODE,merge=1,delta=2
   106                           	psect	text13,local,class=CODE,merge=1,delta=2
   107                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text16,local,class=CODE,merge=1,delta=2
   110                           	psect	text17,local,class=CODE,merge=1,delta=2
   111                           	psect	text18,local,class=CODE,merge=1,delta=2
   112                           	psect	swtext1,local,class=CONST,delta=2
   113                           	psect	text19,local,class=CODE,merge=1,delta=2
   114                           	psect	text20,local,class=CODE,merge=1,delta=2
   115                           	psect	text21,local,class=CODE,merge=1,delta=2
   116                           	psect	text22,local,class=CODE,merge=1,delta=2
   117                           	psect	text23,local,class=CODE,merge=1,delta=2
   118                           	psect	text24,local,class=CODE,merge=1,delta=2
   119                           	psect	text25,local,class=CODE,merge=1,delta=2
   120                           	psect	text26,local,class=CODE,merge=1,delta=2
   121                           	psect	text27,local,class=CODE,merge=1,delta=2
   122                           	psect	text28,local,class=CODE,merge=1,delta=2
   123                           	psect	text29,local,class=CODE,merge=1,delta=2
   124                           	psect	text30,local,class=CODE,merge=1,delta=2
   125                           	psect	text31,local,class=CODE,merge=1,delta=2
   126                           	psect	text32,local,class=CODE,merge=1,delta=2
   127                           	psect	text33,local,class=CODE,merge=1,delta=2
   128                           	psect	text34,local,class=CODE,merge=1,delta=2
   129                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
   130                           	psect	text36,local,class=CODE,merge=1,delta=2
   131                           	psect	text37,local,class=CODE,merge=1,delta=2
   132                           	psect	text38,local,class=CODE,merge=1,delta=2
   133                           	psect	text39,local,class=CODE,merge=1,delta=2
   134                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
   135                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
   136                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
   137                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
   138                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
   139                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
   140                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
   141                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
   142                           	psect	text48,local,class=CODE,merge=1,delta=2,group=2
   143                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
   144                           	psect	text50,local,class=CODE,merge=1,delta=2
   145                           	psect	text51,local,class=CODE,merge=1,delta=2
   146                           	psect	text52,local,class=CODE,merge=1,delta=2
   147                           	psect	text53,local,class=CODE,merge=1,delta=2
   148                           	psect	text54,local,class=CODE,merge=1,delta=2
   149                           	psect	text55,local,class=CODE,merge=1,delta=2
   150                           	psect	text56,local,class=CODE,merge=1,delta=2
   151                           	psect	text57,local,class=CODE,merge=1,delta=2
   152                           	psect	text58,local,class=CODE,merge=1,delta=2
   153                           	psect	text59,local,class=CODE,merge=1,delta=2
   154                           	psect	text60,local,class=CODE,merge=1,delta=2
   155                           	psect	text61,local,class=CODE,merge=1,delta=2
   156                           	psect	text62,local,class=CODE,merge=1,delta=2
   157                           	psect	text63,local,class=CODE,merge=1,delta=2
   158                           	psect	text64,local,class=CODE,merge=1,delta=2
   159                           	psect	text65,local,class=CODE,merge=1,delta=2
   160                           	psect	text66,local,class=CODE,merge=1,delta=2
   161                           	psect	text67,local,class=CODE,merge=1,delta=2
   162                           	psect	text68,local,class=CODE,merge=1,delta=2
   163                           	psect	text69,local,class=CODE,merge=1,delta=2
   164                           	psect	text70,local,class=CODE,merge=1,delta=2
   165                           	psect	text71,local,class=CODE,merge=1,delta=2
   166                           	psect	text72,local,class=CODE,merge=1,delta=2,group=2
   167                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
   168                           	psect	text74,local,class=CODE,merge=1,delta=2
   169                           	psect	text75,local,class=CODE,merge=1,delta=2
   170                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
   171                           	psect	text77,local,class=CODE,merge=1,inline,delta=2
   172                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
   173                           	psect	text79,local,class=CODE,merge=1,delta=2
   174                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   175                           	psect	text81,local,class=CODE,merge=1,delta=2
   176                           	psect	text82,local,class=CODE,merge=1,delta=2
   177                           	psect	text83,local,class=CODE,merge=1,delta=2
   178                           	psect	text84,local,class=CODE,merge=1,delta=2
   179                           	psect	text85,local,class=CODE,merge=1,delta=2
   180                           	psect	text86,local,class=CODE,merge=1,delta=2
   181                           	psect	text87,local,class=CODE,merge=1,delta=2
   182                           	psect	text88,local,class=CODE,merge=1,delta=2
   183                           	psect	text89,local,class=CODE,merge=1,delta=2
   184                           	psect	text90,local,class=CODE,merge=1,delta=2
   185                           	psect	text91,local,class=CODE,merge=1,delta=2
   186                           	psect	text92,local,class=CODE,merge=1,delta=2
   187                           	psect	text93,local,class=CODE,merge=1,delta=2
   188                           	psect	text94,local,class=CODE,merge=1,delta=2
   189                           	psect	text95,local,class=CODE,merge=1,delta=2
   190                           	psect	text96,local,class=CODE,merge=1,delta=2
   191                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   192                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   193                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   194                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   195                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   196                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   197                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   198                           	psect	text104,local,class=CODE,merge=1,delta=2
   199                           	psect	text105,local,class=CODE,merge=1,delta=2
   200                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   201                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   202                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   203                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   204                           	psect	text110,local,class=CODE,merge=1,delta=2,group=2
   205                           	psect	text111,local,class=CODE,merge=1,delta=2
   206                           	psect	text112,local,class=CODE,merge=1,delta=2
   207                           	psect	text113,local,class=CODE,merge=1,delta=2
   208                           	psect	text114,local,class=CODE,merge=1,delta=2
   209                           	psect	text115,local,class=CODE,merge=1,delta=2
   210                           	psect	text116,local,class=CODE,merge=1,delta=2
   211                           	psect	text117,local,class=CODE,merge=1,delta=2
   212                           	psect	text118,local,class=CODE,merge=1,delta=2
   213                           	psect	text119,local,class=CODE,merge=1,delta=2
   214                           	psect	text120,local,class=CODE,merge=1,delta=2
   215                           	psect	text121,local,class=CODE,merge=1,delta=2
   216                           	psect	text122,local,class=CODE,merge=1,delta=2
   217                           	psect	text123,local,class=CODE,merge=1,delta=2
   218                           	psect	text124,local,class=CODE,merge=1,delta=2
   219                           	psect	text125,local,class=CODE,merge=1,delta=2
   220                           	psect	text126,local,class=CODE,merge=1,delta=2
   221                           	psect	text127,local,class=CODE,merge=1,delta=2
   222                           	psect	text128,local,class=CODE,merge=1,delta=2
   223                           	psect	text129,local,class=CODE,merge=1,delta=2
   224                           	psect	text130,local,class=CODE,merge=1,delta=2
   225                           	psect	text131,local,class=CODE,merge=1,delta=2
   226                           	psect	intentry,global,class=CODE,delta=2
   227                           	psect	text133,local,class=CODE,merge=1,delta=2
   228                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   229                           	psect	text135,local,class=CODE,merge=1,delta=2
   230                           	psect	text136,local,class=CODE,merge=1,delta=2
   231                           	psect	text137,local,class=CODE,merge=1,delta=2
   232                           	psect	text138,local,class=CODE,merge=1,delta=2
   233                           	psect	text139,local,class=CODE,merge=1,delta=2
   234                           	psect	text140,local,class=CODE,merge=1,delta=2
   235                           	psect	text141,local,class=CODE,merge=1,delta=2
   236                           	psect	text142,local,class=CODE,merge=1,delta=2
   237                           	psect	text143,local,class=CODE,merge=1,delta=2
   238                           	psect	text144,local,class=CODE,merge=1,delta=2
   239                           	psect	text145,local,class=CODE,merge=1,delta=2
   240                           	psect	text146,local,class=CODE,merge=1,delta=2
   241                           	psect	text147,local,class=CODE,merge=1,delta=2
   242                           	psect	text148,local,class=CODE,merge=1,delta=2
   243                           	psect	text149,local,class=CODE,merge=1,delta=2
   244                           	psect	text150,local,class=CODE,merge=1,delta=2
   245                           	psect	text151,local,class=CODE,merge=1,inline,delta=2
   246                           	psect	text152,local,class=CODE,merge=1,inline,delta=2
   247                           	psect	text153,local,class=CODE,merge=1,inline,delta=2
   248                           	psect	text154,local,class=CODE,merge=1,inline,delta=2
   249                           	psect	text155,local,class=CODE,merge=1,inline,delta=2
   250                           	psect	text156,local,class=CODE,merge=1,inline,delta=2
   251                           	psect	text157,local,class=CODE,merge=1,inline,delta=2
   252                           	psect	text158,local,class=CODE,merge=1,delta=2
   253                           	psect	text159,local,class=CODE,merge=1,delta=2
   254                           	psect	text160,local,class=CODE,merge=1,inline,delta=2
   255                           	psect	text161,local,class=CODE,merge=1,inline,delta=2
   256                           	psect	text162,local,class=CODE,merge=1,inline,delta=2
   257                           	psect	text163,local,class=CODE,merge=1,delta=2
   258                           	psect	text164,local,class=CODE,merge=1,inline,delta=2
   259                           	psect	text165,local,class=CODE,merge=1,delta=2
   260                           	psect	text166,local,class=CODE,merge=1,delta=2
   261                           	psect	text167,local,class=CODE,merge=1,delta=2
   262                           	psect	text168,local,class=CODE,merge=1,delta=2
   263                           	psect	text169,local,class=CODE,merge=1,delta=2
   264                           	psect	text170,local,class=CODE,merge=1,delta=2
   265                           	psect	text171,local,class=CODE,merge=1,delta=2
   266                           	psect	text172,local,class=CODE,merge=1,delta=2
   267                           	psect	text173,local,class=CODE,merge=1,delta=2
   268                           	psect	text174,local,class=CODE,merge=1,delta=2
   269                           	psect	text175,local,class=CODE,merge=1,delta=2
   270                           	psect	text176,local,class=CODE,merge=1,delta=2
   271                           	psect	text177,local,class=CODE,merge=1,delta=2
   272                           	psect	text178,local,class=CODE,merge=1,delta=2
   273                           	psect	text179,local,class=CODE,merge=1,delta=2
   274                           	psect	text180,local,class=CODE,merge=1,delta=2
   275                           	psect	text181,local,class=CODE,merge=1,delta=2
   276                           	psect	text182,local,class=CODE,merge=1,delta=2
   277                           	dabs	1,0xCA0,32
   278                           	dabs	1,0xC30,64
   279                           	dabs	1,0x2790,0,_currentPositions_steps
   280                           	dabs	1,0x7E,2
   281  0000                     
   282                           ; Version 1.45
   283                           ; Generated 16/11/2017 GMT
   284                           ; 
   285                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   286                           ; All rights reserved.
   287                           ; 
   288                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   289                           ; 
   290                           ; Redistribution and use in source and binary forms, with or without modification, are
   291                           ; permitted provided that the following conditions are met:
   292                           ; 
   293                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   294                           ;        conditions and the following disclaimer.
   295                           ; 
   296                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   297                           ;        of conditions and the following disclaimer in the documentation and/or other
   298                           ;        materials provided with the distribution.
   299                           ; 
   300                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   301                           ;        software without specific prior written permission.
   302                           ; 
   303                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   304                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   305                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   306                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   307                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   308                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   309                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   310                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   311                           ; 
   312                           ; 
   313                           ; Code-generator required, PIC16F18346 Definitions
   314                           ; 
   315                           ; SFR Addresses
   316  0000                     	;# 
   317  0001                     	;# 
   318  0002                     	;# 
   319  0003                     	;# 
   320  0004                     	;# 
   321  0005                     	;# 
   322  0006                     	;# 
   323  0007                     	;# 
   324  0008                     	;# 
   325  0009                     	;# 
   326  000A                     	;# 
   327  000B                     	;# 
   328  000C                     	;# 
   329  000D                     	;# 
   330  000E                     	;# 
   331  0010                     	;# 
   332  0011                     	;# 
   333  0012                     	;# 
   334  0013                     	;# 
   335  0014                     	;# 
   336  0015                     	;# 
   337  0015                     	;# 
   338  0016                     	;# 
   339  0016                     	;# 
   340  0017                     	;# 
   341  0018                     	;# 
   342  0019                     	;# 
   343  0019                     	;# 
   344  001A                     	;# 
   345  001B                     	;# 
   346  001C                     	;# 
   347  001D                     	;# 
   348  001E                     	;# 
   349  001F                     	;# 
   350  008C                     	;# 
   351  008D                     	;# 
   352  008E                     	;# 
   353  0090                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0093                     	;# 
   357  0094                     	;# 
   358  0097                     	;# 
   359  009B                     	;# 
   360  009B                     	;# 
   361  009C                     	;# 
   362  009D                     	;# 
   363  009E                     	;# 
   364  009F                     	;# 
   365  010C                     	;# 
   366  010D                     	;# 
   367  010E                     	;# 
   368  0111                     	;# 
   369  0112                     	;# 
   370  0113                     	;# 
   371  0114                     	;# 
   372  0115                     	;# 
   373  0116                     	;# 
   374  0117                     	;# 
   375  0118                     	;# 
   376  0119                     	;# 
   377  018C                     	;# 
   378  018D                     	;# 
   379  018E                     	;# 
   380  0197                     	;# 
   381  0199                     	;# 
   382  0199                     	;# 
   383  0199                     	;# 
   384  019A                     	;# 
   385  019A                     	;# 
   386  019A                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019B                     	;# 
   391  019B                     	;# 
   392  019C                     	;# 
   393  019C                     	;# 
   394  019C                     	;# 
   395  019D                     	;# 
   396  019D                     	;# 
   397  019D                     	;# 
   398  019E                     	;# 
   399  019E                     	;# 
   400  019E                     	;# 
   401  019F                     	;# 
   402  019F                     	;# 
   403  019F                     	;# 
   404  019F                     	;# 
   405  019F                     	;# 
   406  020C                     	;# 
   407  020D                     	;# 
   408  020E                     	;# 
   409  0211                     	;# 
   410  0211                     	;# 
   411  0212                     	;# 
   412  0212                     	;# 
   413  0213                     	;# 
   414  0213                     	;# 
   415  0214                     	;# 
   416  0214                     	;# 
   417  0215                     	;# 
   418  0215                     	;# 
   419  0215                     	;# 
   420  0215                     	;# 
   421  0216                     	;# 
   422  0216                     	;# 
   423  0217                     	;# 
   424  0217                     	;# 
   425  0219                     	;# 
   426  021A                     	;# 
   427  021B                     	;# 
   428  021C                     	;# 
   429  021D                     	;# 
   430  021D                     	;# 
   431  021E                     	;# 
   432  021F                     	;# 
   433  028C                     	;# 
   434  028D                     	;# 
   435  028E                     	;# 
   436  0291                     	;# 
   437  0291                     	;# 
   438  0292                     	;# 
   439  0293                     	;# 
   440  0294                     	;# 
   441  0295                     	;# 
   442  0295                     	;# 
   443  0296                     	;# 
   444  0297                     	;# 
   445  0298                     	;# 
   446  029F                     	;# 
   447  030C                     	;# 
   448  030D                     	;# 
   449  030E                     	;# 
   450  0311                     	;# 
   451  0311                     	;# 
   452  0312                     	;# 
   453  0313                     	;# 
   454  0314                     	;# 
   455  0315                     	;# 
   456  0315                     	;# 
   457  0316                     	;# 
   458  0317                     	;# 
   459  0318                     	;# 
   460  038C                     	;# 
   461  038D                     	;# 
   462  038E                     	;# 
   463  0391                     	;# 
   464  0392                     	;# 
   465  0393                     	;# 
   466  0394                     	;# 
   467  0395                     	;# 
   468  0396                     	;# 
   469  0397                     	;# 
   470  0398                     	;# 
   471  0399                     	;# 
   472  039A                     	;# 
   473  039C                     	;# 
   474  039D                     	;# 
   475  039E                     	;# 
   476  039F                     	;# 
   477  0411                     	;# 
   478  0411                     	;# 
   479  0412                     	;# 
   480  0413                     	;# 
   481  0414                     	;# 
   482  0415                     	;# 
   483  0416                     	;# 
   484  0417                     	;# 
   485  0418                     	;# 
   486  0418                     	;# 
   487  0419                     	;# 
   488  041A                     	;# 
   489  041B                     	;# 
   490  041C                     	;# 
   491  041D                     	;# 
   492  041E                     	;# 
   493  041F                     	;# 
   494  0498                     	;# 
   495  0498                     	;# 
   496  0499                     	;# 
   497  049A                     	;# 
   498  049B                     	;# 
   499  049B                     	;# 
   500  049C                     	;# 
   501  049D                     	;# 
   502  049E                     	;# 
   503  049F                     	;# 
   504  0617                     	;# 
   505  0618                     	;# 
   506  0619                     	;# 
   507  0619                     	;# 
   508  061A                     	;# 
   509  061B                     	;# 
   510  061C                     	;# 
   511  061C                     	;# 
   512  061F                     	;# 
   513  0691                     	;# 
   514  0692                     	;# 
   515  0693                     	;# 
   516  0694                     	;# 
   517  0695                     	;# 
   518  0696                     	;# 
   519  0697                     	;# 
   520  0698                     	;# 
   521  0699                     	;# 
   522  0711                     	;# 
   523  0712                     	;# 
   524  0713                     	;# 
   525  0714                     	;# 
   526  0715                     	;# 
   527  0716                     	;# 
   528  0717                     	;# 
   529  0718                     	;# 
   530  0719                     	;# 
   531  0891                     	;# 
   532  0891                     	;# 
   533  0891                     	;# 
   534  0891                     	;# 
   535  0891                     	;# 
   536  0891                     	;# 
   537  0892                     	;# 
   538  0892                     	;# 
   539  0892                     	;# 
   540  0893                     	;# 
   541  0893                     	;# 
   542  0893                     	;# 
   543  0893                     	;# 
   544  0893                     	;# 
   545  0893                     	;# 
   546  0894                     	;# 
   547  0894                     	;# 
   548  0894                     	;# 
   549  0895                     	;# 
   550  0895                     	;# 
   551  0895                     	;# 
   552  0896                     	;# 
   553  0896                     	;# 
   554  0896                     	;# 
   555  089B                     	;# 
   556  0911                     	;# 
   557  0912                     	;# 
   558  0913                     	;# 
   559  0914                     	;# 
   560  0915                     	;# 
   561  0916                     	;# 
   562  0918                     	;# 
   563  0919                     	;# 
   564  091A                     	;# 
   565  091B                     	;# 
   566  091C                     	;# 
   567  091D                     	;# 
   568  091E                     	;# 
   569  091F                     	;# 
   570  0E0F                     	;# 
   571  0E10                     	;# 
   572  0E11                     	;# 
   573  0E12                     	;# 
   574  0E13                     	;# 
   575  0E14                     	;# 
   576  0E15                     	;# 
   577  0E16                     	;# 
   578  0E17                     	;# 
   579  0E18                     	;# 
   580  0E19                     	;# 
   581  0E1A                     	;# 
   582  0E1B                     	;# 
   583  0E1C                     	;# 
   584  0E1D                     	;# 
   585  0E1E                     	;# 
   586  0E1F                     	;# 
   587  0E20                     	;# 
   588  0E21                     	;# 
   589  0E22                     	;# 
   590  0E24                     	;# 
   591  0E25                     	;# 
   592  0E28                     	;# 
   593  0E29                     	;# 
   594  0E2A                     	;# 
   595  0E2B                     	;# 
   596  0E2C                     	;# 
   597  0E2D                     	;# 
   598  0E2E                     	;# 
   599  0E2F                     	;# 
   600  0E90                     	;# 
   601  0E91                     	;# 
   602  0E92                     	;# 
   603  0E94                     	;# 
   604  0E95                     	;# 
   605  0E9C                     	;# 
   606  0E9D                     	;# 
   607  0E9E                     	;# 
   608  0E9F                     	;# 
   609  0EA0                     	;# 
   610  0EA1                     	;# 
   611  0EA2                     	;# 
   612  0EA3                     	;# 
   613  0EA4                     	;# 
   614  0EA5                     	;# 
   615  0EA6                     	;# 
   616  0EA7                     	;# 
   617  0F0F                     	;# 
   618  0F10                     	;# 
   619  0F11                     	;# 
   620  0F12                     	;# 
   621  0F13                     	;# 
   622  0F14                     	;# 
   623  0F15                     	;# 
   624  0F16                     	;# 
   625  0F17                     	;# 
   626  0F18                     	;# 
   627  0F19                     	;# 
   628  0F1A                     	;# 
   629  0F1B                     	;# 
   630  0F1C                     	;# 
   631  0F1D                     	;# 
   632  0F1E                     	;# 
   633  0F1F                     	;# 
   634  0F20                     	;# 
   635  0F21                     	;# 
   636  0F22                     	;# 
   637  0F23                     	;# 
   638  0F24                     	;# 
   639  0F25                     	;# 
   640  0F26                     	;# 
   641  0F27                     	;# 
   642  0F28                     	;# 
   643  0F29                     	;# 
   644  0F2A                     	;# 
   645  0F2B                     	;# 
   646  0F2C                     	;# 
   647  0F2D                     	;# 
   648  0F2E                     	;# 
   649  0F2F                     	;# 
   650  0F30                     	;# 
   651  0F31                     	;# 
   652  0F32                     	;# 
   653  0F33                     	;# 
   654  0F34                     	;# 
   655  0F35                     	;# 
   656  0F36                     	;# 
   657  0F37                     	;# 
   658  0FE4                     	;# 
   659  0FE5                     	;# 
   660  0FE6                     	;# 
   661  0FE7                     	;# 
   662  0FE8                     	;# 
   663  0FE9                     	;# 
   664  0FEA                     	;# 
   665  0FEB                     	;# 
   666  0FED                     	;# 
   667  0FEE                     	;# 
   668  0FEF                     	;# 
   669  0000                     	;# 
   670  0001                     	;# 
   671  0002                     	;# 
   672  0003                     	;# 
   673  0004                     	;# 
   674  0005                     	;# 
   675  0006                     	;# 
   676  0007                     	;# 
   677  0008                     	;# 
   678  0009                     	;# 
   679  000A                     	;# 
   680  000B                     	;# 
   681  000C                     	;# 
   682  000D                     	;# 
   683  000E                     	;# 
   684  0010                     	;# 
   685  0011                     	;# 
   686  0012                     	;# 
   687  0013                     	;# 
   688  0014                     	;# 
   689  0015                     	;# 
   690  0015                     	;# 
   691  0016                     	;# 
   692  0016                     	;# 
   693  0017                     	;# 
   694  0018                     	;# 
   695  0019                     	;# 
   696  0019                     	;# 
   697  001A                     	;# 
   698  001B                     	;# 
   699  001C                     	;# 
   700  001D                     	;# 
   701  001E                     	;# 
   702  001F                     	;# 
   703  008C                     	;# 
   704  008D                     	;# 
   705  008E                     	;# 
   706  0090                     	;# 
   707  0091                     	;# 
   708  0092                     	;# 
   709  0093                     	;# 
   710  0094                     	;# 
   711  0097                     	;# 
   712  009B                     	;# 
   713  009B                     	;# 
   714  009C                     	;# 
   715  009D                     	;# 
   716  009E                     	;# 
   717  009F                     	;# 
   718  010C                     	;# 
   719  010D                     	;# 
   720  010E                     	;# 
   721  0111                     	;# 
   722  0112                     	;# 
   723  0113                     	;# 
   724  0114                     	;# 
   725  0115                     	;# 
   726  0116                     	;# 
   727  0117                     	;# 
   728  0118                     	;# 
   729  0119                     	;# 
   730  018C                     	;# 
   731  018D                     	;# 
   732  018E                     	;# 
   733  0197                     	;# 
   734  0199                     	;# 
   735  0199                     	;# 
   736  0199                     	;# 
   737  019A                     	;# 
   738  019A                     	;# 
   739  019A                     	;# 
   740  019B                     	;# 
   741  019B                     	;# 
   742  019B                     	;# 
   743  019B                     	;# 
   744  019B                     	;# 
   745  019C                     	;# 
   746  019C                     	;# 
   747  019C                     	;# 
   748  019D                     	;# 
   749  019D                     	;# 
   750  019D                     	;# 
   751  019E                     	;# 
   752  019E                     	;# 
   753  019E                     	;# 
   754  019F                     	;# 
   755  019F                     	;# 
   756  019F                     	;# 
   757  019F                     	;# 
   758  019F                     	;# 
   759  020C                     	;# 
   760  020D                     	;# 
   761  020E                     	;# 
   762  0211                     	;# 
   763  0211                     	;# 
   764  0212                     	;# 
   765  0212                     	;# 
   766  0213                     	;# 
   767  0213                     	;# 
   768  0214                     	;# 
   769  0214                     	;# 
   770  0215                     	;# 
   771  0215                     	;# 
   772  0215                     	;# 
   773  0215                     	;# 
   774  0216                     	;# 
   775  0216                     	;# 
   776  0217                     	;# 
   777  0217                     	;# 
   778  0219                     	;# 
   779  021A                     	;# 
   780  021B                     	;# 
   781  021C                     	;# 
   782  021D                     	;# 
   783  021D                     	;# 
   784  021E                     	;# 
   785  021F                     	;# 
   786  028C                     	;# 
   787  028D                     	;# 
   788  028E                     	;# 
   789  0291                     	;# 
   790  0291                     	;# 
   791  0292                     	;# 
   792  0293                     	;# 
   793  0294                     	;# 
   794  0295                     	;# 
   795  0295                     	;# 
   796  0296                     	;# 
   797  0297                     	;# 
   798  0298                     	;# 
   799  029F                     	;# 
   800  030C                     	;# 
   801  030D                     	;# 
   802  030E                     	;# 
   803  0311                     	;# 
   804  0311                     	;# 
   805  0312                     	;# 
   806  0313                     	;# 
   807  0314                     	;# 
   808  0315                     	;# 
   809  0315                     	;# 
   810  0316                     	;# 
   811  0317                     	;# 
   812  0318                     	;# 
   813  038C                     	;# 
   814  038D                     	;# 
   815  038E                     	;# 
   816  0391                     	;# 
   817  0392                     	;# 
   818  0393                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0397                     	;# 
   823  0398                     	;# 
   824  0399                     	;# 
   825  039A                     	;# 
   826  039C                     	;# 
   827  039D                     	;# 
   828  039E                     	;# 
   829  039F                     	;# 
   830  0411                     	;# 
   831  0411                     	;# 
   832  0412                     	;# 
   833  0413                     	;# 
   834  0414                     	;# 
   835  0415                     	;# 
   836  0416                     	;# 
   837  0417                     	;# 
   838  0418                     	;# 
   839  0418                     	;# 
   840  0419                     	;# 
   841  041A                     	;# 
   842  041B                     	;# 
   843  041C                     	;# 
   844  041D                     	;# 
   845  041E                     	;# 
   846  041F                     	;# 
   847  0498                     	;# 
   848  0498                     	;# 
   849  0499                     	;# 
   850  049A                     	;# 
   851  049B                     	;# 
   852  049B                     	;# 
   853  049C                     	;# 
   854  049D                     	;# 
   855  049E                     	;# 
   856  049F                     	;# 
   857  0617                     	;# 
   858  0618                     	;# 
   859  0619                     	;# 
   860  0619                     	;# 
   861  061A                     	;# 
   862  061B                     	;# 
   863  061C                     	;# 
   864  061C                     	;# 
   865  061F                     	;# 
   866  0691                     	;# 
   867  0692                     	;# 
   868  0693                     	;# 
   869  0694                     	;# 
   870  0695                     	;# 
   871  0696                     	;# 
   872  0697                     	;# 
   873  0698                     	;# 
   874  0699                     	;# 
   875  0711                     	;# 
   876  0712                     	;# 
   877  0713                     	;# 
   878  0714                     	;# 
   879  0715                     	;# 
   880  0716                     	;# 
   881  0717                     	;# 
   882  0718                     	;# 
   883  0719                     	;# 
   884  0891                     	;# 
   885  0891                     	;# 
   886  0891                     	;# 
   887  0891                     	;# 
   888  0891                     	;# 
   889  0891                     	;# 
   890  0892                     	;# 
   891  0892                     	;# 
   892  0892                     	;# 
   893  0893                     	;# 
   894  0893                     	;# 
   895  0893                     	;# 
   896  0893                     	;# 
   897  0893                     	;# 
   898  0893                     	;# 
   899  0894                     	;# 
   900  0894                     	;# 
   901  0894                     	;# 
   902  0895                     	;# 
   903  0895                     	;# 
   904  0895                     	;# 
   905  0896                     	;# 
   906  0896                     	;# 
   907  0896                     	;# 
   908  089B                     	;# 
   909  0911                     	;# 
   910  0912                     	;# 
   911  0913                     	;# 
   912  0914                     	;# 
   913  0915                     	;# 
   914  0916                     	;# 
   915  0918                     	;# 
   916  0919                     	;# 
   917  091A                     	;# 
   918  091B                     	;# 
   919  091C                     	;# 
   920  091D                     	;# 
   921  091E                     	;# 
   922  091F                     	;# 
   923  0E0F                     	;# 
   924  0E10                     	;# 
   925  0E11                     	;# 
   926  0E12                     	;# 
   927  0E13                     	;# 
   928  0E14                     	;# 
   929  0E15                     	;# 
   930  0E16                     	;# 
   931  0E17                     	;# 
   932  0E18                     	;# 
   933  0E19                     	;# 
   934  0E1A                     	;# 
   935  0E1B                     	;# 
   936  0E1C                     	;# 
   937  0E1D                     	;# 
   938  0E1E                     	;# 
   939  0E1F                     	;# 
   940  0E20                     	;# 
   941  0E21                     	;# 
   942  0E22                     	;# 
   943  0E24                     	;# 
   944  0E25                     	;# 
   945  0E28                     	;# 
   946  0E29                     	;# 
   947  0E2A                     	;# 
   948  0E2B                     	;# 
   949  0E2C                     	;# 
   950  0E2D                     	;# 
   951  0E2E                     	;# 
   952  0E2F                     	;# 
   953  0E90                     	;# 
   954  0E91                     	;# 
   955  0E92                     	;# 
   956  0E94                     	;# 
   957  0E95                     	;# 
   958  0E9C                     	;# 
   959  0E9D                     	;# 
   960  0E9E                     	;# 
   961  0E9F                     	;# 
   962  0EA0                     	;# 
   963  0EA1                     	;# 
   964  0EA2                     	;# 
   965  0EA3                     	;# 
   966  0EA4                     	;# 
   967  0EA5                     	;# 
   968  0EA6                     	;# 
   969  0EA7                     	;# 
   970  0F0F                     	;# 
   971  0F10                     	;# 
   972  0F11                     	;# 
   973  0F12                     	;# 
   974  0F13                     	;# 
   975  0F14                     	;# 
   976  0F15                     	;# 
   977  0F16                     	;# 
   978  0F17                     	;# 
   979  0F18                     	;# 
   980  0F19                     	;# 
   981  0F1A                     	;# 
   982  0F1B                     	;# 
   983  0F1C                     	;# 
   984  0F1D                     	;# 
   985  0F1E                     	;# 
   986  0F1F                     	;# 
   987  0F20                     	;# 
   988  0F21                     	;# 
   989  0F22                     	;# 
   990  0F23                     	;# 
   991  0F24                     	;# 
   992  0F25                     	;# 
   993  0F26                     	;# 
   994  0F27                     	;# 
   995  0F28                     	;# 
   996  0F29                     	;# 
   997  0F2A                     	;# 
   998  0F2B                     	;# 
   999  0F2C                     	;# 
  1000  0F2D                     	;# 
  1001  0F2E                     	;# 
  1002  0F2F                     	;# 
  1003  0F30                     	;# 
  1004  0F31                     	;# 
  1005  0F32                     	;# 
  1006  0F33                     	;# 
  1007  0F34                     	;# 
  1008  0F35                     	;# 
  1009  0F36                     	;# 
  1010  0F37                     	;# 
  1011  0FE4                     	;# 
  1012  0FE5                     	;# 
  1013  0FE6                     	;# 
  1014  0FE7                     	;# 
  1015  0FE8                     	;# 
  1016  0FE9                     	;# 
  1017  0FEA                     	;# 
  1018  0FEB                     	;# 
  1019  0FED                     	;# 
  1020  0FEE                     	;# 
  1021  0FEF                     	;# 
  1022  0000                     	;# 
  1023  0001                     	;# 
  1024  0002                     	;# 
  1025  0003                     	;# 
  1026  0004                     	;# 
  1027  0005                     	;# 
  1028  0006                     	;# 
  1029  0007                     	;# 
  1030  0008                     	;# 
  1031  0009                     	;# 
  1032  000A                     	;# 
  1033  000B                     	;# 
  1034  000C                     	;# 
  1035  000D                     	;# 
  1036  000E                     	;# 
  1037  0010                     	;# 
  1038  0011                     	;# 
  1039  0012                     	;# 
  1040  0013                     	;# 
  1041  0014                     	;# 
  1042  0015                     	;# 
  1043  0015                     	;# 
  1044  0016                     	;# 
  1045  0016                     	;# 
  1046  0017                     	;# 
  1047  0018                     	;# 
  1048  0019                     	;# 
  1049  0019                     	;# 
  1050  001A                     	;# 
  1051  001B                     	;# 
  1052  001C                     	;# 
  1053  001D                     	;# 
  1054  001E                     	;# 
  1055  001F                     	;# 
  1056  008C                     	;# 
  1057  008D                     	;# 
  1058  008E                     	;# 
  1059  0090                     	;# 
  1060  0091                     	;# 
  1061  0092                     	;# 
  1062  0093                     	;# 
  1063  0094                     	;# 
  1064  0097                     	;# 
  1065  009B                     	;# 
  1066  009B                     	;# 
  1067  009C                     	;# 
  1068  009D                     	;# 
  1069  009E                     	;# 
  1070  009F                     	;# 
  1071  010C                     	;# 
  1072  010D                     	;# 
  1073  010E                     	;# 
  1074  0111                     	;# 
  1075  0112                     	;# 
  1076  0113                     	;# 
  1077  0114                     	;# 
  1078  0115                     	;# 
  1079  0116                     	;# 
  1080  0117                     	;# 
  1081  0118                     	;# 
  1082  0119                     	;# 
  1083  018C                     	;# 
  1084  018D                     	;# 
  1085  018E                     	;# 
  1086  0197                     	;# 
  1087  0199                     	;# 
  1088  0199                     	;# 
  1089  0199                     	;# 
  1090  019A                     	;# 
  1091  019A                     	;# 
  1092  019A                     	;# 
  1093  019B                     	;# 
  1094  019B                     	;# 
  1095  019B                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019C                     	;# 
  1099  019C                     	;# 
  1100  019C                     	;# 
  1101  019D                     	;# 
  1102  019D                     	;# 
  1103  019D                     	;# 
  1104  019E                     	;# 
  1105  019E                     	;# 
  1106  019E                     	;# 
  1107  019F                     	;# 
  1108  019F                     	;# 
  1109  019F                     	;# 
  1110  019F                     	;# 
  1111  019F                     	;# 
  1112  020C                     	;# 
  1113  020D                     	;# 
  1114  020E                     	;# 
  1115  0211                     	;# 
  1116  0211                     	;# 
  1117  0212                     	;# 
  1118  0212                     	;# 
  1119  0213                     	;# 
  1120  0213                     	;# 
  1121  0214                     	;# 
  1122  0214                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0216                     	;# 
  1128  0216                     	;# 
  1129  0217                     	;# 
  1130  0217                     	;# 
  1131  0219                     	;# 
  1132  021A                     	;# 
  1133  021B                     	;# 
  1134  021C                     	;# 
  1135  021D                     	;# 
  1136  021D                     	;# 
  1137  021E                     	;# 
  1138  021F                     	;# 
  1139  028C                     	;# 
  1140  028D                     	;# 
  1141  028E                     	;# 
  1142  0291                     	;# 
  1143  0291                     	;# 
  1144  0292                     	;# 
  1145  0293                     	;# 
  1146  0294                     	;# 
  1147  0295                     	;# 
  1148  0295                     	;# 
  1149  0296                     	;# 
  1150  0297                     	;# 
  1151  0298                     	;# 
  1152  029F                     	;# 
  1153  030C                     	;# 
  1154  030D                     	;# 
  1155  030E                     	;# 
  1156  0311                     	;# 
  1157  0311                     	;# 
  1158  0312                     	;# 
  1159  0313                     	;# 
  1160  0314                     	;# 
  1161  0315                     	;# 
  1162  0315                     	;# 
  1163  0316                     	;# 
  1164  0317                     	;# 
  1165  0318                     	;# 
  1166  038C                     	;# 
  1167  038D                     	;# 
  1168  038E                     	;# 
  1169  0391                     	;# 
  1170  0392                     	;# 
  1171  0393                     	;# 
  1172  0394                     	;# 
  1173  0395                     	;# 
  1174  0396                     	;# 
  1175  0397                     	;# 
  1176  0398                     	;# 
  1177  0399                     	;# 
  1178  039A                     	;# 
  1179  039C                     	;# 
  1180  039D                     	;# 
  1181  039E                     	;# 
  1182  039F                     	;# 
  1183  0411                     	;# 
  1184  0411                     	;# 
  1185  0412                     	;# 
  1186  0413                     	;# 
  1187  0414                     	;# 
  1188  0415                     	;# 
  1189  0416                     	;# 
  1190  0417                     	;# 
  1191  0418                     	;# 
  1192  0418                     	;# 
  1193  0419                     	;# 
  1194  041A                     	;# 
  1195  041B                     	;# 
  1196  041C                     	;# 
  1197  041D                     	;# 
  1198  041E                     	;# 
  1199  041F                     	;# 
  1200  0498                     	;# 
  1201  0498                     	;# 
  1202  0499                     	;# 
  1203  049A                     	;# 
  1204  049B                     	;# 
  1205  049B                     	;# 
  1206  049C                     	;# 
  1207  049D                     	;# 
  1208  049E                     	;# 
  1209  049F                     	;# 
  1210  0617                     	;# 
  1211  0618                     	;# 
  1212  0619                     	;# 
  1213  0619                     	;# 
  1214  061A                     	;# 
  1215  061B                     	;# 
  1216  061C                     	;# 
  1217  061C                     	;# 
  1218  061F                     	;# 
  1219  0691                     	;# 
  1220  0692                     	;# 
  1221  0693                     	;# 
  1222  0694                     	;# 
  1223  0695                     	;# 
  1224  0696                     	;# 
  1225  0697                     	;# 
  1226  0698                     	;# 
  1227  0699                     	;# 
  1228  0711                     	;# 
  1229  0712                     	;# 
  1230  0713                     	;# 
  1231  0714                     	;# 
  1232  0715                     	;# 
  1233  0716                     	;# 
  1234  0717                     	;# 
  1235  0718                     	;# 
  1236  0719                     	;# 
  1237  0891                     	;# 
  1238  0891                     	;# 
  1239  0891                     	;# 
  1240  0891                     	;# 
  1241  0891                     	;# 
  1242  0891                     	;# 
  1243  0892                     	;# 
  1244  0892                     	;# 
  1245  0892                     	;# 
  1246  0893                     	;# 
  1247  0893                     	;# 
  1248  0893                     	;# 
  1249  0893                     	;# 
  1250  0893                     	;# 
  1251  0893                     	;# 
  1252  0894                     	;# 
  1253  0894                     	;# 
  1254  0894                     	;# 
  1255  0895                     	;# 
  1256  0895                     	;# 
  1257  0895                     	;# 
  1258  0896                     	;# 
  1259  0896                     	;# 
  1260  0896                     	;# 
  1261  089B                     	;# 
  1262  0911                     	;# 
  1263  0912                     	;# 
  1264  0913                     	;# 
  1265  0914                     	;# 
  1266  0915                     	;# 
  1267  0916                     	;# 
  1268  0918                     	;# 
  1269  0919                     	;# 
  1270  091A                     	;# 
  1271  091B                     	;# 
  1272  091C                     	;# 
  1273  091D                     	;# 
  1274  091E                     	;# 
  1275  091F                     	;# 
  1276  0E0F                     	;# 
  1277  0E10                     	;# 
  1278  0E11                     	;# 
  1279  0E12                     	;# 
  1280  0E13                     	;# 
  1281  0E14                     	;# 
  1282  0E15                     	;# 
  1283  0E16                     	;# 
  1284  0E17                     	;# 
  1285  0E18                     	;# 
  1286  0E19                     	;# 
  1287  0E1A                     	;# 
  1288  0E1B                     	;# 
  1289  0E1C                     	;# 
  1290  0E1D                     	;# 
  1291  0E1E                     	;# 
  1292  0E1F                     	;# 
  1293  0E20                     	;# 
  1294  0E21                     	;# 
  1295  0E22                     	;# 
  1296  0E24                     	;# 
  1297  0E25                     	;# 
  1298  0E28                     	;# 
  1299  0E29                     	;# 
  1300  0E2A                     	;# 
  1301  0E2B                     	;# 
  1302  0E2C                     	;# 
  1303  0E2D                     	;# 
  1304  0E2E                     	;# 
  1305  0E2F                     	;# 
  1306  0E90                     	;# 
  1307  0E91                     	;# 
  1308  0E92                     	;# 
  1309  0E94                     	;# 
  1310  0E95                     	;# 
  1311  0E9C                     	;# 
  1312  0E9D                     	;# 
  1313  0E9E                     	;# 
  1314  0E9F                     	;# 
  1315  0EA0                     	;# 
  1316  0EA1                     	;# 
  1317  0EA2                     	;# 
  1318  0EA3                     	;# 
  1319  0EA4                     	;# 
  1320  0EA5                     	;# 
  1321  0EA6                     	;# 
  1322  0EA7                     	;# 
  1323  0F0F                     	;# 
  1324  0F10                     	;# 
  1325  0F11                     	;# 
  1326  0F12                     	;# 
  1327  0F13                     	;# 
  1328  0F14                     	;# 
  1329  0F15                     	;# 
  1330  0F16                     	;# 
  1331  0F17                     	;# 
  1332  0F18                     	;# 
  1333  0F19                     	;# 
  1334  0F1A                     	;# 
  1335  0F1B                     	;# 
  1336  0F1C                     	;# 
  1337  0F1D                     	;# 
  1338  0F1E                     	;# 
  1339  0F1F                     	;# 
  1340  0F20                     	;# 
  1341  0F21                     	;# 
  1342  0F22                     	;# 
  1343  0F23                     	;# 
  1344  0F24                     	;# 
  1345  0F25                     	;# 
  1346  0F26                     	;# 
  1347  0F27                     	;# 
  1348  0F28                     	;# 
  1349  0F29                     	;# 
  1350  0F2A                     	;# 
  1351  0F2B                     	;# 
  1352  0F2C                     	;# 
  1353  0F2D                     	;# 
  1354  0F2E                     	;# 
  1355  0F2F                     	;# 
  1356  0F30                     	;# 
  1357  0F31                     	;# 
  1358  0F32                     	;# 
  1359  0F33                     	;# 
  1360  0F34                     	;# 
  1361  0F35                     	;# 
  1362  0F36                     	;# 
  1363  0F37                     	;# 
  1364  0FE4                     	;# 
  1365  0FE5                     	;# 
  1366  0FE6                     	;# 
  1367  0FE7                     	;# 
  1368  0FE8                     	;# 
  1369  0FE9                     	;# 
  1370  0FEA                     	;# 
  1371  0FEB                     	;# 
  1372  0FED                     	;# 
  1373  0FEE                     	;# 
  1374  0FEF                     	;# 
  1375  0000                     	;# 
  1376  0001                     	;# 
  1377  0002                     	;# 
  1378  0003                     	;# 
  1379  0004                     	;# 
  1380  0005                     	;# 
  1381  0006                     	;# 
  1382  0007                     	;# 
  1383  0008                     	;# 
  1384  0009                     	;# 
  1385  000A                     	;# 
  1386  000B                     	;# 
  1387  000C                     	;# 
  1388  000D                     	;# 
  1389  000E                     	;# 
  1390  0010                     	;# 
  1391  0011                     	;# 
  1392  0012                     	;# 
  1393  0013                     	;# 
  1394  0014                     	;# 
  1395  0015                     	;# 
  1396  0015                     	;# 
  1397  0016                     	;# 
  1398  0016                     	;# 
  1399  0017                     	;# 
  1400  0018                     	;# 
  1401  0019                     	;# 
  1402  0019                     	;# 
  1403  001A                     	;# 
  1404  001B                     	;# 
  1405  001C                     	;# 
  1406  001D                     	;# 
  1407  001E                     	;# 
  1408  001F                     	;# 
  1409  008C                     	;# 
  1410  008D                     	;# 
  1411  008E                     	;# 
  1412  0090                     	;# 
  1413  0091                     	;# 
  1414  0092                     	;# 
  1415  0093                     	;# 
  1416  0094                     	;# 
  1417  0097                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  009F                     	;# 
  1424  010C                     	;# 
  1425  010D                     	;# 
  1426  010E                     	;# 
  1427  0111                     	;# 
  1428  0112                     	;# 
  1429  0113                     	;# 
  1430  0114                     	;# 
  1431  0115                     	;# 
  1432  0116                     	;# 
  1433  0117                     	;# 
  1434  0118                     	;# 
  1435  0119                     	;# 
  1436  018C                     	;# 
  1437  018D                     	;# 
  1438  018E                     	;# 
  1439  0197                     	;# 
  1440  0199                     	;# 
  1441  0199                     	;# 
  1442  0199                     	;# 
  1443  019A                     	;# 
  1444  019A                     	;# 
  1445  019A                     	;# 
  1446  019B                     	;# 
  1447  019B                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019C                     	;# 
  1452  019C                     	;# 
  1453  019C                     	;# 
  1454  019D                     	;# 
  1455  019D                     	;# 
  1456  019D                     	;# 
  1457  019E                     	;# 
  1458  019E                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  019F                     	;# 
  1462  019F                     	;# 
  1463  019F                     	;# 
  1464  019F                     	;# 
  1465  020C                     	;# 
  1466  020D                     	;# 
  1467  020E                     	;# 
  1468  0211                     	;# 
  1469  0211                     	;# 
  1470  0212                     	;# 
  1471  0212                     	;# 
  1472  0213                     	;# 
  1473  0213                     	;# 
  1474  0214                     	;# 
  1475  0214                     	;# 
  1476  0215                     	;# 
  1477  0215                     	;# 
  1478  0215                     	;# 
  1479  0215                     	;# 
  1480  0216                     	;# 
  1481  0216                     	;# 
  1482  0217                     	;# 
  1483  0217                     	;# 
  1484  0219                     	;# 
  1485  021A                     	;# 
  1486  021B                     	;# 
  1487  021C                     	;# 
  1488  021D                     	;# 
  1489  021D                     	;# 
  1490  021E                     	;# 
  1491  021F                     	;# 
  1492  028C                     	;# 
  1493  028D                     	;# 
  1494  028E                     	;# 
  1495  0291                     	;# 
  1496  0291                     	;# 
  1497  0292                     	;# 
  1498  0293                     	;# 
  1499  0294                     	;# 
  1500  0295                     	;# 
  1501  0295                     	;# 
  1502  0296                     	;# 
  1503  0297                     	;# 
  1504  0298                     	;# 
  1505  029F                     	;# 
  1506  030C                     	;# 
  1507  030D                     	;# 
  1508  030E                     	;# 
  1509  0311                     	;# 
  1510  0311                     	;# 
  1511  0312                     	;# 
  1512  0313                     	;# 
  1513  0314                     	;# 
  1514  0315                     	;# 
  1515  0315                     	;# 
  1516  0316                     	;# 
  1517  0317                     	;# 
  1518  0318                     	;# 
  1519  038C                     	;# 
  1520  038D                     	;# 
  1521  038E                     	;# 
  1522  0391                     	;# 
  1523  0392                     	;# 
  1524  0393                     	;# 
  1525  0394                     	;# 
  1526  0395                     	;# 
  1527  0396                     	;# 
  1528  0397                     	;# 
  1529  0398                     	;# 
  1530  0399                     	;# 
  1531  039A                     	;# 
  1532  039C                     	;# 
  1533  039D                     	;# 
  1534  039E                     	;# 
  1535  039F                     	;# 
  1536  0411                     	;# 
  1537  0411                     	;# 
  1538  0412                     	;# 
  1539  0413                     	;# 
  1540  0414                     	;# 
  1541  0415                     	;# 
  1542  0416                     	;# 
  1543  0417                     	;# 
  1544  0418                     	;# 
  1545  0418                     	;# 
  1546  0419                     	;# 
  1547  041A                     	;# 
  1548  041B                     	;# 
  1549  041C                     	;# 
  1550  041D                     	;# 
  1551  041E                     	;# 
  1552  041F                     	;# 
  1553  0498                     	;# 
  1554  0498                     	;# 
  1555  0499                     	;# 
  1556  049A                     	;# 
  1557  049B                     	;# 
  1558  049B                     	;# 
  1559  049C                     	;# 
  1560  049D                     	;# 
  1561  049E                     	;# 
  1562  049F                     	;# 
  1563  0617                     	;# 
  1564  0618                     	;# 
  1565  0619                     	;# 
  1566  0619                     	;# 
  1567  061A                     	;# 
  1568  061B                     	;# 
  1569  061C                     	;# 
  1570  061C                     	;# 
  1571  061F                     	;# 
  1572  0691                     	;# 
  1573  0692                     	;# 
  1574  0693                     	;# 
  1575  0694                     	;# 
  1576  0695                     	;# 
  1577  0696                     	;# 
  1578  0697                     	;# 
  1579  0698                     	;# 
  1580  0699                     	;# 
  1581  0711                     	;# 
  1582  0712                     	;# 
  1583  0713                     	;# 
  1584  0714                     	;# 
  1585  0715                     	;# 
  1586  0716                     	;# 
  1587  0717                     	;# 
  1588  0718                     	;# 
  1589  0719                     	;# 
  1590  0891                     	;# 
  1591  0891                     	;# 
  1592  0891                     	;# 
  1593  0891                     	;# 
  1594  0891                     	;# 
  1595  0891                     	;# 
  1596  0892                     	;# 
  1597  0892                     	;# 
  1598  0892                     	;# 
  1599  0893                     	;# 
  1600  0893                     	;# 
  1601  0893                     	;# 
  1602  0893                     	;# 
  1603  0893                     	;# 
  1604  0893                     	;# 
  1605  0894                     	;# 
  1606  0894                     	;# 
  1607  0894                     	;# 
  1608  0895                     	;# 
  1609  0895                     	;# 
  1610  0895                     	;# 
  1611  0896                     	;# 
  1612  0896                     	;# 
  1613  0896                     	;# 
  1614  089B                     	;# 
  1615  0911                     	;# 
  1616  0912                     	;# 
  1617  0913                     	;# 
  1618  0914                     	;# 
  1619  0915                     	;# 
  1620  0916                     	;# 
  1621  0918                     	;# 
  1622  0919                     	;# 
  1623  091A                     	;# 
  1624  091B                     	;# 
  1625  091C                     	;# 
  1626  091D                     	;# 
  1627  091E                     	;# 
  1628  091F                     	;# 
  1629  0E0F                     	;# 
  1630  0E10                     	;# 
  1631  0E11                     	;# 
  1632  0E12                     	;# 
  1633  0E13                     	;# 
  1634  0E14                     	;# 
  1635  0E15                     	;# 
  1636  0E16                     	;# 
  1637  0E17                     	;# 
  1638  0E18                     	;# 
  1639  0E19                     	;# 
  1640  0E1A                     	;# 
  1641  0E1B                     	;# 
  1642  0E1C                     	;# 
  1643  0E1D                     	;# 
  1644  0E1E                     	;# 
  1645  0E1F                     	;# 
  1646  0E20                     	;# 
  1647  0E21                     	;# 
  1648  0E22                     	;# 
  1649  0E24                     	;# 
  1650  0E25                     	;# 
  1651  0E28                     	;# 
  1652  0E29                     	;# 
  1653  0E2A                     	;# 
  1654  0E2B                     	;# 
  1655  0E2C                     	;# 
  1656  0E2D                     	;# 
  1657  0E2E                     	;# 
  1658  0E2F                     	;# 
  1659  0E90                     	;# 
  1660  0E91                     	;# 
  1661  0E92                     	;# 
  1662  0E94                     	;# 
  1663  0E95                     	;# 
  1664  0E9C                     	;# 
  1665  0E9D                     	;# 
  1666  0E9E                     	;# 
  1667  0E9F                     	;# 
  1668  0EA0                     	;# 
  1669  0EA1                     	;# 
  1670  0EA2                     	;# 
  1671  0EA3                     	;# 
  1672  0EA4                     	;# 
  1673  0EA5                     	;# 
  1674  0EA6                     	;# 
  1675  0EA7                     	;# 
  1676  0F0F                     	;# 
  1677  0F10                     	;# 
  1678  0F11                     	;# 
  1679  0F12                     	;# 
  1680  0F13                     	;# 
  1681  0F14                     	;# 
  1682  0F15                     	;# 
  1683  0F16                     	;# 
  1684  0F17                     	;# 
  1685  0F18                     	;# 
  1686  0F19                     	;# 
  1687  0F1A                     	;# 
  1688  0F1B                     	;# 
  1689  0F1C                     	;# 
  1690  0F1D                     	;# 
  1691  0F1E                     	;# 
  1692  0F1F                     	;# 
  1693  0F20                     	;# 
  1694  0F21                     	;# 
  1695  0F22                     	;# 
  1696  0F23                     	;# 
  1697  0F24                     	;# 
  1698  0F25                     	;# 
  1699  0F26                     	;# 
  1700  0F27                     	;# 
  1701  0F28                     	;# 
  1702  0F29                     	;# 
  1703  0F2A                     	;# 
  1704  0F2B                     	;# 
  1705  0F2C                     	;# 
  1706  0F2D                     	;# 
  1707  0F2E                     	;# 
  1708  0F2F                     	;# 
  1709  0F30                     	;# 
  1710  0F31                     	;# 
  1711  0F32                     	;# 
  1712  0F33                     	;# 
  1713  0F34                     	;# 
  1714  0F35                     	;# 
  1715  0F36                     	;# 
  1716  0F37                     	;# 
  1717  0FE4                     	;# 
  1718  0FE5                     	;# 
  1719  0FE6                     	;# 
  1720  0FE7                     	;# 
  1721  0FE8                     	;# 
  1722  0FE9                     	;# 
  1723  0FEA                     	;# 
  1724  0FEB                     	;# 
  1725  0FED                     	;# 
  1726  0FEE                     	;# 
  1727  0FEF                     	;# 
  1728  0000                     	;# 
  1729  0001                     	;# 
  1730  0002                     	;# 
  1731  0003                     	;# 
  1732  0004                     	;# 
  1733  0005                     	;# 
  1734  0006                     	;# 
  1735  0007                     	;# 
  1736  0008                     	;# 
  1737  0009                     	;# 
  1738  000A                     	;# 
  1739  000B                     	;# 
  1740  000C                     	;# 
  1741  000D                     	;# 
  1742  000E                     	;# 
  1743  0010                     	;# 
  1744  0011                     	;# 
  1745  0012                     	;# 
  1746  0013                     	;# 
  1747  0014                     	;# 
  1748  0015                     	;# 
  1749  0015                     	;# 
  1750  0016                     	;# 
  1751  0016                     	;# 
  1752  0017                     	;# 
  1753  0018                     	;# 
  1754  0019                     	;# 
  1755  0019                     	;# 
  1756  001A                     	;# 
  1757  001B                     	;# 
  1758  001C                     	;# 
  1759  001D                     	;# 
  1760  001E                     	;# 
  1761  001F                     	;# 
  1762  008C                     	;# 
  1763  008D                     	;# 
  1764  008E                     	;# 
  1765  0090                     	;# 
  1766  0091                     	;# 
  1767  0092                     	;# 
  1768  0093                     	;# 
  1769  0094                     	;# 
  1770  0097                     	;# 
  1771  009B                     	;# 
  1772  009B                     	;# 
  1773  009C                     	;# 
  1774  009D                     	;# 
  1775  009E                     	;# 
  1776  009F                     	;# 
  1777  010C                     	;# 
  1778  010D                     	;# 
  1779  010E                     	;# 
  1780  0111                     	;# 
  1781  0112                     	;# 
  1782  0113                     	;# 
  1783  0114                     	;# 
  1784  0115                     	;# 
  1785  0116                     	;# 
  1786  0117                     	;# 
  1787  0118                     	;# 
  1788  0119                     	;# 
  1789  018C                     	;# 
  1790  018D                     	;# 
  1791  018E                     	;# 
  1792  0197                     	;# 
  1793  0199                     	;# 
  1794  0199                     	;# 
  1795  0199                     	;# 
  1796  019A                     	;# 
  1797  019A                     	;# 
  1798  019A                     	;# 
  1799  019B                     	;# 
  1800  019B                     	;# 
  1801  019B                     	;# 
  1802  019B                     	;# 
  1803  019B                     	;# 
  1804  019C                     	;# 
  1805  019C                     	;# 
  1806  019C                     	;# 
  1807  019D                     	;# 
  1808  019D                     	;# 
  1809  019D                     	;# 
  1810  019E                     	;# 
  1811  019E                     	;# 
  1812  019E                     	;# 
  1813  019F                     	;# 
  1814  019F                     	;# 
  1815  019F                     	;# 
  1816  019F                     	;# 
  1817  019F                     	;# 
  1818  020C                     	;# 
  1819  020D                     	;# 
  1820  020E                     	;# 
  1821  0211                     	;# 
  1822  0211                     	;# 
  1823  0212                     	;# 
  1824  0212                     	;# 
  1825  0213                     	;# 
  1826  0213                     	;# 
  1827  0214                     	;# 
  1828  0214                     	;# 
  1829  0215                     	;# 
  1830  0215                     	;# 
  1831  0215                     	;# 
  1832  0215                     	;# 
  1833  0216                     	;# 
  1834  0216                     	;# 
  1835  0217                     	;# 
  1836  0217                     	;# 
  1837  0219                     	;# 
  1838  021A                     	;# 
  1839  021B                     	;# 
  1840  021C                     	;# 
  1841  021D                     	;# 
  1842  021D                     	;# 
  1843  021E                     	;# 
  1844  021F                     	;# 
  1845  028C                     	;# 
  1846  028D                     	;# 
  1847  028E                     	;# 
  1848  0291                     	;# 
  1849  0291                     	;# 
  1850  0292                     	;# 
  1851  0293                     	;# 
  1852  0294                     	;# 
  1853  0295                     	;# 
  1854  0295                     	;# 
  1855  0296                     	;# 
  1856  0297                     	;# 
  1857  0298                     	;# 
  1858  029F                     	;# 
  1859  030C                     	;# 
  1860  030D                     	;# 
  1861  030E                     	;# 
  1862  0311                     	;# 
  1863  0311                     	;# 
  1864  0312                     	;# 
  1865  0313                     	;# 
  1866  0314                     	;# 
  1867  0315                     	;# 
  1868  0315                     	;# 
  1869  0316                     	;# 
  1870  0317                     	;# 
  1871  0318                     	;# 
  1872  038C                     	;# 
  1873  038D                     	;# 
  1874  038E                     	;# 
  1875  0391                     	;# 
  1876  0392                     	;# 
  1877  0393                     	;# 
  1878  0394                     	;# 
  1879  0395                     	;# 
  1880  0396                     	;# 
  1881  0397                     	;# 
  1882  0398                     	;# 
  1883  0399                     	;# 
  1884  039A                     	;# 
  1885  039C                     	;# 
  1886  039D                     	;# 
  1887  039E                     	;# 
  1888  039F                     	;# 
  1889  0411                     	;# 
  1890  0411                     	;# 
  1891  0412                     	;# 
  1892  0413                     	;# 
  1893  0414                     	;# 
  1894  0415                     	;# 
  1895  0416                     	;# 
  1896  0417                     	;# 
  1897  0418                     	;# 
  1898  0418                     	;# 
  1899  0419                     	;# 
  1900  041A                     	;# 
  1901  041B                     	;# 
  1902  041C                     	;# 
  1903  041D                     	;# 
  1904  041E                     	;# 
  1905  041F                     	;# 
  1906  0498                     	;# 
  1907  0498                     	;# 
  1908  0499                     	;# 
  1909  049A                     	;# 
  1910  049B                     	;# 
  1911  049B                     	;# 
  1912  049C                     	;# 
  1913  049D                     	;# 
  1914  049E                     	;# 
  1915  049F                     	;# 
  1916  0617                     	;# 
  1917  0618                     	;# 
  1918  0619                     	;# 
  1919  0619                     	;# 
  1920  061A                     	;# 
  1921  061B                     	;# 
  1922  061C                     	;# 
  1923  061C                     	;# 
  1924  061F                     	;# 
  1925  0691                     	;# 
  1926  0692                     	;# 
  1927  0693                     	;# 
  1928  0694                     	;# 
  1929  0695                     	;# 
  1930  0696                     	;# 
  1931  0697                     	;# 
  1932  0698                     	;# 
  1933  0699                     	;# 
  1934  0711                     	;# 
  1935  0712                     	;# 
  1936  0713                     	;# 
  1937  0714                     	;# 
  1938  0715                     	;# 
  1939  0716                     	;# 
  1940  0717                     	;# 
  1941  0718                     	;# 
  1942  0719                     	;# 
  1943  0891                     	;# 
  1944  0891                     	;# 
  1945  0891                     	;# 
  1946  0891                     	;# 
  1947  0891                     	;# 
  1948  0891                     	;# 
  1949  0892                     	;# 
  1950  0892                     	;# 
  1951  0892                     	;# 
  1952  0893                     	;# 
  1953  0893                     	;# 
  1954  0893                     	;# 
  1955  0893                     	;# 
  1956  0893                     	;# 
  1957  0893                     	;# 
  1958  0894                     	;# 
  1959  0894                     	;# 
  1960  0894                     	;# 
  1961  0895                     	;# 
  1962  0895                     	;# 
  1963  0895                     	;# 
  1964  0896                     	;# 
  1965  0896                     	;# 
  1966  0896                     	;# 
  1967  089B                     	;# 
  1968  0911                     	;# 
  1969  0912                     	;# 
  1970  0913                     	;# 
  1971  0914                     	;# 
  1972  0915                     	;# 
  1973  0916                     	;# 
  1974  0918                     	;# 
  1975  0919                     	;# 
  1976  091A                     	;# 
  1977  091B                     	;# 
  1978  091C                     	;# 
  1979  091D                     	;# 
  1980  091E                     	;# 
  1981  091F                     	;# 
  1982  0E0F                     	;# 
  1983  0E10                     	;# 
  1984  0E11                     	;# 
  1985  0E12                     	;# 
  1986  0E13                     	;# 
  1987  0E14                     	;# 
  1988  0E15                     	;# 
  1989  0E16                     	;# 
  1990  0E17                     	;# 
  1991  0E18                     	;# 
  1992  0E19                     	;# 
  1993  0E1A                     	;# 
  1994  0E1B                     	;# 
  1995  0E1C                     	;# 
  1996  0E1D                     	;# 
  1997  0E1E                     	;# 
  1998  0E1F                     	;# 
  1999  0E20                     	;# 
  2000  0E21                     	;# 
  2001  0E22                     	;# 
  2002  0E24                     	;# 
  2003  0E25                     	;# 
  2004  0E28                     	;# 
  2005  0E29                     	;# 
  2006  0E2A                     	;# 
  2007  0E2B                     	;# 
  2008  0E2C                     	;# 
  2009  0E2D                     	;# 
  2010  0E2E                     	;# 
  2011  0E2F                     	;# 
  2012  0E90                     	;# 
  2013  0E91                     	;# 
  2014  0E92                     	;# 
  2015  0E94                     	;# 
  2016  0E95                     	;# 
  2017  0E9C                     	;# 
  2018  0E9D                     	;# 
  2019  0E9E                     	;# 
  2020  0E9F                     	;# 
  2021  0EA0                     	;# 
  2022  0EA1                     	;# 
  2023  0EA2                     	;# 
  2024  0EA3                     	;# 
  2025  0EA4                     	;# 
  2026  0EA5                     	;# 
  2027  0EA6                     	;# 
  2028  0EA7                     	;# 
  2029  0F0F                     	;# 
  2030  0F10                     	;# 
  2031  0F11                     	;# 
  2032  0F12                     	;# 
  2033  0F13                     	;# 
  2034  0F14                     	;# 
  2035  0F15                     	;# 
  2036  0F16                     	;# 
  2037  0F17                     	;# 
  2038  0F18                     	;# 
  2039  0F19                     	;# 
  2040  0F1A                     	;# 
  2041  0F1B                     	;# 
  2042  0F1C                     	;# 
  2043  0F1D                     	;# 
  2044  0F1E                     	;# 
  2045  0F1F                     	;# 
  2046  0F20                     	;# 
  2047  0F21                     	;# 
  2048  0F22                     	;# 
  2049  0F23                     	;# 
  2050  0F24                     	;# 
  2051  0F25                     	;# 
  2052  0F26                     	;# 
  2053  0F27                     	;# 
  2054  0F28                     	;# 
  2055  0F29                     	;# 
  2056  0F2A                     	;# 
  2057  0F2B                     	;# 
  2058  0F2C                     	;# 
  2059  0F2D                     	;# 
  2060  0F2E                     	;# 
  2061  0F2F                     	;# 
  2062  0F30                     	;# 
  2063  0F31                     	;# 
  2064  0F32                     	;# 
  2065  0F33                     	;# 
  2066  0F34                     	;# 
  2067  0F35                     	;# 
  2068  0F36                     	;# 
  2069  0F37                     	;# 
  2070  0FE4                     	;# 
  2071  0FE5                     	;# 
  2072  0FE6                     	;# 
  2073  0FE7                     	;# 
  2074  0FE8                     	;# 
  2075  0FE9                     	;# 
  2076  0FEA                     	;# 
  2077  0FEB                     	;# 
  2078  0FED                     	;# 
  2079  0FEE                     	;# 
  2080  0FEF                     	;# 
  2081  0000                     	;# 
  2082  0001                     	;# 
  2083  0002                     	;# 
  2084  0003                     	;# 
  2085  0004                     	;# 
  2086  0005                     	;# 
  2087  0006                     	;# 
  2088  0007                     	;# 
  2089  0008                     	;# 
  2090  0009                     	;# 
  2091  000A                     	;# 
  2092  000B                     	;# 
  2093  000C                     	;# 
  2094  000D                     	;# 
  2095  000E                     	;# 
  2096  0010                     	;# 
  2097  0011                     	;# 
  2098  0012                     	;# 
  2099  0013                     	;# 
  2100  0014                     	;# 
  2101  0015                     	;# 
  2102  0015                     	;# 
  2103  0016                     	;# 
  2104  0016                     	;# 
  2105  0017                     	;# 
  2106  0018                     	;# 
  2107  0019                     	;# 
  2108  0019                     	;# 
  2109  001A                     	;# 
  2110  001B                     	;# 
  2111  001C                     	;# 
  2112  001D                     	;# 
  2113  001E                     	;# 
  2114  001F                     	;# 
  2115  008C                     	;# 
  2116  008D                     	;# 
  2117  008E                     	;# 
  2118  0090                     	;# 
  2119  0091                     	;# 
  2120  0092                     	;# 
  2121  0093                     	;# 
  2122  0094                     	;# 
  2123  0097                     	;# 
  2124  009B                     	;# 
  2125  009B                     	;# 
  2126  009C                     	;# 
  2127  009D                     	;# 
  2128  009E                     	;# 
  2129  009F                     	;# 
  2130  010C                     	;# 
  2131  010D                     	;# 
  2132  010E                     	;# 
  2133  0111                     	;# 
  2134  0112                     	;# 
  2135  0113                     	;# 
  2136  0114                     	;# 
  2137  0115                     	;# 
  2138  0116                     	;# 
  2139  0117                     	;# 
  2140  0118                     	;# 
  2141  0119                     	;# 
  2142  018C                     	;# 
  2143  018D                     	;# 
  2144  018E                     	;# 
  2145  0197                     	;# 
  2146  0199                     	;# 
  2147  0199                     	;# 
  2148  0199                     	;# 
  2149  019A                     	;# 
  2150  019A                     	;# 
  2151  019A                     	;# 
  2152  019B                     	;# 
  2153  019B                     	;# 
  2154  019B                     	;# 
  2155  019B                     	;# 
  2156  019B                     	;# 
  2157  019C                     	;# 
  2158  019C                     	;# 
  2159  019C                     	;# 
  2160  019D                     	;# 
  2161  019D                     	;# 
  2162  019D                     	;# 
  2163  019E                     	;# 
  2164  019E                     	;# 
  2165  019E                     	;# 
  2166  019F                     	;# 
  2167  019F                     	;# 
  2168  019F                     	;# 
  2169  019F                     	;# 
  2170  019F                     	;# 
  2171  020C                     	;# 
  2172  020D                     	;# 
  2173  020E                     	;# 
  2174  0211                     	;# 
  2175  0211                     	;# 
  2176  0212                     	;# 
  2177  0212                     	;# 
  2178  0213                     	;# 
  2179  0213                     	;# 
  2180  0214                     	;# 
  2181  0214                     	;# 
  2182  0215                     	;# 
  2183  0215                     	;# 
  2184  0215                     	;# 
  2185  0215                     	;# 
  2186  0216                     	;# 
  2187  0216                     	;# 
  2188  0217                     	;# 
  2189  0217                     	;# 
  2190  0219                     	;# 
  2191  021A                     	;# 
  2192  021B                     	;# 
  2193  021C                     	;# 
  2194  021D                     	;# 
  2195  021D                     	;# 
  2196  021E                     	;# 
  2197  021F                     	;# 
  2198  028C                     	;# 
  2199  028D                     	;# 
  2200  028E                     	;# 
  2201  0291                     	;# 
  2202  0291                     	;# 
  2203  0292                     	;# 
  2204  0293                     	;# 
  2205  0294                     	;# 
  2206  0295                     	;# 
  2207  0295                     	;# 
  2208  0296                     	;# 
  2209  0297                     	;# 
  2210  0298                     	;# 
  2211  029F                     	;# 
  2212  030C                     	;# 
  2213  030D                     	;# 
  2214  030E                     	;# 
  2215  0311                     	;# 
  2216  0311                     	;# 
  2217  0312                     	;# 
  2218  0313                     	;# 
  2219  0314                     	;# 
  2220  0315                     	;# 
  2221  0315                     	;# 
  2222  0316                     	;# 
  2223  0317                     	;# 
  2224  0318                     	;# 
  2225  038C                     	;# 
  2226  038D                     	;# 
  2227  038E                     	;# 
  2228  0391                     	;# 
  2229  0392                     	;# 
  2230  0393                     	;# 
  2231  0394                     	;# 
  2232  0395                     	;# 
  2233  0396                     	;# 
  2234  0397                     	;# 
  2235  0398                     	;# 
  2236  0399                     	;# 
  2237  039A                     	;# 
  2238  039C                     	;# 
  2239  039D                     	;# 
  2240  039E                     	;# 
  2241  039F                     	;# 
  2242  0411                     	;# 
  2243  0411                     	;# 
  2244  0412                     	;# 
  2245  0413                     	;# 
  2246  0414                     	;# 
  2247  0415                     	;# 
  2248  0416                     	;# 
  2249  0417                     	;# 
  2250  0418                     	;# 
  2251  0418                     	;# 
  2252  0419                     	;# 
  2253  041A                     	;# 
  2254  041B                     	;# 
  2255  041C                     	;# 
  2256  041D                     	;# 
  2257  041E                     	;# 
  2258  041F                     	;# 
  2259  0498                     	;# 
  2260  0498                     	;# 
  2261  0499                     	;# 
  2262  049A                     	;# 
  2263  049B                     	;# 
  2264  049B                     	;# 
  2265  049C                     	;# 
  2266  049D                     	;# 
  2267  049E                     	;# 
  2268  049F                     	;# 
  2269  0617                     	;# 
  2270  0618                     	;# 
  2271  0619                     	;# 
  2272  0619                     	;# 
  2273  061A                     	;# 
  2274  061B                     	;# 
  2275  061C                     	;# 
  2276  061C                     	;# 
  2277  061F                     	;# 
  2278  0691                     	;# 
  2279  0692                     	;# 
  2280  0693                     	;# 
  2281  0694                     	;# 
  2282  0695                     	;# 
  2283  0696                     	;# 
  2284  0697                     	;# 
  2285  0698                     	;# 
  2286  0699                     	;# 
  2287  0711                     	;# 
  2288  0712                     	;# 
  2289  0713                     	;# 
  2290  0714                     	;# 
  2291  0715                     	;# 
  2292  0716                     	;# 
  2293  0717                     	;# 
  2294  0718                     	;# 
  2295  0719                     	;# 
  2296  0891                     	;# 
  2297  0891                     	;# 
  2298  0891                     	;# 
  2299  0891                     	;# 
  2300  0891                     	;# 
  2301  0891                     	;# 
  2302  0892                     	;# 
  2303  0892                     	;# 
  2304  0892                     	;# 
  2305  0893                     	;# 
  2306  0893                     	;# 
  2307  0893                     	;# 
  2308  0893                     	;# 
  2309  0893                     	;# 
  2310  0893                     	;# 
  2311  0894                     	;# 
  2312  0894                     	;# 
  2313  0894                     	;# 
  2314  0895                     	;# 
  2315  0895                     	;# 
  2316  0895                     	;# 
  2317  0896                     	;# 
  2318  0896                     	;# 
  2319  0896                     	;# 
  2320  089B                     	;# 
  2321  0911                     	;# 
  2322  0912                     	;# 
  2323  0913                     	;# 
  2324  0914                     	;# 
  2325  0915                     	;# 
  2326  0916                     	;# 
  2327  0918                     	;# 
  2328  0919                     	;# 
  2329  091A                     	;# 
  2330  091B                     	;# 
  2331  091C                     	;# 
  2332  091D                     	;# 
  2333  091E                     	;# 
  2334  091F                     	;# 
  2335  0E0F                     	;# 
  2336  0E10                     	;# 
  2337  0E11                     	;# 
  2338  0E12                     	;# 
  2339  0E13                     	;# 
  2340  0E14                     	;# 
  2341  0E15                     	;# 
  2342  0E16                     	;# 
  2343  0E17                     	;# 
  2344  0E18                     	;# 
  2345  0E19                     	;# 
  2346  0E1A                     	;# 
  2347  0E1B                     	;# 
  2348  0E1C                     	;# 
  2349  0E1D                     	;# 
  2350  0E1E                     	;# 
  2351  0E1F                     	;# 
  2352  0E20                     	;# 
  2353  0E21                     	;# 
  2354  0E22                     	;# 
  2355  0E24                     	;# 
  2356  0E25                     	;# 
  2357  0E28                     	;# 
  2358  0E29                     	;# 
  2359  0E2A                     	;# 
  2360  0E2B                     	;# 
  2361  0E2C                     	;# 
  2362  0E2D                     	;# 
  2363  0E2E                     	;# 
  2364  0E2F                     	;# 
  2365  0E90                     	;# 
  2366  0E91                     	;# 
  2367  0E92                     	;# 
  2368  0E94                     	;# 
  2369  0E95                     	;# 
  2370  0E9C                     	;# 
  2371  0E9D                     	;# 
  2372  0E9E                     	;# 
  2373  0E9F                     	;# 
  2374  0EA0                     	;# 
  2375  0EA1                     	;# 
  2376  0EA2                     	;# 
  2377  0EA3                     	;# 
  2378  0EA4                     	;# 
  2379  0EA5                     	;# 
  2380  0EA6                     	;# 
  2381  0EA7                     	;# 
  2382  0F0F                     	;# 
  2383  0F10                     	;# 
  2384  0F11                     	;# 
  2385  0F12                     	;# 
  2386  0F13                     	;# 
  2387  0F14                     	;# 
  2388  0F15                     	;# 
  2389  0F16                     	;# 
  2390  0F17                     	;# 
  2391  0F18                     	;# 
  2392  0F19                     	;# 
  2393  0F1A                     	;# 
  2394  0F1B                     	;# 
  2395  0F1C                     	;# 
  2396  0F1D                     	;# 
  2397  0F1E                     	;# 
  2398  0F1F                     	;# 
  2399  0F20                     	;# 
  2400  0F21                     	;# 
  2401  0F22                     	;# 
  2402  0F23                     	;# 
  2403  0F24                     	;# 
  2404  0F25                     	;# 
  2405  0F26                     	;# 
  2406  0F27                     	;# 
  2407  0F28                     	;# 
  2408  0F29                     	;# 
  2409  0F2A                     	;# 
  2410  0F2B                     	;# 
  2411  0F2C                     	;# 
  2412  0F2D                     	;# 
  2413  0F2E                     	;# 
  2414  0F2F                     	;# 
  2415  0F30                     	;# 
  2416  0F31                     	;# 
  2417  0F32                     	;# 
  2418  0F33                     	;# 
  2419  0F34                     	;# 
  2420  0F35                     	;# 
  2421  0F36                     	;# 
  2422  0F37                     	;# 
  2423  0FE4                     	;# 
  2424  0FE5                     	;# 
  2425  0FE6                     	;# 
  2426  0FE7                     	;# 
  2427  0FE8                     	;# 
  2428  0FE9                     	;# 
  2429  0FEA                     	;# 
  2430  0FEB                     	;# 
  2431  0FED                     	;# 
  2432  0FEE                     	;# 
  2433  0FEF                     	;# 
  2434  0000                     	;# 
  2435  0001                     	;# 
  2436  0002                     	;# 
  2437  0003                     	;# 
  2438  0004                     	;# 
  2439  0005                     	;# 
  2440  0006                     	;# 
  2441  0007                     	;# 
  2442  0008                     	;# 
  2443  0009                     	;# 
  2444  000A                     	;# 
  2445  000B                     	;# 
  2446  000C                     	;# 
  2447  000D                     	;# 
  2448  000E                     	;# 
  2449  0010                     	;# 
  2450  0011                     	;# 
  2451  0012                     	;# 
  2452  0013                     	;# 
  2453  0014                     	;# 
  2454  0015                     	;# 
  2455  0015                     	;# 
  2456  0016                     	;# 
  2457  0016                     	;# 
  2458  0017                     	;# 
  2459  0018                     	;# 
  2460  0019                     	;# 
  2461  0019                     	;# 
  2462  001A                     	;# 
  2463  001B                     	;# 
  2464  001C                     	;# 
  2465  001D                     	;# 
  2466  001E                     	;# 
  2467  001F                     	;# 
  2468  008C                     	;# 
  2469  008D                     	;# 
  2470  008E                     	;# 
  2471  0090                     	;# 
  2472  0091                     	;# 
  2473  0092                     	;# 
  2474  0093                     	;# 
  2475  0094                     	;# 
  2476  0097                     	;# 
  2477  009B                     	;# 
  2478  009B                     	;# 
  2479  009C                     	;# 
  2480  009D                     	;# 
  2481  009E                     	;# 
  2482  009F                     	;# 
  2483  010C                     	;# 
  2484  010D                     	;# 
  2485  010E                     	;# 
  2486  0111                     	;# 
  2487  0112                     	;# 
  2488  0113                     	;# 
  2489  0114                     	;# 
  2490  0115                     	;# 
  2491  0116                     	;# 
  2492  0117                     	;# 
  2493  0118                     	;# 
  2494  0119                     	;# 
  2495  018C                     	;# 
  2496  018D                     	;# 
  2497  018E                     	;# 
  2498  0197                     	;# 
  2499  0199                     	;# 
  2500  0199                     	;# 
  2501  0199                     	;# 
  2502  019A                     	;# 
  2503  019A                     	;# 
  2504  019A                     	;# 
  2505  019B                     	;# 
  2506  019B                     	;# 
  2507  019B                     	;# 
  2508  019B                     	;# 
  2509  019B                     	;# 
  2510  019C                     	;# 
  2511  019C                     	;# 
  2512  019C                     	;# 
  2513  019D                     	;# 
  2514  019D                     	;# 
  2515  019D                     	;# 
  2516  019E                     	;# 
  2517  019E                     	;# 
  2518  019E                     	;# 
  2519  019F                     	;# 
  2520  019F                     	;# 
  2521  019F                     	;# 
  2522  019F                     	;# 
  2523  019F                     	;# 
  2524  020C                     	;# 
  2525  020D                     	;# 
  2526  020E                     	;# 
  2527  0211                     	;# 
  2528  0211                     	;# 
  2529  0212                     	;# 
  2530  0212                     	;# 
  2531  0213                     	;# 
  2532  0213                     	;# 
  2533  0214                     	;# 
  2534  0214                     	;# 
  2535  0215                     	;# 
  2536  0215                     	;# 
  2537  0215                     	;# 
  2538  0215                     	;# 
  2539  0216                     	;# 
  2540  0216                     	;# 
  2541  0217                     	;# 
  2542  0217                     	;# 
  2543  0219                     	;# 
  2544  021A                     	;# 
  2545  021B                     	;# 
  2546  021C                     	;# 
  2547  021D                     	;# 
  2548  021D                     	;# 
  2549  021E                     	;# 
  2550  021F                     	;# 
  2551  028C                     	;# 
  2552  028D                     	;# 
  2553  028E                     	;# 
  2554  0291                     	;# 
  2555  0291                     	;# 
  2556  0292                     	;# 
  2557  0293                     	;# 
  2558  0294                     	;# 
  2559  0295                     	;# 
  2560  0295                     	;# 
  2561  0296                     	;# 
  2562  0297                     	;# 
  2563  0298                     	;# 
  2564  029F                     	;# 
  2565  030C                     	;# 
  2566  030D                     	;# 
  2567  030E                     	;# 
  2568  0311                     	;# 
  2569  0311                     	;# 
  2570  0312                     	;# 
  2571  0313                     	;# 
  2572  0314                     	;# 
  2573  0315                     	;# 
  2574  0315                     	;# 
  2575  0316                     	;# 
  2576  0317                     	;# 
  2577  0318                     	;# 
  2578  038C                     	;# 
  2579  038D                     	;# 
  2580  038E                     	;# 
  2581  0391                     	;# 
  2582  0392                     	;# 
  2583  0393                     	;# 
  2584  0394                     	;# 
  2585  0395                     	;# 
  2586  0396                     	;# 
  2587  0397                     	;# 
  2588  0398                     	;# 
  2589  0399                     	;# 
  2590  039A                     	;# 
  2591  039C                     	;# 
  2592  039D                     	;# 
  2593  039E                     	;# 
  2594  039F                     	;# 
  2595  0411                     	;# 
  2596  0411                     	;# 
  2597  0412                     	;# 
  2598  0413                     	;# 
  2599  0414                     	;# 
  2600  0415                     	;# 
  2601  0416                     	;# 
  2602  0417                     	;# 
  2603  0418                     	;# 
  2604  0418                     	;# 
  2605  0419                     	;# 
  2606  041A                     	;# 
  2607  041B                     	;# 
  2608  041C                     	;# 
  2609  041D                     	;# 
  2610  041E                     	;# 
  2611  041F                     	;# 
  2612  0498                     	;# 
  2613  0498                     	;# 
  2614  0499                     	;# 
  2615  049A                     	;# 
  2616  049B                     	;# 
  2617  049B                     	;# 
  2618  049C                     	;# 
  2619  049D                     	;# 
  2620  049E                     	;# 
  2621  049F                     	;# 
  2622  0617                     	;# 
  2623  0618                     	;# 
  2624  0619                     	;# 
  2625  0619                     	;# 
  2626  061A                     	;# 
  2627  061B                     	;# 
  2628  061C                     	;# 
  2629  061C                     	;# 
  2630  061F                     	;# 
  2631  0691                     	;# 
  2632  0692                     	;# 
  2633  0693                     	;# 
  2634  0694                     	;# 
  2635  0695                     	;# 
  2636  0696                     	;# 
  2637  0697                     	;# 
  2638  0698                     	;# 
  2639  0699                     	;# 
  2640  0711                     	;# 
  2641  0712                     	;# 
  2642  0713                     	;# 
  2643  0714                     	;# 
  2644  0715                     	;# 
  2645  0716                     	;# 
  2646  0717                     	;# 
  2647  0718                     	;# 
  2648  0719                     	;# 
  2649  0891                     	;# 
  2650  0891                     	;# 
  2651  0891                     	;# 
  2652  0891                     	;# 
  2653  0891                     	;# 
  2654  0891                     	;# 
  2655  0892                     	;# 
  2656  0892                     	;# 
  2657  0892                     	;# 
  2658  0893                     	;# 
  2659  0893                     	;# 
  2660  0893                     	;# 
  2661  0893                     	;# 
  2662  0893                     	;# 
  2663  0893                     	;# 
  2664  0894                     	;# 
  2665  0894                     	;# 
  2666  0894                     	;# 
  2667  0895                     	;# 
  2668  0895                     	;# 
  2669  0895                     	;# 
  2670  0896                     	;# 
  2671  0896                     	;# 
  2672  0896                     	;# 
  2673  089B                     	;# 
  2674  0911                     	;# 
  2675  0912                     	;# 
  2676  0913                     	;# 
  2677  0914                     	;# 
  2678  0915                     	;# 
  2679  0916                     	;# 
  2680  0918                     	;# 
  2681  0919                     	;# 
  2682  091A                     	;# 
  2683  091B                     	;# 
  2684  091C                     	;# 
  2685  091D                     	;# 
  2686  091E                     	;# 
  2687  091F                     	;# 
  2688  0E0F                     	;# 
  2689  0E10                     	;# 
  2690  0E11                     	;# 
  2691  0E12                     	;# 
  2692  0E13                     	;# 
  2693  0E14                     	;# 
  2694  0E15                     	;# 
  2695  0E16                     	;# 
  2696  0E17                     	;# 
  2697  0E18                     	;# 
  2698  0E19                     	;# 
  2699  0E1A                     	;# 
  2700  0E1B                     	;# 
  2701  0E1C                     	;# 
  2702  0E1D                     	;# 
  2703  0E1E                     	;# 
  2704  0E1F                     	;# 
  2705  0E20                     	;# 
  2706  0E21                     	;# 
  2707  0E22                     	;# 
  2708  0E24                     	;# 
  2709  0E25                     	;# 
  2710  0E28                     	;# 
  2711  0E29                     	;# 
  2712  0E2A                     	;# 
  2713  0E2B                     	;# 
  2714  0E2C                     	;# 
  2715  0E2D                     	;# 
  2716  0E2E                     	;# 
  2717  0E2F                     	;# 
  2718  0E90                     	;# 
  2719  0E91                     	;# 
  2720  0E92                     	;# 
  2721  0E94                     	;# 
  2722  0E95                     	;# 
  2723  0E9C                     	;# 
  2724  0E9D                     	;# 
  2725  0E9E                     	;# 
  2726  0E9F                     	;# 
  2727  0EA0                     	;# 
  2728  0EA1                     	;# 
  2729  0EA2                     	;# 
  2730  0EA3                     	;# 
  2731  0EA4                     	;# 
  2732  0EA5                     	;# 
  2733  0EA6                     	;# 
  2734  0EA7                     	;# 
  2735  0F0F                     	;# 
  2736  0F10                     	;# 
  2737  0F11                     	;# 
  2738  0F12                     	;# 
  2739  0F13                     	;# 
  2740  0F14                     	;# 
  2741  0F15                     	;# 
  2742  0F16                     	;# 
  2743  0F17                     	;# 
  2744  0F18                     	;# 
  2745  0F19                     	;# 
  2746  0F1A                     	;# 
  2747  0F1B                     	;# 
  2748  0F1C                     	;# 
  2749  0F1D                     	;# 
  2750  0F1E                     	;# 
  2751  0F1F                     	;# 
  2752  0F20                     	;# 
  2753  0F21                     	;# 
  2754  0F22                     	;# 
  2755  0F23                     	;# 
  2756  0F24                     	;# 
  2757  0F25                     	;# 
  2758  0F26                     	;# 
  2759  0F27                     	;# 
  2760  0F28                     	;# 
  2761  0F29                     	;# 
  2762  0F2A                     	;# 
  2763  0F2B                     	;# 
  2764  0F2C                     	;# 
  2765  0F2D                     	;# 
  2766  0F2E                     	;# 
  2767  0F2F                     	;# 
  2768  0F30                     	;# 
  2769  0F31                     	;# 
  2770  0F32                     	;# 
  2771  0F33                     	;# 
  2772  0F34                     	;# 
  2773  0F35                     	;# 
  2774  0F36                     	;# 
  2775  0F37                     	;# 
  2776  0FE4                     	;# 
  2777  0FE5                     	;# 
  2778  0FE6                     	;# 
  2779  0FE7                     	;# 
  2780  0FE8                     	;# 
  2781  0FE9                     	;# 
  2782  0FEA                     	;# 
  2783  0FEB                     	;# 
  2784  0FED                     	;# 
  2785  0FEE                     	;# 
  2786  0FEF                     	;# 
  2787  0000                     	;# 
  2788  0001                     	;# 
  2789  0002                     	;# 
  2790  0003                     	;# 
  2791  0004                     	;# 
  2792  0005                     	;# 
  2793  0006                     	;# 
  2794  0007                     	;# 
  2795  0008                     	;# 
  2796  0009                     	;# 
  2797  000A                     	;# 
  2798  000B                     	;# 
  2799  000C                     	;# 
  2800  000D                     	;# 
  2801  000E                     	;# 
  2802  0010                     	;# 
  2803  0011                     	;# 
  2804  0012                     	;# 
  2805  0013                     	;# 
  2806  0014                     	;# 
  2807  0015                     	;# 
  2808  0015                     	;# 
  2809  0016                     	;# 
  2810  0016                     	;# 
  2811  0017                     	;# 
  2812  0018                     	;# 
  2813  0019                     	;# 
  2814  0019                     	;# 
  2815  001A                     	;# 
  2816  001B                     	;# 
  2817  001C                     	;# 
  2818  001D                     	;# 
  2819  001E                     	;# 
  2820  001F                     	;# 
  2821  008C                     	;# 
  2822  008D                     	;# 
  2823  008E                     	;# 
  2824  0090                     	;# 
  2825  0091                     	;# 
  2826  0092                     	;# 
  2827  0093                     	;# 
  2828  0094                     	;# 
  2829  0097                     	;# 
  2830  009B                     	;# 
  2831  009B                     	;# 
  2832  009C                     	;# 
  2833  009D                     	;# 
  2834  009E                     	;# 
  2835  009F                     	;# 
  2836  010C                     	;# 
  2837  010D                     	;# 
  2838  010E                     	;# 
  2839  0111                     	;# 
  2840  0112                     	;# 
  2841  0113                     	;# 
  2842  0114                     	;# 
  2843  0115                     	;# 
  2844  0116                     	;# 
  2845  0117                     	;# 
  2846  0118                     	;# 
  2847  0119                     	;# 
  2848  018C                     	;# 
  2849  018D                     	;# 
  2850  018E                     	;# 
  2851  0197                     	;# 
  2852  0199                     	;# 
  2853  0199                     	;# 
  2854  0199                     	;# 
  2855  019A                     	;# 
  2856  019A                     	;# 
  2857  019A                     	;# 
  2858  019B                     	;# 
  2859  019B                     	;# 
  2860  019B                     	;# 
  2861  019B                     	;# 
  2862  019B                     	;# 
  2863  019C                     	;# 
  2864  019C                     	;# 
  2865  019C                     	;# 
  2866  019D                     	;# 
  2867  019D                     	;# 
  2868  019D                     	;# 
  2869  019E                     	;# 
  2870  019E                     	;# 
  2871  019E                     	;# 
  2872  019F                     	;# 
  2873  019F                     	;# 
  2874  019F                     	;# 
  2875  019F                     	;# 
  2876  019F                     	;# 
  2877  020C                     	;# 
  2878  020D                     	;# 
  2879  020E                     	;# 
  2880  0211                     	;# 
  2881  0211                     	;# 
  2882  0212                     	;# 
  2883  0212                     	;# 
  2884  0213                     	;# 
  2885  0213                     	;# 
  2886  0214                     	;# 
  2887  0214                     	;# 
  2888  0215                     	;# 
  2889  0215                     	;# 
  2890  0215                     	;# 
  2891  0215                     	;# 
  2892  0216                     	;# 
  2893  0216                     	;# 
  2894  0217                     	;# 
  2895  0217                     	;# 
  2896  0219                     	;# 
  2897  021A                     	;# 
  2898  021B                     	;# 
  2899  021C                     	;# 
  2900  021D                     	;# 
  2901  021D                     	;# 
  2902  021E                     	;# 
  2903  021F                     	;# 
  2904  028C                     	;# 
  2905  028D                     	;# 
  2906  028E                     	;# 
  2907  0291                     	;# 
  2908  0291                     	;# 
  2909  0292                     	;# 
  2910  0293                     	;# 
  2911  0294                     	;# 
  2912  0295                     	;# 
  2913  0295                     	;# 
  2914  0296                     	;# 
  2915  0297                     	;# 
  2916  0298                     	;# 
  2917  029F                     	;# 
  2918  030C                     	;# 
  2919  030D                     	;# 
  2920  030E                     	;# 
  2921  0311                     	;# 
  2922  0311                     	;# 
  2923  0312                     	;# 
  2924  0313                     	;# 
  2925  0314                     	;# 
  2926  0315                     	;# 
  2927  0315                     	;# 
  2928  0316                     	;# 
  2929  0317                     	;# 
  2930  0318                     	;# 
  2931  038C                     	;# 
  2932  038D                     	;# 
  2933  038E                     	;# 
  2934  0391                     	;# 
  2935  0392                     	;# 
  2936  0393                     	;# 
  2937  0394                     	;# 
  2938  0395                     	;# 
  2939  0396                     	;# 
  2940  0397                     	;# 
  2941  0398                     	;# 
  2942  0399                     	;# 
  2943  039A                     	;# 
  2944  039C                     	;# 
  2945  039D                     	;# 
  2946  039E                     	;# 
  2947  039F                     	;# 
  2948  0411                     	;# 
  2949  0411                     	;# 
  2950  0412                     	;# 
  2951  0413                     	;# 
  2952  0414                     	;# 
  2953  0415                     	;# 
  2954  0416                     	;# 
  2955  0417                     	;# 
  2956  0418                     	;# 
  2957  0418                     	;# 
  2958  0419                     	;# 
  2959  041A                     	;# 
  2960  041B                     	;# 
  2961  041C                     	;# 
  2962  041D                     	;# 
  2963  041E                     	;# 
  2964  041F                     	;# 
  2965  0498                     	;# 
  2966  0498                     	;# 
  2967  0499                     	;# 
  2968  049A                     	;# 
  2969  049B                     	;# 
  2970  049B                     	;# 
  2971  049C                     	;# 
  2972  049D                     	;# 
  2973  049E                     	;# 
  2974  049F                     	;# 
  2975  0617                     	;# 
  2976  0618                     	;# 
  2977  0619                     	;# 
  2978  0619                     	;# 
  2979  061A                     	;# 
  2980  061B                     	;# 
  2981  061C                     	;# 
  2982  061C                     	;# 
  2983  061F                     	;# 
  2984  0691                     	;# 
  2985  0692                     	;# 
  2986  0693                     	;# 
  2987  0694                     	;# 
  2988  0695                     	;# 
  2989  0696                     	;# 
  2990  0697                     	;# 
  2991  0698                     	;# 
  2992  0699                     	;# 
  2993  0711                     	;# 
  2994  0712                     	;# 
  2995  0713                     	;# 
  2996  0714                     	;# 
  2997  0715                     	;# 
  2998  0716                     	;# 
  2999  0717                     	;# 
  3000  0718                     	;# 
  3001  0719                     	;# 
  3002  0891                     	;# 
  3003  0891                     	;# 
  3004  0891                     	;# 
  3005  0891                     	;# 
  3006  0891                     	;# 
  3007  0891                     	;# 
  3008  0892                     	;# 
  3009  0892                     	;# 
  3010  0892                     	;# 
  3011  0893                     	;# 
  3012  0893                     	;# 
  3013  0893                     	;# 
  3014  0893                     	;# 
  3015  0893                     	;# 
  3016  0893                     	;# 
  3017  0894                     	;# 
  3018  0894                     	;# 
  3019  0894                     	;# 
  3020  0895                     	;# 
  3021  0895                     	;# 
  3022  0895                     	;# 
  3023  0896                     	;# 
  3024  0896                     	;# 
  3025  0896                     	;# 
  3026  089B                     	;# 
  3027  0911                     	;# 
  3028  0912                     	;# 
  3029  0913                     	;# 
  3030  0914                     	;# 
  3031  0915                     	;# 
  3032  0916                     	;# 
  3033  0918                     	;# 
  3034  0919                     	;# 
  3035  091A                     	;# 
  3036  091B                     	;# 
  3037  091C                     	;# 
  3038  091D                     	;# 
  3039  091E                     	;# 
  3040  091F                     	;# 
  3041  0E0F                     	;# 
  3042  0E10                     	;# 
  3043  0E11                     	;# 
  3044  0E12                     	;# 
  3045  0E13                     	;# 
  3046  0E14                     	;# 
  3047  0E15                     	;# 
  3048  0E16                     	;# 
  3049  0E17                     	;# 
  3050  0E18                     	;# 
  3051  0E19                     	;# 
  3052  0E1A                     	;# 
  3053  0E1B                     	;# 
  3054  0E1C                     	;# 
  3055  0E1D                     	;# 
  3056  0E1E                     	;# 
  3057  0E1F                     	;# 
  3058  0E20                     	;# 
  3059  0E21                     	;# 
  3060  0E22                     	;# 
  3061  0E24                     	;# 
  3062  0E25                     	;# 
  3063  0E28                     	;# 
  3064  0E29                     	;# 
  3065  0E2A                     	;# 
  3066  0E2B                     	;# 
  3067  0E2C                     	;# 
  3068  0E2D                     	;# 
  3069  0E2E                     	;# 
  3070  0E2F                     	;# 
  3071  0E90                     	;# 
  3072  0E91                     	;# 
  3073  0E92                     	;# 
  3074  0E94                     	;# 
  3075  0E95                     	;# 
  3076  0E9C                     	;# 
  3077  0E9D                     	;# 
  3078  0E9E                     	;# 
  3079  0E9F                     	;# 
  3080  0EA0                     	;# 
  3081  0EA1                     	;# 
  3082  0EA2                     	;# 
  3083  0EA3                     	;# 
  3084  0EA4                     	;# 
  3085  0EA5                     	;# 
  3086  0EA6                     	;# 
  3087  0EA7                     	;# 
  3088  0F0F                     	;# 
  3089  0F10                     	;# 
  3090  0F11                     	;# 
  3091  0F12                     	;# 
  3092  0F13                     	;# 
  3093  0F14                     	;# 
  3094  0F15                     	;# 
  3095  0F16                     	;# 
  3096  0F17                     	;# 
  3097  0F18                     	;# 
  3098  0F19                     	;# 
  3099  0F1A                     	;# 
  3100  0F1B                     	;# 
  3101  0F1C                     	;# 
  3102  0F1D                     	;# 
  3103  0F1E                     	;# 
  3104  0F1F                     	;# 
  3105  0F20                     	;# 
  3106  0F21                     	;# 
  3107  0F22                     	;# 
  3108  0F23                     	;# 
  3109  0F24                     	;# 
  3110  0F25                     	;# 
  3111  0F26                     	;# 
  3112  0F27                     	;# 
  3113  0F28                     	;# 
  3114  0F29                     	;# 
  3115  0F2A                     	;# 
  3116  0F2B                     	;# 
  3117  0F2C                     	;# 
  3118  0F2D                     	;# 
  3119  0F2E                     	;# 
  3120  0F2F                     	;# 
  3121  0F30                     	;# 
  3122  0F31                     	;# 
  3123  0F32                     	;# 
  3124  0F33                     	;# 
  3125  0F34                     	;# 
  3126  0F35                     	;# 
  3127  0F36                     	;# 
  3128  0F37                     	;# 
  3129  0FE4                     	;# 
  3130  0FE5                     	;# 
  3131  0FE6                     	;# 
  3132  0FE7                     	;# 
  3133  0FE8                     	;# 
  3134  0FE9                     	;# 
  3135  0FEA                     	;# 
  3136  0FEB                     	;# 
  3137  0FED                     	;# 
  3138  0FEE                     	;# 
  3139  0FEF                     	;# 
  3140  0000                     	;# 
  3141  0001                     	;# 
  3142  0002                     	;# 
  3143  0003                     	;# 
  3144  0004                     	;# 
  3145  0005                     	;# 
  3146  0006                     	;# 
  3147  0007                     	;# 
  3148  0008                     	;# 
  3149  0009                     	;# 
  3150  000A                     	;# 
  3151  000B                     	;# 
  3152  000C                     	;# 
  3153  000D                     	;# 
  3154  000E                     	;# 
  3155  0010                     	;# 
  3156  0011                     	;# 
  3157  0012                     	;# 
  3158  0013                     	;# 
  3159  0014                     	;# 
  3160  0015                     	;# 
  3161  0015                     	;# 
  3162  0016                     	;# 
  3163  0016                     	;# 
  3164  0017                     	;# 
  3165  0018                     	;# 
  3166  0019                     	;# 
  3167  0019                     	;# 
  3168  001A                     	;# 
  3169  001B                     	;# 
  3170  001C                     	;# 
  3171  001D                     	;# 
  3172  001E                     	;# 
  3173  001F                     	;# 
  3174  008C                     	;# 
  3175  008D                     	;# 
  3176  008E                     	;# 
  3177  0090                     	;# 
  3178  0091                     	;# 
  3179  0092                     	;# 
  3180  0093                     	;# 
  3181  0094                     	;# 
  3182  0097                     	;# 
  3183  009B                     	;# 
  3184  009B                     	;# 
  3185  009C                     	;# 
  3186  009D                     	;# 
  3187  009E                     	;# 
  3188  009F                     	;# 
  3189  010C                     	;# 
  3190  010D                     	;# 
  3191  010E                     	;# 
  3192  0111                     	;# 
  3193  0112                     	;# 
  3194  0113                     	;# 
  3195  0114                     	;# 
  3196  0115                     	;# 
  3197  0116                     	;# 
  3198  0117                     	;# 
  3199  0118                     	;# 
  3200  0119                     	;# 
  3201  018C                     	;# 
  3202  018D                     	;# 
  3203  018E                     	;# 
  3204  0197                     	;# 
  3205  0199                     	;# 
  3206  0199                     	;# 
  3207  0199                     	;# 
  3208  019A                     	;# 
  3209  019A                     	;# 
  3210  019A                     	;# 
  3211  019B                     	;# 
  3212  019B                     	;# 
  3213  019B                     	;# 
  3214  019B                     	;# 
  3215  019B                     	;# 
  3216  019C                     	;# 
  3217  019C                     	;# 
  3218  019C                     	;# 
  3219  019D                     	;# 
  3220  019D                     	;# 
  3221  019D                     	;# 
  3222  019E                     	;# 
  3223  019E                     	;# 
  3224  019E                     	;# 
  3225  019F                     	;# 
  3226  019F                     	;# 
  3227  019F                     	;# 
  3228  019F                     	;# 
  3229  019F                     	;# 
  3230  020C                     	;# 
  3231  020D                     	;# 
  3232  020E                     	;# 
  3233  0211                     	;# 
  3234  0211                     	;# 
  3235  0212                     	;# 
  3236  0212                     	;# 
  3237  0213                     	;# 
  3238  0213                     	;# 
  3239  0214                     	;# 
  3240  0214                     	;# 
  3241  0215                     	;# 
  3242  0215                     	;# 
  3243  0215                     	;# 
  3244  0215                     	;# 
  3245  0216                     	;# 
  3246  0216                     	;# 
  3247  0217                     	;# 
  3248  0217                     	;# 
  3249  0219                     	;# 
  3250  021A                     	;# 
  3251  021B                     	;# 
  3252  021C                     	;# 
  3253  021D                     	;# 
  3254  021D                     	;# 
  3255  021E                     	;# 
  3256  021F                     	;# 
  3257  028C                     	;# 
  3258  028D                     	;# 
  3259  028E                     	;# 
  3260  0291                     	;# 
  3261  0291                     	;# 
  3262  0292                     	;# 
  3263  0293                     	;# 
  3264  0294                     	;# 
  3265  0295                     	;# 
  3266  0295                     	;# 
  3267  0296                     	;# 
  3268  0297                     	;# 
  3269  0298                     	;# 
  3270  029F                     	;# 
  3271  030C                     	;# 
  3272  030D                     	;# 
  3273  030E                     	;# 
  3274  0311                     	;# 
  3275  0311                     	;# 
  3276  0312                     	;# 
  3277  0313                     	;# 
  3278  0314                     	;# 
  3279  0315                     	;# 
  3280  0315                     	;# 
  3281  0316                     	;# 
  3282  0317                     	;# 
  3283  0318                     	;# 
  3284  038C                     	;# 
  3285  038D                     	;# 
  3286  038E                     	;# 
  3287  0391                     	;# 
  3288  0392                     	;# 
  3289  0393                     	;# 
  3290  0394                     	;# 
  3291  0395                     	;# 
  3292  0396                     	;# 
  3293  0397                     	;# 
  3294  0398                     	;# 
  3295  0399                     	;# 
  3296  039A                     	;# 
  3297  039C                     	;# 
  3298  039D                     	;# 
  3299  039E                     	;# 
  3300  039F                     	;# 
  3301  0411                     	;# 
  3302  0411                     	;# 
  3303  0412                     	;# 
  3304  0413                     	;# 
  3305  0414                     	;# 
  3306  0415                     	;# 
  3307  0416                     	;# 
  3308  0417                     	;# 
  3309  0418                     	;# 
  3310  0418                     	;# 
  3311  0419                     	;# 
  3312  041A                     	;# 
  3313  041B                     	;# 
  3314  041C                     	;# 
  3315  041D                     	;# 
  3316  041E                     	;# 
  3317  041F                     	;# 
  3318  0498                     	;# 
  3319  0498                     	;# 
  3320  0499                     	;# 
  3321  049A                     	;# 
  3322  049B                     	;# 
  3323  049B                     	;# 
  3324  049C                     	;# 
  3325  049D                     	;# 
  3326  049E                     	;# 
  3327  049F                     	;# 
  3328  0617                     	;# 
  3329  0618                     	;# 
  3330  0619                     	;# 
  3331  0619                     	;# 
  3332  061A                     	;# 
  3333  061B                     	;# 
  3334  061C                     	;# 
  3335  061C                     	;# 
  3336  061F                     	;# 
  3337  0691                     	;# 
  3338  0692                     	;# 
  3339  0693                     	;# 
  3340  0694                     	;# 
  3341  0695                     	;# 
  3342  0696                     	;# 
  3343  0697                     	;# 
  3344  0698                     	;# 
  3345  0699                     	;# 
  3346  0711                     	;# 
  3347  0712                     	;# 
  3348  0713                     	;# 
  3349  0714                     	;# 
  3350  0715                     	;# 
  3351  0716                     	;# 
  3352  0717                     	;# 
  3353  0718                     	;# 
  3354  0719                     	;# 
  3355  0891                     	;# 
  3356  0891                     	;# 
  3357  0891                     	;# 
  3358  0891                     	;# 
  3359  0891                     	;# 
  3360  0891                     	;# 
  3361  0892                     	;# 
  3362  0892                     	;# 
  3363  0892                     	;# 
  3364  0893                     	;# 
  3365  0893                     	;# 
  3366  0893                     	;# 
  3367  0893                     	;# 
  3368  0893                     	;# 
  3369  0893                     	;# 
  3370  0894                     	;# 
  3371  0894                     	;# 
  3372  0894                     	;# 
  3373  0895                     	;# 
  3374  0895                     	;# 
  3375  0895                     	;# 
  3376  0896                     	;# 
  3377  0896                     	;# 
  3378  0896                     	;# 
  3379  089B                     	;# 
  3380  0911                     	;# 
  3381  0912                     	;# 
  3382  0913                     	;# 
  3383  0914                     	;# 
  3384  0915                     	;# 
  3385  0916                     	;# 
  3386  0918                     	;# 
  3387  0919                     	;# 
  3388  091A                     	;# 
  3389  091B                     	;# 
  3390  091C                     	;# 
  3391  091D                     	;# 
  3392  091E                     	;# 
  3393  091F                     	;# 
  3394  0E0F                     	;# 
  3395  0E10                     	;# 
  3396  0E11                     	;# 
  3397  0E12                     	;# 
  3398  0E13                     	;# 
  3399  0E14                     	;# 
  3400  0E15                     	;# 
  3401  0E16                     	;# 
  3402  0E17                     	;# 
  3403  0E18                     	;# 
  3404  0E19                     	;# 
  3405  0E1A                     	;# 
  3406  0E1B                     	;# 
  3407  0E1C                     	;# 
  3408  0E1D                     	;# 
  3409  0E1E                     	;# 
  3410  0E1F                     	;# 
  3411  0E20                     	;# 
  3412  0E21                     	;# 
  3413  0E22                     	;# 
  3414  0E24                     	;# 
  3415  0E25                     	;# 
  3416  0E28                     	;# 
  3417  0E29                     	;# 
  3418  0E2A                     	;# 
  3419  0E2B                     	;# 
  3420  0E2C                     	;# 
  3421  0E2D                     	;# 
  3422  0E2E                     	;# 
  3423  0E2F                     	;# 
  3424  0E90                     	;# 
  3425  0E91                     	;# 
  3426  0E92                     	;# 
  3427  0E94                     	;# 
  3428  0E95                     	;# 
  3429  0E9C                     	;# 
  3430  0E9D                     	;# 
  3431  0E9E                     	;# 
  3432  0E9F                     	;# 
  3433  0EA0                     	;# 
  3434  0EA1                     	;# 
  3435  0EA2                     	;# 
  3436  0EA3                     	;# 
  3437  0EA4                     	;# 
  3438  0EA5                     	;# 
  3439  0EA6                     	;# 
  3440  0EA7                     	;# 
  3441  0F0F                     	;# 
  3442  0F10                     	;# 
  3443  0F11                     	;# 
  3444  0F12                     	;# 
  3445  0F13                     	;# 
  3446  0F14                     	;# 
  3447  0F15                     	;# 
  3448  0F16                     	;# 
  3449  0F17                     	;# 
  3450  0F18                     	;# 
  3451  0F19                     	;# 
  3452  0F1A                     	;# 
  3453  0F1B                     	;# 
  3454  0F1C                     	;# 
  3455  0F1D                     	;# 
  3456  0F1E                     	;# 
  3457  0F1F                     	;# 
  3458  0F20                     	;# 
  3459  0F21                     	;# 
  3460  0F22                     	;# 
  3461  0F23                     	;# 
  3462  0F24                     	;# 
  3463  0F25                     	;# 
  3464  0F26                     	;# 
  3465  0F27                     	;# 
  3466  0F28                     	;# 
  3467  0F29                     	;# 
  3468  0F2A                     	;# 
  3469  0F2B                     	;# 
  3470  0F2C                     	;# 
  3471  0F2D                     	;# 
  3472  0F2E                     	;# 
  3473  0F2F                     	;# 
  3474  0F30                     	;# 
  3475  0F31                     	;# 
  3476  0F32                     	;# 
  3477  0F33                     	;# 
  3478  0F34                     	;# 
  3479  0F35                     	;# 
  3480  0F36                     	;# 
  3481  0F37                     	;# 
  3482  0FE4                     	;# 
  3483  0FE5                     	;# 
  3484  0FE6                     	;# 
  3485  0FE7                     	;# 
  3486  0FE8                     	;# 
  3487  0FE9                     	;# 
  3488  0FEA                     	;# 
  3489  0FEB                     	;# 
  3490  0FED                     	;# 
  3491  0FEE                     	;# 
  3492  0FEF                     	;# 
  3493  0000                     	;# 
  3494  0001                     	;# 
  3495  0002                     	;# 
  3496  0003                     	;# 
  3497  0004                     	;# 
  3498  0005                     	;# 
  3499  0006                     	;# 
  3500  0007                     	;# 
  3501  0008                     	;# 
  3502  0009                     	;# 
  3503  000A                     	;# 
  3504  000B                     	;# 
  3505  000C                     	;# 
  3506  000D                     	;# 
  3507  000E                     	;# 
  3508  0010                     	;# 
  3509  0011                     	;# 
  3510  0012                     	;# 
  3511  0013                     	;# 
  3512  0014                     	;# 
  3513  0015                     	;# 
  3514  0015                     	;# 
  3515  0016                     	;# 
  3516  0016                     	;# 
  3517  0017                     	;# 
  3518  0018                     	;# 
  3519  0019                     	;# 
  3520  0019                     	;# 
  3521  001A                     	;# 
  3522  001B                     	;# 
  3523  001C                     	;# 
  3524  001D                     	;# 
  3525  001E                     	;# 
  3526  001F                     	;# 
  3527  008C                     	;# 
  3528  008D                     	;# 
  3529  008E                     	;# 
  3530  0090                     	;# 
  3531  0091                     	;# 
  3532  0092                     	;# 
  3533  0093                     	;# 
  3534  0094                     	;# 
  3535  0097                     	;# 
  3536  009B                     	;# 
  3537  009B                     	;# 
  3538  009C                     	;# 
  3539  009D                     	;# 
  3540  009E                     	;# 
  3541  009F                     	;# 
  3542  010C                     	;# 
  3543  010D                     	;# 
  3544  010E                     	;# 
  3545  0111                     	;# 
  3546  0112                     	;# 
  3547  0113                     	;# 
  3548  0114                     	;# 
  3549  0115                     	;# 
  3550  0116                     	;# 
  3551  0117                     	;# 
  3552  0118                     	;# 
  3553  0119                     	;# 
  3554  018C                     	;# 
  3555  018D                     	;# 
  3556  018E                     	;# 
  3557  0197                     	;# 
  3558  0199                     	;# 
  3559  0199                     	;# 
  3560  0199                     	;# 
  3561  019A                     	;# 
  3562  019A                     	;# 
  3563  019A                     	;# 
  3564  019B                     	;# 
  3565  019B                     	;# 
  3566  019B                     	;# 
  3567  019B                     	;# 
  3568  019B                     	;# 
  3569  019C                     	;# 
  3570  019C                     	;# 
  3571  019C                     	;# 
  3572  019D                     	;# 
  3573  019D                     	;# 
  3574  019D                     	;# 
  3575  019E                     	;# 
  3576  019E                     	;# 
  3577  019E                     	;# 
  3578  019F                     	;# 
  3579  019F                     	;# 
  3580  019F                     	;# 
  3581  019F                     	;# 
  3582  019F                     	;# 
  3583  020C                     	;# 
  3584  020D                     	;# 
  3585  020E                     	;# 
  3586  0211                     	;# 
  3587  0211                     	;# 
  3588  0212                     	;# 
  3589  0212                     	;# 
  3590  0213                     	;# 
  3591  0213                     	;# 
  3592  0214                     	;# 
  3593  0214                     	;# 
  3594  0215                     	;# 
  3595  0215                     	;# 
  3596  0215                     	;# 
  3597  0215                     	;# 
  3598  0216                     	;# 
  3599  0216                     	;# 
  3600  0217                     	;# 
  3601  0217                     	;# 
  3602  0219                     	;# 
  3603  021A                     	;# 
  3604  021B                     	;# 
  3605  021C                     	;# 
  3606  021D                     	;# 
  3607  021D                     	;# 
  3608  021E                     	;# 
  3609  021F                     	;# 
  3610  028C                     	;# 
  3611  028D                     	;# 
  3612  028E                     	;# 
  3613  0291                     	;# 
  3614  0291                     	;# 
  3615  0292                     	;# 
  3616  0293                     	;# 
  3617  0294                     	;# 
  3618  0295                     	;# 
  3619  0295                     	;# 
  3620  0296                     	;# 
  3621  0297                     	;# 
  3622  0298                     	;# 
  3623  029F                     	;# 
  3624  030C                     	;# 
  3625  030D                     	;# 
  3626  030E                     	;# 
  3627  0311                     	;# 
  3628  0311                     	;# 
  3629  0312                     	;# 
  3630  0313                     	;# 
  3631  0314                     	;# 
  3632  0315                     	;# 
  3633  0315                     	;# 
  3634  0316                     	;# 
  3635  0317                     	;# 
  3636  0318                     	;# 
  3637  038C                     	;# 
  3638  038D                     	;# 
  3639  038E                     	;# 
  3640  0391                     	;# 
  3641  0392                     	;# 
  3642  0393                     	;# 
  3643  0394                     	;# 
  3644  0395                     	;# 
  3645  0396                     	;# 
  3646  0397                     	;# 
  3647  0398                     	;# 
  3648  0399                     	;# 
  3649  039A                     	;# 
  3650  039C                     	;# 
  3651  039D                     	;# 
  3652  039E                     	;# 
  3653  039F                     	;# 
  3654  0411                     	;# 
  3655  0411                     	;# 
  3656  0412                     	;# 
  3657  0413                     	;# 
  3658  0414                     	;# 
  3659  0415                     	;# 
  3660  0416                     	;# 
  3661  0417                     	;# 
  3662  0418                     	;# 
  3663  0418                     	;# 
  3664  0419                     	;# 
  3665  041A                     	;# 
  3666  041B                     	;# 
  3667  041C                     	;# 
  3668  041D                     	;# 
  3669  041E                     	;# 
  3670  041F                     	;# 
  3671  0498                     	;# 
  3672  0498                     	;# 
  3673  0499                     	;# 
  3674  049A                     	;# 
  3675  049B                     	;# 
  3676  049B                     	;# 
  3677  049C                     	;# 
  3678  049D                     	;# 
  3679  049E                     	;# 
  3680  049F                     	;# 
  3681  0617                     	;# 
  3682  0618                     	;# 
  3683  0619                     	;# 
  3684  0619                     	;# 
  3685  061A                     	;# 
  3686  061B                     	;# 
  3687  061C                     	;# 
  3688  061C                     	;# 
  3689  061F                     	;# 
  3690  0691                     	;# 
  3691  0692                     	;# 
  3692  0693                     	;# 
  3693  0694                     	;# 
  3694  0695                     	;# 
  3695  0696                     	;# 
  3696  0697                     	;# 
  3697  0698                     	;# 
  3698  0699                     	;# 
  3699  0711                     	;# 
  3700  0712                     	;# 
  3701  0713                     	;# 
  3702  0714                     	;# 
  3703  0715                     	;# 
  3704  0716                     	;# 
  3705  0717                     	;# 
  3706  0718                     	;# 
  3707  0719                     	;# 
  3708  0891                     	;# 
  3709  0891                     	;# 
  3710  0891                     	;# 
  3711  0891                     	;# 
  3712  0891                     	;# 
  3713  0891                     	;# 
  3714  0892                     	;# 
  3715  0892                     	;# 
  3716  0892                     	;# 
  3717  0893                     	;# 
  3718  0893                     	;# 
  3719  0893                     	;# 
  3720  0893                     	;# 
  3721  0893                     	;# 
  3722  0893                     	;# 
  3723  0894                     	;# 
  3724  0894                     	;# 
  3725  0894                     	;# 
  3726  0895                     	;# 
  3727  0895                     	;# 
  3728  0895                     	;# 
  3729  0896                     	;# 
  3730  0896                     	;# 
  3731  0896                     	;# 
  3732  089B                     	;# 
  3733  0911                     	;# 
  3734  0912                     	;# 
  3735  0913                     	;# 
  3736  0914                     	;# 
  3737  0915                     	;# 
  3738  0916                     	;# 
  3739  0918                     	;# 
  3740  0919                     	;# 
  3741  091A                     	;# 
  3742  091B                     	;# 
  3743  091C                     	;# 
  3744  091D                     	;# 
  3745  091E                     	;# 
  3746  091F                     	;# 
  3747  0E0F                     	;# 
  3748  0E10                     	;# 
  3749  0E11                     	;# 
  3750  0E12                     	;# 
  3751  0E13                     	;# 
  3752  0E14                     	;# 
  3753  0E15                     	;# 
  3754  0E16                     	;# 
  3755  0E17                     	;# 
  3756  0E18                     	;# 
  3757  0E19                     	;# 
  3758  0E1A                     	;# 
  3759  0E1B                     	;# 
  3760  0E1C                     	;# 
  3761  0E1D                     	;# 
  3762  0E1E                     	;# 
  3763  0E1F                     	;# 
  3764  0E20                     	;# 
  3765  0E21                     	;# 
  3766  0E22                     	;# 
  3767  0E24                     	;# 
  3768  0E25                     	;# 
  3769  0E28                     	;# 
  3770  0E29                     	;# 
  3771  0E2A                     	;# 
  3772  0E2B                     	;# 
  3773  0E2C                     	;# 
  3774  0E2D                     	;# 
  3775  0E2E                     	;# 
  3776  0E2F                     	;# 
  3777  0E90                     	;# 
  3778  0E91                     	;# 
  3779  0E92                     	;# 
  3780  0E94                     	;# 
  3781  0E95                     	;# 
  3782  0E9C                     	;# 
  3783  0E9D                     	;# 
  3784  0E9E                     	;# 
  3785  0E9F                     	;# 
  3786  0EA0                     	;# 
  3787  0EA1                     	;# 
  3788  0EA2                     	;# 
  3789  0EA3                     	;# 
  3790  0EA4                     	;# 
  3791  0EA5                     	;# 
  3792  0EA6                     	;# 
  3793  0EA7                     	;# 
  3794  0F0F                     	;# 
  3795  0F10                     	;# 
  3796  0F11                     	;# 
  3797  0F12                     	;# 
  3798  0F13                     	;# 
  3799  0F14                     	;# 
  3800  0F15                     	;# 
  3801  0F16                     	;# 
  3802  0F17                     	;# 
  3803  0F18                     	;# 
  3804  0F19                     	;# 
  3805  0F1A                     	;# 
  3806  0F1B                     	;# 
  3807  0F1C                     	;# 
  3808  0F1D                     	;# 
  3809  0F1E                     	;# 
  3810  0F1F                     	;# 
  3811  0F20                     	;# 
  3812  0F21                     	;# 
  3813  0F22                     	;# 
  3814  0F23                     	;# 
  3815  0F24                     	;# 
  3816  0F25                     	;# 
  3817  0F26                     	;# 
  3818  0F27                     	;# 
  3819  0F28                     	;# 
  3820  0F29                     	;# 
  3821  0F2A                     	;# 
  3822  0F2B                     	;# 
  3823  0F2C                     	;# 
  3824  0F2D                     	;# 
  3825  0F2E                     	;# 
  3826  0F2F                     	;# 
  3827  0F30                     	;# 
  3828  0F31                     	;# 
  3829  0F32                     	;# 
  3830  0F33                     	;# 
  3831  0F34                     	;# 
  3832  0F35                     	;# 
  3833  0F36                     	;# 
  3834  0F37                     	;# 
  3835  0FE4                     	;# 
  3836  0FE5                     	;# 
  3837  0FE6                     	;# 
  3838  0FE7                     	;# 
  3839  0FE8                     	;# 
  3840  0FE9                     	;# 
  3841  0FEA                     	;# 
  3842  0FEB                     	;# 
  3843  0FED                     	;# 
  3844  0FEE                     	;# 
  3845  0FEF                     	;# 
  3846  0000                     	;# 
  3847  0001                     	;# 
  3848  0002                     	;# 
  3849  0003                     	;# 
  3850  0004                     	;# 
  3851  0005                     	;# 
  3852  0006                     	;# 
  3853  0007                     	;# 
  3854  0008                     	;# 
  3855  0009                     	;# 
  3856  000A                     	;# 
  3857  000B                     	;# 
  3858  000C                     	;# 
  3859  000D                     	;# 
  3860  000E                     	;# 
  3861  0010                     	;# 
  3862  0011                     	;# 
  3863  0012                     	;# 
  3864  0013                     	;# 
  3865  0014                     	;# 
  3866  0015                     	;# 
  3867  0015                     	;# 
  3868  0016                     	;# 
  3869  0016                     	;# 
  3870  0017                     	;# 
  3871  0018                     	;# 
  3872  0019                     	;# 
  3873  0019                     	;# 
  3874  001A                     	;# 
  3875  001B                     	;# 
  3876  001C                     	;# 
  3877  001D                     	;# 
  3878  001E                     	;# 
  3879  001F                     	;# 
  3880  008C                     	;# 
  3881  008D                     	;# 
  3882  008E                     	;# 
  3883  0090                     	;# 
  3884  0091                     	;# 
  3885  0092                     	;# 
  3886  0093                     	;# 
  3887  0094                     	;# 
  3888  0097                     	;# 
  3889  009B                     	;# 
  3890  009B                     	;# 
  3891  009C                     	;# 
  3892  009D                     	;# 
  3893  009E                     	;# 
  3894  009F                     	;# 
  3895  010C                     	;# 
  3896  010D                     	;# 
  3897  010E                     	;# 
  3898  0111                     	;# 
  3899  0112                     	;# 
  3900  0113                     	;# 
  3901  0114                     	;# 
  3902  0115                     	;# 
  3903  0116                     	;# 
  3904  0117                     	;# 
  3905  0118                     	;# 
  3906  0119                     	;# 
  3907  018C                     	;# 
  3908  018D                     	;# 
  3909  018E                     	;# 
  3910  0197                     	;# 
  3911  0199                     	;# 
  3912  0199                     	;# 
  3913  0199                     	;# 
  3914  019A                     	;# 
  3915  019A                     	;# 
  3916  019A                     	;# 
  3917  019B                     	;# 
  3918  019B                     	;# 
  3919  019B                     	;# 
  3920  019B                     	;# 
  3921  019B                     	;# 
  3922  019C                     	;# 
  3923  019C                     	;# 
  3924  019C                     	;# 
  3925  019D                     	;# 
  3926  019D                     	;# 
  3927  019D                     	;# 
  3928  019E                     	;# 
  3929  019E                     	;# 
  3930  019E                     	;# 
  3931  019F                     	;# 
  3932  019F                     	;# 
  3933  019F                     	;# 
  3934  019F                     	;# 
  3935  019F                     	;# 
  3936  020C                     	;# 
  3937  020D                     	;# 
  3938  020E                     	;# 
  3939  0211                     	;# 
  3940  0211                     	;# 
  3941  0212                     	;# 
  3942  0212                     	;# 
  3943  0213                     	;# 
  3944  0213                     	;# 
  3945  0214                     	;# 
  3946  0214                     	;# 
  3947  0215                     	;# 
  3948  0215                     	;# 
  3949  0215                     	;# 
  3950  0215                     	;# 
  3951  0216                     	;# 
  3952  0216                     	;# 
  3953  0217                     	;# 
  3954  0217                     	;# 
  3955  0219                     	;# 
  3956  021A                     	;# 
  3957  021B                     	;# 
  3958  021C                     	;# 
  3959  021D                     	;# 
  3960  021D                     	;# 
  3961  021E                     	;# 
  3962  021F                     	;# 
  3963  028C                     	;# 
  3964  028D                     	;# 
  3965  028E                     	;# 
  3966  0291                     	;# 
  3967  0291                     	;# 
  3968  0292                     	;# 
  3969  0293                     	;# 
  3970  0294                     	;# 
  3971  0295                     	;# 
  3972  0295                     	;# 
  3973  0296                     	;# 
  3974  0297                     	;# 
  3975  0298                     	;# 
  3976  029F                     	;# 
  3977  030C                     	;# 
  3978  030D                     	;# 
  3979  030E                     	;# 
  3980  0311                     	;# 
  3981  0311                     	;# 
  3982  0312                     	;# 
  3983  0313                     	;# 
  3984  0314                     	;# 
  3985  0315                     	;# 
  3986  0315                     	;# 
  3987  0316                     	;# 
  3988  0317                     	;# 
  3989  0318                     	;# 
  3990  038C                     	;# 
  3991  038D                     	;# 
  3992  038E                     	;# 
  3993  0391                     	;# 
  3994  0392                     	;# 
  3995  0393                     	;# 
  3996  0394                     	;# 
  3997  0395                     	;# 
  3998  0396                     	;# 
  3999  0397                     	;# 
  4000  0398                     	;# 
  4001  0399                     	;# 
  4002  039A                     	;# 
  4003  039C                     	;# 
  4004  039D                     	;# 
  4005  039E                     	;# 
  4006  039F                     	;# 
  4007  0411                     	;# 
  4008  0411                     	;# 
  4009  0412                     	;# 
  4010  0413                     	;# 
  4011  0414                     	;# 
  4012  0415                     	;# 
  4013  0416                     	;# 
  4014  0417                     	;# 
  4015  0418                     	;# 
  4016  0418                     	;# 
  4017  0419                     	;# 
  4018  041A                     	;# 
  4019  041B                     	;# 
  4020  041C                     	;# 
  4021  041D                     	;# 
  4022  041E                     	;# 
  4023  041F                     	;# 
  4024  0498                     	;# 
  4025  0498                     	;# 
  4026  0499                     	;# 
  4027  049A                     	;# 
  4028  049B                     	;# 
  4029  049B                     	;# 
  4030  049C                     	;# 
  4031  049D                     	;# 
  4032  049E                     	;# 
  4033  049F                     	;# 
  4034  0617                     	;# 
  4035  0618                     	;# 
  4036  0619                     	;# 
  4037  0619                     	;# 
  4038  061A                     	;# 
  4039  061B                     	;# 
  4040  061C                     	;# 
  4041  061C                     	;# 
  4042  061F                     	;# 
  4043  0691                     	;# 
  4044  0692                     	;# 
  4045  0693                     	;# 
  4046  0694                     	;# 
  4047  0695                     	;# 
  4048  0696                     	;# 
  4049  0697                     	;# 
  4050  0698                     	;# 
  4051  0699                     	;# 
  4052  0711                     	;# 
  4053  0712                     	;# 
  4054  0713                     	;# 
  4055  0714                     	;# 
  4056  0715                     	;# 
  4057  0716                     	;# 
  4058  0717                     	;# 
  4059  0718                     	;# 
  4060  0719                     	;# 
  4061  0891                     	;# 
  4062  0891                     	;# 
  4063  0891                     	;# 
  4064  0891                     	;# 
  4065  0891                     	;# 
  4066  0891                     	;# 
  4067  0892                     	;# 
  4068  0892                     	;# 
  4069  0892                     	;# 
  4070  0893                     	;# 
  4071  0893                     	;# 
  4072  0893                     	;# 
  4073  0893                     	;# 
  4074  0893                     	;# 
  4075  0893                     	;# 
  4076  0894                     	;# 
  4077  0894                     	;# 
  4078  0894                     	;# 
  4079  0895                     	;# 
  4080  0895                     	;# 
  4081  0895                     	;# 
  4082  0896                     	;# 
  4083  0896                     	;# 
  4084  0896                     	;# 
  4085  089B                     	;# 
  4086  0911                     	;# 
  4087  0912                     	;# 
  4088  0913                     	;# 
  4089  0914                     	;# 
  4090  0915                     	;# 
  4091  0916                     	;# 
  4092  0918                     	;# 
  4093  0919                     	;# 
  4094  091A                     	;# 
  4095  091B                     	;# 
  4096  091C                     	;# 
  4097  091D                     	;# 
  4098  091E                     	;# 
  4099  091F                     	;# 
  4100  0E0F                     	;# 
  4101  0E10                     	;# 
  4102  0E11                     	;# 
  4103  0E12                     	;# 
  4104  0E13                     	;# 
  4105  0E14                     	;# 
  4106  0E15                     	;# 
  4107  0E16                     	;# 
  4108  0E17                     	;# 
  4109  0E18                     	;# 
  4110  0E19                     	;# 
  4111  0E1A                     	;# 
  4112  0E1B                     	;# 
  4113  0E1C                     	;# 
  4114  0E1D                     	;# 
  4115  0E1E                     	;# 
  4116  0E1F                     	;# 
  4117  0E20                     	;# 
  4118  0E21                     	;# 
  4119  0E22                     	;# 
  4120  0E24                     	;# 
  4121  0E25                     	;# 
  4122  0E28                     	;# 
  4123  0E29                     	;# 
  4124  0E2A                     	;# 
  4125  0E2B                     	;# 
  4126  0E2C                     	;# 
  4127  0E2D                     	;# 
  4128  0E2E                     	;# 
  4129  0E2F                     	;# 
  4130  0E90                     	;# 
  4131  0E91                     	;# 
  4132  0E92                     	;# 
  4133  0E94                     	;# 
  4134  0E95                     	;# 
  4135  0E9C                     	;# 
  4136  0E9D                     	;# 
  4137  0E9E                     	;# 
  4138  0E9F                     	;# 
  4139  0EA0                     	;# 
  4140  0EA1                     	;# 
  4141  0EA2                     	;# 
  4142  0EA3                     	;# 
  4143  0EA4                     	;# 
  4144  0EA5                     	;# 
  4145  0EA6                     	;# 
  4146  0EA7                     	;# 
  4147  0F0F                     	;# 
  4148  0F10                     	;# 
  4149  0F11                     	;# 
  4150  0F12                     	;# 
  4151  0F13                     	;# 
  4152  0F14                     	;# 
  4153  0F15                     	;# 
  4154  0F16                     	;# 
  4155  0F17                     	;# 
  4156  0F18                     	;# 
  4157  0F19                     	;# 
  4158  0F1A                     	;# 
  4159  0F1B                     	;# 
  4160  0F1C                     	;# 
  4161  0F1D                     	;# 
  4162  0F1E                     	;# 
  4163  0F1F                     	;# 
  4164  0F20                     	;# 
  4165  0F21                     	;# 
  4166  0F22                     	;# 
  4167  0F23                     	;# 
  4168  0F24                     	;# 
  4169  0F25                     	;# 
  4170  0F26                     	;# 
  4171  0F27                     	;# 
  4172  0F28                     	;# 
  4173  0F29                     	;# 
  4174  0F2A                     	;# 
  4175  0F2B                     	;# 
  4176  0F2C                     	;# 
  4177  0F2D                     	;# 
  4178  0F2E                     	;# 
  4179  0F2F                     	;# 
  4180  0F30                     	;# 
  4181  0F31                     	;# 
  4182  0F32                     	;# 
  4183  0F33                     	;# 
  4184  0F34                     	;# 
  4185  0F35                     	;# 
  4186  0F36                     	;# 
  4187  0F37                     	;# 
  4188  0FE4                     	;# 
  4189  0FE5                     	;# 
  4190  0FE6                     	;# 
  4191  0FE7                     	;# 
  4192  0FE8                     	;# 
  4193  0FE9                     	;# 
  4194  0FEA                     	;# 
  4195  0FEB                     	;# 
  4196  0FED                     	;# 
  4197  0FEE                     	;# 
  4198  0FEF                     	;# 
  4199  0000                     	;# 
  4200  0001                     	;# 
  4201  0002                     	;# 
  4202  0003                     	;# 
  4203  0004                     	;# 
  4204  0005                     	;# 
  4205  0006                     	;# 
  4206  0007                     	;# 
  4207  0008                     	;# 
  4208  0009                     	;# 
  4209  000A                     	;# 
  4210  000B                     	;# 
  4211  000C                     	;# 
  4212  000D                     	;# 
  4213  000E                     	;# 
  4214  0010                     	;# 
  4215  0011                     	;# 
  4216  0012                     	;# 
  4217  0013                     	;# 
  4218  0014                     	;# 
  4219  0015                     	;# 
  4220  0015                     	;# 
  4221  0016                     	;# 
  4222  0016                     	;# 
  4223  0017                     	;# 
  4224  0018                     	;# 
  4225  0019                     	;# 
  4226  0019                     	;# 
  4227  001A                     	;# 
  4228  001B                     	;# 
  4229  001C                     	;# 
  4230  001D                     	;# 
  4231  001E                     	;# 
  4232  001F                     	;# 
  4233  008C                     	;# 
  4234  008D                     	;# 
  4235  008E                     	;# 
  4236  0090                     	;# 
  4237  0091                     	;# 
  4238  0092                     	;# 
  4239  0093                     	;# 
  4240  0094                     	;# 
  4241  0097                     	;# 
  4242  009B                     	;# 
  4243  009B                     	;# 
  4244  009C                     	;# 
  4245  009D                     	;# 
  4246  009E                     	;# 
  4247  009F                     	;# 
  4248  010C                     	;# 
  4249  010D                     	;# 
  4250  010E                     	;# 
  4251  0111                     	;# 
  4252  0112                     	;# 
  4253  0113                     	;# 
  4254  0114                     	;# 
  4255  0115                     	;# 
  4256  0116                     	;# 
  4257  0117                     	;# 
  4258  0118                     	;# 
  4259  0119                     	;# 
  4260  018C                     	;# 
  4261  018D                     	;# 
  4262  018E                     	;# 
  4263  0197                     	;# 
  4264  0199                     	;# 
  4265  0199                     	;# 
  4266  0199                     	;# 
  4267  019A                     	;# 
  4268  019A                     	;# 
  4269  019A                     	;# 
  4270  019B                     	;# 
  4271  019B                     	;# 
  4272  019B                     	;# 
  4273  019B                     	;# 
  4274  019B                     	;# 
  4275  019C                     	;# 
  4276  019C                     	;# 
  4277  019C                     	;# 
  4278  019D                     	;# 
  4279  019D                     	;# 
  4280  019D                     	;# 
  4281  019E                     	;# 
  4282  019E                     	;# 
  4283  019E                     	;# 
  4284  019F                     	;# 
  4285  019F                     	;# 
  4286  019F                     	;# 
  4287  019F                     	;# 
  4288  019F                     	;# 
  4289  020C                     	;# 
  4290  020D                     	;# 
  4291  020E                     	;# 
  4292  0211                     	;# 
  4293  0211                     	;# 
  4294  0212                     	;# 
  4295  0212                     	;# 
  4296  0213                     	;# 
  4297  0213                     	;# 
  4298  0214                     	;# 
  4299  0214                     	;# 
  4300  0215                     	;# 
  4301  0215                     	;# 
  4302  0215                     	;# 
  4303  0215                     	;# 
  4304  0216                     	;# 
  4305  0216                     	;# 
  4306  0217                     	;# 
  4307  0217                     	;# 
  4308  0219                     	;# 
  4309  021A                     	;# 
  4310  021B                     	;# 
  4311  021C                     	;# 
  4312  021D                     	;# 
  4313  021D                     	;# 
  4314  021E                     	;# 
  4315  021F                     	;# 
  4316  028C                     	;# 
  4317  028D                     	;# 
  4318  028E                     	;# 
  4319  0291                     	;# 
  4320  0291                     	;# 
  4321  0292                     	;# 
  4322  0293                     	;# 
  4323  0294                     	;# 
  4324  0295                     	;# 
  4325  0295                     	;# 
  4326  0296                     	;# 
  4327  0297                     	;# 
  4328  0298                     	;# 
  4329  029F                     	;# 
  4330  030C                     	;# 
  4331  030D                     	;# 
  4332  030E                     	;# 
  4333  0311                     	;# 
  4334  0311                     	;# 
  4335  0312                     	;# 
  4336  0313                     	;# 
  4337  0314                     	;# 
  4338  0315                     	;# 
  4339  0315                     	;# 
  4340  0316                     	;# 
  4341  0317                     	;# 
  4342  0318                     	;# 
  4343  038C                     	;# 
  4344  038D                     	;# 
  4345  038E                     	;# 
  4346  0391                     	;# 
  4347  0392                     	;# 
  4348  0393                     	;# 
  4349  0394                     	;# 
  4350  0395                     	;# 
  4351  0396                     	;# 
  4352  0397                     	;# 
  4353  0398                     	;# 
  4354  0399                     	;# 
  4355  039A                     	;# 
  4356  039C                     	;# 
  4357  039D                     	;# 
  4358  039E                     	;# 
  4359  039F                     	;# 
  4360  0411                     	;# 
  4361  0411                     	;# 
  4362  0412                     	;# 
  4363  0413                     	;# 
  4364  0414                     	;# 
  4365  0415                     	;# 
  4366  0416                     	;# 
  4367  0417                     	;# 
  4368  0418                     	;# 
  4369  0418                     	;# 
  4370  0419                     	;# 
  4371  041A                     	;# 
  4372  041B                     	;# 
  4373  041C                     	;# 
  4374  041D                     	;# 
  4375  041E                     	;# 
  4376  041F                     	;# 
  4377  0498                     	;# 
  4378  0498                     	;# 
  4379  0499                     	;# 
  4380  049A                     	;# 
  4381  049B                     	;# 
  4382  049B                     	;# 
  4383  049C                     	;# 
  4384  049D                     	;# 
  4385  049E                     	;# 
  4386  049F                     	;# 
  4387  0617                     	;# 
  4388  0618                     	;# 
  4389  0619                     	;# 
  4390  0619                     	;# 
  4391  061A                     	;# 
  4392  061B                     	;# 
  4393  061C                     	;# 
  4394  061C                     	;# 
  4395  061F                     	;# 
  4396  0691                     	;# 
  4397  0692                     	;# 
  4398  0693                     	;# 
  4399  0694                     	;# 
  4400  0695                     	;# 
  4401  0696                     	;# 
  4402  0697                     	;# 
  4403  0698                     	;# 
  4404  0699                     	;# 
  4405  0711                     	;# 
  4406  0712                     	;# 
  4407  0713                     	;# 
  4408  0714                     	;# 
  4409  0715                     	;# 
  4410  0716                     	;# 
  4411  0717                     	;# 
  4412  0718                     	;# 
  4413  0719                     	;# 
  4414  0891                     	;# 
  4415  0891                     	;# 
  4416  0891                     	;# 
  4417  0891                     	;# 
  4418  0891                     	;# 
  4419  0891                     	;# 
  4420  0892                     	;# 
  4421  0892                     	;# 
  4422  0892                     	;# 
  4423  0893                     	;# 
  4424  0893                     	;# 
  4425  0893                     	;# 
  4426  0893                     	;# 
  4427  0893                     	;# 
  4428  0893                     	;# 
  4429  0894                     	;# 
  4430  0894                     	;# 
  4431  0894                     	;# 
  4432  0895                     	;# 
  4433  0895                     	;# 
  4434  0895                     	;# 
  4435  0896                     	;# 
  4436  0896                     	;# 
  4437  0896                     	;# 
  4438  089B                     	;# 
  4439  0911                     	;# 
  4440  0912                     	;# 
  4441  0913                     	;# 
  4442  0914                     	;# 
  4443  0915                     	;# 
  4444  0916                     	;# 
  4445  0918                     	;# 
  4446  0919                     	;# 
  4447  091A                     	;# 
  4448  091B                     	;# 
  4449  091C                     	;# 
  4450  091D                     	;# 
  4451  091E                     	;# 
  4452  091F                     	;# 
  4453  0E0F                     	;# 
  4454  0E10                     	;# 
  4455  0E11                     	;# 
  4456  0E12                     	;# 
  4457  0E13                     	;# 
  4458  0E14                     	;# 
  4459  0E15                     	;# 
  4460  0E16                     	;# 
  4461  0E17                     	;# 
  4462  0E18                     	;# 
  4463  0E19                     	;# 
  4464  0E1A                     	;# 
  4465  0E1B                     	;# 
  4466  0E1C                     	;# 
  4467  0E1D                     	;# 
  4468  0E1E                     	;# 
  4469  0E1F                     	;# 
  4470  0E20                     	;# 
  4471  0E21                     	;# 
  4472  0E22                     	;# 
  4473  0E24                     	;# 
  4474  0E25                     	;# 
  4475  0E28                     	;# 
  4476  0E29                     	;# 
  4477  0E2A                     	;# 
  4478  0E2B                     	;# 
  4479  0E2C                     	;# 
  4480  0E2D                     	;# 
  4481  0E2E                     	;# 
  4482  0E2F                     	;# 
  4483  0E90                     	;# 
  4484  0E91                     	;# 
  4485  0E92                     	;# 
  4486  0E94                     	;# 
  4487  0E95                     	;# 
  4488  0E9C                     	;# 
  4489  0E9D                     	;# 
  4490  0E9E                     	;# 
  4491  0E9F                     	;# 
  4492  0EA0                     	;# 
  4493  0EA1                     	;# 
  4494  0EA2                     	;# 
  4495  0EA3                     	;# 
  4496  0EA4                     	;# 
  4497  0EA5                     	;# 
  4498  0EA6                     	;# 
  4499  0EA7                     	;# 
  4500  0F0F                     	;# 
  4501  0F10                     	;# 
  4502  0F11                     	;# 
  4503  0F12                     	;# 
  4504  0F13                     	;# 
  4505  0F14                     	;# 
  4506  0F15                     	;# 
  4507  0F16                     	;# 
  4508  0F17                     	;# 
  4509  0F18                     	;# 
  4510  0F19                     	;# 
  4511  0F1A                     	;# 
  4512  0F1B                     	;# 
  4513  0F1C                     	;# 
  4514  0F1D                     	;# 
  4515  0F1E                     	;# 
  4516  0F1F                     	;# 
  4517  0F20                     	;# 
  4518  0F21                     	;# 
  4519  0F22                     	;# 
  4520  0F23                     	;# 
  4521  0F24                     	;# 
  4522  0F25                     	;# 
  4523  0F26                     	;# 
  4524  0F27                     	;# 
  4525  0F28                     	;# 
  4526  0F29                     	;# 
  4527  0F2A                     	;# 
  4528  0F2B                     	;# 
  4529  0F2C                     	;# 
  4530  0F2D                     	;# 
  4531  0F2E                     	;# 
  4532  0F2F                     	;# 
  4533  0F30                     	;# 
  4534  0F31                     	;# 
  4535  0F32                     	;# 
  4536  0F33                     	;# 
  4537  0F34                     	;# 
  4538  0F35                     	;# 
  4539  0F36                     	;# 
  4540  0F37                     	;# 
  4541  0FE4                     	;# 
  4542  0FE5                     	;# 
  4543  0FE6                     	;# 
  4544  0FE7                     	;# 
  4545  0FE8                     	;# 
  4546  0FE9                     	;# 
  4547  0FEA                     	;# 
  4548  0FEB                     	;# 
  4549  0FED                     	;# 
  4550  0FEE                     	;# 
  4551  0FEF                     	;# 
  4552  0000                     	;# 
  4553  0001                     	;# 
  4554  0002                     	;# 
  4555  0003                     	;# 
  4556  0004                     	;# 
  4557  0005                     	;# 
  4558  0006                     	;# 
  4559  0007                     	;# 
  4560  0008                     	;# 
  4561  0009                     	;# 
  4562  000A                     	;# 
  4563  000B                     	;# 
  4564  000C                     	;# 
  4565  000D                     	;# 
  4566  000E                     	;# 
  4567  0010                     	;# 
  4568  0011                     	;# 
  4569  0012                     	;# 
  4570  0013                     	;# 
  4571  0014                     	;# 
  4572  0015                     	;# 
  4573  0015                     	;# 
  4574  0016                     	;# 
  4575  0016                     	;# 
  4576  0017                     	;# 
  4577  0018                     	;# 
  4578  0019                     	;# 
  4579  0019                     	;# 
  4580  001A                     	;# 
  4581  001B                     	;# 
  4582  001C                     	;# 
  4583  001D                     	;# 
  4584  001E                     	;# 
  4585  001F                     	;# 
  4586  008C                     	;# 
  4587  008D                     	;# 
  4588  008E                     	;# 
  4589  0090                     	;# 
  4590  0091                     	;# 
  4591  0092                     	;# 
  4592  0093                     	;# 
  4593  0094                     	;# 
  4594  0097                     	;# 
  4595  009B                     	;# 
  4596  009B                     	;# 
  4597  009C                     	;# 
  4598  009D                     	;# 
  4599  009E                     	;# 
  4600  009F                     	;# 
  4601  010C                     	;# 
  4602  010D                     	;# 
  4603  010E                     	;# 
  4604  0111                     	;# 
  4605  0112                     	;# 
  4606  0113                     	;# 
  4607  0114                     	;# 
  4608  0115                     	;# 
  4609  0116                     	;# 
  4610  0117                     	;# 
  4611  0118                     	;# 
  4612  0119                     	;# 
  4613  018C                     	;# 
  4614  018D                     	;# 
  4615  018E                     	;# 
  4616  0197                     	;# 
  4617  0199                     	;# 
  4618  0199                     	;# 
  4619  0199                     	;# 
  4620  019A                     	;# 
  4621  019A                     	;# 
  4622  019A                     	;# 
  4623  019B                     	;# 
  4624  019B                     	;# 
  4625  019B                     	;# 
  4626  019B                     	;# 
  4627  019B                     	;# 
  4628  019C                     	;# 
  4629  019C                     	;# 
  4630  019C                     	;# 
  4631  019D                     	;# 
  4632  019D                     	;# 
  4633  019D                     	;# 
  4634  019E                     	;# 
  4635  019E                     	;# 
  4636  019E                     	;# 
  4637  019F                     	;# 
  4638  019F                     	;# 
  4639  019F                     	;# 
  4640  019F                     	;# 
  4641  019F                     	;# 
  4642  020C                     	;# 
  4643  020D                     	;# 
  4644  020E                     	;# 
  4645  0211                     	;# 
  4646  0211                     	;# 
  4647  0212                     	;# 
  4648  0212                     	;# 
  4649  0213                     	;# 
  4650  0213                     	;# 
  4651  0214                     	;# 
  4652  0214                     	;# 
  4653  0215                     	;# 
  4654  0215                     	;# 
  4655  0215                     	;# 
  4656  0215                     	;# 
  4657  0216                     	;# 
  4658  0216                     	;# 
  4659  0217                     	;# 
  4660  0217                     	;# 
  4661  0219                     	;# 
  4662  021A                     	;# 
  4663  021B                     	;# 
  4664  021C                     	;# 
  4665  021D                     	;# 
  4666  021D                     	;# 
  4667  021E                     	;# 
  4668  021F                     	;# 
  4669  028C                     	;# 
  4670  028D                     	;# 
  4671  028E                     	;# 
  4672  0291                     	;# 
  4673  0291                     	;# 
  4674  0292                     	;# 
  4675  0293                     	;# 
  4676  0294                     	;# 
  4677  0295                     	;# 
  4678  0295                     	;# 
  4679  0296                     	;# 
  4680  0297                     	;# 
  4681  0298                     	;# 
  4682  029F                     	;# 
  4683  030C                     	;# 
  4684  030D                     	;# 
  4685  030E                     	;# 
  4686  0311                     	;# 
  4687  0311                     	;# 
  4688  0312                     	;# 
  4689  0313                     	;# 
  4690  0314                     	;# 
  4691  0315                     	;# 
  4692  0315                     	;# 
  4693  0316                     	;# 
  4694  0317                     	;# 
  4695  0318                     	;# 
  4696  038C                     	;# 
  4697  038D                     	;# 
  4698  038E                     	;# 
  4699  0391                     	;# 
  4700  0392                     	;# 
  4701  0393                     	;# 
  4702  0394                     	;# 
  4703  0395                     	;# 
  4704  0396                     	;# 
  4705  0397                     	;# 
  4706  0398                     	;# 
  4707  0399                     	;# 
  4708  039A                     	;# 
  4709  039C                     	;# 
  4710  039D                     	;# 
  4711  039E                     	;# 
  4712  039F                     	;# 
  4713  0411                     	;# 
  4714  0411                     	;# 
  4715  0412                     	;# 
  4716  0413                     	;# 
  4717  0414                     	;# 
  4718  0415                     	;# 
  4719  0416                     	;# 
  4720  0417                     	;# 
  4721  0418                     	;# 
  4722  0418                     	;# 
  4723  0419                     	;# 
  4724  041A                     	;# 
  4725  041B                     	;# 
  4726  041C                     	;# 
  4727  041D                     	;# 
  4728  041E                     	;# 
  4729  041F                     	;# 
  4730  0498                     	;# 
  4731  0498                     	;# 
  4732  0499                     	;# 
  4733  049A                     	;# 
  4734  049B                     	;# 
  4735  049B                     	;# 
  4736  049C                     	;# 
  4737  049D                     	;# 
  4738  049E                     	;# 
  4739  049F                     	;# 
  4740  0617                     	;# 
  4741  0618                     	;# 
  4742  0619                     	;# 
  4743  0619                     	;# 
  4744  061A                     	;# 
  4745  061B                     	;# 
  4746  061C                     	;# 
  4747  061C                     	;# 
  4748  061F                     	;# 
  4749  0691                     	;# 
  4750  0692                     	;# 
  4751  0693                     	;# 
  4752  0694                     	;# 
  4753  0695                     	;# 
  4754  0696                     	;# 
  4755  0697                     	;# 
  4756  0698                     	;# 
  4757  0699                     	;# 
  4758  0711                     	;# 
  4759  0712                     	;# 
  4760  0713                     	;# 
  4761  0714                     	;# 
  4762  0715                     	;# 
  4763  0716                     	;# 
  4764  0717                     	;# 
  4765  0718                     	;# 
  4766  0719                     	;# 
  4767  0891                     	;# 
  4768  0891                     	;# 
  4769  0891                     	;# 
  4770  0891                     	;# 
  4771  0891                     	;# 
  4772  0891                     	;# 
  4773  0892                     	;# 
  4774  0892                     	;# 
  4775  0892                     	;# 
  4776  0893                     	;# 
  4777  0893                     	;# 
  4778  0893                     	;# 
  4779  0893                     	;# 
  4780  0893                     	;# 
  4781  0893                     	;# 
  4782  0894                     	;# 
  4783  0894                     	;# 
  4784  0894                     	;# 
  4785  0895                     	;# 
  4786  0895                     	;# 
  4787  0895                     	;# 
  4788  0896                     	;# 
  4789  0896                     	;# 
  4790  0896                     	;# 
  4791  089B                     	;# 
  4792  0911                     	;# 
  4793  0912                     	;# 
  4794  0913                     	;# 
  4795  0914                     	;# 
  4796  0915                     	;# 
  4797  0916                     	;# 
  4798  0918                     	;# 
  4799  0919                     	;# 
  4800  091A                     	;# 
  4801  091B                     	;# 
  4802  091C                     	;# 
  4803  091D                     	;# 
  4804  091E                     	;# 
  4805  091F                     	;# 
  4806  0E0F                     	;# 
  4807  0E10                     	;# 
  4808  0E11                     	;# 
  4809  0E12                     	;# 
  4810  0E13                     	;# 
  4811  0E14                     	;# 
  4812  0E15                     	;# 
  4813  0E16                     	;# 
  4814  0E17                     	;# 
  4815  0E18                     	;# 
  4816  0E19                     	;# 
  4817  0E1A                     	;# 
  4818  0E1B                     	;# 
  4819  0E1C                     	;# 
  4820  0E1D                     	;# 
  4821  0E1E                     	;# 
  4822  0E1F                     	;# 
  4823  0E20                     	;# 
  4824  0E21                     	;# 
  4825  0E22                     	;# 
  4826  0E24                     	;# 
  4827  0E25                     	;# 
  4828  0E28                     	;# 
  4829  0E29                     	;# 
  4830  0E2A                     	;# 
  4831  0E2B                     	;# 
  4832  0E2C                     	;# 
  4833  0E2D                     	;# 
  4834  0E2E                     	;# 
  4835  0E2F                     	;# 
  4836  0E90                     	;# 
  4837  0E91                     	;# 
  4838  0E92                     	;# 
  4839  0E94                     	;# 
  4840  0E95                     	;# 
  4841  0E9C                     	;# 
  4842  0E9D                     	;# 
  4843  0E9E                     	;# 
  4844  0E9F                     	;# 
  4845  0EA0                     	;# 
  4846  0EA1                     	;# 
  4847  0EA2                     	;# 
  4848  0EA3                     	;# 
  4849  0EA4                     	;# 
  4850  0EA5                     	;# 
  4851  0EA6                     	;# 
  4852  0EA7                     	;# 
  4853  0F0F                     	;# 
  4854  0F10                     	;# 
  4855  0F11                     	;# 
  4856  0F12                     	;# 
  4857  0F13                     	;# 
  4858  0F14                     	;# 
  4859  0F15                     	;# 
  4860  0F16                     	;# 
  4861  0F17                     	;# 
  4862  0F18                     	;# 
  4863  0F19                     	;# 
  4864  0F1A                     	;# 
  4865  0F1B                     	;# 
  4866  0F1C                     	;# 
  4867  0F1D                     	;# 
  4868  0F1E                     	;# 
  4869  0F1F                     	;# 
  4870  0F20                     	;# 
  4871  0F21                     	;# 
  4872  0F22                     	;# 
  4873  0F23                     	;# 
  4874  0F24                     	;# 
  4875  0F25                     	;# 
  4876  0F26                     	;# 
  4877  0F27                     	;# 
  4878  0F28                     	;# 
  4879  0F29                     	;# 
  4880  0F2A                     	;# 
  4881  0F2B                     	;# 
  4882  0F2C                     	;# 
  4883  0F2D                     	;# 
  4884  0F2E                     	;# 
  4885  0F2F                     	;# 
  4886  0F30                     	;# 
  4887  0F31                     	;# 
  4888  0F32                     	;# 
  4889  0F33                     	;# 
  4890  0F34                     	;# 
  4891  0F35                     	;# 
  4892  0F36                     	;# 
  4893  0F37                     	;# 
  4894  0FE4                     	;# 
  4895  0FE5                     	;# 
  4896  0FE6                     	;# 
  4897  0FE7                     	;# 
  4898  0FE8                     	;# 
  4899  0FE9                     	;# 
  4900  0FEA                     	;# 
  4901  0FEB                     	;# 
  4902  0FED                     	;# 
  4903  0FEE                     	;# 
  4904  0FEF                     	;_currentPositions_steps
  4905                           
  4906                           	psect	idataBANK0
  4907  2F95                     __pidataBANK0:	
  4908                           
  4909                           ;initializer for _demoLong
  4910  2F95  3401               	retlw	1
  4911  2F96  3400               	retlw	0
  4912  2F97  3400               	retlw	0
  4913  2F98  3400               	retlw	0
  4914                           
  4915                           	psect	idataBANK1
  4916  07FA                     __pidataBANK1:	
  4917                           
  4918                           ;initializer for _piezo_on_time_ms
  4919  07FA  34C0               	retlw	192
  4920  07FB  3403               	retlw	3
  4921                           
  4922                           ;initializer for _heater_pre_time_ms
  4923  07FC  341E               	retlw	30
  4924  07FD  3400               	retlw	0
  4925                           
  4926                           ;initializer for _drv_peak_val
  4927  07FE  347F               	retlw	127
  4928  07FF  3400               	retlw	0
  4929                           
  4930                           	psect	idataBANK2
  4931  0002                     __pidataBANK2:	
  4932                           
  4933                           ;initializer for _heater_post_time_ms
  4934  0002  3428               	retlw	40
  4935  0003  3400               	retlw	0
  4936                           
  4937                           	psect	idataBANK3
  4938  2F91                     __pidataBANK3:	
  4939                           
  4940                           ;initializer for _inter_step_interval_ms
  4941  2F91  34E8               	retlw	232
  4942  2F92  3403               	retlw	3
  4943  2F93  3400               	retlw	0
  4944  2F94  3400               	retlw	0
  4945                           
  4946                           	psect	idataBANK4
  4947  23B9                     __pidataBANK4:	
  4948                           
  4949                           ;initializer for _fsmStateTable
  4950  23B9  348E               	retlw	low _do_I2C_IDLE
  4951  23BA  3420               	retlw	high _do_I2C_IDLE
  4952  23BB  3426               	retlw	low _do_I2C_SEND_ADR_READ
  4953  23BC  3421               	retlw	high _do_I2C_SEND_ADR_READ
  4954  23BD  34F9               	retlw	low _do_I2C_SEND_ADR_WRITE
  4955  23BE  3420               	retlw	high _do_I2C_SEND_ADR_WRITE
  4956  23BF  340E               	retlw	low _do_I2C_TX
  4957  23C0  341E               	retlw	high _do_I2C_TX
  4958  23C1  3413               	retlw	low _do_I2C_RX
  4959  23C2  341A               	retlw	high _do_I2C_RX
  4960  23C3  34C6               	retlw	low _do_I2C_RCEN
  4961  23C4  3420               	retlw	high _do_I2C_RCEN
  4962  23C5  34BA               	retlw	low _do_I2C_TX_EMPTY
  4963  23C6  3425               	retlw	high _do_I2C_TX_EMPTY
  4964  23C7  34F8               	retlw	low _do_I2C_SEND_RESTART_READ
  4965  23C8  342F               	retlw	high _do_I2C_SEND_RESTART_READ
  4966  23C9  3432               	retlw	low _do_I2C_SEND_RESTART_WRITE
  4967  23CA  3420               	retlw	high _do_I2C_SEND_RESTART_WRITE
  4968  23CB  343A               	retlw	low _do_I2C_SEND_RESTART
  4969  23CC  3420               	retlw	high _do_I2C_SEND_RESTART
  4970  23CD  3442               	retlw	low _do_I2C_SEND_STOP
  4971  23CE  3420               	retlw	high _do_I2C_SEND_STOP
  4972  23CF  344A               	retlw	low _do_I2C_DO_ACK
  4973  23D0  3420               	retlw	high _do_I2C_DO_ACK
  4974  23D1  3452               	retlw	low _do_I2C_DO_NACK_STOP
  4975  23D2  3420               	retlw	high _do_I2C_DO_NACK_STOP
  4976  23D3  345A               	retlw	low _do_I2C_DO_NACK_RESTART
  4977  23D4  3420               	retlw	high _do_I2C_DO_NACK_RESTART
  4978  23D5  34EE               	retlw	low _do_I2C_RESET
  4979  23D6  3420               	retlw	high _do_I2C_RESET
  4980  23D7  3400               	retlw	low _do_I2C_DO_ADDRESS_NACK
  4981  23D8  3408               	retlw	high _do_I2C_DO_ADDRESS_NACK
  4982                           
  4983                           	psect	stringtext1
  4984  1000                     __pstringtext1:	
  4985  1000                     drv2665@drv_sine:	
  4986  1000  3400               	retlw	0
  4987  1001  3400               	retlw	0
  4988  1002  3410               	retlw	16
  4989  1003  3400               	retlw	0
  4990  1004  3420               	retlw	32
  4991  1005  3400               	retlw	0
  4992  1006  342E               	retlw	46
  4993  1007  3400               	retlw	0
  4994  1008  343C               	retlw	60
  4995  1009  3400               	retlw	0
  4996  100A  3448               	retlw	72
  4997  100B  3400               	retlw	0
  4998  100C  3453               	retlw	83
  4999  100D  3400               	retlw	0
  5000  100E  345B               	retlw	91
  5001  100F  3400               	retlw	0
  5002  1010  3461               	retlw	97
  5003  1011  3400               	retlw	0
  5004  1012  3465               	retlw	101
  5005  1013  3400               	retlw	0
  5006  1014  3466               	retlw	102
  5007  1015  3400               	retlw	0
  5008  1016  3465               	retlw	101
  5009  1017  3400               	retlw	0
  5010  1018  3461               	retlw	97
  5011  1019  3400               	retlw	0
  5012  101A  345B               	retlw	91
  5013  101B  3400               	retlw	0
  5014  101C  3453               	retlw	83
  5015  101D  3400               	retlw	0
  5016  101E  3448               	retlw	72
  5017  101F  3400               	retlw	0
  5018  1020  343C               	retlw	60
  5019  1021  3400               	retlw	0
  5020  1022  342E               	retlw	46
  5021  1023  3400               	retlw	0
  5022  1024  3420               	retlw	32
  5023  1025  3400               	retlw	0
  5024  1026  3410               	retlw	16
  5025  1027  3400               	retlw	0
  5026  1028  3400               	retlw	0
  5027  1029  3400               	retlw	0
  5028  102A  34F0               	retlw	240
  5029  102B  3400               	retlw	0
  5030  102C  34E0               	retlw	224
  5031  102D  3400               	retlw	0
  5032  102E  34D2               	retlw	210
  5033  102F  3400               	retlw	0
  5034  1030  34C4               	retlw	196
  5035  1031  3400               	retlw	0
  5036  1032  34B8               	retlw	184
  5037  1033  3400               	retlw	0
  5038  1034  34AD               	retlw	173
  5039  1035  3400               	retlw	0
  5040  1036  34A5               	retlw	165
  5041  1037  3400               	retlw	0
  5042  1038  349F               	retlw	159
  5043  1039  3400               	retlw	0
  5044  103A  349B               	retlw	155
  5045  103B  3400               	retlw	0
  5046  103C  349A               	retlw	154
  5047  103D  3400               	retlw	0
  5048  103E  349B               	retlw	155
  5049  103F  3400               	retlw	0
  5050  1040  349F               	retlw	159
  5051  1041  3400               	retlw	0
  5052  1042  34A5               	retlw	165
  5053  1043  3400               	retlw	0
  5054  1044  34AD               	retlw	173
  5055  1045  3400               	retlw	0
  5056  1046  34B8               	retlw	184
  5057  1047  3400               	retlw	0
  5058  1048  34C4               	retlw	196
  5059  1049  3400               	retlw	0
  5060  104A  34D2               	retlw	210
  5061  104B  3400               	retlw	0
  5062  104C  34E0               	retlw	224
  5063  104D  3400               	retlw	0
  5064  104E  34F0               	retlw	240
  5065  104F  3400               	retlw	0
  5066  1050  3400               	retlw	0
  5067  1051  3400               	retlw	0
  5068  1052  3410               	retlw	16
  5069  1053  3400               	retlw	0
  5070  1054  3420               	retlw	32
  5071  1055  3400               	retlw	0
  5072  1056  342E               	retlw	46
  5073  1057  3400               	retlw	0
  5074  1058  343C               	retlw	60
  5075  1059  3400               	retlw	0
  5076  105A  3448               	retlw	72
  5077  105B  3400               	retlw	0
  5078  105C  3453               	retlw	83
  5079  105D  3400               	retlw	0
  5080  105E  345B               	retlw	91
  5081  105F  3400               	retlw	0
  5082  1060  3461               	retlw	97
  5083  1061  3400               	retlw	0
  5084  1062  3465               	retlw	101
  5085  1063  3400               	retlw	0
  5086  1064  3466               	retlw	102
  5087  1065  3400               	retlw	0
  5088  1066  3465               	retlw	101
  5089  1067  3400               	retlw	0
  5090  1068  3461               	retlw	97
  5091  1069  3400               	retlw	0
  5092  106A  345B               	retlw	91
  5093  106B  3400               	retlw	0
  5094  106C  3453               	retlw	83
  5095  106D  3400               	retlw	0
  5096  106E  3448               	retlw	72
  5097  106F  3400               	retlw	0
  5098  1070  343C               	retlw	60
  5099  1071  3400               	retlw	0
  5100  1072  342E               	retlw	46
  5101  1073  3400               	retlw	0
  5102  1074  3420               	retlw	32
  5103  1075  3400               	retlw	0
  5104  1076  3410               	retlw	16
  5105  1077  3400               	retlw	0
  5106  1078  3400               	retlw	0
  5107  1079  3400               	retlw	0
  5108  107A  34F0               	retlw	240
  5109  107B  3400               	retlw	0
  5110  107C  34E0               	retlw	224
  5111  107D  3400               	retlw	0
  5112  107E  34D2               	retlw	210
  5113  107F  3400               	retlw	0
  5114  1080  34C4               	retlw	196
  5115  1081  3400               	retlw	0
  5116  1082  34B8               	retlw	184
  5117  1083  3400               	retlw	0
  5118  1084  34AD               	retlw	173
  5119  1085  3400               	retlw	0
  5120  1086  34A5               	retlw	165
  5121  1087  3400               	retlw	0
  5122  1088  349F               	retlw	159
  5123  1089  3400               	retlw	0
  5124  108A  349B               	retlw	155
  5125  108B  3400               	retlw	0
  5126  108C  349A               	retlw	154
  5127  108D  3400               	retlw	0
  5128  108E  349B               	retlw	155
  5129  108F  3400               	retlw	0
  5130  1090  349F               	retlw	159
  5131  1091  3400               	retlw	0
  5132  1092  34A5               	retlw	165
  5133  1093  3400               	retlw	0
  5134  1094  34AD               	retlw	173
  5135  1095  3400               	retlw	0
  5136  1096  34B8               	retlw	184
  5137  1097  3400               	retlw	0
  5138  1098  34C4               	retlw	196
  5139  1099  3400               	retlw	0
  5140  109A  34D2               	retlw	210
  5141  109B  3400               	retlw	0
  5142  109C  34E0               	retlw	224
  5143  109D  3400               	retlw	0
  5144  109E  34F0               	retlw	240
  5145  109F  3400               	retlw	0
  5146  10A0  3400               	retlw	0
  5147  10A1  3400               	retlw	0
  5148  10A2  3410               	retlw	16
  5149  10A3  3400               	retlw	0
  5150  10A4  3420               	retlw	32
  5151  10A5  3400               	retlw	0
  5152  10A6  342E               	retlw	46
  5153  10A7  3400               	retlw	0
  5154  10A8  343C               	retlw	60
  5155  10A9  3400               	retlw	0
  5156  10AA  3448               	retlw	72
  5157  10AB  3400               	retlw	0
  5158  10AC  3453               	retlw	83
  5159  10AD  3400               	retlw	0
  5160  10AE  345B               	retlw	91
  5161  10AF  3400               	retlw	0
  5162  10B0  3461               	retlw	97
  5163  10B1  3400               	retlw	0
  5164  10B2  3465               	retlw	101
  5165  10B3  3400               	retlw	0
  5166  10B4  3466               	retlw	102
  5167  10B5  3400               	retlw	0
  5168  10B6  3465               	retlw	101
  5169  10B7  3400               	retlw	0
  5170  10B8  3461               	retlw	97
  5171  10B9  3400               	retlw	0
  5172  10BA  345B               	retlw	91
  5173  10BB  3400               	retlw	0
  5174  10BC  3453               	retlw	83
  5175  10BD  3400               	retlw	0
  5176  10BE  3448               	retlw	72
  5177  10BF  3400               	retlw	0
  5178  10C0  343C               	retlw	60
  5179  10C1  3400               	retlw	0
  5180  10C2  342E               	retlw	46
  5181  10C3  3400               	retlw	0
  5182  10C4  3420               	retlw	32
  5183  10C5  3400               	retlw	0
  5184  10C6  3410               	retlw	16
  5185  10C7  3400               	retlw	0
  5186  10C8  3400               	retlw	0
  5187  10C9  3400               	retlw	0
  5188  10CA  34F0               	retlw	240
  5189  10CB  3400               	retlw	0
  5190  10CC  34E0               	retlw	224
  5191  10CD  3400               	retlw	0
  5192  10CE  34D2               	retlw	210
  5193  10CF  3400               	retlw	0
  5194  10D0  34C4               	retlw	196
  5195  10D1  3400               	retlw	0
  5196  10D2  34B8               	retlw	184
  5197  10D3  3400               	retlw	0
  5198  10D4  34AD               	retlw	173
  5199  10D5  3400               	retlw	0
  5200  10D6  34A5               	retlw	165
  5201  10D7  3400               	retlw	0
  5202  10D8  349F               	retlw	159
  5203  10D9  3400               	retlw	0
  5204  10DA  349B               	retlw	155
  5205  10DB  3400               	retlw	0
  5206  10DC  349A               	retlw	154
  5207  10DD  3400               	retlw	0
  5208  10DE  349B               	retlw	155
  5209  10DF  3400               	retlw	0
  5210  10E0  349F               	retlw	159
  5211  10E1  3400               	retlw	0
  5212  10E2  34A5               	retlw	165
  5213  10E3  3400               	retlw	0
  5214  10E4  34AD               	retlw	173
  5215  10E5  3400               	retlw	0
  5216  10E6  34B8               	retlw	184
  5217  10E7  3400               	retlw	0
  5218  10E8  34C4               	retlw	196
  5219  10E9  3400               	retlw	0
  5220  10EA  34D2               	retlw	210
  5221  10EB  3400               	retlw	0
  5222  10EC  34E0               	retlw	224
  5223  10ED  3400               	retlw	0
  5224  10EE  34F0               	retlw	240
  5225  10EF  3400               	retlw	0
  5226  10F0  3400               	retlw	0
  5227  10F1  3400               	retlw	0
  5228  10F2                     __end_ofdrv2665@drv_sine:	
  5229                           
  5230                           	psect	stringtext2
  5231  10F2                     __pstringtext2:	
  5232  10F2                     _drv_sine:	
  5233  10F2  3400               	retlw	0
  5234  10F3  3400               	retlw	0
  5235  10F4  3410               	retlw	16
  5236  10F5  3400               	retlw	0
  5237  10F6  3420               	retlw	32
  5238  10F7  3400               	retlw	0
  5239  10F8  342E               	retlw	46
  5240  10F9  3400               	retlw	0
  5241  10FA  343C               	retlw	60
  5242  10FB  3400               	retlw	0
  5243  10FC  3448               	retlw	72
  5244  10FD  3400               	retlw	0
  5245  10FE  3453               	retlw	83
  5246  10FF  3400               	retlw	0
  5247  1100  345B               	retlw	91
  5248  1101  3400               	retlw	0
  5249  1102  3461               	retlw	97
  5250  1103  3400               	retlw	0
  5251  1104  3465               	retlw	101
  5252  1105  3400               	retlw	0
  5253  1106  3466               	retlw	102
  5254  1107  3400               	retlw	0
  5255  1108  3465               	retlw	101
  5256  1109  3400               	retlw	0
  5257  110A  3461               	retlw	97
  5258  110B  3400               	retlw	0
  5259  110C  345B               	retlw	91
  5260  110D  3400               	retlw	0
  5261  110E  3453               	retlw	83
  5262  110F  3400               	retlw	0
  5263  1110  3448               	retlw	72
  5264  1111  3400               	retlw	0
  5265  1112  343C               	retlw	60
  5266  1113  3400               	retlw	0
  5267  1114  342E               	retlw	46
  5268  1115  3400               	retlw	0
  5269  1116  3420               	retlw	32
  5270  1117  3400               	retlw	0
  5271  1118  3410               	retlw	16
  5272  1119  3400               	retlw	0
  5273  111A  3400               	retlw	0
  5274  111B  3400               	retlw	0
  5275  111C  34F0               	retlw	240
  5276  111D  3400               	retlw	0
  5277  111E  34E0               	retlw	224
  5278  111F  3400               	retlw	0
  5279  1120  34D2               	retlw	210
  5280  1121  3400               	retlw	0
  5281  1122  34C4               	retlw	196
  5282  1123  3400               	retlw	0
  5283  1124  34B8               	retlw	184
  5284  1125  3400               	retlw	0
  5285  1126  34AD               	retlw	173
  5286  1127  3400               	retlw	0
  5287  1128  34A5               	retlw	165
  5288  1129  3400               	retlw	0
  5289  112A  349F               	retlw	159
  5290  112B  3400               	retlw	0
  5291  112C  349B               	retlw	155
  5292  112D  3400               	retlw	0
  5293  112E  349A               	retlw	154
  5294  112F  3400               	retlw	0
  5295  1130  349B               	retlw	155
  5296  1131  3400               	retlw	0
  5297  1132  349F               	retlw	159
  5298  1133  3400               	retlw	0
  5299  1134  34A5               	retlw	165
  5300  1135  3400               	retlw	0
  5301  1136  34AD               	retlw	173
  5302  1137  3400               	retlw	0
  5303  1138  34B8               	retlw	184
  5304  1139  3400               	retlw	0
  5305  113A  34C4               	retlw	196
  5306  113B  3400               	retlw	0
  5307  113C  34D2               	retlw	210
  5308  113D  3400               	retlw	0
  5309  113E  34E0               	retlw	224
  5310  113F  3400               	retlw	0
  5311  1140  34F0               	retlw	240
  5312  1141  3400               	retlw	0
  5313  1142  3400               	retlw	0
  5314  1143  3400               	retlw	0
  5315  1144  3410               	retlw	16
  5316  1145  3400               	retlw	0
  5317  1146  3420               	retlw	32
  5318  1147  3400               	retlw	0
  5319  1148  342E               	retlw	46
  5320  1149  3400               	retlw	0
  5321  114A  343C               	retlw	60
  5322  114B  3400               	retlw	0
  5323  114C  3448               	retlw	72
  5324  114D  3400               	retlw	0
  5325  114E  3453               	retlw	83
  5326  114F  3400               	retlw	0
  5327  1150  345B               	retlw	91
  5328  1151  3400               	retlw	0
  5329  1152  3461               	retlw	97
  5330  1153  3400               	retlw	0
  5331  1154  3465               	retlw	101
  5332  1155  3400               	retlw	0
  5333  1156  3466               	retlw	102
  5334  1157  3400               	retlw	0
  5335  1158  3465               	retlw	101
  5336  1159  3400               	retlw	0
  5337  115A  3461               	retlw	97
  5338  115B  3400               	retlw	0
  5339  115C  345B               	retlw	91
  5340  115D  3400               	retlw	0
  5341  115E  3453               	retlw	83
  5342  115F  3400               	retlw	0
  5343  1160  3448               	retlw	72
  5344  1161  3400               	retlw	0
  5345  1162  343C               	retlw	60
  5346  1163  3400               	retlw	0
  5347  1164  342E               	retlw	46
  5348  1165  3400               	retlw	0
  5349  1166  3420               	retlw	32
  5350  1167  3400               	retlw	0
  5351  1168  3410               	retlw	16
  5352  1169  3400               	retlw	0
  5353  116A  3400               	retlw	0
  5354  116B  3400               	retlw	0
  5355  116C  34F0               	retlw	240
  5356  116D  3400               	retlw	0
  5357  116E  34E0               	retlw	224
  5358  116F  3400               	retlw	0
  5359  1170  34D2               	retlw	210
  5360  1171  3400               	retlw	0
  5361  1172  34C4               	retlw	196
  5362  1173  3400               	retlw	0
  5363  1174  34B8               	retlw	184
  5364  1175  3400               	retlw	0
  5365  1176  34AD               	retlw	173
  5366  1177  3400               	retlw	0
  5367  1178  34A5               	retlw	165
  5368  1179  3400               	retlw	0
  5369  117A  349F               	retlw	159
  5370  117B  3400               	retlw	0
  5371  117C  349B               	retlw	155
  5372  117D  3400               	retlw	0
  5373  117E  349A               	retlw	154
  5374  117F  3400               	retlw	0
  5375  1180  349B               	retlw	155
  5376  1181  3400               	retlw	0
  5377  1182  349F               	retlw	159
  5378  1183  3400               	retlw	0
  5379  1184  34A5               	retlw	165
  5380  1185  3400               	retlw	0
  5381  1186  34AD               	retlw	173
  5382  1187  3400               	retlw	0
  5383  1188  34B8               	retlw	184
  5384  1189  3400               	retlw	0
  5385  118A  34C4               	retlw	196
  5386  118B  3400               	retlw	0
  5387  118C  34D2               	retlw	210
  5388  118D  3400               	retlw	0
  5389  118E  34E0               	retlw	224
  5390  118F  3400               	retlw	0
  5391  1190  34F0               	retlw	240
  5392  1191  3400               	retlw	0
  5393  1192  3400               	retlw	0
  5394  1193  3400               	retlw	0
  5395  1194  3410               	retlw	16
  5396  1195  3400               	retlw	0
  5397  1196  3420               	retlw	32
  5398  1197  3400               	retlw	0
  5399  1198  342E               	retlw	46
  5400  1199  3400               	retlw	0
  5401  119A  343C               	retlw	60
  5402  119B  3400               	retlw	0
  5403  119C  3448               	retlw	72
  5404  119D  3400               	retlw	0
  5405  119E  3453               	retlw	83
  5406  119F  3400               	retlw	0
  5407  11A0  345B               	retlw	91
  5408  11A1  3400               	retlw	0
  5409  11A2  3461               	retlw	97
  5410  11A3  3400               	retlw	0
  5411  11A4  3465               	retlw	101
  5412  11A5  3400               	retlw	0
  5413  11A6  3466               	retlw	102
  5414  11A7  3400               	retlw	0
  5415  11A8  3465               	retlw	101
  5416  11A9  3400               	retlw	0
  5417  11AA  3461               	retlw	97
  5418  11AB  3400               	retlw	0
  5419  11AC  345B               	retlw	91
  5420  11AD  3400               	retlw	0
  5421  11AE  3453               	retlw	83
  5422  11AF  3400               	retlw	0
  5423  11B0  3448               	retlw	72
  5424  11B1  3400               	retlw	0
  5425  11B2  343C               	retlw	60
  5426  11B3  3400               	retlw	0
  5427  11B4  342E               	retlw	46
  5428  11B5  3400               	retlw	0
  5429  11B6  3420               	retlw	32
  5430  11B7  3400               	retlw	0
  5431  11B8  3410               	retlw	16
  5432  11B9  3400               	retlw	0
  5433  11BA  3400               	retlw	0
  5434  11BB  3400               	retlw	0
  5435  11BC  34F0               	retlw	240
  5436  11BD  3400               	retlw	0
  5437  11BE  34E0               	retlw	224
  5438  11BF  3400               	retlw	0
  5439  11C0  34D2               	retlw	210
  5440  11C1  3400               	retlw	0
  5441  11C2  34C4               	retlw	196
  5442  11C3  3400               	retlw	0
  5443  11C4  34B8               	retlw	184
  5444  11C5  3400               	retlw	0
  5445  11C6  34AD               	retlw	173
  5446  11C7  3400               	retlw	0
  5447  11C8  34A5               	retlw	165
  5448  11C9  3400               	retlw	0
  5449  11CA  349F               	retlw	159
  5450  11CB  3400               	retlw	0
  5451  11CC  349B               	retlw	155
  5452  11CD  3400               	retlw	0
  5453  11CE  349A               	retlw	154
  5454  11CF  3400               	retlw	0
  5455  11D0  349B               	retlw	155
  5456  11D1  3400               	retlw	0
  5457  11D2  349F               	retlw	159
  5458  11D3  3400               	retlw	0
  5459  11D4  34A5               	retlw	165
  5460  11D5  3400               	retlw	0
  5461  11D6  34AD               	retlw	173
  5462  11D7  3400               	retlw	0
  5463  11D8  34B8               	retlw	184
  5464  11D9  3400               	retlw	0
  5465  11DA  34C4               	retlw	196
  5466  11DB  3400               	retlw	0
  5467  11DC  34D2               	retlw	210
  5468  11DD  3400               	retlw	0
  5469  11DE  34E0               	retlw	224
  5470  11DF  3400               	retlw	0
  5471  11E0  34F0               	retlw	240
  5472  11E1  3400               	retlw	0
  5473  11E2  3400               	retlw	0
  5474  11E3  3400               	retlw	0
  5475  11E4                     __end_of_drv_sine:	
  5476                           
  5477                           	psect	stringtext3
  5478  1800                     __pstringtext3:	
  5479  1800                     drv2665@drv_fifo_sine:	
  5480  1800  340B               	retlw	11
  5481  1801  3400               	retlw	0
  5482  1802  3410               	retlw	16
  5483  1803  3420               	retlw	32
  5484  1804  342E               	retlw	46
  5485  1805  343C               	retlw	60
  5486  1806  3448               	retlw	72
  5487  1807  3453               	retlw	83
  5488  1808  345B               	retlw	91
  5489  1809  3461               	retlw	97
  5490  180A  3465               	retlw	101
  5491  180B  3466               	retlw	102
  5492  180C  3465               	retlw	101
  5493  180D  3461               	retlw	97
  5494  180E  345B               	retlw	91
  5495  180F  3453               	retlw	83
  5496  1810  3448               	retlw	72
  5497  1811  343C               	retlw	60
  5498  1812  342E               	retlw	46
  5499  1813  3420               	retlw	32
  5500  1814  3410               	retlw	16
  5501  1815  3400               	retlw	0
  5502  1816  34F0               	retlw	240
  5503  1817  34E0               	retlw	224
  5504  1818  34D2               	retlw	210
  5505  1819  34C4               	retlw	196
  5506  181A  34B8               	retlw	184
  5507  181B  34AD               	retlw	173
  5508  181C  34A5               	retlw	165
  5509  181D  349F               	retlw	159
  5510  181E  349B               	retlw	155
  5511  181F  349A               	retlw	154
  5512  1820  349B               	retlw	155
  5513  1821  349F               	retlw	159
  5514  1822  34A5               	retlw	165
  5515  1823  34AD               	retlw	173
  5516  1824  34B8               	retlw	184
  5517  1825  34C4               	retlw	196
  5518  1826  34D2               	retlw	210
  5519  1827  34E0               	retlw	224
  5520  1828  34F0               	retlw	240
  5521  1829  3400               	retlw	0
  5522  182A  3410               	retlw	16
  5523  182B  3420               	retlw	32
  5524  182C  342E               	retlw	46
  5525  182D  343C               	retlw	60
  5526  182E  3448               	retlw	72
  5527  182F  3453               	retlw	83
  5528  1830  345B               	retlw	91
  5529  1831  3461               	retlw	97
  5530  1832  3465               	retlw	101
  5531  1833  3466               	retlw	102
  5532  1834  3465               	retlw	101
  5533  1835  3461               	retlw	97
  5534  1836  345B               	retlw	91
  5535  1837  3453               	retlw	83
  5536  1838  3448               	retlw	72
  5537  1839  343C               	retlw	60
  5538  183A  342E               	retlw	46
  5539  183B  3420               	retlw	32
  5540  183C  3410               	retlw	16
  5541  183D  3400               	retlw	0
  5542  183E  34F0               	retlw	240
  5543  183F  34E0               	retlw	224
  5544  1840  34D2               	retlw	210
  5545  1841  34C4               	retlw	196
  5546  1842  34B8               	retlw	184
  5547  1843  34AD               	retlw	173
  5548  1844  34A5               	retlw	165
  5549  1845  349F               	retlw	159
  5550  1846  349B               	retlw	155
  5551  1847  349A               	retlw	154
  5552  1848  349B               	retlw	155
  5553  1849  349F               	retlw	159
  5554  184A  34A5               	retlw	165
  5555  184B  34AD               	retlw	173
  5556  184C  34B8               	retlw	184
  5557  184D  34C4               	retlw	196
  5558  184E  34D2               	retlw	210
  5559  184F  34E0               	retlw	224
  5560  1850  34F0               	retlw	240
  5561  1851  3400               	retlw	0
  5562  1852  3410               	retlw	16
  5563  1853  3420               	retlw	32
  5564  1854  342E               	retlw	46
  5565  1855  343C               	retlw	60
  5566  1856  3448               	retlw	72
  5567  1857  3453               	retlw	83
  5568  1858  345B               	retlw	91
  5569  1859  3461               	retlw	97
  5570  185A  3465               	retlw	101
  5571  185B  3466               	retlw	102
  5572  185C  3465               	retlw	101
  5573  185D  3461               	retlw	97
  5574  185E  345B               	retlw	91
  5575  185F  3453               	retlw	83
  5576  1860  3448               	retlw	72
  5577  1861  343C               	retlw	60
  5578  1862  342E               	retlw	46
  5579  1863  3420               	retlw	32
  5580  1864  3410               	retlw	16
  5581  1865  3400               	retlw	0
  5582  1866  34F0               	retlw	240
  5583  1867  34E0               	retlw	224
  5584  1868  34D2               	retlw	210
  5585  1869  34C4               	retlw	196
  5586  186A  34B8               	retlw	184
  5587  186B  34AD               	retlw	173
  5588  186C  34A5               	retlw	165
  5589  186D  349F               	retlw	159
  5590  186E  349B               	retlw	155
  5591  186F  349A               	retlw	154
  5592  1870  349B               	retlw	155
  5593  1871  349F               	retlw	159
  5594  1872  34A5               	retlw	165
  5595  1873  34AD               	retlw	173
  5596  1874  34B8               	retlw	184
  5597  1875  34C4               	retlw	196
  5598  1876  34D2               	retlw	210
  5599  1877  34E0               	retlw	224
  5600  1878  34F0               	retlw	240
  5601  1879  3400               	retlw	0
  5602  187A                     __end_ofdrv2665@drv_fifo_sine:	
  5603                           
  5604                           	psect	stringtext4
  5605  187A                     __pstringtext4:	
  5606  187A                     _drv_fifo_sine:	
  5607  187A  340B               	retlw	11
  5608  187B  3400               	retlw	0
  5609  187C  3410               	retlw	16
  5610  187D  3420               	retlw	32
  5611  187E  342E               	retlw	46
  5612  187F  343C               	retlw	60
  5613  1880  3448               	retlw	72
  5614  1881  3453               	retlw	83
  5615  1882  345B               	retlw	91
  5616  1883  3461               	retlw	97
  5617  1884  3465               	retlw	101
  5618  1885  3466               	retlw	102
  5619  1886  3465               	retlw	101
  5620  1887  3461               	retlw	97
  5621  1888  345B               	retlw	91
  5622  1889  3453               	retlw	83
  5623  188A  3448               	retlw	72
  5624  188B  343C               	retlw	60
  5625  188C  342E               	retlw	46
  5626  188D  3420               	retlw	32
  5627  188E  3410               	retlw	16
  5628  188F  3400               	retlw	0
  5629  1890  34F0               	retlw	240
  5630  1891  34E0               	retlw	224
  5631  1892  34D2               	retlw	210
  5632  1893  34C4               	retlw	196
  5633  1894  34B8               	retlw	184
  5634  1895  34AD               	retlw	173
  5635  1896  34A5               	retlw	165
  5636  1897  349F               	retlw	159
  5637  1898  349B               	retlw	155
  5638  1899  349A               	retlw	154
  5639  189A  349B               	retlw	155
  5640  189B  349F               	retlw	159
  5641  189C  34A5               	retlw	165
  5642  189D  34AD               	retlw	173
  5643  189E  34B8               	retlw	184
  5644  189F  34C4               	retlw	196
  5645  18A0  34D2               	retlw	210
  5646  18A1  34E0               	retlw	224
  5647  18A2  34F0               	retlw	240
  5648  18A3  3400               	retlw	0
  5649  18A4  3410               	retlw	16
  5650  18A5  3420               	retlw	32
  5651  18A6  342E               	retlw	46
  5652  18A7  343C               	retlw	60
  5653  18A8  3448               	retlw	72
  5654  18A9  3453               	retlw	83
  5655  18AA  345B               	retlw	91
  5656  18AB  3461               	retlw	97
  5657  18AC  3465               	retlw	101
  5658  18AD  3466               	retlw	102
  5659  18AE  3465               	retlw	101
  5660  18AF  3461               	retlw	97
  5661  18B0  345B               	retlw	91
  5662  18B1  3453               	retlw	83
  5663  18B2  3448               	retlw	72
  5664  18B3  343C               	retlw	60
  5665  18B4  342E               	retlw	46
  5666  18B5  3420               	retlw	32
  5667  18B6  3410               	retlw	16
  5668  18B7  3400               	retlw	0
  5669  18B8  34F0               	retlw	240
  5670  18B9  34E0               	retlw	224
  5671  18BA  34D2               	retlw	210
  5672  18BB  34C4               	retlw	196
  5673  18BC  34B8               	retlw	184
  5674  18BD  34AD               	retlw	173
  5675  18BE  34A5               	retlw	165
  5676  18BF  349F               	retlw	159
  5677  18C0  349B               	retlw	155
  5678  18C1  349A               	retlw	154
  5679  18C2  349B               	retlw	155
  5680  18C3  349F               	retlw	159
  5681  18C4  34A5               	retlw	165
  5682  18C5  34AD               	retlw	173
  5683  18C6  34B8               	retlw	184
  5684  18C7  34C4               	retlw	196
  5685  18C8  34D2               	retlw	210
  5686  18C9  34E0               	retlw	224
  5687  18CA  34F0               	retlw	240
  5688  18CB  3400               	retlw	0
  5689  18CC  3410               	retlw	16
  5690  18CD  3420               	retlw	32
  5691  18CE  342E               	retlw	46
  5692  18CF  343C               	retlw	60
  5693  18D0  3448               	retlw	72
  5694  18D1  3453               	retlw	83
  5695  18D2  345B               	retlw	91
  5696  18D3  3461               	retlw	97
  5697  18D4  3465               	retlw	101
  5698  18D5  3466               	retlw	102
  5699  18D6  3465               	retlw	101
  5700  18D7  3461               	retlw	97
  5701  18D8  345B               	retlw	91
  5702  18D9  3453               	retlw	83
  5703  18DA  3448               	retlw	72
  5704  18DB  343C               	retlw	60
  5705  18DC  342E               	retlw	46
  5706  18DD  3420               	retlw	32
  5707  18DE  3410               	retlw	16
  5708  18DF  3400               	retlw	0
  5709  18E0  34F0               	retlw	240
  5710  18E1  34E0               	retlw	224
  5711  18E2  34D2               	retlw	210
  5712  18E3  34C4               	retlw	196
  5713  18E4  34B8               	retlw	184
  5714  18E5  34AD               	retlw	173
  5715  18E6  34A5               	retlw	165
  5716  18E7  349F               	retlw	159
  5717  18E8  349B               	retlw	155
  5718  18E9  349A               	retlw	154
  5719  18EA  349B               	retlw	155
  5720  18EB  349F               	retlw	159
  5721  18EC  34A5               	retlw	165
  5722  18ED  34AD               	retlw	173
  5723  18EE  34B8               	retlw	184
  5724  18EF  34C4               	retlw	196
  5725  18F0  34D2               	retlw	210
  5726  18F1  34E0               	retlw	224
  5727  18F2  34F0               	retlw	240
  5728  18F3  3400               	retlw	0
  5729  18F4                     __end_of_drv_fifo_sine:	
  5730                           
  5731                           	psect	stringtext5
  5732  2800                     __pstringtext5:	
  5733  2800                     _dpowers:	
  5734  2800  3401               	retlw	1
  5735  2801  3400               	retlw	0
  5736  2802  3400               	retlw	0
  5737  2803  3400               	retlw	0
  5738  2804  340A               	retlw	10
  5739  2805  3400               	retlw	0
  5740  2806  3400               	retlw	0
  5741  2807  3400               	retlw	0
  5742  2808  3464               	retlw	100
  5743  2809  3400               	retlw	0
  5744  280A  3400               	retlw	0
  5745  280B  3400               	retlw	0
  5746  280C  34E8               	retlw	232
  5747  280D  3403               	retlw	3
  5748  280E  3400               	retlw	0
  5749  280F  3400               	retlw	0
  5750  2810  3410               	retlw	16
  5751  2811  3427               	retlw	39
  5752  2812  3400               	retlw	0
  5753  2813  3400               	retlw	0
  5754  2814  34A0               	retlw	160
  5755  2815  3486               	retlw	134
  5756  2816  3401               	retlw	1
  5757  2817  3400               	retlw	0
  5758  2818  3440               	retlw	64
  5759  2819  3442               	retlw	66
  5760  281A  340F               	retlw	15
  5761  281B  3400               	retlw	0
  5762  281C  3480               	retlw	128
  5763  281D  3496               	retlw	150
  5764  281E  3498               	retlw	152
  5765  281F  3400               	retlw	0
  5766  2820  3400               	retlw	0
  5767  2821  34E1               	retlw	225
  5768  2822  34F5               	retlw	245
  5769  2823  3405               	retlw	5
  5770  2824  3400               	retlw	0
  5771  2825  34CA               	retlw	202
  5772  2826  349A               	retlw	154
  5773  2827  343B               	retlw	59
  5774  2828                     __end_of_dpowers:	
  5775                           
  5776                           	psect	stringtext6
  5777  3040                     __pstringtext6:	
  5778  3040                     _TMR2_RANGE:	
  5779  3040  3400               	retlw	0
  5780  3041  34C8               	retlw	200
  5781  3042  343F               	retlw	63
  5782  3043                     __end_of_TMR2_RANGE:	
  5783                           
  5784                           	psect	stringtext7
  5785  3043                     __pstringtext7:	
  5786  3043                     _TMR0_RANGE:	
  5787  3043  3400               	retlw	0
  5788  3044  34C8               	retlw	200
  5789  3045  343D               	retlw	61
  5790  3046                     __end_of_TMR0_RANGE:	
  5791                           
  5792                           	psect	stringtext8
  5793  3052                     __pstringtext8:	
  5794  3052                     _LEDpower:	
  5795  3052  343F               	retlw	63
  5796  3053  3400               	retlw	0
  5797  3054                     __end_of_LEDpower:	
  5798                           
  5799                           	psect	stringtext9
  5800  3056                     __pstringtext9:	
  5801  3056                     _drv_address:	
  5802  3056  3459               	retlw	89
  5803  3057                     __end_of_drv_address:	
  5804                           
  5805                           	psect	stringtext10
  5806  291F                     __pstringtext10:	
  5807  291F                     sin@coeff_a:	
  5808  291F  34F4               	retlw	244
  5809  2920  344A               	retlw	74
  5810  2921  3448               	retlw	72
  5811  2922  3495               	retlw	149
  5812  2923  3495               	retlw	149
  5813  2924  34C7               	retlw	199
  5814  2925  34C1               	retlw	193
  5815  2926  34DC               	retlw	220
  5816  2927  3445               	retlw	69
  5817  2928  34DC               	retlw	220
  5818  2929  346D               	retlw	109
  5819  292A  34C3               	retlw	195
  5820  292B  34B3               	retlw	179
  5821  292C  3433               	retlw	51
  5822  292D  3440               	retlw	64
  5823  292E                     __end_ofsin@coeff_a:	
  5824                           
  5825                           	psect	stringtext11
  5826  2967                     __pstringtext11:	
  5827  2967                     sin@coeff_b:	
  5828  2967  3434               	retlw	52
  5829  2968  3401               	retlw	1
  5830  2969  3448               	retlw	72
  5831  296A  349D               	retlw	157
  5832  296B  34B0               	retlw	176
  5833  296C  3445               	retlw	69
  5834  296D  3400               	retlw	0
  5835  296E  34DA               	retlw	218
  5836  296F  3442               	retlw	66
  5837  2970  3400               	retlw	0
  5838  2971  3480               	retlw	128
  5839  2972  343F               	retlw	63
  5840  2973                     __end_ofsin@coeff_b:	
  5841                           
  5842                           	psect	nvBANK0
  5843  005E                     __pnvBANK0:	
  5844  005E                     _eusartTxBufferRemaining:	
  5845  005E                     	ds	1
  5846                           
  5847                           	psect	nvBANK3
  5848  01E2                     __pnvBANK3:	
  5849  01E2                     _TMR4_InterruptHandler:	
  5850  01E2                     	ds	2
  5851  01E4                     _TMR2_InterruptHandler:	
  5852  01E4                     	ds	2
  5853  01E6                     _TMR0_InterruptHandler:	
  5854  01E6                     	ds	2
  5855  001F                     _T2CONbits	set	31
  5856  001F                     _T2CON	set	31
  5857  001D                     _TMR2	set	29
  5858  001E                     _PR2	set	30
  5859  0017                     _T0CON0bits	set	23
  5860  0017                     _T0CON0	set	23
  5861  0015                     _TMR0L	set	21
  5862  0016                     _TMR0H	set	22
  5863  0018                     _T0CON1	set	24
  5864  0012                     _PIR2bits	set	18
  5865  0011                     _PIR1bits	set	17
  5866  0010                     _PIR0bits	set	16
  5867  000E                     _PORTCbits	set	14
  5868  000B                     _INTCONbits	set	11
  5869  0092                     _PIE2bits	set	146
  5870  0091                     _PIE1bits	set	145
  5871  0090                     _PIE0bits	set	144
  5872  008E                     _TRISC	set	142
  5873  008D                     _TRISB	set	141
  5874  008C                     _TRISA	set	140
  5875  0097                     _WDTCON	set	151
  5876  010C                     _LATAbits	set	268
  5877  010E                     _LATCbits	set	270
  5878  010D                     _LATBbits	set	269
  5879  010E                     _LATC	set	270
  5880  010D                     _LATB	set	269
  5881  010C                     _LATA	set	268
  5882  0199                     _RC1REG	set	409
  5883  019D                     _RC1STAbits	set	413
  5884  019A                     _TX1REG	set	410
  5885  019C                     _SP1BRGH	set	412
  5886  019B                     _SP1BRGL	set	411
  5887  019E                     _TX1STA	set	414
  5888  019D                     _RC1STA	set	413
  5889  019F                     _BAUD1CON	set	415
  5890  018C                     _ANSELA	set	396
  5891  018D                     _ANSELB	set	397
  5892  018E                     _ANSELC	set	398
  5893  0214                     _SSP1STATbits	set	532
  5894  0213                     _SSP1MSK	set	531
  5895  0211                     _SSP1BUF	set	529
  5896  0216                     _SSP1CON2bits	set	534
  5897  0212                     _SSP1ADD	set	530
  5898  0216                     _SSP1CON2	set	534
  5899  0215                     _SSP1CON1	set	533
  5900  0214                     _SSP1STAT	set	532
  5901  0215                     _SSP1CON1bits	set	533
  5902  020E                     _WPUC	set	526
  5903  020C                     _WPUA	set	524
  5904  020D                     _WPUB	set	525
  5905  028E                     _ODCONC	set	654
  5906  028D                     _ODCONB	set	653
  5907  028C                     _ODCONA	set	652
  5908  0417                     _T4CONbits	set	1047
  5909  0417                     _T4CON	set	1047
  5910  0415                     _TMR4	set	1045
  5911  0416                     _PR4	set	1046
  5912  0896                     _NVMCON2	set	2198
  5913  0893                     _NVMDATL	set	2195
  5914  0894                     _NVMDATH	set	2196
  5915  0895                     _NVMCON1bits	set	2197
  5916  0892                     _NVMADRH	set	2194
  5917  0891                     _NVMADRL	set	2193
  5918  0916                     _PMD5	set	2326
  5919  0915                     _PMD4	set	2325
  5920  0914                     _PMD3	set	2324
  5921  0913                     _PMD2	set	2323
  5922  0912                     _PMD1	set	2322
  5923  0911                     _PMD0	set	2321
  5924  091E                     _OSCTUNE	set	2334
  5925  091F                     _OSCFRQ	set	2335
  5926  091D                     _OSCEN	set	2333
  5927  091B                     _OSCCON3	set	2331
  5928  0919                     _OSCCON1	set	2329
  5929  0E24                     _RXPPSbits	set	3620
  5930  0E20                     _SSP1CLKPPSbits	set	3616
  5931  0E21                     _SSP1DATPPSbits	set	3617
  5932  0E9D                     _RB5PPSbits	set	3741
  5933  0E9E                     _RB6PPSbits	set	3742
  5934  0E9F                     _RB7PPSbits	set	3743
  5935                           
  5936                           	psect	stringtext12
  5937  2828                     __pstringtext12:	
  5938  2828                     STR_43:	
  5939  2828  340A               	retlw	10
  5940  2829  3474               	retlw	116	;'t'
  5941  282A  3465               	retlw	101	;'e'
  5942  282B  3473               	retlw	115	;'s'
  5943  282C  3474               	retlw	116	;'t'
  5944  282D  3469               	retlw	105	;'i'
  5945  282E  346E               	retlw	110	;'n'
  5946  282F  3467               	retlw	103	;'g'
  5947  2830  3420               	retlw	32	;' '
  5948  2831  3462               	retlw	98	;'b'
  5949  2832  346F               	retlw	111	;'o'
  5950  2833  3474               	retlw	116	;'t'
  5951  2834  3474               	retlw	116	;'t'
  5952  2835  346F               	retlw	111	;'o'
  5953  2836  346D               	retlw	109	;'m'
  5954  2837  3420               	retlw	32	;' '
  5955  2838  344C               	retlw	76	;'L'
  5956  2839  3445               	retlw	69	;'E'
  5957  283A  3444               	retlw	68	;'D'
  5958  283B  3420               	retlw	32	;' '
  5959  283C  3464               	retlw	100	;'d'
  5960  283D  3472               	retlw	114	;'r'
  5961  283E  3469               	retlw	105	;'i'
  5962  283F  3476               	retlw	118	;'v'
  5963  2840  3465               	retlw	101	;'e'
  5964  2841  3472               	retlw	114	;'r'
  5965  2842  342E               	retlw	46	;'.'
  5966  2843  342E               	retlw	46	;'.'
  5967  2844  342E               	retlw	46	;'.'
  5968  2845  340A               	retlw	10
  5969  2846  3400               	retlw	0
  5970                           
  5971                           	psect	stringtext13
  5972  2847                     __pstringtext13:	
  5973  2847                     STR_37:	
  5974  2847  340A               	retlw	10
  5975  2848  342D               	retlw	45	;'-'
  5976  2849  342D               	retlw	45	;'-'
  5977  284A  342D               	retlw	45	;'-'
  5978  284B  342D               	retlw	45	;'-'
  5979  284C  3473               	retlw	115	;'s'
  5980  284D  3474               	retlw	116	;'t'
  5981  284E  3461               	retlw	97	;'a'
  5982  284F  3472               	retlw	114	;'r'
  5983  2850  3474               	retlw	116	;'t'
  5984  2851  3469               	retlw	105	;'i'
  5985  2852  346E               	retlw	110	;'n'
  5986  2853  3467               	retlw	103	;'g'
  5987  2854  3420               	retlw	32	;' '
  5988  2855  3463               	retlw	99	;'c'
  5989  2856  346F               	retlw	111	;'o'
  5990  2857  346D               	retlw	109	;'m'
  5991  2858  346D               	retlw	109	;'m'
  5992  2859  3420               	retlw	32	;' '
  5993  285A  3474               	retlw	116	;'t'
  5994  285B  3465               	retlw	101	;'e'
  5995  285C  3473               	retlw	115	;'s'
  5996  285D  3474               	retlw	116	;'t'
  5997  285E  342D               	retlw	45	;'-'
  5998  285F  342D               	retlw	45	;'-'
  5999  2860  342D               	retlw	45	;'-'
  6000  2861  342D               	retlw	45	;'-'
  6001  2862  340A               	retlw	10
  6002  2863  340A               	retlw	10
  6003  2864  3400               	retlw	0
  6004                           
  6005                           	psect	stringtext14
  6006  2865                     __pstringtext14:	
  6007  2865                     STR_51:	
  6008  2865  342D               	retlw	45	;'-'
  6009  2866  342D               	retlw	45	;'-'
  6010  2867  342D               	retlw	45	;'-'
  6011  2868  342D               	retlw	45	;'-'
  6012  2869  3466               	retlw	102	;'f'
  6013  286A  3469               	retlw	105	;'i'
  6014  286B  346E               	retlw	110	;'n'
  6015  286C  3469               	retlw	105	;'i'
  6016  286D  3473               	retlw	115	;'s'
  6017  286E  3468               	retlw	104	;'h'
  6018  286F  3465               	retlw	101	;'e'
  6019  2870  3464               	retlw	100	;'d'
  6020  2871  3420               	retlw	32	;' '
  6021  2872  3463               	retlw	99	;'c'
  6022  2873  346F               	retlw	111	;'o'
  6023  2874  346D               	retlw	109	;'m'
  6024  2875  346D               	retlw	109	;'m'
  6025  2876  3420               	retlw	32	;' '
  6026  2877  3474               	retlw	116	;'t'
  6027  2878  3465               	retlw	101	;'e'
  6028  2879  3473               	retlw	115	;'s'
  6029  287A  3474               	retlw	116	;'t'
  6030  287B  342D               	retlw	45	;'-'
  6031  287C  342D               	retlw	45	;'-'
  6032  287D  342D               	retlw	45	;'-'
  6033  287E  342D               	retlw	45	;'-'
  6034  287F  340A               	retlw	10
  6035  2880  3400               	retlw	0
  6036                           
  6037                           	psect	stringtext15
  6038  2881                     __pstringtext15:	
  6039  2881                     STR_38:	
  6040  2881  3474               	retlw	116	;'t'
  6041  2882  3465               	retlw	101	;'e'
  6042  2883  3473               	retlw	115	;'s'
  6043  2884  3474               	retlw	116	;'t'
  6044  2885  3469               	retlw	105	;'i'
  6045  2886  346E               	retlw	110	;'n'
  6046  2887  3467               	retlw	103	;'g'
  6047  2888  3420               	retlw	32	;' '
  6048  2889  3474               	retlw	116	;'t'
  6049  288A  346F               	retlw	111	;'o'
  6050  288B  3470               	retlw	112	;'p'
  6051  288C  3420               	retlw	32	;' '
  6052  288D  344C               	retlw	76	;'L'
  6053  288E  3445               	retlw	69	;'E'
  6054  288F  3444               	retlw	68	;'D'
  6055  2890  3420               	retlw	32	;' '
  6056  2891  3464               	retlw	100	;'d'
  6057  2892  3472               	retlw	114	;'r'
  6058  2893  3469               	retlw	105	;'i'
  6059  2894  3476               	retlw	118	;'v'
  6060  2895  3465               	retlw	101	;'e'
  6061  2896  3472               	retlw	114	;'r'
  6062  2897  342E               	retlw	46	;'.'
  6063  2898  342E               	retlw	46	;'.'
  6064  2899  342E               	retlw	46	;'.'
  6065  289A  3400               	retlw	0
  6066                           
  6067                           	psect	stringtext16
  6068  289B                     __pstringtext16:	
  6069  289B                     STR_48:	
  6070  289B  340A               	retlw	10
  6071  289C  3474               	retlw	116	;'t'
  6072  289D  3465               	retlw	101	;'e'
  6073  289E  3473               	retlw	115	;'s'
  6074  289F  3474               	retlw	116	;'t'
  6075  28A0  3469               	retlw	105	;'i'
  6076  28A1  346E               	retlw	110	;'n'
  6077  28A2  3467               	retlw	103	;'g'
  6078  28A3  3420               	retlw	32	;' '
  6079  28A4  3470               	retlw	112	;'p'
  6080  28A5  3469               	retlw	105	;'i'
  6081  28A6  3465               	retlw	101	;'e'
  6082  28A7  347A               	retlw	122	;'z'
  6083  28A8  346F               	retlw	111	;'o'
  6084  28A9  3420               	retlw	32	;' '
  6085  28AA  3464               	retlw	100	;'d'
  6086  28AB  3472               	retlw	114	;'r'
  6087  28AC  3469               	retlw	105	;'i'
  6088  28AD  3476               	retlw	118	;'v'
  6089  28AE  3465               	retlw	101	;'e'
  6090  28AF  3472               	retlw	114	;'r'
  6091  28B0  342E               	retlw	46	;'.'
  6092  28B1  342E               	retlw	46	;'.'
  6093  28B2  342E               	retlw	46	;'.'
  6094  28B3  3400               	retlw	0
  6095                           
  6096                           	psect	stringtext17
  6097  28B4                     __pstringtext17:	
  6098  28B4                     STR_84:	
  6099  28B4  3455               	retlw	85	;'U'
  6100  28B5  344E               	retlw	78	;'N'
  6101  28B6  3452               	retlw	82	;'R'
  6102  28B7  3445               	retlw	69	;'E'
  6103  28B8  3443               	retlw	67	;'C'
  6104  28B9  344F               	retlw	79	;'O'
  6105  28BA  3447               	retlw	71	;'G'
  6106  28BB  344E               	retlw	78	;'N'
  6107  28BC  3449               	retlw	73	;'I'
  6108  28BD  345A               	retlw	90	;'Z'
  6109  28BE  3445               	retlw	69	;'E'
  6110  28BF  3444               	retlw	68	;'D'
  6111  28C0  3420               	retlw	32	;' '
  6112  28C1  3443               	retlw	67	;'C'
  6113  28C2  344F               	retlw	79	;'O'
  6114  28C3  344D               	retlw	77	;'M'
  6115  28C4  344D               	retlw	77	;'M'
  6116  28C5  3441               	retlw	65	;'A'
  6117  28C6  344E               	retlw	78	;'N'
  6118  28C7  3444               	retlw	68	;'D'
  6119  28C8  3421               	retlw	33	;'!'
  6120  28C9  340A               	retlw	10
  6121  28CA  3400               	retlw	0
  6122                           
  6123                           	psect	stringtext18
  6124  28CB                     __pstringtext18:	
  6125  28CB                     STR_53:	
  6126  28CB  3464               	retlw	100	;'d'
  6127  28CC  3472               	retlw	114	;'r'
  6128  28CD  3476               	retlw	118	;'v'
  6129  28CE  345F               	retlw	95	;'_'
  6130  28CF  3477               	retlw	119	;'w'
  6131  28D0  3472               	retlw	114	;'r'
  6132  28D1  3469               	retlw	105	;'i'
  6133  28D2  3474               	retlw	116	;'t'
  6134  28D3  3465               	retlw	101	;'e'
  6135  28D4  3420               	retlw	32	;' '
  6136  28D5  3465               	retlw	101	;'e'
  6137  28D6  3472               	retlw	114	;'r'
  6138  28D7  3472               	retlw	114	;'r'
  6139  28D8  346F               	retlw	111	;'o'
  6140  28D9  3472               	retlw	114	;'r'
  6141  28DA  3421               	retlw	33	;'!'
  6142  28DB  340A               	retlw	10
  6143  28DC  3400               	retlw	0
  6144                           
  6145                           	psect	stringtext19
  6146  28DD                     __pstringtext19:	
  6147  28DD                     STR_55:	
  6148  28DD  3464               	retlw	100	;'d'
  6149  28DE  3472               	retlw	114	;'r'
  6150  28DF  3476               	retlw	118	;'v'
  6151  28E0  345F               	retlw	95	;'_'
  6152  28E1  3472               	retlw	114	;'r'
  6153  28E2  3465               	retlw	101	;'e'
  6154  28E3  3461               	retlw	97	;'a'
  6155  28E4  3464               	retlw	100	;'d'
  6156  28E5  3420               	retlw	32	;' '
  6157  28E6  3465               	retlw	101	;'e'
  6158  28E7  3472               	retlw	114	;'r'
  6159  28E8  3472               	retlw	114	;'r'
  6160  28E9  346F               	retlw	111	;'o'
  6161  28EA  3472               	retlw	114	;'r'
  6162  28EB  3421               	retlw	33	;'!'
  6163  28EC  340A               	retlw	10
  6164  28ED  3400               	retlw	0
  6165                           
  6166                           	psect	stringtext20
  6167  28EE                     __pstringtext20:	
  6168  28EE                     STR_52:	
  6169  28EE  3464               	retlw	100	;'d'
  6170  28EF  3472               	retlw	114	;'r'
  6171  28F0  3476               	retlw	118	;'v'
  6172  28F1  3420               	retlw	32	;' '
  6173  28F2  3469               	retlw	105	;'i'
  6174  28F3  346E               	retlw	110	;'n'
  6175  28F4  3469               	retlw	105	;'i'
  6176  28F5  3474               	retlw	116	;'t'
  6177  28F6  3469               	retlw	105	;'i'
  6178  28F7  3461               	retlw	97	;'a'
  6179  28F8  346C               	retlw	108	;'l'
  6180  28F9  3469               	retlw	105	;'i'
  6181  28FA  347A               	retlw	122	;'z'
  6182  28FB  3465               	retlw	101	;'e'
  6183  28FC  3464               	retlw	100	;'d'
  6184  28FD  340A               	retlw	10
  6185  28FE  3400               	retlw	0
  6186                           
  6187                           	psect	stringtext21
  6188  28FF                     __pstringtext21:	
  6189  28FF                     STR_11:	
  6190  28FF  3461               	retlw	97	;'a'
  6191  2900  3462               	retlw	98	;'b'
  6192  2901  3473               	retlw	115	;'s'
  6193  2902  343A               	retlw	58	;':'
  6194  2903  3420               	retlw	32	;' '
  6195  2904  3461               	retlw	97	;'a'
  6196  2905  346C               	retlw	108	;'l'
  6197  2906  346C               	retlw	108	;'l'
  6198  2907  3420               	retlw	32	;' '
  6199  2908  3474               	retlw	116	;'t'
  6200  2909  3468               	retlw	104	;'h'
  6201  290A  3465               	retlw	101	;'e'
  6202  290B  3472               	retlw	114	;'r'
  6203  290C  3465               	retlw	101	;'e'
  6204  290D  340A               	retlw	10
  6205  290E  3400               	retlw	0
  6206                           
  6207                           	psect	stringtext22
  6208  290F                     __pstringtext22:	
  6209  290F                     STR_4:	
  6210  290F  3472               	retlw	114	;'r'
  6211  2910  3465               	retlw	101	;'e'
  6212  2911  3461               	retlw	97	;'a'
  6213  2912  3464               	retlw	100	;'d'
  6214  2913  3420               	retlw	32	;' '
  6215  2914  3464               	retlw	100	;'d'
  6216  2915  3461               	retlw	97	;'a'
  6217  2916  3474               	retlw	116	;'t'
  6218  2917  3461               	retlw	97	;'a'
  6219  2918  343A               	retlw	58	;':'
  6220  2919  3420               	retlw	32	;' '
  6221  291A  3425               	retlw	37	;'%'
  6222  291B  346C               	retlw	108	;'l'
  6223  291C  3475               	retlw	117	;'u'
  6224  291D  340A               	retlw	10
  6225  291E  3400               	retlw	0
  6226                           
  6227                           	psect	stringtext23
  6228  292E                     __pstringtext23:	
  6229  292E                     STR_69:	
  6230  292E  3468               	retlw	104	;'h'
  6231  292F  3465               	retlw	101	;'e'
  6232  2930  3461               	retlw	97	;'a'
  6233  2931  3474               	retlw	116	;'t'
  6234  2932  3465               	retlw	101	;'e'
  6235  2933  3472               	retlw	114	;'r'
  6236  2934  3470               	retlw	112	;'p'
  6237  2935  346F               	retlw	111	;'o'
  6238  2936  3473               	retlw	115	;'s'
  6239  2937  3474               	retlw	116	;'t'
  6240  2938  3474               	retlw	116	;'t'
  6241  2939  3469               	retlw	105	;'i'
  6242  293A  346D               	retlw	109	;'m'
  6243  293B  3465               	retlw	101	;'e'
  6244  293C  3400               	retlw	0
  6245                           
  6246                           	psect	stringtext24
  6247  293D                     __pstringtext24:	
  6248  293D                     STR_5:	
  6249  293D  340A               	retlw	10
  6250  293E  340A               	retlw	10
  6251  293F  3473               	retlw	115	;'s'
  6252  2940  3479               	retlw	121	;'y'
  6253  2941  3473               	retlw	115	;'s'
  6254  2942  3474               	retlw	116	;'t'
  6255  2943  3465               	retlw	101	;'e'
  6256  2944  346D               	retlw	109	;'m'
  6257  2945  3420               	retlw	32	;' '
  6258  2946  3464               	retlw	100	;'d'
  6259  2947  346F               	retlw	111	;'o'
  6260  2948  346E               	retlw	110	;'n'
  6261  2949  3465               	retlw	101	;'e'
  6262  294A  340A               	retlw	10
  6263  294B  3400               	retlw	0
  6264                           
  6265                           	psect	stringtext25
  6266  294C                     __pstringtext25:	
  6267  294C                     STR_68:	
  6268  294C  3468               	retlw	104	;'h'
  6269  294D  3465               	retlw	101	;'e'
  6270  294E  3461               	retlw	97	;'a'
  6271  294F  3474               	retlw	116	;'t'
  6272  2950  3465               	retlw	101	;'e'
  6273  2951  3472               	retlw	114	;'r'
  6274  2952  3470               	retlw	112	;'p'
  6275  2953  3472               	retlw	114	;'r'
  6276  2954  3465               	retlw	101	;'e'
  6277  2955  3474               	retlw	116	;'t'
  6278  2956  3469               	retlw	105	;'i'
  6279  2957  346D               	retlw	109	;'m'
  6280  2958  3465               	retlw	101	;'e'
  6281  2959  3400               	retlw	0
  6282                           
  6283                           	psect	stringtext26
  6284  295A                     __pstringtext26:	
  6285  295A                     STR_74:	
  6286  295A  3474               	retlw	116	;'t'
  6287  295B  346F               	retlw	111	;'o'
  6288  295C  3467               	retlw	103	;'g'
  6289  295D  3467               	retlw	103	;'g'
  6290  295E  346C               	retlw	108	;'l'
  6291  295F  3465               	retlw	101	;'e'
  6292  2960  3468               	retlw	104	;'h'
  6293  2961  3465               	retlw	101	;'e'
  6294  2962  3461               	retlw	97	;'a'
  6295  2963  3474               	retlw	116	;'t'
  6296  2964  3465               	retlw	101	;'e'
  6297  2965  3472               	retlw	114	;'r'
  6298  2966  3400               	retlw	0
  6299                           
  6300                           	psect	stringtext27
  6301  2973                     __pstringtext27:	
  6302  2973                     STR_67:	
  6303  2973  3470               	retlw	112	;'p'
  6304  2974  3469               	retlw	105	;'i'
  6305  2975  3465               	retlw	101	;'e'
  6306  2976  347A               	retlw	122	;'z'
  6307  2977  346F               	retlw	111	;'o'
  6308  2978  346F               	retlw	111	;'o'
  6309  2979  346E               	retlw	110	;'n'
  6310  297A  3474               	retlw	116	;'t'
  6311  297B  3469               	retlw	105	;'i'
  6312  297C  346D               	retlw	109	;'m'
  6313  297D  3465               	retlw	101	;'e'
  6314  297E  3400               	retlw	0
  6315                           
  6316                           	psect	stringtext28
  6317  297F                     __pstringtext28:	
  6318  297F                     STR_70:	
  6319  297F  3468               	retlw	104	;'h'
  6320  2980  3465               	retlw	101	;'e'
  6321  2981  3461               	retlw	97	;'a'
  6322  2982  3474               	retlw	116	;'t'
  6323  2983  3465               	retlw	101	;'e'
  6324  2984  3472               	retlw	114	;'r'
  6325  2985  3431               	retlw	49	;'1'
  6326  2986  346F               	retlw	111	;'o'
  6327  2987  3466               	retlw	102	;'f'
  6328  2988  3466               	retlw	102	;'f'
  6329  2989  3400               	retlw	0
  6330                           
  6331                           	psect	stringtext29
  6332  298A                     __pstringtext29:	
  6333  298A                     STR_75:	
  6334  298A  3474               	retlw	116	;'t'
  6335  298B  3469               	retlw	105	;'i'
  6336  298C  346D               	retlw	109	;'m'
  6337  298D  3465               	retlw	101	;'e'
  6338  298E  3468               	retlw	104	;'h'
  6339  298F  3465               	retlw	101	;'e'
  6340  2990  3461               	retlw	97	;'a'
  6341  2991  3474               	retlw	116	;'t'
  6342  2992  3465               	retlw	101	;'e'
  6343  2993  3472               	retlw	114	;'r'
  6344  2994  3400               	retlw	0
  6345                           
  6346                           	psect	stringtext30
  6347  2995                     __pstringtext30:	
  6348  2995                     STR_42:	
  6349  2995  340A               	retlw	10
  6350  2996  340A               	retlw	10
  6351  2997  3473               	retlw	115	;'s'
  6352  2998  3468               	retlw	104	;'h'
  6353  2999  346F               	retlw	111	;'o'
  6354  299A  3472               	retlw	114	;'r'
  6355  299B  3474               	retlw	116	;'t'
  6356  299C  3473               	retlw	115	;'s'
  6357  299D  343A               	retlw	58	;':'
  6358  299E  3420               	retlw	32	;' '
  6359  299F  3400               	retlw	0
  6360                           
  6361                           	psect	stringtext31
  6362  29A0                     __pstringtext31:	
  6363  29A0                     STR_71:	
  6364  29A0  3468               	retlw	104	;'h'
  6365  29A1  3465               	retlw	101	;'e'
  6366  29A2  3461               	retlw	97	;'a'
  6367  29A3  3474               	retlw	116	;'t'
  6368  29A4  3465               	retlw	101	;'e'
  6369  29A5  3472               	retlw	114	;'r'
  6370  29A6  3432               	retlw	50	;'2'
  6371  29A7  346F               	retlw	111	;'o'
  6372  29A8  346E               	retlw	110	;'n'
  6373  29A9  3400               	retlw	0
  6374                           
  6375                           	psect	stringtext32
  6376  29AA                     __pstringtext32:	
  6377  29AA                     STR_82:	
  6378  29AA  3473               	retlw	115	;'s'
  6379  29AB  346F               	retlw	111	;'o'
  6380  29AC  3466               	retlw	102	;'f'
  6381  29AD  3474               	retlw	116	;'t'
  6382  29AE  3472               	retlw	114	;'r'
  6383  29AF  3465               	retlw	101	;'e'
  6384  29B0  3473               	retlw	115	;'s'
  6385  29B1  3465               	retlw	101	;'e'
  6386  29B2  3474               	retlw	116	;'t'
  6387  29B3  3400               	retlw	0
  6388                           
  6389                           	psect	stringtext33
  6390  29B4                     __pstringtext33:	
  6391  29B4                     STR_50:	
  6392  29B4  3446               	retlw	70	;'F'
  6393  29B5  3441               	retlw	65	;'A'
  6394  29B6  3449               	retlw	73	;'I'
  6395  29B7  344C               	retlw	76	;'L'
  6396  29B8  3445               	retlw	69	;'E'
  6397  29B9  3444               	retlw	68	;'D'
  6398  29BA  340A               	retlw	10
  6399  29BB  340A               	retlw	10
  6400  29BC  3400               	retlw	0
  6401                           
  6402                           	psect	stringtext34
  6403  29BD                     __pstringtext34:	
  6404  29BD                     STR_49:	
  6405  29BD  3470               	retlw	112	;'p'
  6406  29BE  3461               	retlw	97	;'a'
  6407  29BF  3473               	retlw	115	;'s'
  6408  29C0  3473               	retlw	115	;'s'
  6409  29C1  3465               	retlw	101	;'e'
  6410  29C2  3464               	retlw	100	;'d'
  6411  29C3  340A               	retlw	10
  6412  29C4  340A               	retlw	10
  6413  29C5  3400               	retlw	0
  6414                           
  6415                           	psect	stringtext35
  6416  29C6                     __pstringtext35:	
  6417  29C6                     STR_65:	
  6418  29C6  3464               	retlw	100	;'d'
  6419  29C7  3472               	retlw	114	;'r'
  6420  29C8  3476               	retlw	118	;'v'
  6421  29C9  3450               	retlw	80	;'P'
  6422  29CA  3465               	retlw	101	;'e'
  6423  29CB  3461               	retlw	97	;'a'
  6424  29CC  346B               	retlw	107	;'k'
  6425  29CD  3400               	retlw	0
  6426                           
  6427                           	psect	stringtext36
  6428  29CE                     __pstringtext36:	
  6429  29CE                     STR_66:	
  6430  29CE  3464               	retlw	100	;'d'
  6431  29CF  3472               	retlw	114	;'r'
  6432  29D0  3476               	retlw	118	;'v'
  6433  29D1  3447               	retlw	71	;'G'
  6434  29D2  3461               	retlw	97	;'a'
  6435  29D3  3469               	retlw	105	;'i'
  6436  29D4  346E               	retlw	110	;'n'
  6437  29D5  3400               	retlw	0
  6438                           
  6439                           	psect	stringtext37
  6440  29D6                     __pstringtext37:	
  6441  29D6                     STR_72:	
  6442  29D6  346C               	retlw	108	;'l'
  6443  29D7  3465               	retlw	101	;'e'
  6444  29D8  3464               	retlw	100	;'d'
  6445  29D9  3467               	retlw	103	;'g'
  6446  29DA  3461               	retlw	97	;'a'
  6447  29DB  3469               	retlw	105	;'i'
  6448  29DC  346E               	retlw	110	;'n'
  6449  29DD  3400               	retlw	0
  6450                           
  6451                           	psect	stringtext38
  6452  29DE                     __pstringtext38:	
  6453  29DE                     STR_78:	
  6454  29DE  346D               	retlw	109	;'m'
  6455  29DF  3473               	retlw	115	;'s'
  6456  29E0  3474               	retlw	116	;'t'
  6457  29E1  3461               	retlw	97	;'a'
  6458  29E2  3474               	retlw	116	;'t'
  6459  29E3  3475               	retlw	117	;'u'
  6460  29E4  3473               	retlw	115	;'s'
  6461  29E5  3400               	retlw	0
  6462                           
  6463                           	psect	stringtext39
  6464  29E6                     __pstringtext39:	
  6465  29E6                     STR_40:	
  6466  29E6  3446               	retlw	70	;'F'
  6467  29E7  3441               	retlw	65	;'A'
  6468  29E8  3449               	retlw	73	;'I'
  6469  29E9  344C               	retlw	76	;'L'
  6470  29EA  3445               	retlw	69	;'E'
  6471  29EB  3444               	retlw	68	;'D'
  6472  29EC  340A               	retlw	10
  6473  29ED  3400               	retlw	0
  6474                           
  6475                           	psect	stringtext40
  6476  29EE                     __pstringtext40:	
  6477  29EE                     STR_39:	
  6478  29EE  3470               	retlw	112	;'p'
  6479  29EF  3461               	retlw	97	;'a'
  6480  29F0  3473               	retlw	115	;'s'
  6481  29F1  3473               	retlw	115	;'s'
  6482  29F2  3465               	retlw	101	;'e'
  6483  29F3  3464               	retlw	100	;'d'
  6484  29F4  340A               	retlw	10
  6485  29F5  3400               	retlw	0
  6486                           
  6487                           	psect	stringtext41
  6488  29F6                     __pstringtext41:	
  6489  29F6                     STR_7:	
  6490  29F6  3464               	retlw	100	;'d'
  6491  29F7  346F               	retlw	111	;'o'
  6492  29F8  346D               	retlw	109	;'m'
  6493  29F9  346F               	retlw	111	;'o'
  6494  29FA  3476               	retlw	118	;'v'
  6495  29FB  3465               	retlw	101	;'e'
  6496  29FC  340A               	retlw	10
  6497  29FD  3400               	retlw	0
  6498                           
  6499                           	psect	stringtext42
  6500  29FE                     __pstringtext42:	
  6501  29FE                     STR_41:	
  6502  29FE  346F               	retlw	111	;'o'
  6503  29FF  3470               	retlw	112	;'p'
  6504  2A00  3465               	retlw	101	;'e'
  6505  2A01  346E               	retlw	110	;'n'
  6506  2A02  3473               	retlw	115	;'s'
  6507  2A03  343A               	retlw	58	;':'
  6508  2A04  3420               	retlw	32	;' '
  6509  2A05  3400               	retlw	0
  6510                           
  6511                           	psect	stringtext43
  6512  3000                     __pstringtext43:	
  6513  3000                     STR_79:	
  6514  3000  3464               	retlw	100	;'d'
  6515  3001  346F               	retlw	111	;'o'
  6516  3002  346D               	retlw	109	;'m'
  6517  3003  346F               	retlw	111	;'o'
  6518  3004  3476               	retlw	118	;'v'
  6519  3005  3465               	retlw	101	;'e'
  6520  3006  3400               	retlw	0
  6521                           
  6522                           	psect	stringtext44
  6523  3007                     __pstringtext44:	
  6524  3007                     STR_73:	
  6525  3007  346C               	retlw	108	;'l'
  6526  3008  3465               	retlw	101	;'e'
  6527  3009  3464               	retlw	100	;'d'
  6528  300A  3470               	retlw	112	;'p'
  6529  300B  3477               	retlw	119	;'w'
  6530  300C  3472               	retlw	114	;'r'
  6531  300D  3400               	retlw	0
  6532                           
  6533                           	psect	stringtext45
  6534  300E                     __pstringtext45:	
  6535  300E                     STR_76:	
  6536  300E  3467               	retlw	103	;'g'
  6537  300F  3465               	retlw	101	;'e'
  6538  3010  3474               	retlw	116	;'t'
  6539  3011  3441               	retlw	65	;'A'
  6540  3012  3400               	retlw	0
  6541                           
  6542                           	psect	stringtext46
  6543  3013                     __pstringtext46:	
  6544  3013                     STR_62:	
  6545  3013  3473               	retlw	115	;'s'
  6546  3014  3465               	retlw	101	;'e'
  6547  3015  3474               	retlw	116	;'t'
  6548  3016  3441               	retlw	65	;'A'
  6549  3017  3400               	retlw	0
  6550                           
  6551                           	psect	stringtext47
  6552  3018                     __pstringtext47:	
  6553  3018                     STR_77:	
  6554  3018  3467               	retlw	103	;'g'
  6555  3019  3465               	retlw	101	;'e'
  6556  301A  3474               	retlw	116	;'t'
  6557  301B  344D               	retlw	77	;'M'
  6558  301C  3400               	retlw	0
  6559                           
  6560                           	psect	stringtext48
  6561  301D                     __pstringtext48:	
  6562  301D                     STR_63:	
  6563  301D  3473               	retlw	115	;'s'
  6564  301E  3465               	retlw	101	;'e'
  6565  301F  3474               	retlw	116	;'t'
  6566  3020  344D               	retlw	77	;'M'
  6567  3021  3400               	retlw	0
  6568                           
  6569                           	psect	stringtext49
  6570  3022                     __pstringtext49:	
  6571  3022                     STR_81:	
  6572  3022  3470               	retlw	112	;'p'
  6573  3023  3469               	retlw	105	;'i'
  6574  3024  346E               	retlw	110	;'n'
  6575  3025  3467               	retlw	103	;'g'
  6576  3026  3400               	retlw	0
  6577                           
  6578                           	psect	stringtext50
  6579  3027                     __pstringtext50:	
  6580  3027                     STR_80:	
  6581  3027  3463               	retlw	99	;'c'
  6582  3028  346F               	retlw	111	;'o'
  6583  3029  346D               	retlw	109	;'m'
  6584  302A  346D               	retlw	109	;'m'
  6585  302B  3400               	retlw	0
  6586                           
  6587                           	psect	stringtext51
  6588  302C                     __pstringtext51:	
  6589  302C                     STR_58:	
  6590  302C  3472               	retlw	114	;'r'
  6591  302D  3465               	retlw	101	;'e'
  6592  302E  346C               	retlw	108	;'l'
  6593  302F  3400               	retlw	0
  6594                           
  6595                           	psect	stringtext52
  6596  3030                     __pstringtext52:	
  6597  3030                     STR_59:	
  6598  3030  3461               	retlw	97	;'a'
  6599  3031  3462               	retlw	98	;'b'
  6600  3032  3473               	retlw	115	;'s'
  6601  3033  3400               	retlw	0
  6602                           
  6603                           	psect	stringtext53
  6604  3034                     __pstringtext53:	
  6605  3034                     STR_60:	
  6606  3034  3470               	retlw	112	;'p'
  6607  3035  346F               	retlw	111	;'o'
  6608  3036  3473               	retlw	115	;'s'
  6609  3037  3400               	retlw	0
  6610                           
  6611                           	psect	stringtext54
  6612  3038                     __pstringtext54:	
  6613  3038                     STR_13:	
  6614  3038  3425               	retlw	37	;'%'
  6615  3039  3464               	retlw	100	;'d'
  6616  303A  340A               	retlw	10
  6617  303B  3400               	retlw	0
  6618                           
  6619                           	psect	stringtext55
  6620  303C                     __pstringtext55:	
  6621  303C                     STR_1:	
  6622  303C  3425               	retlw	37	;'%'
  6623  303D  3464               	retlw	100	;'d'
  6624  303E  3420               	retlw	32	;' '
  6625  303F  3400               	retlw	0
  6626                           
  6627                           	psect	stringtext56
  6628  3046                     __pstringtext56:	
  6629  3046                     STR_8:	
  6630  3046  3441               	retlw	65	;'A'
  6631  3047  340A               	retlw	10
  6632  3048  3400               	retlw	0
  6633                           
  6634                           	psect	stringtext57
  6635  3049                     __pstringtext57:	
  6636  3049                     STR_15:	
  6637  3049  3445               	retlw	69	;'E'
  6638  304A  340A               	retlw	10
  6639  304B  3400               	retlw	0
  6640                           
  6641                           	psect	stringtext58
  6642  304C                     __pstringtext58:	
  6643  304C                     STR_36:	
  6644  304C  344E               	retlw	78	;'N'
  6645  304D  340A               	retlw	10
  6646  304E  3400               	retlw	0
  6647                           
  6648                           	psect	stringtext59
  6649  304F                     __pstringtext59:	
  6650  304F                     STR_34:	
  6651  304F  3452               	retlw	82	;'R'
  6652  3050  340A               	retlw	10
  6653  3051  3400               	retlw	0
  6654                           
  6655                           	psect	stringtext60
  6656  3054                     __pstringtext60:	
  6657  3054                     STR_64:	
  6658  3054  347A               	retlw	122	;'z'
  6659  3055  3400               	retlw	0
  6660                           
  6661                           	psect	stringtext61
  6662  0000                     __pstringtext61:	
  6663  2863                     
  6664                           ; #config settings
  6665  0000                     
  6666                           	psect	cinit
  6667  005C                     start_initialization:	
  6668  005C                     __initialization:		;BIGRAM
  6669                           
  6670                           ; Initialize objects allocated to BANK0
  6671  005C  3095               	movlw	low __pidataBANK0
  6672  005D  0084               	movwf	4
  6673  005E  30AF               	movlw	(high __pidataBANK0)| (0+128)
  6674  005F  0085               	movwf	5
  6675  0060  305A               	movlw	low __pdataBANK0
  6676  0061  0086               	movwf	6
  6677  0062  3000               	movlw	high __pdataBANK0
  6678  0063  0087               	movwf	7
  6679  0064  3000               	movlw	0
  6680  0065  00FF               	movwf	btemp+1
  6681  0066  3004               	movlw	4
  6682  0067  31A1  213E  3180   	fcall	init_ram
  6683                           
  6684                           ; Initialize objects allocated to BANK1
  6685  006A  30FA               	movlw	low __pidataBANK1
  6686  006B  0084               	movwf	4
  6687  006C  3087               	movlw	(high __pidataBANK1)| (0+128)
  6688  006D  0085               	movwf	5
  6689  006E  30EA               	movlw	low __pdataBANK1
  6690  006F  0086               	movwf	6
  6691  0070  3000               	movlw	high __pdataBANK1
  6692  0071  0087               	movwf	7
  6693  0072  3000               	movlw	0
  6694  0073  00FF               	movwf	btemp+1
  6695  0074  3006               	movlw	6
  6696  0075  31A1  213E  3180   	fcall	init_ram
  6697                           
  6698                           ; Initialize objects allocated to BANK2
  6699  0078  0022               	movlb	2	; select bank2
  6700  0079  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
  6701  007C  00EC               	movwf	__pdataBANK2& (0+127)
  6702  007D  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
  6703  0080  00ED               	movwf	(__pdataBANK2+1)& (0+127)
  6704                           
  6705                           ; Initialize objects allocated to BANK3
  6706  0081  3091               	movlw	low __pidataBANK3
  6707  0082  0084               	movwf	4
  6708  0083  30AF               	movlw	(high __pidataBANK3)| (0+128)
  6709  0084  0085               	movwf	5
  6710  0085  30E8               	movlw	low __pdataBANK3
  6711  0086  0086               	movwf	6
  6712  0087  3001               	movlw	high __pdataBANK3
  6713  0088  0087               	movwf	7
  6714  0089  3000               	movlw	0
  6715  008A  00FF               	movwf	btemp+1
  6716  008B  3004               	movlw	4
  6717  008C  31A1  213E  3180   	fcall	init_ram
  6718                           
  6719                           ; Initialize objects allocated to BANK4
  6720  008F  30B9               	movlw	low __pidataBANK4
  6721  0090  0084               	movwf	4
  6722  0091  30A3               	movlw	(high __pidataBANK4)| (0+128)
  6723  0092  0085               	movwf	5
  6724  0093  3048               	movlw	low __pdataBANK4
  6725  0094  0086               	movwf	6
  6726  0095  3002               	movlw	high __pdataBANK4
  6727  0096  0087               	movwf	7
  6728  0097  3000               	movlw	0
  6729  0098  00FF               	movwf	btemp+1
  6730  0099  3020               	movlw	32
  6731  009A  31A1  213E  3180   	fcall	init_ram
  6732                           
  6733                           ; Clear objects allocated to BIGRAM
  6734  009D  3090               	movlw	low (0+10128)
  6735  009E  0084               	movwf	4
  6736  009F  3027               	movlw	high (0+10128)
  6737  00A0  0085               	movwf	5
  6738  00A1  3060               	movlw	96
  6739  00A2  00FE               	movwf	btemp
  6740  00A3  3000               	movlw	0
  6741  00A4  00FF               	movwf	btemp+1
  6742  00A5  31A1  2132  3180   	fcall	clear_ram0
  6743                           
  6744                           ; Clear objects allocated to COMMON
  6745  00A8  01FD               	clrf	__pbssCOMMON& (0+127)
  6746                           
  6747                           ; Clear objects allocated to BANK0
  6748  00A9  304E               	movlw	low __pbssBANK0
  6749  00AA  0084               	movwf	4
  6750  00AB  3000               	movlw	high __pbssBANK0
  6751  00AC  0085               	movwf	5
  6752  00AD  300C               	movlw	12
  6753  00AE  00FE               	movwf	btemp
  6754  00AF  3000               	movlw	0
  6755  00B0  00FF               	movwf	btemp+1
  6756  00B1  31A1  2132  3180   	fcall	clear_ram0
  6757                           
  6758                           ; Clear objects allocated to BANK1
  6759  00B4  30D8               	movlw	low __pbssBANK1
  6760  00B5  0084               	movwf	4
  6761  00B6  3000               	movlw	high __pbssBANK1
  6762  00B7  0085               	movwf	5
  6763  00B8  3012               	movlw	18
  6764  00B9  00FE               	movwf	btemp
  6765  00BA  3000               	movlw	0
  6766  00BB  00FF               	movwf	btemp+1
  6767  00BC  31A1  2132  3180   	fcall	clear_ram0
  6768                           
  6769                           ; Clear objects allocated to BANK2
  6770  00BF  3020               	movlw	low __pbssBANK2
  6771  00C0  0084               	movwf	4
  6772  00C1  3001               	movlw	high __pbssBANK2
  6773  00C2  0085               	movwf	5
  6774  00C3  304C               	movlw	76
  6775  00C4  00FE               	movwf	btemp
  6776  00C5  3000               	movlw	0
  6777  00C6  00FF               	movwf	btemp+1
  6778  00C7  31A1  2132  3180   	fcall	clear_ram0
  6779                           
  6780                           ; Clear objects allocated to BANK3
  6781  00CA  30A0               	movlw	low __pbssBANK3
  6782  00CB  0084               	movwf	4
  6783  00CC  3001               	movlw	high __pbssBANK3
  6784  00CD  0085               	movwf	5
  6785  00CE  3039               	movlw	57
  6786  00CF  00FE               	movwf	btemp
  6787  00D0  3000               	movlw	0
  6788  00D1  00FF               	movwf	btemp+1
  6789  00D2  31A1  2132  3180   	fcall	clear_ram0
  6790                           
  6791                           ; Clear objects allocated to BANK4
  6792  00D5  3020               	movlw	low __pbssBANK4
  6793  00D6  0084               	movwf	4
  6794  00D7  3002               	movlw	high __pbssBANK4
  6795  00D8  0085               	movwf	5
  6796  00D9  3028               	movlw	40
  6797  00DA  00FE               	movwf	btemp
  6798  00DB  3000               	movlw	0
  6799  00DC  00FF               	movwf	btemp+1
  6800  00DD  31A1  2132  3180   	fcall	clear_ram0
  6801                           
  6802                           ; Clear objects allocated to BANK5
  6803  00E0  30A0               	movlw	low __pbssBANK5
  6804  00E1  0084               	movwf	4
  6805  00E2  3002               	movlw	high __pbssBANK5
  6806  00E3  0085               	movwf	5
  6807  00E4  3028               	movlw	40
  6808  00E5  00FE               	movwf	btemp
  6809  00E6  3000               	movlw	0
  6810  00E7  00FF               	movwf	btemp+1
  6811  00E8  31A1  2132         	fcall	clear_ram0
  6812  00EA                     end_of_initialization:	
  6813                           ;End of C runtime variable initialization code
  6814                           
  6815  00EA                     __end_of__initialization:	
  6816  00EA  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6817  00EB  0020               	movlb	0
  6818  00EC  3195  2D04         	ljmp	_main	;jump to C main() function
  6819                           
  6820                           	psect	bssCOMMON
  6821  007D                     __pbssCOMMON:	
  6822  007D                     _eusartTxHead:	
  6823  007D                     	ds	1
  6824                           
  6825                           	psect	bssBANK0
  6826  004E                     __pbssBANK0:	
  6827  004E                     _absCommand:	
  6828  004E                     	ds	4
  6829  0052                     _readIdx:	
  6830  0052                     	ds	2
  6831  0054                     strtok@sp:	
  6832  0054                     	ds	1
  6833  0055                     _motionType:	
  6834  0055                     	ds	1
  6835  0056                     _eusartRxCount:	
  6836  0056                     	ds	1
  6837  0057                     _eusartRxTail:	
  6838  0057                     	ds	1
  6839  0058                     _eusartRxHead:	
  6840  0058                     	ds	1
  6841  0059                     _eusartTxTail:	
  6842  0059                     	ds	1
  6843                           
  6844                           	psect	dataBANK0
  6845  005A                     __pdataBANK0:	
  6846  005A                     _demoLong:	
  6847  005A                     	ds	4
  6848                           
  6849                           	psect	bssBANK1
  6850  00D8                     __pbssBANK1:	
  6851  00D8                     _moveMask:	
  6852  00D8                     	ds	4
  6853  00DC                     _activeMask:	
  6854  00DC                     	ds	4
  6855  00E0                     _moveVector_downs:	
  6856  00E0                     	ds	4
  6857  00E4                     _moveVector_ups:	
  6858  00E4                     	ds	4
  6859  00E8                     _i2c1_driver_busCollisionISR:	
  6860  00E8                     	ds	2
  6861                           
  6862                           	psect	dataBANK1
  6863  00EA                     __pdataBANK1:	
  6864  00EA                     _piezo_on_time_ms:	
  6865  00EA                     	ds	2
  6866  00EC                     _heater_pre_time_ms:	
  6867  00EC                     	ds	2
  6868  00EE                     _drv_peak_val:	
  6869  00EE                     	ds	2
  6870                           
  6871                           	psect	bssBANK2
  6872  0120                     __pbssBANK2:	
  6873  0120                     _i2c_status:	
  6874  0120                     	ds	30
  6875  013E                     _remainingSteps:	
  6876  013E                     	ds	4
  6877  0142                     _demoHeaterToggle_bot:	
  6878  0142                     	ds	4
  6879  0146                     _demoHeaterToggle_top:	
  6880  0146                     	ds	4
  6881  014A                     _LED_configReg_bot:	
  6882  014A                     	ds	4
  6883  014E                     _LED_configReg_top:	
  6884  014E                     	ds	4
  6885  0152                     _second_bottom:	
  6886  0152                     	ds	4
  6887  0156                     _first_top:	
  6888  0156                     	ds	4
  6889  015A                     _first_bottom:	
  6890  015A                     	ds	4
  6891  015E                     _second_top:	
  6892  015E                     	ds	4
  6893  0162                     _errno:	
  6894  0162                     	ds	2
  6895  0164                     _cmdRead:	
  6896  0164                     	ds	2
  6897  0166                     _errorOut:	
  6898  0166                     	ds	2
  6899  0168                     _interpulseWait:	
  6900  0168                     	ds	2
  6901  016A                     _i2c1_driver_i2cISR:	
  6902  016A                     	ds	2
  6903                           
  6904                           	psect	dataBANK2
  6905  016C                     __pdataBANK2:	
  6906  016C                     _heater_post_time_ms:	
  6907  016C                     	ds	2
  6908                           
  6909                           	psect	bssBANK3
  6910  01A0                     __pbssBANK3:	
  6911  01A0                     _eusartRxBuffer:	
  6912  01A0                     	ds	8
  6913  01A8                     _eusartTxBuffer:	
  6914  01A8                     	ds	8
  6915  01B0                     _cmd_struct:	
  6916  01B0                     	ds	21
  6917  01C5                     _readdata:	
  6918  01C5                     	ds	20
  6919                           
  6920                           	psect	dataBANK3
  6921  01E8                     __pdataBANK3:	
  6922  01E8                     _inter_step_interval_ms:	
  6923  01E8                     	ds	4
  6924                           
  6925                           	psect	bssBANK4
  6926  0220                     __pbssBANK4:	
  6927  0220                     _drv_fifo_upstroke:	
  6928  0220                     	ds	40
  6929                           
  6930                           	psect	dataBANK4
  6931  0248                     __pdataBANK4:	
  6932  0248                     _fsmStateTable:	
  6933  0248                     	ds	32
  6934                           
  6935                           	psect	bssBANK5
  6936  02A0                     __pbssBANK5:	
  6937  02A0                     _drv_fifo_downstroke:	
  6938  02A0                     	ds	40
  6939                           
  6940                           	psect	inittext
  6941  213E                     init_ram:	
  6942  213E  00FE               	movwf	126
  6943  213F                     initloop:	
  6944  213F  0012               	moviw fsr0++
  6945  2140  001E               	movwi fsr1++
  6946  2141  3001               	movlw	1
  6947  2142  02FE               	subwf	126,f
  6948  2143  3000               	movlw	0
  6949  2144  3BFF               	subwfb	127,f
  6950  2145  087F               	movf	127,w
  6951  2146  047E               	iorwf	126,w
  6952  2147  1903               	btfsc	3,2
  6953  2148  3400               	retlw	0
  6954  2149  293F               	goto	initloop
  6955                           
  6956                           	psect	clrtext
  6957  2132                     clear_ram0:	
  6958                           ;	Called with FSR0 containing the base address, and
  6959                           ;	btemp/btemp+1 has the size to clear
  6960                           
  6961  2132  0064               	clrwdt	;clear the watchdog before getting into this loop
  6962  2133                     clrloop0:	
  6963  2133  0180               	clrf	0	;clear RAM location pointed to by FSR
  6964  2134  3101               	addfsr 0,1
  6965  2135  3001               	movlw	1
  6966  2136  02FE               	subwf	126,f
  6967  2137  3000               	movlw	0
  6968  2138  3BFF               	subwfb	127,f
  6969  2139  087F               	movf	127,w
  6970  213A  047E               	iorwf	126,w
  6971  213B  1903               	btfsc	3,2
  6972  213C  3400               	retlw	0	;all done for this memory range, return
  6973  213D  2933               	goto	clrloop0	;have we reached the end yet?
  6974                           
  6975                           	psect	cstackBANK5
  6976  02C8                     __pcstackBANK5:	
  6977  02C8                     ??_doAbsMove:	
  6978                           
  6979                           ; 1 bytes @ 0x0
  6980  02C8                     	ds	28
  6981                           
  6982                           	psect	cstackBANK3
  6983  01D9                     __pcstackBANK3:	
  6984  01D9                     _calcUpstroke$2995:	
  6985  01D9                     _calcDownstroke$2996:	
  6986                           ; 3 bytes @ 0x0
  6987                           
  6988                           
  6989                           ; 3 bytes @ 0x0
  6990  01D9                     	ds	3
  6991  01DC                     calcUpstroke@i:	
  6992  01DC                     calcDownstroke@i:	
  6993                           ; 2 bytes @ 0x3
  6994                           
  6995                           
  6996                           ; 2 bytes @ 0x3
  6997  01DC                     	ds	2
  6998  01DE                     ?_drv_init:	
  6999  01DE                     drv_init@output_gain:	
  7000                           ; 1 bytes @ 0x5
  7001                           
  7002                           
  7003                           ; 2 bytes @ 0x5
  7004  01DE                     	ds	2
  7005  01E0                     drv_init@idle_timeout:	
  7006                           
  7007                           ; 2 bytes @ 0x7
  7008  01E0                     	ds	2
  7009                           
  7010                           	psect	cstackBANK2
  7011  016E                     __pcstackBANK2:	
  7012  016E                     ??_main:	
  7013                           
  7014                           ; 1 bytes @ 0x0
  7015  016E                     	ds	1
  7016                           
  7017                           	psect	cstackBANK1
  7018  00A0                     __pcstackBANK1:	
  7019  00A0                     ??___ftmul:	
  7020  00A0                     ?_printf:	
  7021                           ; 1 bytes @ 0x0
  7022                           
  7023  00A0                     printf@f:	
  7024                           ; 2 bytes @ 0x0
  7025                           
  7026  00A0                     LEDsPwr@pwrAll:	
  7027                           ; 2 bytes @ 0x0
  7028                           
  7029  00A0                     LED_setBrightnessRange@LED_configReg:	
  7030                           ; 4 bytes @ 0x0
  7031                           
  7032                           
  7033                           ; 4 bytes @ 0x0
  7034  00A0                     	ds	4
  7035  00A4                     ___ftmul@exp:	
  7036                           
  7037                           ; 1 bytes @ 0x4
  7038  00A4                     	ds	1
  7039  00A5                     ___ftmul@f3_as_product:	
  7040                           
  7041                           ; 3 bytes @ 0x5
  7042  00A5                     	ds	1
  7043  00A6                     ??_printf:	
  7044                           
  7045                           ; 1 bytes @ 0x6
  7046  00A6                     	ds	2
  7047  00A8                     ___ftmul@cntr:	
  7048                           
  7049                           ; 1 bytes @ 0x8
  7050  00A8                     	ds	1
  7051  00A9                     ___ftmul@sign:	
  7052                           
  7053                           ; 1 bytes @ 0x9
  7054  00A9                     	ds	1
  7055  00AA                     ?___ftadd:	
  7056  00AA                     ___ftadd@f1:	
  7057                           ; 3 bytes @ 0xA
  7058                           
  7059                           
  7060                           ; 3 bytes @ 0xA
  7061  00AA                     	ds	2
  7062  00AC                     printf@prec:	
  7063                           
  7064                           ; 2 bytes @ 0xC
  7065  00AC                     	ds	1
  7066  00AD                     ___ftadd@f2:	
  7067                           
  7068                           ; 3 bytes @ 0xD
  7069  00AD                     	ds	1
  7070  00AE                     printf@val:	
  7071                           
  7072                           ; 4 bytes @ 0xE
  7073  00AE                     	ds	2
  7074  00B0                     ??___ftadd:	
  7075                           
  7076                           ; 1 bytes @ 0x10
  7077  00B0                     	ds	2
  7078  00B2                     printf@flag:	
  7079                           
  7080                           ; 1 bytes @ 0x12
  7081  00B2                     	ds	1
  7082  00B3                     printf@ap:	
  7083                           
  7084                           ; 1 bytes @ 0x13
  7085  00B3                     	ds	1
  7086  00B4                     printf@c:	
  7087  00B4                     ___ftadd@sign:	
  7088                           ; 1 bytes @ 0x14
  7089                           
  7090                           
  7091                           ; 1 bytes @ 0x14
  7092  00B4                     	ds	1
  7093  00B5                     ?_drv_write_DC:	
  7094  00B5                     ??_drv_reset:	
  7095                           ; 1 bytes @ 0x15
  7096                           
  7097  00B5                     ?_LED_test_openshort:	
  7098                           ; 1 bytes @ 0x15
  7099                           
  7100  00B5                     ?_drv_read:	
  7101                           ; 1 bytes @ 0x15
  7102                           
  7103  00B5                     ?_startRelMove:	
  7104                           ; 2 bytes @ 0x15
  7105                           
  7106  00B5                     ?_startAbsMove:	
  7107                           ; 2 bytes @ 0x15
  7108                           
  7109  00B5                     ?_stop:	
  7110                           ; 2 bytes @ 0x15
  7111                           
  7112  00B5                     ?_zeroPosition:	
  7113                           ; 2 bytes @ 0x15
  7114                           
  7115  00B5                     ?_getPosition:	
  7116                           ; 2 bytes @ 0x15
  7117                           
  7118  00B5                     ?_setDrvGain:	
  7119                           ; 2 bytes @ 0x15
  7120                           
  7121  00B5                     ?_setHeaterPreTime:	
  7122                           ; 2 bytes @ 0x15
  7123                           
  7124  00B5                     ?_setHeaterPostTime:	
  7125                           ; 2 bytes @ 0x15
  7126                           
  7127  00B5                     ?_setLEDBrightnessRange:	
  7128                           ; 2 bytes @ 0x15
  7129                           
  7130  00B5                     ?_setLEDPwr:	
  7131                           ; 2 bytes @ 0x15
  7132                           
  7133  00B5                     ?_setHeaterToggle:	
  7134                           ; 2 bytes @ 0x15
  7135                           
  7136  00B5                     ?_timedActiveHeatOn:	
  7137                           ; 2 bytes @ 0x15
  7138                           
  7139  00B5                     ?_setActive:	
  7140                           ; 2 bytes @ 0x15
  7141                           
  7142  00B5                     ?_setMoveMask:	
  7143                           ; 2 bytes @ 0x15
  7144                           
  7145  00B5                     ?_getActive:	
  7146                           ; 2 bytes @ 0x15
  7147                           
  7148  00B5                     ?_getMoveMask:	
  7149                           ; 2 bytes @ 0x15
  7150                           
  7151  00B5                     ?_getMotionStatus:	
  7152                           ; 2 bytes @ 0x15
  7153                           
  7154  00B5                     ?_LED_getData:	
  7155                           ; 2 bytes @ 0x15
  7156                           
  7157  00B5                     ___ftadd@exp2:	
  7158                           ; 4 bytes @ 0x15
  7159                           
  7160  00B5                     LED_test_openshort@type:	
  7161                           ; 1 bytes @ 0x15
  7162                           
  7163  00B5                     LED_getData@topOrBottom:	
  7164                           ; 2 bytes @ 0x15
  7165                           
  7166  00B5                     startRelMove@steps:	
  7167                           ; 2 bytes @ 0x15
  7168                           
  7169  00B5                     startAbsMove@steps:	
  7170                           ; 2 bytes @ 0x15
  7171                           
  7172  00B5                     getPosition@a:	
  7173                           ; 2 bytes @ 0x15
  7174                           
  7175  00B5                     setDrvGain@gain:	
  7176                           ; 2 bytes @ 0x15
  7177                           
  7178  00B5                     setHeaterPreTime@t:	
  7179                           ; 2 bytes @ 0x15
  7180                           
  7181  00B5                     setHeaterPostTime@t:	
  7182                           ; 2 bytes @ 0x15
  7183                           
  7184  00B5                     setLEDBrightnessRange@r:	
  7185                           ; 2 bytes @ 0x15
  7186                           
  7187  00B5                     setLEDPwr@pwr:	
  7188                           ; 2 bytes @ 0x15
  7189                           
  7190  00B5                     setHeaterToggle@num:	
  7191                           ; 2 bytes @ 0x15
  7192                           
  7193  00B5                     setActive@probeNum:	
  7194                           ; 2 bytes @ 0x15
  7195                           
  7196  00B5                     setMoveMask@probeNum:	
  7197                           ; 2 bytes @ 0x15
  7198                           
  7199  00B5                     drv_write_DC@val:	
  7200                           ; 2 bytes @ 0x15
  7201                           
  7202  00B5                     timedActiveHeatOn@onTime:	
  7203                           ; 2 bytes @ 0x15
  7204                           
  7205                           
  7206                           ; 4 bytes @ 0x15
  7207  00B5                     	ds	1
  7208  00B6                     ___ftadd@exp1:	
  7209                           
  7210                           ; 1 bytes @ 0x16
  7211  00B6                     	ds	1
  7212  00B7                     ??_zeroPosition:	
  7213  00B7                     ??_setDrvGain:	
  7214                           ; 1 bytes @ 0x17
  7215                           
  7216  00B7                     ?___fttol:	
  7217                           ; 1 bytes @ 0x17
  7218                           
  7219  00B7                     LED_test_openshort@topOrBottom:	
  7220                           ; 4 bytes @ 0x17
  7221                           
  7222  00B7                     setLEDBrightnessRange@tOB:	
  7223                           ; 2 bytes @ 0x17
  7224                           
  7225  00B7                     setLEDPwr@topOrBottom:	
  7226                           ; 2 bytes @ 0x17
  7227                           
  7228  00B7                     setHeaterToggle@topOrB:	
  7229                           ; 2 bytes @ 0x17
  7230                           
  7231  00B7                     setActive@onOff:	
  7232                           ; 2 bytes @ 0x17
  7233                           
  7234  00B7                     setMoveMask@onOff:	
  7235                           ; 2 bytes @ 0x17
  7236                           
  7237  00B7                     getActive@i:	
  7238                           ; 2 bytes @ 0x17
  7239                           
  7240  00B7                     getMoveMask@i:	
  7241                           ; 2 bytes @ 0x17
  7242                           
  7243  00B7                     drv_write_DC@duration_ms:	
  7244                           ; 2 bytes @ 0x17
  7245                           
  7246  00B7                     ___fttol@f1:	
  7247                           ; 2 bytes @ 0x17
  7248                           
  7249                           
  7250                           ; 3 bytes @ 0x17
  7251  00B7                     	ds	1
  7252  00B8                     setDrvGain@setGain:	
  7253                           
  7254                           ; 2 bytes @ 0x18
  7255  00B8                     	ds	1
  7256  00B9                     ??_LED_getData:	
  7257  00B9                     ??_drv_write_DC:	
  7258                           ; 1 bytes @ 0x19
  7259                           
  7260  00B9                     ??_LED_test_openshort:	
  7261                           ; 1 bytes @ 0x19
  7262                           
  7263  00B9                     ??_setHeaterToggle:	
  7264                           ; 1 bytes @ 0x19
  7265                           
  7266  00B9                     ??_setActive:	
  7267                           ; 1 bytes @ 0x19
  7268                           
  7269  00B9                     timedActiveHeatOn@topOrBorBoth:	
  7270                           ; 1 bytes @ 0x19
  7271                           
  7272                           
  7273                           ; 2 bytes @ 0x19
  7274  00B9                     	ds	1
  7275  00BA                     LED_test_openshort@j:	
  7276  00BA                     drv_write_DC@i:	
  7277                           ; 2 bytes @ 0x1A
  7278                           
  7279                           
  7280                           ; 2 bytes @ 0x1A
  7281  00BA                     	ds	1
  7282  00BB                     ??_timedActiveHeatOn:	
  7283  00BB                     ??___fttol:	
  7284                           ; 1 bytes @ 0x1B
  7285                           
  7286                           
  7287                           ; 1 bytes @ 0x1B
  7288  00BB                     	ds	1
  7289  00BC                     ?_doMove:	
  7290                           
  7291                           ; 2 bytes @ 0x1C
  7292  00BC                     	ds	2
  7293  00BE                     ??_doMove:	
  7294                           
  7295                           ; 1 bytes @ 0x1E
  7296  00BE                     	ds	1
  7297  00BF                     ___fttol@sign1:	
  7298  00BF                     doMove@t:	
  7299                           ; 1 bytes @ 0x1F
  7300                           
  7301                           
  7302                           ; 2 bytes @ 0x1F
  7303  00BF                     	ds	1
  7304  00C0                     timedActiveHeatOn@t:	
  7305  00C0                     LED_getData@readData:	
  7306                           ; 2 bytes @ 0x20
  7307                           
  7308  00C0                     ___fttol@lval:	
  7309                           ; 4 bytes @ 0x20
  7310                           
  7311                           
  7312                           ; 4 bytes @ 0x20
  7313  00C0                     	ds	1
  7314  00C1                     doMove@t_1660:	
  7315                           
  7316                           ; 2 bytes @ 0x21
  7317  00C1                     	ds	2
  7318  00C3                     ??_doRelMove:	
  7319  00C3                     doAbsMove@allThere:	
  7320                           ; 1 bytes @ 0x23
  7321                           
  7322                           
  7323                           ; 2 bytes @ 0x23
  7324  00C3                     	ds	1
  7325  00C4                     ___fttol@exp1:	
  7326  00C4                     LED_getData@j:	
  7327                           ; 1 bytes @ 0x24
  7328                           
  7329                           
  7330                           ; 2 bytes @ 0x24
  7331  00C4                     	ds	1
  7332  00C5                     ?_setDrvPiezoOnTime:	
  7333  00C5                     ?_setH1OffTime:	
  7334                           ; 2 bytes @ 0x25
  7335                           
  7336  00C5                     ?_setH2OnTime:	
  7337                           ; 2 bytes @ 0x25
  7338                           
  7339  00C5                     ?_trunc:	
  7340                           ; 2 bytes @ 0x25
  7341                           
  7342  00C5                     doAbsMove@i:	
  7343                           ; 3 bytes @ 0x25
  7344                           
  7345  00C5                     setDrvPiezoOnTime@t:	
  7346                           ; 2 bytes @ 0x25
  7347                           
  7348  00C5                     setH1OffTime@t:	
  7349                           ; 2 bytes @ 0x25
  7350                           
  7351  00C5                     setH2OnTime@t:	
  7352                           ; 2 bytes @ 0x25
  7353                           
  7354  00C5                     trunc@x:	
  7355                           ; 2 bytes @ 0x25
  7356                           
  7357                           
  7358                           ; 3 bytes @ 0x25
  7359  00C5                     	ds	1
  7360  00C6                     ?_LED_readConfig:	
  7361  00C6                     LED_readConfig@topOrBottom:	
  7362                           ; 4 bytes @ 0x26
  7363                           
  7364                           
  7365                           ; 2 bytes @ 0x26
  7366  00C6                     	ds	1
  7367  00C7                     doAbsMove@i_1678:	
  7368                           
  7369                           ; 2 bytes @ 0x27
  7370  00C7                     	ds	1
  7371  00C8                     trunc@i:	
  7372                           
  7373                           ; 3 bytes @ 0x28
  7374  00C8                     	ds	1
  7375  00C9                     doAbsMove@i_1676:	
  7376                           
  7377                           ; 2 bytes @ 0x29
  7378  00C9                     	ds	1
  7379  00CA                     ?_LED_testComm:	
  7380  00CA                     LED_testComm@topOrBottom:	
  7381                           ; 2 bytes @ 0x2A
  7382                           
  7383                           
  7384                           ; 2 bytes @ 0x2A
  7385  00CA                     	ds	1
  7386  00CB                     trunc@expon:	
  7387                           
  7388                           ; 2 bytes @ 0x2B
  7389  00CB                     	ds	1
  7390  00CC                     ??_LED_testComm:	
  7391                           
  7392                           ; 1 bytes @ 0x2C
  7393  00CC                     	ds	1
  7394  00CD                     ?_round:	
  7395  00CD                     round@x:	
  7396                           ; 3 bytes @ 0x2D
  7397                           
  7398                           
  7399                           ; 3 bytes @ 0x2D
  7400  00CD                     	ds	1
  7401  00CE                     LED_testComm@readResult:	
  7402                           
  7403                           ; 2 bytes @ 0x2E
  7404  00CE                     	ds	2
  7405  00D0                     round@f:	
  7406  00D0                     LED_testComm@oldConfigReg:	
  7407                           ; 3 bytes @ 0x30
  7408                           
  7409                           
  7410                           ; 4 bytes @ 0x30
  7411  00D0                     	ds	3
  7412  00D3                     ?_calcUpstroke:	
  7413  00D3                     ?_calcDownstroke:	
  7414                           ; 1 bytes @ 0x33
  7415                           
  7416  00D3                     doRelMove@j:	
  7417                           ; 1 bytes @ 0x33
  7418                           
  7419  00D3                     calcUpstroke@maxVal:	
  7420                           ; 2 bytes @ 0x33
  7421                           
  7422  00D3                     calcDownstroke@maxVal:	
  7423                           ; 2 bytes @ 0x33
  7424                           
  7425                           
  7426                           ; 2 bytes @ 0x33
  7427  00D3                     	ds	1
  7428  00D4                     ?_commCheck:	
  7429                           
  7430                           ; 2 bytes @ 0x34
  7431  00D4                     	ds	1
  7432  00D5                     ??_drv_init:	
  7433  00D5                     ?_setDrvPeak:	
  7434                           ; 1 bytes @ 0x35
  7435                           
  7436  00D5                     setDrvPeak@pk:	
  7437                           ; 2 bytes @ 0x35
  7438                           
  7439                           
  7440                           ; 2 bytes @ 0x35
  7441  00D5                     	ds	1
  7442  00D6                     ??_commCheck:	
  7443                           
  7444                           ; 1 bytes @ 0x36
  7445  00D6                     	ds	1
  7446  00D7                     execCmd@s:	
  7447                           
  7448                           ; 1 bytes @ 0x37
  7449  00D7                     	ds	1
  7450                           
  7451                           	psect	cstackCOMMON
  7452  0070                     __pcstackCOMMON:	
  7453  0070                     ?_isdigit:	
  7454  0070                     ?_mssp1_IRQisEnabled:	
  7455                           ; 1 bit 
  7456                           
  7457  0070                     ?_i2c1_driver_open:	
  7458                           ; 1 bit 
  7459                           
  7460  0070                     ?_i2c1_driver_isNACK:	
  7461                           ; 1 bit 
  7462                           
  7463  0070                     ?i1_i2c1_driver_isNACK:	
  7464                           ; 1 bit 
  7465                           
  7466  0070                     ?_PMD_Initialize:	
  7467                           ; 1 bit 
  7468                           
  7469  0070                     ?_PIN_MANAGER_Initialize:	
  7470                           ; 1 bytes @ 0x0
  7471                           
  7472  0070                     ?_OSCILLATOR_Initialize:	
  7473                           ; 1 bytes @ 0x0
  7474                           
  7475  0070                     ?_WDT_Initialize:	
  7476                           ; 1 bytes @ 0x0
  7477                           
  7478  0070                     ?_TMR4_Initialize:	
  7479                           ; 1 bytes @ 0x0
  7480                           
  7481  0070                     ?_TMR2_Initialize:	
  7482                           ; 1 bytes @ 0x0
  7483                           
  7484  0070                     ?_TMR0_Initialize:	
  7485                           ; 1 bytes @ 0x0
  7486                           
  7487  0070                     ?_EUSART_Initialize:	
  7488                           ; 1 bytes @ 0x0
  7489                           
  7490  0070                     ?_TMR0_ISR:	
  7491                           ; 1 bytes @ 0x0
  7492                           
  7493  0070                     ?_TMR4_ISR:	
  7494                           ; 1 bytes @ 0x0
  7495                           
  7496  0070                     ?_TMR2_ISR:	
  7497                           ; 1 bytes @ 0x0
  7498                           
  7499  0070                     ?_EUSART_Receive_ISR:	
  7500                           ; 1 bytes @ 0x0
  7501                           
  7502  0070                     ??_EUSART_Receive_ISR:	
  7503                           ; 1 bytes @ 0x0
  7504                           
  7505  0070                     ?_EUSART_Transmit_ISR:	
  7506                           ; 1 bytes @ 0x0
  7507                           
  7508  0070                     ??_EUSART_Transmit_ISR:	
  7509                           ; 1 bytes @ 0x0
  7510                           
  7511  0070                     ?_i2c_busCollisionISR:	
  7512                           ; 1 bytes @ 0x0
  7513                           
  7514  0070                     ??_i2c_busCollisionISR:	
  7515                           ; 1 bytes @ 0x0
  7516                           
  7517  0070                     ?_i2c_ISR:	
  7518                           ; 1 bytes @ 0x0
  7519                           
  7520  0070                     ?_i2c_poller:	
  7521                           ; 1 bytes @ 0x0
  7522                           
  7523  0070                     ?_TMR0_DefaultInterruptHandler:	
  7524                           ; 1 bytes @ 0x0
  7525                           
  7526  0070                     ?_TMR2_DefaultInterruptHandler:	
  7527                           ; 1 bytes @ 0x0
  7528                           
  7529  0070                     ?_main_initialize:	
  7530                           ; 1 bytes @ 0x0
  7531                           
  7532  0070                     ?_doRelMove:	
  7533                           ; 1 bytes @ 0x0
  7534                           
  7535  0070                     ?_doAbsMove:	
  7536                           ; 1 bytes @ 0x0
  7537                           
  7538  0070                     ?_calcHeaterPins:	
  7539                           ; 1 bytes @ 0x0
  7540                           
  7541  0070                     ?_drv_write_wvfrm:	
  7542                           ; 1 bytes @ 0x0
  7543                           
  7544  0070                     ?_TMR4_StartTimer:	
  7545                           ; 1 bytes @ 0x0
  7546                           
  7547  0070                     ?_drv_reset:	
  7548                           ; 1 bytes @ 0x0
  7549                           
  7550  0070                     ?_TMR4_DefaultInterruptHandler:	
  7551                           ; 1 bytes @ 0x0
  7552                           
  7553  0070                     ?_toupper:	
  7554                           ; 1 bytes @ 0x0
  7555                           
  7556  0070                     ?_SYSTEM_Initialize:	
  7557                           ; 1 bytes @ 0x0
  7558                           
  7559  0070                     ?_INTERRUPT_InterruptManager:	
  7560                           ; 1 bytes @ 0x0
  7561                           
  7562  0070                     ?_EUSART_Read:	
  7563                           ; 1 bytes @ 0x0
  7564                           
  7565  0070                     ?_EUSART_Write:	
  7566                           ; 1 bytes @ 0x0
  7567                           
  7568  0070                     ?_putch:	
  7569                           ; 1 bytes @ 0x0
  7570                           
  7571  0070                     ?_mssp1_clearIRQ:	
  7572                           ; 1 bytes @ 0x0
  7573                           
  7574  0070                     ?_mssp1_setIRQ:	
  7575                           ; 1 bytes @ 0x0
  7576                           
  7577  0070                     ?_mssp1_waitForEvent:	
  7578                           ; 1 bytes @ 0x0
  7579                           
  7580  0070                     ?_i2c1_driver_resetBus:	
  7581                           ; 1 bytes @ 0x0
  7582                           
  7583  0070                     ?_i2c1_driver_start:	
  7584                           ; 1 bytes @ 0x0
  7585                           
  7586  0070                     ?_i2c1_driver_restart:	
  7587                           ; 1 bytes @ 0x0
  7588                           
  7589  0070                     ?_i2c1_driver_stop:	
  7590                           ; 1 bytes @ 0x0
  7591                           
  7592  0070                     ?_i2c1_driver_startRX:	
  7593                           ; 1 bytes @ 0x0
  7594                           
  7595  0070                     ?_i2c1_driver_getRXData:	
  7596                           ; 1 bytes @ 0x0
  7597                           
  7598  0070                     ?_i2c1_driver_TXData:	
  7599                           ; 1 bytes @ 0x0
  7600                           
  7601  0070                     ?_i2c1_driver_sendACK:	
  7602                           ; 1 bytes @ 0x0
  7603                           
  7604  0070                     ?_i2c1_driver_sendNACK:	
  7605                           ; 1 bytes @ 0x0
  7606                           
  7607  0070                     ?_i2c1_driver_clearBusCollision:	
  7608                           ; 1 bytes @ 0x0
  7609                           
  7610  0070                     ??_i2c1_driver_clearBusCollision:	
  7611                           ; 1 bytes @ 0x0
  7612                           
  7613  0070                     ?_i2c_open:	
  7614                           ; 1 bytes @ 0x0
  7615                           
  7616  0070                     ?_i2c_setAddress:	
  7617                           ; 1 bytes @ 0x0
  7618                           
  7619  0070                     ?_i2c_masterOperation:	
  7620                           ; 1 bytes @ 0x0
  7621                           
  7622  0070                     ?_do_I2C_RESET:	
  7623                           ; 1 bytes @ 0x0
  7624                           
  7625  0070                     ?_do_I2C_IDLE:	
  7626                           ; 1 bytes @ 0x0
  7627                           
  7628  0070                     ?_do_I2C_SEND_RESTART_READ:	
  7629                           ; 1 bytes @ 0x0
  7630                           
  7631  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  7632                           ; 1 bytes @ 0x0
  7633                           
  7634  0070                     ?_do_I2C_SEND_RESTART:	
  7635                           ; 1 bytes @ 0x0
  7636                           
  7637  0070                     ?_do_I2C_SEND_STOP:	
  7638                           ; 1 bytes @ 0x0
  7639                           
  7640  0070                     ?_do_I2C_SEND_ADR_READ:	
  7641                           ; 1 bytes @ 0x0
  7642                           
  7643  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  7644                           ; 1 bytes @ 0x0
  7645                           
  7646  0070                     ?_do_I2C_RCEN:	
  7647                           ; 1 bytes @ 0x0
  7648                           
  7649  0070                     ?_do_I2C_DO_ACK:	
  7650                           ; 1 bytes @ 0x0
  7651                           
  7652  0070                     ?_do_I2C_DO_NACK_STOP:	
  7653                           ; 1 bytes @ 0x0
  7654                           
  7655  0070                     ?_do_I2C_DO_NACK_RESTART:	
  7656                           ; 1 bytes @ 0x0
  7657                           
  7658  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  7659                           ; 1 bytes @ 0x0
  7660                           
  7661  0070                     ?_do_I2C_TX:	
  7662                           ; 1 bytes @ 0x0
  7663                           
  7664  0070                     ?_do_I2C_RX:	
  7665                           ; 1 bytes @ 0x0
  7666                           
  7667  0070                     ?_do_I2C_TX_EMPTY:	
  7668                           ; 1 bytes @ 0x0
  7669                           
  7670  0070                     ?_TMR0_StartTimer:	
  7671                           ; 1 bytes @ 0x0
  7672                           
  7673  0070                     ?_TMR0_StopTimer:	
  7674                           ; 1 bytes @ 0x0
  7675                           
  7676  0070                     ??_TMR0_StopTimer:	
  7677                           ; 1 bytes @ 0x0
  7678                           
  7679  0070                     ?_TMR0_Write8bitTimer:	
  7680                           ; 1 bytes @ 0x0
  7681                           
  7682  0070                     ??_TMR0_Write8bitTimer:	
  7683                           ; 1 bytes @ 0x0
  7684                           
  7685  0070                     ?_TMR0_Load8bitPeriod:	
  7686                           ; 1 bytes @ 0x0
  7687                           
  7688  0070                     ?_TMR2_StartTimer:	
  7689                           ; 1 bytes @ 0x0
  7690                           
  7691  0070                     ?_TMR2_StopTimer:	
  7692                           ; 1 bytes @ 0x0
  7693                           
  7694  0070                     ??_TMR2_StopTimer:	
  7695                           ; 1 bytes @ 0x0
  7696                           
  7697  0070                     ?_TMR2_WriteTimer:	
  7698                           ; 1 bytes @ 0x0
  7699                           
  7700  0070                     ??_TMR2_WriteTimer:	
  7701                           ; 1 bytes @ 0x0
  7702                           
  7703  0070                     ?_TMR2_LoadPeriodRegister:	
  7704                           ; 1 bytes @ 0x0
  7705                           
  7706  0070                     ?_main:	
  7707                           ; 1 bytes @ 0x0
  7708                           
  7709  0070                     ?_TMR4_StopTimer:	
  7710                           ; 1 bytes @ 0x0
  7711                           
  7712  0070                     ??_TMR4_StopTimer:	
  7713                           ; 1 bytes @ 0x0
  7714                           
  7715  0070                     ?_TMR4_WriteTimer:	
  7716                           ; 1 bytes @ 0x0
  7717                           
  7718  0070                     ??_TMR4_WriteTimer:	
  7719                           ; 1 bytes @ 0x0
  7720                           
  7721  0070                     ?i1_send_last_2bytes_IK:	
  7722                           ; 1 bytes @ 0x0
  7723                           
  7724  0070                     ?i1_send_2bytes_latchless_IK:	
  7725                           ; 1 bytes @ 0x0
  7726                           
  7727  0070                     ?i1_mssp1_clearIRQ:	
  7728                           ; 1 bytes @ 0x0
  7729                           
  7730  0070                     ??i1_mssp1_clearIRQ:	
  7731                           ; 1 bytes @ 0x0
  7732                           
  7733  0070                     ?i1_mssp1_setIRQ:	
  7734                           ; 1 bytes @ 0x0
  7735                           
  7736  0070                     ??i1_mssp1_setIRQ:	
  7737                           ; 1 bytes @ 0x0
  7738                           
  7739  0070                     ?i1_i2c1_driver_resetBus:	
  7740                           ; 1 bytes @ 0x0
  7741                           
  7742  0070                     ??i1_i2c1_driver_resetBus:	
  7743                           ; 1 bytes @ 0x0
  7744                           
  7745  0070                     ?i1_i2c1_driver_restart:	
  7746                           ; 1 bytes @ 0x0
  7747                           
  7748  0070                     ??i1_i2c1_driver_restart:	
  7749                           ; 1 bytes @ 0x0
  7750                           
  7751  0070                     ?i1_i2c1_driver_stop:	
  7752                           ; 1 bytes @ 0x0
  7753                           
  7754  0070                     ??i1_i2c1_driver_stop:	
  7755                           ; 1 bytes @ 0x0
  7756                           
  7757  0070                     ??i1_i2c1_driver_isNACK:	
  7758                           ; 1 bytes @ 0x0
  7759                           
  7760  0070                     ?i1_i2c1_driver_startRX:	
  7761                           ; 1 bytes @ 0x0
  7762                           
  7763  0070                     ??i1_i2c1_driver_startRX:	
  7764                           ; 1 bytes @ 0x0
  7765                           
  7766  0070                     ?i1_i2c1_driver_getRXData:	
  7767                           ; 1 bytes @ 0x0
  7768                           
  7769  0070                     ??i1_i2c1_driver_getRXData:	
  7770                           ; 1 bytes @ 0x0
  7771                           
  7772  0070                     ?i1_i2c1_driver_TXData:	
  7773                           ; 1 bytes @ 0x0
  7774                           
  7775  0070                     ??i1_i2c1_driver_TXData:	
  7776                           ; 1 bytes @ 0x0
  7777                           
  7778  0070                     ?i1_i2c1_driver_sendACK:	
  7779                           ; 1 bytes @ 0x0
  7780                           
  7781  0070                     ??i1_i2c1_driver_sendACK:	
  7782                           ; 1 bytes @ 0x0
  7783                           
  7784  0070                     ?i1_i2c1_driver_sendNACK:	
  7785                           ; 1 bytes @ 0x0
  7786                           
  7787  0070                     ??i1_i2c1_driver_sendNACK:	
  7788                           ; 1 bytes @ 0x0
  7789                           
  7790  0070                     ?i1_do_I2C_RESET:	
  7791                           ; 1 bytes @ 0x0
  7792                           
  7793  0070                     ??i1_do_I2C_RESET:	
  7794                           ; 1 bytes @ 0x0
  7795                           
  7796  0070                     ?i1_do_I2C_IDLE:	
  7797                           ; 1 bytes @ 0x0
  7798                           
  7799  0070                     ??i1_do_I2C_IDLE:	
  7800                           ; 1 bytes @ 0x0
  7801                           
  7802  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  7803                           ; 1 bytes @ 0x0
  7804                           
  7805  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  7806                           ; 1 bytes @ 0x0
  7807                           
  7808  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  7809                           ; 1 bytes @ 0x0
  7810                           
  7811  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  7812                           ; 1 bytes @ 0x0
  7813                           
  7814  0070                     ?i1_do_I2C_SEND_RESTART:	
  7815                           ; 1 bytes @ 0x0
  7816                           
  7817  0070                     ??i1_do_I2C_SEND_RESTART:	
  7818                           ; 1 bytes @ 0x0
  7819                           
  7820  0070                     ?i1_do_I2C_SEND_STOP:	
  7821                           ; 1 bytes @ 0x0
  7822                           
  7823  0070                     ??i1_do_I2C_SEND_STOP:	
  7824                           ; 1 bytes @ 0x0
  7825                           
  7826  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  7827                           ; 1 bytes @ 0x0
  7828                           
  7829  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  7830                           ; 1 bytes @ 0x0
  7831                           
  7832  0070                     ?i1_do_I2C_RCEN:	
  7833                           ; 1 bytes @ 0x0
  7834                           
  7835  0070                     ??i1_do_I2C_RCEN:	
  7836                           ; 1 bytes @ 0x0
  7837                           
  7838  0070                     ?i1_do_I2C_DO_ACK:	
  7839                           ; 1 bytes @ 0x0
  7840                           
  7841  0070                     ??i1_do_I2C_DO_ACK:	
  7842                           ; 1 bytes @ 0x0
  7843                           
  7844  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  7845                           ; 1 bytes @ 0x0
  7846                           
  7847  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  7848                           ; 1 bytes @ 0x0
  7849                           
  7850  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  7851                           ; 1 bytes @ 0x0
  7852                           
  7853  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  7854                           ; 1 bytes @ 0x0
  7855                           
  7856  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  7857                           ; 1 bytes @ 0x0
  7858                           
  7859  0070                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  7860                           ; 1 bytes @ 0x0
  7861                           
  7862  0070                     ?i1_do_I2C_TX:	
  7863                           ; 1 bytes @ 0x0
  7864                           
  7865  0070                     ?i1_do_I2C_RX:	
  7866                           ; 1 bytes @ 0x0
  7867                           
  7868  0070                     ??i1_do_I2C_RX:	
  7869                           ; 1 bytes @ 0x0
  7870                           
  7871  0070                     ?i1_do_I2C_TX_EMPTY:	
  7872                           ; 1 bytes @ 0x0
  7873                           
  7874  0070                     ??i1_do_I2C_TX_EMPTY:	
  7875                           ; 1 bytes @ 0x0
  7876                           
  7877  0070                     ?i1_i2c_ISR:	
  7878                           ; 1 bytes @ 0x0
  7879                           
  7880  0070                     ?i1_returnStop:	
  7881                           ; 1 bytes @ 0x0
  7882                           
  7883  0070                     ?i1_returnReset:	
  7884                           ; 1 bytes @ 0x0
  7885                           
  7886  0070                     ?_execCmd:	
  7887                           ; 1 bytes @ 0x0
  7888                           
  7889  0070                     TMR0_Write8bitTimer@timerVal:	
  7890                           ; 2 bytes @ 0x0
  7891                           
  7892  0070                     TMR2_WriteTimer@timerVal:	
  7893                           ; 1 bytes @ 0x0
  7894                           
  7895  0070                     TMR4_WriteTimer@timerVal:	
  7896                           ; 1 bytes @ 0x0
  7897                           
  7898  0070                     i1i2c1_driver_TXData@d:	
  7899                           ; 1 bytes @ 0x0
  7900                           
  7901  0070                     i1returnStop@p:	
  7902                           ; 1 bytes @ 0x0
  7903                           
  7904  0070                     i1returnReset@p:	
  7905                           ; 1 bytes @ 0x0
  7906                           
  7907  0070                     i1send_last_2bytes_IK@data:	
  7908                           ; 1 bytes @ 0x0
  7909                           
  7910  0070                     i1send_2bytes_latchless_IK@data:	
  7911                           ; 2 bytes @ 0x0
  7912                           
  7913                           
  7914                           ; 2 bytes @ 0x0
  7915  0070                     	ds	1
  7916  0071                     ??_TMR4_ISR:	
  7917  0071                     ??_TMR2_ISR:	
  7918                           ; 1 bytes @ 0x1
  7919                           
  7920  0071                     ??_TMR2_DefaultInterruptHandler:	
  7921                           ; 1 bytes @ 0x1
  7922                           
  7923  0071                     ??_TMR4_DefaultInterruptHandler:	
  7924                           ; 1 bytes @ 0x1
  7925                           
  7926  0071                     ??i1_do_I2C_SEND_ADR_READ:	
  7927                           ; 1 bytes @ 0x1
  7928                           
  7929  0071                     ??i1_do_I2C_SEND_ADR_WRITE:	
  7930                           ; 1 bytes @ 0x1
  7931                           
  7932  0071                     ??i1_do_I2C_TX:	
  7933                           ; 1 bytes @ 0x1
  7934                           
  7935  0071                     ??i1_returnStop:	
  7936                           ; 1 bytes @ 0x1
  7937                           
  7938  0071                     ??i1_returnReset:	
  7939                           ; 1 bytes @ 0x1
  7940                           
  7941                           
  7942                           ; 1 bytes @ 0x1
  7943  0071                     	ds	1
  7944  0072                     ??i1_send_2bytes_latchless_IK:	
  7945  0072                     i1send_last_2bytes_IK@latch_start:	
  7946                           ; 1 bytes @ 0x2
  7947                           
  7948                           
  7949                           ; 1 bytes @ 0x2
  7950  0072                     	ds	1
  7951  0073                     i1send_last_2bytes_IK@topOrBottom:	
  7952  0073                     i1_do_I2C_TX$1204:	
  7953                           ; 2 bytes @ 0x3
  7954                           
  7955                           
  7956                           ; 2 bytes @ 0x3
  7957  0073                     	ds	2
  7958  0075                     ??i1_send_last_2bytes_IK:	
  7959  0075                     ??i1_i2c_ISR:	
  7960                           ; 1 bytes @ 0x5
  7961                           
  7962                           
  7963                           ; 1 bytes @ 0x5
  7964  0075                     	ds	1
  7965  0076                     i1send_2bytes_latchless_IK@j:	
  7966                           
  7967                           ; 2 bytes @ 0x6
  7968  0076                     	ds	3
  7969  0079                     i1send_last_2bytes_IK@j:	
  7970                           
  7971                           ; 2 bytes @ 0x9
  7972  0079                     	ds	2
  7973  007B                     ??i1_send_2length_2bytes_IK:	
  7974                           
  7975                           ; 1 bytes @ 0xB
  7976  007B                     	ds	1
  7977  007C                     ??_TMR0_ISR:	
  7978  007C                     ??_TMR0_DefaultInterruptHandler:	
  7979                           ; 1 bytes @ 0xC
  7980                           
  7981  007C                     ??_INTERRUPT_InterruptManager:	
  7982                           ; 1 bytes @ 0xC
  7983                           
  7984                           
  7985                           ; 1 bytes @ 0xC
  7986  007C                     	ds	1
  7987                           
  7988                           	psect	cstackBANK0
  7989  0020                     __pcstackBANK0:	
  7990  0020                     ?i1_send_2length_2bytes_IK:	
  7991  0020                     i1send_2length_2bytes_IK@data1:	
  7992                           ; 1 bytes @ 0x0
  7993                           
  7994                           
  7995                           ; 2 bytes @ 0x0
  7996  0020                     	ds	2
  7997  0022                     i1send_2length_2bytes_IK@data2:	
  7998                           
  7999                           ; 2 bytes @ 0x2
  8000  0022                     	ds	2
  8001  0024                     i1send_2length_2bytes_IK@latch_start:	
  8002                           
  8003                           ; 1 bytes @ 0x4
  8004  0024                     	ds	1
  8005  0025                     i1send_2length_2bytes_IK@topOrBottom:	
  8006                           
  8007                           ; 2 bytes @ 0x5
  8008  0025                     	ds	2
  8009  0027                     ?i1_LEDsOn:	
  8010  0027                     i1LEDsOn@LEDpins:	
  8011                           ; 1 bytes @ 0x7
  8012                           
  8013                           
  8014                           ; 4 bytes @ 0x7
  8015  0027                     	ds	4
  8016  002B                     i1LEDsOn@topOrBottom:	
  8017                           
  8018                           ; 2 bytes @ 0xB
  8019  002B                     	ds	2
  8020  002D                     ??i1_LEDsOn:	
  8021                           
  8022                           ; 1 bytes @ 0xD
  8023  002D                     	ds	4
  8024  0031                     ??_PMD_Initialize:	
  8025  0031                     ??_PIN_MANAGER_Initialize:	
  8026                           ; 1 bytes @ 0x11
  8027                           
  8028  0031                     ??_OSCILLATOR_Initialize:	
  8029                           ; 1 bytes @ 0x11
  8030                           
  8031  0031                     ??_WDT_Initialize:	
  8032                           ; 1 bytes @ 0x11
  8033                           
  8034  0031                     ??_EUSART_Initialize:	
  8035                           ; 1 bytes @ 0x11
  8036                           
  8037  0031                     ?_returnStop:	
  8038                           ; 1 bytes @ 0x11
  8039                           
  8040  0031                     ?_returnReset:	
  8041                           ; 1 bytes @ 0x11
  8042                           
  8043  0031                     ?_TMR0_SetInterruptHandler:	
  8044                           ; 1 bytes @ 0x11
  8045                           
  8046  0031                     ?_TMR2_SetInterruptHandler:	
  8047                           ; 1 bytes @ 0x11
  8048                           
  8049  0031                     ??_calcHeaterPins:	
  8050                           ; 1 bytes @ 0x11
  8051                           
  8052  0031                     ??_TMR4_StartTimer:	
  8053                           ; 1 bytes @ 0x11
  8054                           
  8055  0031                     ?_TMR4_SetInterruptHandler:	
  8056                           ; 1 bytes @ 0x11
  8057                           
  8058  0031                     ??_isdigit:	
  8059                           ; 1 bytes @ 0x11
  8060                           
  8061  0031                     ??_toupper:	
  8062                           ; 1 bytes @ 0x11
  8063                           
  8064  0031                     ?_send_last_2bytes_IK:	
  8065                           ; 1 bytes @ 0x11
  8066                           
  8067  0031                     ?_send_2bytes_latchless_IK:	
  8068                           ; 1 bytes @ 0x11
  8069                           
  8070  0031                     ??_EUSART_Read:	
  8071                           ; 1 bytes @ 0x11
  8072                           
  8073  0031                     ??_EUSART_Write:	
  8074                           ; 1 bytes @ 0x11
  8075                           
  8076  0031                     ??_mssp1_IRQisEnabled:	
  8077                           ; 1 bytes @ 0x11
  8078                           
  8079  0031                     ??_mssp1_clearIRQ:	
  8080                           ; 1 bytes @ 0x11
  8081                           
  8082  0031                     ??_mssp1_setIRQ:	
  8083                           ; 1 bytes @ 0x11
  8084                           
  8085  0031                     ??_mssp1_waitForEvent:	
  8086                           ; 1 bytes @ 0x11
  8087                           
  8088  0031                     ??_i2c1_driver_open:	
  8089                           ; 1 bytes @ 0x11
  8090                           
  8091  0031                     ??_i2c1_driver_resetBus:	
  8092                           ; 1 bytes @ 0x11
  8093                           
  8094  0031                     ??_i2c1_driver_start:	
  8095                           ; 1 bytes @ 0x11
  8096                           
  8097  0031                     ??_i2c1_driver_restart:	
  8098                           ; 1 bytes @ 0x11
  8099                           
  8100  0031                     ??_i2c1_driver_stop:	
  8101                           ; 1 bytes @ 0x11
  8102                           
  8103  0031                     ??_i2c1_driver_isNACK:	
  8104                           ; 1 bytes @ 0x11
  8105                           
  8106  0031                     ??_i2c1_driver_startRX:	
  8107                           ; 1 bytes @ 0x11
  8108                           
  8109  0031                     ??_i2c1_driver_getRXData:	
  8110                           ; 1 bytes @ 0x11
  8111                           
  8112  0031                     ??_i2c1_driver_TXData:	
  8113                           ; 1 bytes @ 0x11
  8114                           
  8115  0031                     ??_i2c1_driver_sendACK:	
  8116                           ; 1 bytes @ 0x11
  8117                           
  8118  0031                     ??_i2c1_driver_sendNACK:	
  8119                           ; 1 bytes @ 0x11
  8120                           
  8121  0031                     ?_i2c1_driver_setBusCollisionISR:	
  8122                           ; 1 bytes @ 0x11
  8123                           
  8124  0031                     ?_i2c1_driver_setI2cISR:	
  8125                           ; 1 bytes @ 0x11
  8126                           
  8127  0031                     ??_i2c_setAddress:	
  8128                           ; 1 bytes @ 0x11
  8129                           
  8130  0031                     ?_i2c_setBuffer:	
  8131                           ; 1 bytes @ 0x11
  8132                           
  8133  0031                     ??_do_I2C_RESET:	
  8134                           ; 1 bytes @ 0x11
  8135                           
  8136  0031                     ??_do_I2C_IDLE:	
  8137                           ; 1 bytes @ 0x11
  8138                           
  8139  0031                     ??_do_I2C_SEND_RESTART_READ:	
  8140                           ; 1 bytes @ 0x11
  8141                           
  8142  0031                     ??_do_I2C_SEND_RESTART_WRITE:	
  8143                           ; 1 bytes @ 0x11
  8144                           
  8145  0031                     ??_do_I2C_SEND_RESTART:	
  8146                           ; 1 bytes @ 0x11
  8147                           
  8148  0031                     ??_do_I2C_SEND_STOP:	
  8149                           ; 1 bytes @ 0x11
  8150                           
  8151  0031                     ??_do_I2C_RCEN:	
  8152                           ; 1 bytes @ 0x11
  8153                           
  8154  0031                     ??_do_I2C_DO_ACK:	
  8155                           ; 1 bytes @ 0x11
  8156                           
  8157  0031                     ??_do_I2C_DO_NACK_STOP:	
  8158                           ; 1 bytes @ 0x11
  8159                           
  8160  0031                     ??_do_I2C_DO_NACK_RESTART:	
  8161                           ; 1 bytes @ 0x11
  8162                           
  8163  0031                     ??_do_I2C_DO_ADDRESS_NACK:	
  8164                           ; 1 bytes @ 0x11
  8165                           
  8166  0031                     ??_do_I2C_RX:	
  8167                           ; 1 bytes @ 0x11
  8168                           
  8169  0031                     ??_do_I2C_TX_EMPTY:	
  8170                           ; 1 bytes @ 0x11
  8171                           
  8172  0031                     ??_TMR0_StartTimer:	
  8173                           ; 1 bytes @ 0x11
  8174                           
  8175  0031                     ??_TMR0_Load8bitPeriod:	
  8176                           ; 1 bytes @ 0x11
  8177                           
  8178  0031                     ??_TMR2_StartTimer:	
  8179                           ; 1 bytes @ 0x11
  8180                           
  8181  0031                     ??_TMR2_LoadPeriodRegister:	
  8182                           ; 1 bytes @ 0x11
  8183                           
  8184  0031                     ?_strchr:	
  8185                           ; 1 bytes @ 0x11
  8186                           
  8187  0031                     ?___wmul:	
  8188                           ; 2 bytes @ 0x11
  8189                           
  8190  0031                     ?___ftpack:	
  8191                           ; 2 bytes @ 0x11
  8192                           
  8193  0031                     ?_frexp:	
  8194                           ; 3 bytes @ 0x11
  8195                           
  8196  0031                     ?___lldiv:	
  8197                           ; 3 bytes @ 0x11
  8198                           
  8199  0031                     mssp1_waitForEvent@timeout:	
  8200                           ; 4 bytes @ 0x11
  8201                           
  8202  0031                     i2c1_driver_TXData@d:	
  8203                           ; 1 bytes @ 0x11
  8204                           
  8205  0031                     returnStop@p:	
  8206                           ; 1 bytes @ 0x11
  8207                           
  8208  0031                     returnReset@p:	
  8209                           ; 1 bytes @ 0x11
  8210                           
  8211  0031                     TMR0_Load8bitPeriod@periodVal:	
  8212                           ; 1 bytes @ 0x11
  8213                           
  8214  0031                     TMR2_LoadPeriodRegister@periodVal:	
  8215                           ; 1 bytes @ 0x11
  8216                           
  8217  0031                     _isdigit$2365:	
  8218                           ; 1 bytes @ 0x11
  8219                           
  8220  0031                     send_last_2bytes_IK@data:	
  8221                           ; 1 bytes @ 0x11
  8222                           
  8223  0031                     send_2bytes_latchless_IK@data:	
  8224                           ; 2 bytes @ 0x11
  8225                           
  8226  0031                     i2c1_driver_setBusCollisionISR@f:	
  8227                           ; 2 bytes @ 0x11
  8228                           
  8229  0031                     i2c1_driver_setI2cISR@f:	
  8230                           ; 2 bytes @ 0x11
  8231                           
  8232  0031                     i2c_setBuffer@buffer:	
  8233                           ; 2 bytes @ 0x11
  8234                           
  8235  0031                     TMR0_SetInterruptHandler@InterruptHandler:	
  8236                           ; 2 bytes @ 0x11
  8237                           
  8238  0031                     TMR2_SetInterruptHandler@InterruptHandler:	
  8239                           ; 2 bytes @ 0x11
  8240                           
  8241  0031                     TMR4_SetInterruptHandler@InterruptHandler:	
  8242                           ; 2 bytes @ 0x11
  8243                           
  8244  0031                     ___wmul@multiplier:	
  8245                           ; 2 bytes @ 0x11
  8246                           
  8247  0031                     strchr@ptr:	
  8248                           ; 2 bytes @ 0x11
  8249                           
  8250  0031                     ___ftpack@arg:	
  8251                           ; 2 bytes @ 0x11
  8252                           
  8253  0031                     frexp@value:	
  8254                           ; 3 bytes @ 0x11
  8255                           
  8256  0031                     ___lldiv@divisor:	
  8257                           ; 3 bytes @ 0x11
  8258                           
  8259                           
  8260                           ; 4 bytes @ 0x11
  8261  0031                     	ds	1
  8262  0032                     ??_returnStop:	
  8263  0032                     ??_returnReset:	
  8264                           ; 1 bytes @ 0x12
  8265                           
  8266  0032                     ??_do_I2C_SEND_ADR_READ:	
  8267                           ; 1 bytes @ 0x12
  8268                           
  8269  0032                     ??_do_I2C_SEND_ADR_WRITE:	
  8270                           ; 1 bytes @ 0x12
  8271                           
  8272  0032                     ??_do_I2C_TX:	
  8273                           ; 1 bytes @ 0x12
  8274                           
  8275  0032                     EUSART_Read@readValue:	
  8276                           ; 1 bytes @ 0x12
  8277                           
  8278  0032                     EUSART_Write@txData:	
  8279                           ; 1 bytes @ 0x12
  8280                           
  8281  0032                     i2c_setAddress@address:	
  8282                           ; 1 bytes @ 0x12
  8283                           
  8284  0032                     isdigit@c:	
  8285                           ; 1 bytes @ 0x12
  8286                           
  8287  0032                     toupper@c:	
  8288                           ; 1 bytes @ 0x12
  8289                           
  8290                           
  8291                           ; 1 bytes @ 0x12
  8292  0032                     	ds	1
  8293  0033                     ??_TMR4_Initialize:	
  8294  0033                     ??_TMR2_Initialize:	
  8295                           ; 1 bytes @ 0x13
  8296                           
  8297  0033                     ??_TMR0_Initialize:	
  8298                           ; 1 bytes @ 0x13
  8299                           
  8300  0033                     ??_TMR0_SetInterruptHandler:	
  8301                           ; 1 bytes @ 0x13
  8302                           
  8303  0033                     ??_TMR2_SetInterruptHandler:	
  8304                           ; 1 bytes @ 0x13
  8305                           
  8306  0033                     ??_TMR4_SetInterruptHandler:	
  8307                           ; 1 bytes @ 0x13
  8308                           
  8309  0033                     ??_SYSTEM_Initialize:	
  8310                           ; 1 bytes @ 0x13
  8311                           
  8312  0033                     ??_send_2bytes_latchless_IK:	
  8313                           ; 1 bytes @ 0x13
  8314                           
  8315  0033                     ??_putch:	
  8316                           ; 1 bytes @ 0x13
  8317                           
  8318  0033                     ??_i2c1_driver_setBusCollisionISR:	
  8319                           ; 1 bytes @ 0x13
  8320                           
  8321  0033                     ??_i2c1_driver_setI2cISR:	
  8322                           ; 1 bytes @ 0x13
  8323                           
  8324  0033                     ??_i2c_open:	
  8325                           ; 1 bytes @ 0x13
  8326                           
  8327  0033                     ?_stricmp:	
  8328                           ; 1 bytes @ 0x13
  8329                           
  8330  0033                     send_last_2bytes_IK@latch_start:	
  8331                           ; 2 bytes @ 0x13
  8332                           
  8333  0033                     putch@txData:	
  8334                           ; 1 bytes @ 0x13
  8335                           
  8336  0033                     i2c_setBuffer@bufferSize:	
  8337                           ; 1 bytes @ 0x13
  8338                           
  8339  0033                     ___wmul@multiplicand:	
  8340                           ; 2 bytes @ 0x13
  8341                           
  8342  0033                     stricmp@s2:	
  8343                           ; 2 bytes @ 0x13
  8344                           
  8345  0033                     strchr@chr:	
  8346                           ; 2 bytes @ 0x13
  8347                           
  8348                           
  8349                           ; 2 bytes @ 0x13
  8350  0033                     	ds	1
  8351  0034                     i2c_open@ret:	
  8352  0034                     ___ftpack@exp:	
  8353                           ; 1 bytes @ 0x14
  8354                           
  8355  0034                     frexp@eptr:	
  8356                           ; 1 bytes @ 0x14
  8357                           
  8358  0034                     send_last_2bytes_IK@topOrBottom:	
  8359                           ; 1 bytes @ 0x14
  8360                           
  8361  0034                     _do_I2C_TX$1204:	
  8362                           ; 2 bytes @ 0x14
  8363                           
  8364                           
  8365                           ; 2 bytes @ 0x14
  8366  0034                     	ds	1
  8367  0035                     ??_stricmp:	
  8368  0035                     ??_frexp:	
  8369                           ; 1 bytes @ 0x15
  8370                           
  8371  0035                     ??_strchr:	
  8372                           ; 1 bytes @ 0x15
  8373                           
  8374  0035                     ??_i2c_setBuffer:	
  8375                           ; 1 bytes @ 0x15
  8376                           
  8377  0035                     ??___wmul:	
  8378                           ; 1 bytes @ 0x15
  8379                           
  8380  0035                     i2c_open@address:	
  8381                           ; 1 bytes @ 0x15
  8382                           
  8383  0035                     ___ftpack@sign:	
  8384                           ; 1 bytes @ 0x15
  8385                           
  8386  0035                     ___wmul@product:	
  8387                           ; 1 bytes @ 0x15
  8388                           
  8389  0035                     ___lldiv@dividend:	
  8390                           ; 2 bytes @ 0x15
  8391                           
  8392                           
  8393                           ; 4 bytes @ 0x15
  8394  0035                     	ds	1
  8395  0036                     ??_i2c_ISR:	
  8396  0036                     ??___ftpack:	
  8397                           ; 1 bytes @ 0x16
  8398                           
  8399  0036                     ??_send_last_2bytes_IK:	
  8400                           ; 1 bytes @ 0x16
  8401                           
  8402                           
  8403                           ; 1 bytes @ 0x16
  8404  0036                     	ds	1
  8405  0037                     ??_i2c_poller:	
  8406  0037                     ??_i2c_masterOperation:	
  8407                           ; 1 bytes @ 0x17
  8408                           
  8409  0037                     ?_atoi:	
  8410                           ; 1 bytes @ 0x17
  8411                           
  8412  0037                     ?___awdiv:	
  8413                           ; 2 bytes @ 0x17
  8414                           
  8415  0037                     stricmp@r:	
  8416                           ; 2 bytes @ 0x17
  8417                           
  8418  0037                     send_2bytes_latchless_IK@j:	
  8419                           ; 1 bytes @ 0x17
  8420                           
  8421  0037                     ___awdiv@divisor:	
  8422                           ; 2 bytes @ 0x17
  8423                           
  8424                           
  8425                           ; 2 bytes @ 0x17
  8426  0037                     	ds	1
  8427  0038                     ?_strspn:	
  8428  0038                     ?_strcspn:	
  8429                           ; 2 bytes @ 0x18
  8430                           
  8431  0038                     i2c_masterOperation@read:	
  8432                           ; 2 bytes @ 0x18
  8433                           
  8434  0038                     stricmp@s1:	
  8435                           ; 1 bytes @ 0x18
  8436                           
  8437  0038                     strcspn@s2:	
  8438                           ; 1 bytes @ 0x18
  8439                           
  8440  0038                     strspn@s2:	
  8441                           ; 2 bytes @ 0x18
  8442                           
  8443                           
  8444                           ; 2 bytes @ 0x18
  8445  0038                     	ds	1
  8446  0039                     ??_atoi:	
  8447  0039                     ??___lldiv:	
  8448                           ; 1 bytes @ 0x19
  8449                           
  8450  0039                     ?___altoft:	
  8451                           ; 1 bytes @ 0x19
  8452                           
  8453  0039                     i2c_masterOperation@ret:	
  8454                           ; 3 bytes @ 0x19
  8455                           
  8456  0039                     ___awdiv@dividend:	
  8457                           ; 1 bytes @ 0x19
  8458                           
  8459  0039                     ___altoft@c:	
  8460                           ; 2 bytes @ 0x19
  8461                           
  8462                           
  8463                           ; 4 bytes @ 0x19
  8464  0039                     	ds	1
  8465  003A                     ??_drv_write_wvfrm:	
  8466  003A                     ??_strspn:	
  8467                           ; 1 bytes @ 0x1A
  8468                           
  8469  003A                     ??_strcspn:	
  8470                           ; 1 bytes @ 0x1A
  8471                           
  8472  003A                     drv_write_wvfrm@upOrDown:	
  8473                           ; 1 bytes @ 0x1A
  8474                           
  8475  003A                     send_last_2bytes_IK@j:	
  8476                           ; 1 bytes @ 0x1A
  8477                           
  8478  003A                     ___lldiv@quotient:	
  8479                           ; 2 bytes @ 0x1A
  8480                           
  8481                           
  8482                           ; 4 bytes @ 0x1A
  8483  003A                     	ds	1
  8484  003B                     ??___awdiv:	
  8485  003B                     atoi@sign:	
  8486                           ; 1 bytes @ 0x1B
  8487                           
  8488                           
  8489                           ; 1 bytes @ 0x1B
  8490  003B                     	ds	1
  8491  003C                     ?_send_2length_2bytes_IK:	
  8492  003C                     ___awdiv@counter:	
  8493                           ; 1 bytes @ 0x1C
  8494                           
  8495  003C                     send_2length_2bytes_IK@data1:	
  8496                           ; 1 bytes @ 0x1C
  8497                           
  8498  003C                     atoi@a:	
  8499                           ; 2 bytes @ 0x1C
  8500                           
  8501  003C                     strcspn@i:	
  8502                           ; 2 bytes @ 0x1C
  8503                           
  8504  003C                     strspn@i:	
  8505                           ; 2 bytes @ 0x1C
  8506                           
  8507                           
  8508                           ; 2 bytes @ 0x1C
  8509  003C                     	ds	1
  8510  003D                     ??___altoft:	
  8511  003D                     ___awdiv@sign:	
  8512                           ; 1 bytes @ 0x1D
  8513                           
  8514                           
  8515                           ; 1 bytes @ 0x1D
  8516  003D                     	ds	1
  8517  003E                     atoi@s:	
  8518  003E                     ___lldiv@counter:	
  8519                           ; 1 bytes @ 0x1E
  8520                           
  8521  003E                     strcspn@s1:	
  8522                           ; 1 bytes @ 0x1E
  8523                           
  8524  003E                     strspn@s1:	
  8525                           ; 1 bytes @ 0x1E
  8526                           
  8527  003E                     send_2length_2bytes_IK@data2:	
  8528                           ; 1 bytes @ 0x1E
  8529                           
  8530  003E                     ___awdiv@quotient:	
  8531                           ; 2 bytes @ 0x1E
  8532                           
  8533                           
  8534                           ; 2 bytes @ 0x1E
  8535  003E                     	ds	1
  8536  003F                     ?_strtok:	
  8537  003F                     ?___llmod:	
  8538                           ; 1 bytes @ 0x1F
  8539                           
  8540  003F                     ___altoft@exp:	
  8541                           ; 4 bytes @ 0x1F
  8542                           
  8543  003F                     strtok@s2:	
  8544                           ; 1 bytes @ 0x1F
  8545                           
  8546  003F                     ___llmod@divisor:	
  8547                           ; 2 bytes @ 0x1F
  8548                           
  8549                           
  8550                           ; 4 bytes @ 0x1F
  8551  003F                     	ds	1
  8552  0040                     ?___awtoft:	
  8553  0040                     send_2length_2bytes_IK@latch_start:	
  8554                           ; 3 bytes @ 0x20
  8555                           
  8556  0040                     ___altoft@sign:	
  8557                           ; 1 bytes @ 0x20
  8558                           
  8559  0040                     ___awtoft@c:	
  8560                           ; 1 bytes @ 0x20
  8561                           
  8562                           
  8563                           ; 2 bytes @ 0x20
  8564  0040                     	ds	1
  8565  0041                     ??_strtok:	
  8566  0041                     send_2length_2bytes_IK@topOrBottom:	
  8567                           ; 1 bytes @ 0x21
  8568                           
  8569                           
  8570                           ; 2 bytes @ 0x21
  8571  0041                     	ds	2
  8572  0043                     ??_send_2length_2bytes_IK:	
  8573  0043                     ??___awtoft:	
  8574                           ; 1 bytes @ 0x23
  8575                           
  8576  0043                     ___llmod@dividend:	
  8577                           ; 1 bytes @ 0x23
  8578                           
  8579                           
  8580                           ; 4 bytes @ 0x23
  8581  0043                     	ds	1
  8582  0044                     ?_LEDsOn:	
  8583  0044                     ?_LEDsPwr:	
  8584                           ; 1 bytes @ 0x24
  8585                           
  8586  0044                     ?_LED_setBrightnessRange:	
  8587                           ; 1 bytes @ 0x24
  8588                           
  8589  0044                     strtok@s1:	
  8590                           ; 1 bytes @ 0x24
  8591                           
  8592  0044                     LEDsPwr@pwr:	
  8593                           ; 1 bytes @ 0x24
  8594                           
  8595  0044                     LED_setBrightnessRange@range:	
  8596                           ; 2 bytes @ 0x24
  8597                           
  8598  0044                     LEDsOn@LEDpins:	
  8599                           ; 2 bytes @ 0x24
  8600                           
  8601                           
  8602                           ; 4 bytes @ 0x24
  8603  0044                     	ds	1
  8604  0045                     ?_parseCmd:	
  8605  0045                     parseCmd@s:	
  8606                           ; 1 bytes @ 0x25
  8607                           
  8608  0045                     ___awtoft@sign:	
  8609                           ; 1 bytes @ 0x25
  8610                           
  8611                           
  8612                           ; 1 bytes @ 0x25
  8613  0045                     	ds	1
  8614  0046                     ??_parseCmd:	
  8615  0046                     ?___ftmul:	
  8616                           ; 1 bytes @ 0x26
  8617                           
  8618  0046                     ?___ftneg:	
  8619                           ; 3 bytes @ 0x26
  8620                           
  8621  0046                     LEDsPwr@topOrBottom:	
  8622                           ; 3 bytes @ 0x26
  8623                           
  8624  0046                     LED_setBrightnessRange@topOrBottom:	
  8625                           ; 2 bytes @ 0x26
  8626                           
  8627  0046                     ___ftmul@f1:	
  8628                           ; 2 bytes @ 0x26
  8629                           
  8630  0046                     ___ftneg@f1:	
  8631                           ; 3 bytes @ 0x26
  8632                           
  8633                           
  8634                           ; 3 bytes @ 0x26
  8635  0046                     	ds	1
  8636  0047                     ??___llmod:	
  8637  0047                     parseCmd@cmdString:	
  8638                           ; 1 bytes @ 0x27
  8639                           
  8640                           
  8641                           ; 1 bytes @ 0x27
  8642  0047                     	ds	1
  8643  0048                     ??_LEDsPwr:	
  8644  0048                     ??_LED_setBrightnessRange:	
  8645                           ; 1 bytes @ 0x28
  8646                           
  8647  0048                     ___llmod@counter:	
  8648                           ; 1 bytes @ 0x28
  8649                           
  8650  0048                     LEDsOn@topOrBottom:	
  8651                           ; 1 bytes @ 0x28
  8652                           
  8653  0048                     parseCmd@paramIter:	
  8654                           ; 2 bytes @ 0x28
  8655                           
  8656                           
  8657                           ; 2 bytes @ 0x28
  8658  0048                     	ds	1
  8659  0049                     ?_drv_write:	
  8660  0049                     ??_drv_read:	
  8661                           ; 1 bytes @ 0x29
  8662                           
  8663  0049                     ??_LED_readConfig:	
  8664                           ; 1 bytes @ 0x29
  8665                           
  8666  0049                     ??_startRelMove:	
  8667                           ; 1 bytes @ 0x29
  8668                           
  8669  0049                     ??_startAbsMove:	
  8670                           ; 1 bytes @ 0x29
  8671                           
  8672  0049                     ??_stop:	
  8673                           ; 1 bytes @ 0x29
  8674                           
  8675  0049                     ??_getPosition:	
  8676                           ; 1 bytes @ 0x29
  8677                           
  8678  0049                     ??_setHeaterPreTime:	
  8679                           ; 1 bytes @ 0x29
  8680                           
  8681  0049                     ??_setHeaterPostTime:	
  8682                           ; 1 bytes @ 0x29
  8683                           
  8684  0049                     ??_setMoveMask:	
  8685                           ; 1 bytes @ 0x29
  8686                           
  8687  0049                     ??_getActive:	
  8688                           ; 1 bytes @ 0x29
  8689                           
  8690  0049                     ??_getMoveMask:	
  8691                           ; 1 bytes @ 0x29
  8692                           
  8693  0049                     ??_getMotionStatus:	
  8694                           ; 1 bytes @ 0x29
  8695                           
  8696  0049                     ??___ftneg:	
  8697                           ; 1 bytes @ 0x29
  8698                           
  8699  0049                     drv_write@data:	
  8700                           ; 1 bytes @ 0x29
  8701                           
  8702  0049                     zeroPosition@i:	
  8703                           ; 1 bytes @ 0x29
  8704                           
  8705  0049                     ___ftmul@f2:	
  8706                           ; 2 bytes @ 0x29
  8707                           
  8708                           
  8709                           ; 3 bytes @ 0x29
  8710  0049                     	ds	1
  8711  004A                     ??_drv_write:	
  8712  004A                     ??_LEDsOn:	
  8713                           ; 1 bytes @ 0x2A
  8714                           
  8715  004A                     parseCmd@p:	
  8716                           ; 1 bytes @ 0x2A
  8717                           
  8718                           
  8719                           ; 1 bytes @ 0x2A
  8720  004A                     	ds	1
  8721  004B                     drv_write@reg:	
  8722  004B                     drv_read@reg:	
  8723                           ; 1 bytes @ 0x2B
  8724                           
  8725                           
  8726                           ; 1 bytes @ 0x2B
  8727  004B                     	ds	1
  8728  004C                     ??_trunc:	
  8729  004C                     ??_setDrvPiezoOnTime:	
  8730                           ; 1 bytes @ 0x2C
  8731                           
  8732  004C                     ??_setH1OffTime:	
  8733                           ; 1 bytes @ 0x2C
  8734                           
  8735  004C                     ??_setH2OnTime:	
  8736                           ; 1 bytes @ 0x2C
  8737                           
  8738  004C                     drv_read@buff:	
  8739                           ; 1 bytes @ 0x2C
  8740                           
  8741  004C                     drv_write@buff:	
  8742                           ; 1 bytes @ 0x2C
  8743                           
  8744                           
  8745                           ; 2 bytes @ 0x2C
  8746  004C                     	ds	1
  8747  004D                     ??_calcUpstroke:	
  8748  004D                     ??_calcDownstroke:	
  8749                           ; 1 bytes @ 0x2D
  8750                           
  8751  004D                     ??_round:	
  8752                           ; 1 bytes @ 0x2D
  8753                           
  8754                           
  8755                           ; 1 bytes @ 0x2D
  8756  004D                     	ds	1
  8757  004E                     ??_main_initialize:	
  8758  004E                     ??_execCmd:	
  8759                           ; 1 bytes @ 0x2E
  8760                           
  8761  004E                     ??_setDrvPeak:	
  8762                           ; 1 bytes @ 0x2E
  8763                           
  8764  004E                     ??_setLEDBrightnessRange:	
  8765                           ; 1 bytes @ 0x2E
  8766                           
  8767  004E                     ??_setLEDPwr:	
  8768                           ; 1 bytes @ 0x2E
  8769                           
  8770                           
  8771                           	psect	maintext
  8772  1504                     __pmaintext:	
  8773                           ; 1 bytes @ 0x2E
  8774 ;;
  8775 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  8776 ;;
  8777 ;; *************** function _main *****************
  8778 ;; Defined at:
  8779 ;;		line 133 in file "main.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;		None
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;		None
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  1    wreg      void 
  8786 ;; Registers used:
  8787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8788 ;; Tracked objects:
  8789 ;;		On entry : B1F/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8795 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8796 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8797 ;;Total ram usage:        1 bytes
  8798 ;; Hardware stack levels required when called:   16
  8799 ;; This function calls:
  8800 ;;		_EUSART_Read
  8801 ;;		_SYSTEM_Initialize
  8802 ;;		_doAbsMove
  8803 ;;		_doRelMove
  8804 ;;		_execCmd
  8805 ;;		_main_initialize
  8806 ;;		_parseCmd
  8807 ;;		_printf
  8808 ;; This function is called by:
  8809 ;;		Startup code after reset
  8810 ;; This function uses a non-reentrant model
  8811 ;;
  8812                           
  8813                           
  8814                           ;psect for function _main
  8815  1504                     _main:	
  8816                           
  8817                           ;main.c: 136: SYSTEM_Initialize();
  8818                           
  8819                           ;incstack = 0
  8820                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8821  1504  31A2  2213  3195   	fcall	_SYSTEM_Initialize
  8822                           
  8823                           ;main.c: 137: _delay((unsigned long)((500)*(1000000/4000.0)));
  8824  1507  30A3               	movlw	163
  8825  1508  0022               	movlb	2	; select bank2
  8826  1509  00EE               	movwf	??_main^(0+256)
  8827  150A  3055               	movlw	85
  8828  150B                     u10137:	
  8829  150B  0B89               	decfsz	9,f
  8830  150C  2D0B               	goto	u10137
  8831  150D  0BEE               	decfsz	??_main^(0+256),f
  8832  150E  2D0B               	goto	u10137
  8833                           
  8834                           ;main.c: 143: (INTCONbits.GIE = 1);
  8835  150F  178B               	bsf	11,7	;volatile
  8836                           
  8837                           ;main.c: 146: (INTCONbits.PEIE = 1);
  8838  1510  170B               	bsf	11,6	;volatile
  8839                           
  8840                           ;main.c: 147: printf("\n\nsystem done\n");
  8841  1511  303D               	movlw	low (STR_5| (0+32768))
  8842  1512  0021               	movlb	1	; select bank1
  8843  1513  00A0               	movwf	printf@f^(0+128)
  8844  1514  30A9               	movlw	high (STR_5| (0+32768))
  8845  1515  00A1               	movwf	(printf@f^(0+128)+1)
  8846  1516  318E  26CE  3195   	fcall	_printf
  8847                           
  8848                           ;main.c: 153: main_initialize();
  8849  1519  318A  22EB  3195   	fcall	_main_initialize
  8850  151C  2D24               	goto	l9551
  8851  151D                     l9575:	
  8852                           ;main.c: 184: case REL_MOVE: doRelMove(); break;
  8853                           
  8854                           ;main.c: 182: else{
  8855                           ;main.c: 183: switch(motionType){
  8856                           
  8857                           ;main.c: 181: }
  8858                           
  8859  151D  318D  25AC  3195   	fcall	_doRelMove
  8860  1520  2D24               	goto	l9551
  8861  1521                     l9577:	
  8862                           ;main.c: 185: case ABS_MOVE: doAbsMove(); break;
  8863                           
  8864  1521  3180  20EE  3195   	fcall	_doAbsMove
  8865  1524                     l9551:	
  8866                           ;main.c: 155: while (1)
  8867                           
  8868                           ;main.c: 187: }
  8869                           
  8870                           ;main.c: 186: default: break;
  8871                           
  8872                           
  8873                           ;main.c: 156: {
  8874                           ;main.c: 158: if (eusartRxCount!=0) {
  8875  1524  0020               	movlb	0	; select bank0
  8876  1525  0856               	movf	_eusartRxCount,w	;volatile
  8877  1526  1903               	btfsc	3,2
  8878  1527  2D50               	goto	l9563
  8879                           
  8880                           ;main.c: 159: readdata[readIdx] = EUSART_Read();
  8881  1528  31A3  2399  3195   	fcall	_EUSART_Read
  8882  152B  0022               	movlb	2	; select bank2
  8883  152C  00EE               	movwf	??_main^(0+256)
  8884  152D  0020               	movlb	0	; select bank0
  8885  152E  0852               	movf	_readIdx,w
  8886  152F  3EC5               	addlw	(low (_readdata| (0+256)))& (0+255)
  8887  1530  0086               	movwf	6
  8888  1531  3001               	movlw	1	; select bank3/4
  8889  1532  0087               	movwf	7
  8890  1533  0022               	movlb	2	; select bank2
  8891  1534  086E               	movf	??_main^(0+256),w
  8892  1535  0081               	movwf	1
  8893                           
  8894                           ;main.c: 160: if(readdata[readIdx] == '\n'){
  8895  1536  0020               	movlb	0	; select bank0
  8896  1537  0852               	movf	_readIdx,w
  8897  1538  3EC5               	addlw	(low (_readdata| (0+256)))& (0+255)
  8898  1539  0086               	movwf	6
  8899  153A  3001               	movlw	1	; select bank3/4
  8900  153B  0087               	movwf	7
  8901  153C  300A               	movlw	10
  8902  153D  0601               	xorwf	1,w
  8903  153E  1D03               	btfss	3,2
  8904  153F  2D4B               	goto	l9561
  8905                           
  8906                           ;main.c: 161: readdata[readIdx] = 0;
  8907  1540  0852               	movf	_readIdx,w
  8908  1541  3EC5               	addlw	(low (_readdata| (0+256)))& (0+255)
  8909  1542  0086               	movwf	6
  8910  1543  3001               	movlw	1	; select bank3/4
  8911  1544  0087               	movwf	7
  8912  1545  0181               	clrf	1
  8913                           
  8914                           ;main.c: 162: cmdRead = 1;
  8915  1546  3001               	movlw	1
  8916  1547  0022               	movlb	2	; select bank2
  8917  1548  00E4               	movwf	_cmdRead^(0+256)
  8918  1549  3000               	movlw	0
  8919  154A  00E5               	movwf	(_cmdRead^(0+256)+1)
  8920  154B                     l9561:	
  8921                           
  8922                           ;main.c: 163: }
  8923                           ;main.c: 164: readIdx++;
  8924  154B  3001               	movlw	1
  8925  154C  0020               	movlb	0	; select bank0
  8926  154D  07D2               	addwf	_readIdx,f
  8927  154E  3000               	movlw	0
  8928  154F  3DD3               	addwfc	_readIdx+1,f
  8929  1550                     l9563:	
  8930                           
  8931                           ;main.c: 165: }
  8932                           ;main.c: 168: if(cmdRead){
  8933  1550  0022               	movlb	2	; select bank2
  8934  1551  0864               	movf	_cmdRead^(0+256),w
  8935  1552  0465               	iorwf	(_cmdRead+1)^(0+256),w
  8936  1553  1903               	btfsc	3,2
  8937  1554  2D68               	goto	l9571
  8938                           
  8939                           ;main.c: 170: parseCmd(readdata, &cmd_struct);
  8940  1555  30B0               	movlw	(low (_cmd_struct| (0+256)))& (0+255)
  8941  1556  00EE               	movwf	??_main^(0+256)
  8942  1557  086E               	movf	??_main^(0+256),w
  8943  1558  0020               	movlb	0	; select bank0
  8944  1559  00C5               	movwf	parseCmd@s
  8945  155A  30C5               	movlw	(low (_readdata| (0+256)))& (0+255)
  8946  155B  3185  2590  3195   	fcall	_parseCmd
  8947                           
  8948                           ;main.c: 172: cmdRead = 0;
  8949  155E  0022               	movlb	2	; select bank2
  8950  155F  01E4               	clrf	_cmdRead^(0+256)
  8951  1560  01E5               	clrf	(_cmdRead+1)^(0+256)
  8952                           
  8953                           ;main.c: 173: readIdx=0;
  8954  1561  0020               	movlb	0	; select bank0
  8955  1562  01D2               	clrf	_readIdx
  8956  1563  01D3               	clrf	_readIdx+1
  8957                           
  8958                           ;main.c: 174: execCmd(&cmd_struct);
  8959  1564  30B0               	movlw	(low (_cmd_struct| (0+256)))& (0+255)
  8960  1565  3183  239E  3195   	fcall	_execCmd
  8961  1568                     l9571:	
  8962                           
  8963                           ;main.c: 176: }
  8964                           ;main.c: 179: if (interpulseWait > 0){
  8965  1568  0022               	movlb	2	; select bank2
  8966  1569  0869               	movf	(_interpulseWait+1)^(0+256),w
  8967  156A  3A80               	xorlw	128
  8968  156B  00EE               	movwf	??_main^(0+256)
  8969  156C  3080               	movlw	128
  8970  156D  026E               	subwf	??_main^(0+256),w
  8971  156E  1D03               	skipz
  8972  156F  2D72               	goto	u10065
  8973  1570  3001               	movlw	1
  8974  1571  0268               	subwf	_interpulseWait^(0+256),w
  8975  1572                     u10065:	
  8976  1572  1803               	btfsc	3,0
  8977  1573  2D24               	goto	l9551
  8978  1574  0020               	movlb	0	; select bank0
  8979  1575  0855               	movf	_motionType,w
  8980                           
  8981                           ; Switch size 1, requested type "space"
  8982                           ; Number of cases is 2, Range of values is 1 to 2
  8983                           ; switch strategies available:
  8984                           ; Name         Instructions Cycles
  8985                           ; simple_byte            7     4 (average)
  8986                           ; direct_byte           13     9 (fixed)
  8987                           ; jumptable            263     9 (fixed)
  8988                           ;	Chosen strategy is simple_byte
  8989  1576  3A01               	xorlw	1	; case 1
  8990  1577  1903               	skipnz
  8991  1578  2D1D               	goto	l9575
  8992  1579  3A03               	xorlw	3	; case 2
  8993  157A  1903               	skipnz
  8994  157B  2D21               	goto	l9577
  8995  157C  2D24               	goto	l9551
  8996  157D  2D24               	goto	l9551
  8997  157E                     __end_of_main:	
  8998                           
  8999                           	psect	text1
  9000  0590                     __ptext1:	
  9001 ;; *************** function _parseCmd *****************
  9002 ;; Defined at:
  9003 ;;		line 5 in file "cmd_parser.c"
  9004 ;; Parameters:    Size  Location     Type
  9005 ;;  cmdString       1    wreg     PTR unsigned char 
  9006 ;;		 -> readdata(20), 
  9007 ;;  s               1   37[BANK0 ] PTR struct CMD_STRUCT
  9008 ;;		 -> cmd_struct(21), 
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;  cmdString       1   39[BANK0 ] PTR unsigned char 
  9011 ;;		 -> readdata(20), 
  9012 ;;  p               1   42[BANK0 ] PTR unsigned char 
  9013 ;;		 -> readdata(20), NULL(0), 
  9014 ;;  paramIter       2   40[BANK0 ] int 
  9015 ;; Return value:  Size  Location     Type
  9016 ;;                  1    wreg      void 
  9017 ;; Registers used:
  9018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9019 ;; Tracked objects:
  9020 ;;		On entry : 0/0
  9021 ;;		On exit  : 0/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9024 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9025 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9027 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9028 ;;Total ram usage:        6 bytes
  9029 ;; Hardware stack levels used:    1
  9030 ;; Hardware stack levels required when called:    9
  9031 ;; This function calls:
  9032 ;;		_atoi
  9033 ;;		_stricmp
  9034 ;;		_strtok
  9035 ;; This function is called by:
  9036 ;;		_main
  9037 ;; This function uses a non-reentrant model
  9038 ;;
  9039                           
  9040                           
  9041                           ;psect for function _parseCmd
  9042  0590                     _parseCmd:	
  9043                           
  9044                           ;incstack = 0
  9045                           ; Regs used in _parseCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9046                           ;parseCmd@cmdString stored from wreg
  9047  0590  0020               	movlb	0	; select bank0
  9048  0591  00C7               	movwf	parseCmd@cmdString
  9049                           
  9050                           ;cmd_parser.c: 6: int paramIter = 0;
  9051  0592  01C8               	clrf	parseCmd@paramIter
  9052  0593  01C9               	clrf	parseCmd@paramIter+1
  9053                           
  9054                           ;cmd_parser.c: 7: for (char *p = strtok(cmdString," "); p != (0); p = strtok((0), " ")){
  9055  0594  3004               	movlw	low ((STR_41+6)| (0+32768))
  9056  0595  00BF               	movwf	strtok@s2
  9057  0596  30AA               	movlw	high ((STR_41+6)| (0+32768))
  9058  0597  00C0               	movwf	strtok@s2+1
  9059  0598  0847               	movf	parseCmd@cmdString,w
  9060  0599                     L23:	
  9061  0599  319A  22A4  3185   	fcall	_strtok
  9062  059C  0020               	movlb	0	; select bank0
  9063  059D  00C6               	movwf	??_parseCmd
  9064  059E  0846               	movf	??_parseCmd,w
  9065  059F  00CA               	movwf	parseCmd@p
  9066  05A0  084A               	movf	parseCmd@p,w
  9067  05A1  1903               	btfsc	3,2
  9068  05A2  0008               	return
  9069                           
  9070                           ;cmd_parser.c: 9: if (paramIter == 0){
  9071  05A3  0848               	movf	parseCmd@paramIter,w
  9072  05A4  0449               	iorwf	parseCmd@paramIter+1,w
  9073  05A5  1D03               	btfss	3,2
  9074  05A6  2F31               	goto	l9283
  9075                           
  9076                           ;cmd_parser.c: 10: if(stricmp(p, "rel") == 0)
  9077  05A7  302C               	movlw	low (STR_58| (0+32768))
  9078  05A8  00B3               	movwf	stricmp@s2
  9079  05A9  30B0               	movlw	high (STR_58| (0+32768))
  9080  05AA  00B4               	movwf	stricmp@s2+1
  9081  05AB  084A               	movf	parseCmd@p,w
  9082  05AC  31A6  26AC  3185   	fcall	_stricmp
  9083  05AF  0020               	movlb	0	; select bank0
  9084  05B0  0833               	movf	?_stricmp,w
  9085  05B1  0434               	iorwf	?_stricmp+1,w
  9086  05B2  1D03               	btfss	3,2
  9087  05B3  2DB6               	goto	l9185
  9088                           
  9089                           ;cmd_parser.c: 11: s->c = CMD_REL;
  9090  05B4  3002               	movlw	2
  9091  05B5  2F13               	goto	L22
  9092  05B6                     l9185:	
  9093                           
  9094                           ;cmd_parser.c: 12: else if(stricmp(p, "abs") == 0)
  9095  05B6  3030               	movlw	low (STR_59| (0+32768))
  9096  05B7  00B3               	movwf	stricmp@s2
  9097  05B8  30B0               	movlw	high (STR_59| (0+32768))
  9098  05B9  00B4               	movwf	stricmp@s2+1
  9099  05BA  084A               	movf	parseCmd@p,w
  9100  05BB  31A6  26AC  3185   	fcall	_stricmp
  9101  05BE  0020               	movlb	0	; select bank0
  9102  05BF  0833               	movf	?_stricmp,w
  9103  05C0  0434               	iorwf	?_stricmp+1,w
  9104  05C1  1D03               	btfss	3,2
  9105  05C2  2DCA               	goto	l9189
  9106                           
  9107                           ;cmd_parser.c: 13: s->c = CMD_ABS;
  9108  05C3  0845               	movf	parseCmd@s,w
  9109  05C4  0086               	movwf	6
  9110  05C5  3001               	movlw	1	; select bank2/3
  9111  05C6  0087               	movwf	7
  9112  05C7  0181               	clrf	1
  9113  05C8  0A81               	incf	1,f
  9114  05C9  2F56               	goto	l9291
  9115  05CA                     l9189:	
  9116                           
  9117                           ;cmd_parser.c: 14: else if(stricmp(p, "pos") == 0)
  9118  05CA  3034               	movlw	low (STR_60| (0+32768))
  9119  05CB  00B3               	movwf	stricmp@s2
  9120  05CC  30B0               	movlw	high (STR_60| (0+32768))
  9121  05CD  00B4               	movwf	stricmp@s2+1
  9122  05CE  084A               	movf	parseCmd@p,w
  9123  05CF  31A6  26AC  3185   	fcall	_stricmp
  9124  05D2  0020               	movlb	0	; select bank0
  9125  05D3  0833               	movf	?_stricmp,w
  9126  05D4  0434               	iorwf	?_stricmp+1,w
  9127  05D5  1D03               	btfss	3,2
  9128  05D6  2DD9               	goto	l9193
  9129                           
  9130                           ;cmd_parser.c: 15: s->c = CMD_P;
  9131  05D7  3003               	movlw	3
  9132  05D8  2F13               	goto	L22
  9133  05D9                     l9193:	
  9134                           
  9135                           ;cmd_parser.c: 16: else if(stricmp(p,"s") == 0)
  9136  05D9  3032               	movlw	low ((STR_59+2)| (0+32768))
  9137  05DA  00B3               	movwf	stricmp@s2
  9138  05DB  30B0               	movlw	high ((STR_59+2)| (0+32768))
  9139  05DC  00B4               	movwf	stricmp@s2+1
  9140  05DD  084A               	movf	parseCmd@p,w
  9141  05DE  31A6  26AC  3185   	fcall	_stricmp
  9142  05E1  0020               	movlb	0	; select bank0
  9143  05E2  0833               	movf	?_stricmp,w
  9144  05E3  0434               	iorwf	?_stricmp+1,w
  9145  05E4  1D03               	btfss	3,2
  9146  05E5  2DE8               	goto	l9197
  9147                           
  9148                           ;cmd_parser.c: 17: s->c = CMD_STOP;
  9149  05E6  3004               	movlw	4
  9150  05E7  2F13               	goto	L22
  9151  05E8                     l9197:	
  9152                           
  9153                           ;cmd_parser.c: 18: else if(stricmp(p,"setA") == 0)
  9154  05E8  3013               	movlw	low (STR_62| (0+32768))
  9155  05E9  00B3               	movwf	stricmp@s2
  9156  05EA  30B0               	movlw	high (STR_62| (0+32768))
  9157  05EB  00B4               	movwf	stricmp@s2+1
  9158  05EC  084A               	movf	parseCmd@p,w
  9159  05ED  31A6  26AC  3185   	fcall	_stricmp
  9160  05F0  0020               	movlb	0	; select bank0
  9161  05F1  0833               	movf	?_stricmp,w
  9162  05F2  0434               	iorwf	?_stricmp+1,w
  9163  05F3  1D03               	btfss	3,2
  9164  05F4  2DF7               	goto	l9201
  9165                           
  9166                           ;cmd_parser.c: 19: s->c = CMD_SETA;
  9167  05F5  3006               	movlw	6
  9168  05F6  2F13               	goto	L22
  9169  05F7                     l9201:	
  9170                           
  9171                           ;cmd_parser.c: 20: else if(stricmp(p,"setM") == 0)
  9172  05F7  301D               	movlw	low (STR_63| (0+32768))
  9173  05F8  00B3               	movwf	stricmp@s2
  9174  05F9  30B0               	movlw	high (STR_63| (0+32768))
  9175  05FA  00B4               	movwf	stricmp@s2+1
  9176  05FB  084A               	movf	parseCmd@p,w
  9177  05FC  31A6  26AC  3185   	fcall	_stricmp
  9178  05FF  0020               	movlb	0	; select bank0
  9179  0600  0833               	movf	?_stricmp,w
  9180  0601  0434               	iorwf	?_stricmp+1,w
  9181  0602  1D03               	btfss	3,2
  9182  0603  2E06               	goto	l9205
  9183                           
  9184                           ;cmd_parser.c: 21: s->c = CMD_SETM;
  9185  0604  3007               	movlw	7
  9186  0605  2F13               	goto	L22
  9187  0606                     l9205:	
  9188                           
  9189                           ;cmd_parser.c: 22: else if(stricmp(p,"z") == 0)
  9190  0606  3054               	movlw	low (STR_64| (0+32768))
  9191  0607  00B3               	movwf	stricmp@s2
  9192  0608  30B0               	movlw	high (STR_64| (0+32768))
  9193  0609  00B4               	movwf	stricmp@s2+1
  9194  060A  084A               	movf	parseCmd@p,w
  9195  060B  31A6  26AC  3185   	fcall	_stricmp
  9196  060E  0020               	movlb	0	; select bank0
  9197  060F  0833               	movf	?_stricmp,w
  9198  0610  0434               	iorwf	?_stricmp+1,w
  9199  0611  1D03               	btfss	3,2
  9200  0612  2E15               	goto	l9209
  9201                           
  9202                           ;cmd_parser.c: 23: s->c = CMD_ZERO;
  9203  0613  3008               	movlw	8
  9204  0614  2F13               	goto	L22
  9205  0615                     l9209:	
  9206                           
  9207                           ;cmd_parser.c: 24: else if(stricmp(p,"drvPeak") == 0)
  9208  0615  30C6               	movlw	low (STR_65| (0+32768))
  9209  0616  00B3               	movwf	stricmp@s2
  9210  0617  30A9               	movlw	high (STR_65| (0+32768))
  9211  0618  00B4               	movwf	stricmp@s2+1
  9212  0619  084A               	movf	parseCmd@p,w
  9213  061A  31A6  26AC  3185   	fcall	_stricmp
  9214  061D  0020               	movlb	0	; select bank0
  9215  061E  0833               	movf	?_stricmp,w
  9216  061F  0434               	iorwf	?_stricmp+1,w
  9217  0620  1D03               	btfss	3,2
  9218  0621  2E24               	goto	l9213
  9219                           
  9220                           ;cmd_parser.c: 25: s->c = CMD_DRV_PEAK;
  9221  0622  3009               	movlw	9
  9222  0623  2F13               	goto	L22
  9223  0624                     l9213:	
  9224                           
  9225                           ;cmd_parser.c: 26: else if(stricmp(p,"drvGain") == 0)
  9226  0624  30CE               	movlw	low (STR_66| (0+32768))
  9227  0625  00B3               	movwf	stricmp@s2
  9228  0626  30A9               	movlw	high (STR_66| (0+32768))
  9229  0627  00B4               	movwf	stricmp@s2+1
  9230  0628  084A               	movf	parseCmd@p,w
  9231  0629  31A6  26AC  3185   	fcall	_stricmp
  9232  062C  0020               	movlb	0	; select bank0
  9233  062D  0833               	movf	?_stricmp,w
  9234  062E  0434               	iorwf	?_stricmp+1,w
  9235  062F  1D03               	btfss	3,2
  9236  0630  2E33               	goto	l9217
  9237                           
  9238                           ;cmd_parser.c: 27: s->c = CMD_DRV_GAIN;
  9239  0631  300A               	movlw	10
  9240  0632  2F13               	goto	L22
  9241  0633                     l9217:	
  9242                           
  9243                           ;cmd_parser.c: 28: else if(stricmp(p,"piezoontime") == 0)
  9244  0633  3073               	movlw	low (STR_67| (0+32768))
  9245  0634  00B3               	movwf	stricmp@s2
  9246  0635  30A9               	movlw	high (STR_67| (0+32768))
  9247  0636  00B4               	movwf	stricmp@s2+1
  9248  0637  084A               	movf	parseCmd@p,w
  9249  0638  31A6  26AC  3185   	fcall	_stricmp
  9250  063B  0020               	movlb	0	; select bank0
  9251  063C  0833               	movf	?_stricmp,w
  9252  063D  0434               	iorwf	?_stricmp+1,w
  9253  063E  1D03               	btfss	3,2
  9254  063F  2E42               	goto	l9221
  9255                           
  9256                           ;cmd_parser.c: 29: s->c = CMD_DRV_PIEZOONTIME;
  9257  0640  300B               	movlw	11
  9258  0641  2F13               	goto	L22
  9259  0642                     l9221:	
  9260                           
  9261                           ;cmd_parser.c: 30: else if(stricmp(p,"heaterpretime") == 0)
  9262  0642  304C               	movlw	low (STR_68| (0+32768))
  9263  0643  00B3               	movwf	stricmp@s2
  9264  0644  30A9               	movlw	high (STR_68| (0+32768))
  9265  0645  00B4               	movwf	stricmp@s2+1
  9266  0646  084A               	movf	parseCmd@p,w
  9267  0647  31A6  26AC  3185   	fcall	_stricmp
  9268  064A  0020               	movlb	0	; select bank0
  9269  064B  0833               	movf	?_stricmp,w
  9270  064C  0434               	iorwf	?_stricmp+1,w
  9271  064D  1D03               	btfss	3,2
  9272  064E  2E51               	goto	l9225
  9273                           
  9274                           ;cmd_parser.c: 31: s->c = CMD_HEATER_PRETIME;
  9275  064F  300C               	movlw	12
  9276  0650  2F13               	goto	L22
  9277  0651                     l9225:	
  9278                           
  9279                           ;cmd_parser.c: 32: else if(stricmp(p,"heaterposttime") == 0)
  9280  0651  302E               	movlw	low (STR_69| (0+32768))
  9281  0652  00B3               	movwf	stricmp@s2
  9282  0653  30A9               	movlw	high (STR_69| (0+32768))
  9283  0654  00B4               	movwf	stricmp@s2+1
  9284  0655  084A               	movf	parseCmd@p,w
  9285  0656  31A6  26AC  3185   	fcall	_stricmp
  9286  0659  0020               	movlb	0	; select bank0
  9287  065A  0833               	movf	?_stricmp,w
  9288  065B  0434               	iorwf	?_stricmp+1,w
  9289  065C  1D03               	btfss	3,2
  9290  065D  2E60               	goto	l9229
  9291                           
  9292                           ;cmd_parser.c: 33: s->c = CMD_HEATER_POSTTIME;
  9293  065E  300D               	movlw	13
  9294  065F  2F13               	goto	L22
  9295  0660                     l9229:	
  9296                           
  9297                           ;cmd_parser.c: 34: else if(stricmp(p,"heater1off") == 0)
  9298  0660  307F               	movlw	low (STR_70| (0+32768))
  9299  0661  00B3               	movwf	stricmp@s2
  9300  0662  30A9               	movlw	high (STR_70| (0+32768))
  9301  0663  00B4               	movwf	stricmp@s2+1
  9302  0664  084A               	movf	parseCmd@p,w
  9303  0665  31A6  26AC  3185   	fcall	_stricmp
  9304  0668  0020               	movlb	0	; select bank0
  9305  0669  0833               	movf	?_stricmp,w
  9306  066A  0434               	iorwf	?_stricmp+1,w
  9307  066B  1D03               	btfss	3,2
  9308  066C  2E6F               	goto	l9233
  9309                           
  9310                           ;cmd_parser.c: 35: s->c = CMD_HEATER_H1OFF;
  9311  066D  300E               	movlw	14
  9312  066E  2F13               	goto	L22
  9313  066F                     l9233:	
  9314                           
  9315                           ;cmd_parser.c: 36: else if(stricmp(p,"heater2on") == 0)
  9316  066F  30A0               	movlw	low (STR_71| (0+32768))
  9317  0670  00B3               	movwf	stricmp@s2
  9318  0671  30A9               	movlw	high (STR_71| (0+32768))
  9319  0672  00B4               	movwf	stricmp@s2+1
  9320  0673  084A               	movf	parseCmd@p,w
  9321  0674  31A6  26AC  3185   	fcall	_stricmp
  9322  0677  0020               	movlb	0	; select bank0
  9323  0678  0833               	movf	?_stricmp,w
  9324  0679  0434               	iorwf	?_stricmp+1,w
  9325  067A  1D03               	btfss	3,2
  9326  067B  2E7E               	goto	l9237
  9327                           
  9328                           ;cmd_parser.c: 37: s->c = CMD_HEATER_H2ON;
  9329  067C  300F               	movlw	15
  9330  067D  2F13               	goto	L22
  9331  067E                     l9237:	
  9332                           
  9333                           ;cmd_parser.c: 38: else if(stricmp(p,"ledgain") == 0)
  9334  067E  30D6               	movlw	low (STR_72| (0+32768))
  9335  067F  00B3               	movwf	stricmp@s2
  9336  0680  30A9               	movlw	high (STR_72| (0+32768))
  9337  0681  00B4               	movwf	stricmp@s2+1
  9338  0682  084A               	movf	parseCmd@p,w
  9339  0683  31A6  26AC  3185   	fcall	_stricmp
  9340  0686  0020               	movlb	0	; select bank0
  9341  0687  0833               	movf	?_stricmp,w
  9342  0688  0434               	iorwf	?_stricmp+1,w
  9343  0689  1D03               	btfss	3,2
  9344  068A  2E8D               	goto	l9241
  9345                           
  9346                           ;cmd_parser.c: 39: s->c = CMD_HEATER_GAIN;
  9347  068B  3010               	movlw	16
  9348  068C  2F13               	goto	L22
  9349  068D                     l9241:	
  9350                           
  9351                           ;cmd_parser.c: 40: else if(stricmp(p,"ledpwr") == 0)
  9352  068D  3007               	movlw	low (STR_73| (0+32768))
  9353  068E  00B3               	movwf	stricmp@s2
  9354  068F  30B0               	movlw	high (STR_73| (0+32768))
  9355  0690  00B4               	movwf	stricmp@s2+1
  9356  0691  084A               	movf	parseCmd@p,w
  9357  0692  31A6  26AC  3185   	fcall	_stricmp
  9358  0695  0020               	movlb	0	; select bank0
  9359  0696  0833               	movf	?_stricmp,w
  9360  0697  0434               	iorwf	?_stricmp+1,w
  9361  0698  1D03               	btfss	3,2
  9362  0699  2E9C               	goto	l9245
  9363                           
  9364                           ;cmd_parser.c: 41: s->c = CMD_HEATER_PWR;
  9365  069A  3011               	movlw	17
  9366  069B  2F13               	goto	L22
  9367  069C                     l9245:	
  9368                           
  9369                           ;cmd_parser.c: 42: else if(stricmp(p,"toggleheater") == 0)
  9370  069C  305A               	movlw	low (STR_74| (0+32768))
  9371  069D  00B3               	movwf	stricmp@s2
  9372  069E  30A9               	movlw	high (STR_74| (0+32768))
  9373  069F  00B4               	movwf	stricmp@s2+1
  9374  06A0  084A               	movf	parseCmd@p,w
  9375  06A1  31A6  26AC  3185   	fcall	_stricmp
  9376  06A4  0020               	movlb	0	; select bank0
  9377  06A5  0833               	movf	?_stricmp,w
  9378  06A6  0434               	iorwf	?_stricmp+1,w
  9379  06A7  1D03               	btfss	3,2
  9380  06A8  2EAB               	goto	l9249
  9381                           
  9382                           ;cmd_parser.c: 43: s->c = CMD_HEATER_TOGGLE;
  9383  06A9  3012               	movlw	18
  9384  06AA  2F13               	goto	L22
  9385  06AB                     l9249:	
  9386                           
  9387                           ;cmd_parser.c: 44: else if(stricmp(p,"timeheater") == 0)
  9388  06AB  308A               	movlw	low (STR_75| (0+32768))
  9389  06AC  00B3               	movwf	stricmp@s2
  9390  06AD  30A9               	movlw	high (STR_75| (0+32768))
  9391  06AE  00B4               	movwf	stricmp@s2+1
  9392  06AF  084A               	movf	parseCmd@p,w
  9393  06B0  31A6  26AC  3185   	fcall	_stricmp
  9394  06B3  0020               	movlb	0	; select bank0
  9395  06B4  0833               	movf	?_stricmp,w
  9396  06B5  0434               	iorwf	?_stricmp+1,w
  9397  06B6  1D03               	btfss	3,2
  9398  06B7  2EBA               	goto	l9253
  9399                           
  9400                           ;cmd_parser.c: 45: s->c = CMD_HEATER_TIMED;
  9401  06B8  3013               	movlw	19
  9402  06B9  2F13               	goto	L22
  9403  06BA                     l9253:	
  9404                           
  9405                           ;cmd_parser.c: 46: else if(stricmp(p,"getA") == 0)
  9406  06BA  300E               	movlw	low (STR_76| (0+32768))
  9407  06BB  00B3               	movwf	stricmp@s2
  9408  06BC  30B0               	movlw	high (STR_76| (0+32768))
  9409  06BD  00B4               	movwf	stricmp@s2+1
  9410  06BE  084A               	movf	parseCmd@p,w
  9411  06BF  31A6  26AC  3185   	fcall	_stricmp
  9412  06C2  0020               	movlb	0	; select bank0
  9413  06C3  0833               	movf	?_stricmp,w
  9414  06C4  0434               	iorwf	?_stricmp+1,w
  9415  06C5  1D03               	btfss	3,2
  9416  06C6  2EC9               	goto	l9257
  9417                           
  9418                           ;cmd_parser.c: 47: s->c = CMD_GET_ACTIVE;
  9419  06C7  3014               	movlw	20
  9420  06C8  2F13               	goto	L22
  9421  06C9                     l9257:	
  9422                           
  9423                           ;cmd_parser.c: 48: else if(stricmp(p,"getM") == 0)
  9424  06C9  3018               	movlw	low (STR_77| (0+32768))
  9425  06CA  00B3               	movwf	stricmp@s2
  9426  06CB  30B0               	movlw	high (STR_77| (0+32768))
  9427  06CC  00B4               	movwf	stricmp@s2+1
  9428  06CD  084A               	movf	parseCmd@p,w
  9429  06CE  31A6  26AC  3185   	fcall	_stricmp
  9430  06D1  0020               	movlb	0	; select bank0
  9431  06D2  0833               	movf	?_stricmp,w
  9432  06D3  0434               	iorwf	?_stricmp+1,w
  9433  06D4  1D03               	btfss	3,2
  9434  06D5  2ED8               	goto	l9261
  9435                           
  9436                           ;cmd_parser.c: 49: s->c = CMD_GET_MOVABLE;
  9437  06D6  3015               	movlw	21
  9438  06D7  2F13               	goto	L22
  9439  06D8                     l9261:	
  9440                           
  9441                           ;cmd_parser.c: 50: else if(stricmp(p,"mstatus") == 0)
  9442  06D8  30DE               	movlw	low (STR_78| (0+32768))
  9443  06D9  00B3               	movwf	stricmp@s2
  9444  06DA  30A9               	movlw	high (STR_78| (0+32768))
  9445  06DB  00B4               	movwf	stricmp@s2+1
  9446  06DC  084A               	movf	parseCmd@p,w
  9447  06DD  31A6  26AC  3185   	fcall	_stricmp
  9448  06E0  0020               	movlb	0	; select bank0
  9449  06E1  0833               	movf	?_stricmp,w
  9450  06E2  0434               	iorwf	?_stricmp+1,w
  9451  06E3  1D03               	btfss	3,2
  9452  06E4  2EE7               	goto	l9265
  9453                           
  9454                           ;cmd_parser.c: 51: s->c = CMD_MOTION_STATUS;
  9455  06E5  3016               	movlw	22
  9456  06E6  2F13               	goto	L22
  9457  06E7                     l9265:	
  9458                           
  9459                           ;cmd_parser.c: 52: else if(stricmp(p,"domove") == 0)
  9460  06E7  3000               	movlw	low (STR_79| (0+32768))
  9461  06E8  00B3               	movwf	stricmp@s2
  9462  06E9  30B0               	movlw	high (STR_79| (0+32768))
  9463  06EA  00B4               	movwf	stricmp@s2+1
  9464  06EB  084A               	movf	parseCmd@p,w
  9465  06EC  31A6  26AC  3185   	fcall	_stricmp
  9466  06EF  0020               	movlb	0	; select bank0
  9467  06F0  0833               	movf	?_stricmp,w
  9468  06F1  0434               	iorwf	?_stricmp+1,w
  9469  06F2  1D03               	btfss	3,2
  9470  06F3  2EF6               	goto	l9269
  9471                           
  9472                           ;cmd_parser.c: 53: s->c = CMD_DOMOVE;
  9473  06F4  3017               	movlw	23
  9474  06F5  2F13               	goto	L22
  9475  06F6                     l9269:	
  9476                           
  9477                           ;cmd_parser.c: 54: else if(stricmp(p,"comm") == 0)
  9478  06F6  3027               	movlw	low (STR_80| (0+32768))
  9479  06F7  00B3               	movwf	stricmp@s2
  9480  06F8  30B0               	movlw	high (STR_80| (0+32768))
  9481  06F9  00B4               	movwf	stricmp@s2+1
  9482  06FA  084A               	movf	parseCmd@p,w
  9483  06FB  31A6  26AC  3185   	fcall	_stricmp
  9484  06FE  0020               	movlb	0	; select bank0
  9485  06FF  0833               	movf	?_stricmp,w
  9486  0700  0434               	iorwf	?_stricmp+1,w
  9487  0701  1D03               	btfss	3,2
  9488  0702  2F05               	goto	l9273
  9489                           
  9490                           ;cmd_parser.c: 55: s->c = CMD_COMM_CHECK;
  9491  0703  3018               	movlw	24
  9492  0704  2F13               	goto	L22
  9493  0705                     l9273:	
  9494                           
  9495                           ;cmd_parser.c: 56: else if(stricmp(p,"ping") == 0)
  9496  0705  3022               	movlw	low (STR_81| (0+32768))
  9497  0706  00B3               	movwf	stricmp@s2
  9498  0707  30B0               	movlw	high (STR_81| (0+32768))
  9499  0708  00B4               	movwf	stricmp@s2+1
  9500  0709  084A               	movf	parseCmd@p,w
  9501  070A  31A6  26AC  3185   	fcall	_stricmp
  9502  070D  0020               	movlb	0	; select bank0
  9503  070E  0833               	movf	?_stricmp,w
  9504  070F  0434               	iorwf	?_stricmp+1,w
  9505  0710  1D03               	btfss	3,2
  9506  0711  2F1B               	goto	l9277
  9507                           
  9508                           ;cmd_parser.c: 57: s->c = CMD_PING;
  9509  0712  3019               	movlw	25
  9510  0713                     L22:	
  9511  0713  00C6               	movwf	??_parseCmd
  9512  0714  0845               	movf	parseCmd@s,w
  9513  0715  0086               	movwf	6
  9514  0716  3001               	movlw	1	; select bank2/3
  9515  0717  0087               	movwf	7
  9516  0718  0846               	movf	??_parseCmd,w
  9517  0719  0081               	movwf	1
  9518  071A  2F56               	goto	l9291
  9519  071B                     l9277:	
  9520                           
  9521                           ;cmd_parser.c: 58: else if(stricmp(p,"softreset") == 0)
  9522  071B  30AA               	movlw	low (STR_82| (0+32768))
  9523  071C  00B3               	movwf	stricmp@s2
  9524  071D  30A9               	movlw	high (STR_82| (0+32768))
  9525  071E  00B4               	movwf	stricmp@s2+1
  9526  071F  084A               	movf	parseCmd@p,w
  9527  0720  31A6  26AC  3185   	fcall	_stricmp
  9528  0723  0020               	movlb	0	; select bank0
  9529  0724  0833               	movf	?_stricmp,w
  9530  0725  0434               	iorwf	?_stricmp+1,w
  9531  0726  1D03               	btfss	3,2
  9532  0727  2F2A               	goto	l9281
  9533  0728  0001               	reset	;# 
  9534  0729  2F56               	goto	l9291
  9535  072A                     l9281:	
  9536                           
  9537                           ;cmd_parser.c: 61: else
  9538                           ;cmd_parser.c: 62: s->c = CMD_NONE;
  9539  072A  0020               	movlb	0	; select bank0
  9540  072B  0845               	movf	parseCmd@s,w
  9541  072C  0086               	movwf	6
  9542  072D  3001               	movlw	1	; select bank2/3
  9543  072E  0087               	movwf	7
  9544  072F  0181               	clrf	1
  9545                           
  9546                           ;cmd_parser.c: 63: }
  9547  0730  2F56               	goto	l9291
  9548  0731                     l9283:	
  9549                           
  9550                           ;cmd_parser.c: 64: else if(paramIter == 1){
  9551  0731  0348               	decf	parseCmd@paramIter,w
  9552  0732  0449               	iorwf	parseCmd@paramIter+1,w
  9553  0733  1D03               	btfss	3,2
  9554  0734  2F43               	goto	l9287
  9555                           
  9556                           ;cmd_parser.c: 65: s->p1.paramI = atoi(p);
  9557  0735  084A               	movf	parseCmd@p,w
  9558  0736  319F  278F  3185   	fcall	_atoi
  9559  0739  0020               	movlb	0	; select bank0
  9560  073A  0A45               	incf	parseCmd@s,w
  9561  073B  0086               	movwf	6
  9562  073C  3001               	movlw	1	; select bank2/3
  9563  073D  0087               	movwf	7
  9564  073E  0837               	movf	?_atoi,w
  9565  073F  3FC0               	movwi [0]fsr1
  9566  0740  0838               	movf	?_atoi+1,w
  9567  0741  3FC1               	movwi [1]fsr1
  9568                           
  9569                           ;cmd_parser.c: 66: }
  9570  0742  2F56               	goto	l9291
  9571  0743                     l9287:	
  9572                           
  9573                           ;cmd_parser.c: 67: else if(paramIter == 2){
  9574  0743  3002               	movlw	2
  9575  0744  0648               	xorwf	parseCmd@paramIter,w
  9576  0745  0449               	iorwf	parseCmd@paramIter+1,w
  9577  0746  1D03               	btfss	3,2
  9578  0747  2F56               	goto	l9291
  9579                           
  9580                           ;cmd_parser.c: 69: s->p2.paramI = atoi(p);
  9581  0748  084A               	movf	parseCmd@p,w
  9582  0749  319F  278F  3185   	fcall	_atoi
  9583  074C  0020               	movlb	0	; select bank0
  9584  074D  0845               	movf	parseCmd@s,w
  9585  074E  3E0B               	addlw	11
  9586  074F  0086               	movwf	6
  9587  0750  3001               	movlw	1	; select bank2/3
  9588  0751  0087               	movwf	7
  9589  0752  0837               	movf	?_atoi,w
  9590  0753  3FC0               	movwi [0]fsr1
  9591  0754  0838               	movf	?_atoi+1,w
  9592  0755  3FC1               	movwi [1]fsr1
  9593  0756                     l9291:	
  9594                           
  9595                           ;cmd_parser.c: 70: }
  9596                           ;cmd_parser.c: 72: paramIter++;
  9597  0756  3001               	movlw	1
  9598  0757  0020               	movlb	0	; select bank0
  9599  0758  07C8               	addwf	parseCmd@paramIter,f
  9600  0759  3000               	movlw	0
  9601  075A  3DC9               	addwfc	parseCmd@paramIter+1,f
  9602  075B  3004               	movlw	low ((STR_41+6)| (0+32768))
  9603  075C  00BF               	movwf	strtok@s2
  9604  075D  30AA               	movlw	high ((STR_41+6)| (0+32768))
  9605  075E  00C0               	movwf	strtok@s2+1
  9606  075F  3000               	movlw	0
  9607  0760  2D99               	goto	L23
  9608  0761                     __end_of_parseCmd:	
  9609                           
  9610                           	psect	text2
  9611  1AA4                     __ptext2:	
  9612 ;; *************** function _strtok *****************
  9613 ;; Defined at:
  9614 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtok.c"
  9615 ;; Parameters:    Size  Location     Type
  9616 ;;  s1              1    wreg     PTR unsigned char 
  9617 ;;		 -> readdata(20), NULL(0), 
  9618 ;;  s2              2   31[BANK0 ] PTR const unsigned char 
  9619 ;;		 -> STR_57(2), STR_56(2), 
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;  s1              1   36[BANK0 ] PTR unsigned char 
  9622 ;;		 -> readdata(20), NULL(0), 
  9623 ;; Return value:  Size  Location     Type
  9624 ;;                  1    wreg      PTR unsigned char 
  9625 ;; Registers used:
  9626 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9632 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9634 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9635 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9636 ;;Total ram usage:        6 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:    8
  9639 ;; This function calls:
  9640 ;;		_strcspn
  9641 ;;		_strspn
  9642 ;; This function is called by:
  9643 ;;		_parseCmd
  9644 ;; This function uses a non-reentrant model
  9645 ;;
  9646                           
  9647                           
  9648                           ;psect for function _strtok
  9649  1AA4                     _strtok:	
  9650                           
  9651                           ;incstack = 0
  9652                           ; Regs used in _strtok: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9653                           ;strtok@s1 stored from wreg
  9654  1AA4  0020               	movlb	0	; select bank0
  9655  1AA5  00C4               	movwf	strtok@s1
  9656  1AA6  0844               	movf	strtok@s1,w
  9657  1AA7  1D03               	btfss	3,2
  9658  1AA8  2AAD               	goto	l6687
  9659  1AA9  0854               	movf	strtok@sp,w
  9660  1AAA  00C1               	movwf	??_strtok
  9661  1AAB  0841               	movf	??_strtok,w
  9662  1AAC  00C4               	movwf	strtok@s1
  9663  1AAD                     l6687:	
  9664  1AAD  0844               	movf	strtok@s1,w
  9665  1AAE  1D03               	btfss	3,2
  9666  1AAF  2AB2               	goto	l6693
  9667  1AB0  3000               	movlw	0
  9668  1AB1  0008               	return
  9669  1AB2                     l6693:	
  9670  1AB2  0840               	movf	strtok@s2+1,w
  9671  1AB3  00B9               	movwf	strspn@s2+1
  9672  1AB4  083F               	movf	strtok@s2,w
  9673  1AB5  00B8               	movwf	strspn@s2
  9674  1AB6  0844               	movf	strtok@s1,w
  9675  1AB7  31A6  2649  319A   	fcall	_strspn
  9676  1ABA  0020               	movlb	0	; select bank0
  9677  1ABB  0838               	movf	?_strspn,w
  9678  1ABC  00C1               	movwf	??_strtok
  9679  1ABD  0841               	movf	??_strtok,w
  9680  1ABE  07C4               	addwf	strtok@s1,f
  9681  1ABF  0844               	movf	strtok@s1,w
  9682  1AC0  0086               	movwf	6
  9683  1AC1  3001               	movlw	1	; select bank2/3
  9684  1AC2  0087               	movwf	7
  9685  1AC3  0801               	movf	1,w
  9686  1AC4  1D03               	btfss	3,2
  9687  1AC5  2AC9               	goto	l6701
  9688  1AC6  01D4               	clrf	strtok@sp
  9689  1AC7  3000               	movlw	0
  9690  1AC8  0008               	return
  9691  1AC9                     l6701:	
  9692  1AC9  0840               	movf	strtok@s2+1,w
  9693  1ACA  00B9               	movwf	strcspn@s2+1
  9694  1ACB  083F               	movf	strtok@s2,w
  9695  1ACC  00B8               	movwf	strcspn@s2
  9696  1ACD  0844               	movf	strtok@s1,w
  9697  1ACE  31A6  2619  319A   	fcall	_strcspn
  9698  1AD1  0020               	movlb	0	; select bank0
  9699  1AD2  0838               	movf	?_strcspn,w
  9700  1AD3  00C1               	movwf	??_strtok
  9701  1AD4  0839               	movf	?_strcspn+1,w
  9702  1AD5  00C2               	movwf	??_strtok+1
  9703  1AD6  0844               	movf	strtok@s1,w
  9704  1AD7  0741               	addwf	??_strtok,w
  9705  1AD8  00C3               	movwf	??_strtok+2
  9706  1AD9  0843               	movf	??_strtok+2,w
  9707  1ADA  00D4               	movwf	strtok@sp
  9708  1ADB  0854               	movf	strtok@sp,w
  9709  1ADC  0086               	movwf	6
  9710  1ADD  3001               	movlw	1	; select bank2/3
  9711  1ADE  0087               	movwf	7
  9712  1ADF  0801               	movf	1,w
  9713  1AE0  1903               	btfsc	3,2
  9714  1AE1  2AEC               	goto	l6709
  9715  1AE2  0854               	movf	strtok@sp,w
  9716  1AE3  0086               	movwf	6
  9717  1AE4  3001               	movlw	1	; select bank2/3
  9718  1AE5  0087               	movwf	7
  9719  1AE6  0181               	clrf	1
  9720  1AE7  3001               	movlw	1
  9721  1AE8  00C1               	movwf	??_strtok
  9722  1AE9  0841               	movf	??_strtok,w
  9723  1AEA  07D4               	addwf	strtok@sp,f
  9724  1AEB  2AED               	goto	l6711
  9725  1AEC                     l6709:	
  9726  1AEC  01D4               	clrf	strtok@sp
  9727  1AED                     l6711:	
  9728  1AED  0844               	movf	strtok@s1,w
  9729  1AEE  0008               	return
  9730  1AEF                     __end_of_strtok:	
  9731                           
  9732                           	psect	text3
  9733  2649                     __ptext3:	
  9734 ;; *************** function _strspn *****************
  9735 ;; Defined at:
  9736 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strspn.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;  s1              1    wreg     PTR const unsigned char 
  9739 ;;		 -> readdata(20), NULL(0), 
  9740 ;;  s2              2   24[BANK0 ] PTR const unsigned char 
  9741 ;;		 -> STR_57(2), STR_56(2), 
  9742 ;; Auto vars:     Size  Location     Type
  9743 ;;  s1              1   30[BANK0 ] PTR const unsigned char 
  9744 ;;		 -> readdata(20), NULL(0), 
  9745 ;;  i               2   28[BANK0 ] unsigned int 
  9746 ;; Return value:  Size  Location     Type
  9747 ;;                  2   24[BANK0 ] unsigned int 
  9748 ;; Registers used:
  9749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9750 ;; Tracked objects:
  9751 ;;		On entry : 0/0
  9752 ;;		On exit  : 0/0
  9753 ;;		Unchanged: 0/0
  9754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9755 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9756 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9757 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9758 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9759 ;;Total ram usage:        7 bytes
  9760 ;; Hardware stack levels used:    1
  9761 ;; Hardware stack levels required when called:    7
  9762 ;; This function calls:
  9763 ;;		_strchr
  9764 ;; This function is called by:
  9765 ;;		_strtok
  9766 ;; This function uses a non-reentrant model
  9767 ;;
  9768                           
  9769                           
  9770                           ;psect for function _strspn
  9771  2649                     _strspn:	
  9772                           
  9773                           ;incstack = 0
  9774                           ; Regs used in _strspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9775                           ;strspn@s1 stored from wreg
  9776  2649  0020               	movlb	0	; select bank0
  9777  264A  00BE               	movwf	strspn@s1
  9778  264B  01BC               	clrf	strspn@i
  9779  264C  01BD               	clrf	strspn@i+1
  9780  264D  2E56               	goto	l6119
  9781  264E                     l6117:	
  9782  264E  3001               	movlw	1
  9783  264F  00BA               	movwf	??_strspn
  9784  2650  083A               	movf	??_strspn,w
  9785  2651  07BE               	addwf	strspn@s1,f
  9786  2652  3001               	movlw	1
  9787  2653  07BC               	addwf	strspn@i,f
  9788  2654  3000               	movlw	0
  9789  2655  3DBD               	addwfc	strspn@i+1,f
  9790  2656                     l6119:	
  9791  2656  083E               	movf	strspn@s1,w
  9792  2657  0086               	movwf	6
  9793  2658  3001               	movlw	1	; select bank2/3
  9794  2659  0087               	movwf	7
  9795  265A  0801               	movf	1,w
  9796  265B  1903               	btfsc	3,2
  9797  265C  2E74               	goto	l6123
  9798  265D  0839               	movf	strspn@s2+1,w
  9799  265E  00B2               	movwf	strchr@ptr+1
  9800  265F  0838               	movf	strspn@s2,w
  9801  2660  00B1               	movwf	strchr@ptr
  9802  2661  083E               	movf	strspn@s1,w
  9803  2662  0086               	movwf	6
  9804  2663  3001               	movlw	1	; select bank2/3
  9805  2664  0087               	movwf	7
  9806  2665  0801               	movf	1,w
  9807  2666  00BA               	movwf	??_strspn
  9808  2667  01BB               	clrf	??_strspn+1
  9809  2668  083A               	movf	??_strspn,w
  9810  2669  00B3               	movwf	strchr@chr
  9811  266A  083B               	movf	??_strspn+1,w
  9812  266B  00B4               	movwf	strchr@chr+1
  9813  266C  31A2  2276  31A6   	fcall	_strchr
  9814  266F  0020               	movlb	0	; select bank0
  9815  2670  0831               	movf	?_strchr,w
  9816  2671  0432               	iorwf	?_strchr+1,w
  9817  2672  1D03               	btfss	3,2
  9818  2673  2E4E               	goto	l6117
  9819  2674                     l6123:	
  9820  2674  083D               	movf	strspn@i+1,w
  9821  2675  00B9               	movwf	?_strspn+1
  9822  2676  083C               	movf	strspn@i,w
  9823  2677  00B8               	movwf	?_strspn
  9824  2678  0008               	return
  9825  2679                     __end_of_strspn:	
  9826                           
  9827                           	psect	text4
  9828  2619                     __ptext4:	
  9829 ;; *************** function _strcspn *****************
  9830 ;; Defined at:
  9831 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcspn.c"
  9832 ;; Parameters:    Size  Location     Type
  9833 ;;  s1              1    wreg     PTR const unsigned char 
  9834 ;;		 -> readdata(20), NULL(0), 
  9835 ;;  s2              2   24[BANK0 ] PTR const unsigned char 
  9836 ;;		 -> STR_57(2), STR_56(2), 
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;  s1              1   30[BANK0 ] PTR const unsigned char 
  9839 ;;		 -> readdata(20), NULL(0), 
  9840 ;;  i               2   28[BANK0 ] unsigned int 
  9841 ;; Return value:  Size  Location     Type
  9842 ;;                  2   24[BANK0 ] unsigned int 
  9843 ;; Registers used:
  9844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9845 ;; Tracked objects:
  9846 ;;		On entry : 0/0
  9847 ;;		On exit  : 0/0
  9848 ;;		Unchanged: 0/0
  9849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9850 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9851 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9852 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9853 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9854 ;;Total ram usage:        7 bytes
  9855 ;; Hardware stack levels used:    1
  9856 ;; Hardware stack levels required when called:    7
  9857 ;; This function calls:
  9858 ;;		_strchr
  9859 ;; This function is called by:
  9860 ;;		_strtok
  9861 ;; This function uses a non-reentrant model
  9862 ;;
  9863                           
  9864                           
  9865                           ;psect for function _strcspn
  9866  2619                     _strcspn:	
  9867                           
  9868                           ;incstack = 0
  9869                           ; Regs used in _strcspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9870                           ;strcspn@s1 stored from wreg
  9871  2619  0020               	movlb	0	; select bank0
  9872  261A  00BE               	movwf	strcspn@s1
  9873  261B  01BC               	clrf	strcspn@i
  9874  261C  01BD               	clrf	strcspn@i+1
  9875  261D  2E26               	goto	l6131
  9876  261E                     l6129:	
  9877  261E  3001               	movlw	1
  9878  261F  00BA               	movwf	??_strcspn
  9879  2620  083A               	movf	??_strcspn,w
  9880  2621  07BE               	addwf	strcspn@s1,f
  9881  2622  3001               	movlw	1
  9882  2623  07BC               	addwf	strcspn@i,f
  9883  2624  3000               	movlw	0
  9884  2625  3DBD               	addwfc	strcspn@i+1,f
  9885  2626                     l6131:	
  9886  2626  083E               	movf	strcspn@s1,w
  9887  2627  0086               	movwf	6
  9888  2628  3001               	movlw	1	; select bank2/3
  9889  2629  0087               	movwf	7
  9890  262A  0801               	movf	1,w
  9891  262B  1903               	btfsc	3,2
  9892  262C  2E44               	goto	l6135
  9893  262D  0839               	movf	strcspn@s2+1,w
  9894  262E  00B2               	movwf	strchr@ptr+1
  9895  262F  0838               	movf	strcspn@s2,w
  9896  2630  00B1               	movwf	strchr@ptr
  9897  2631  083E               	movf	strcspn@s1,w
  9898  2632  0086               	movwf	6
  9899  2633  3001               	movlw	1	; select bank2/3
  9900  2634  0087               	movwf	7
  9901  2635  0801               	movf	1,w
  9902  2636  00BA               	movwf	??_strcspn
  9903  2637  01BB               	clrf	??_strcspn+1
  9904  2638  083A               	movf	??_strcspn,w
  9905  2639  00B3               	movwf	strchr@chr
  9906  263A  083B               	movf	??_strcspn+1,w
  9907  263B  00B4               	movwf	strchr@chr+1
  9908  263C  31A2  2276  31A6   	fcall	_strchr
  9909  263F  0020               	movlb	0	; select bank0
  9910  2640  0831               	movf	?_strchr,w
  9911  2641  0432               	iorwf	?_strchr+1,w
  9912  2642  1903               	btfsc	3,2
  9913  2643  2E1E               	goto	l6129
  9914  2644                     l6135:	
  9915  2644  083D               	movf	strcspn@i+1,w
  9916  2645  00B9               	movwf	?_strcspn+1
  9917  2646  083C               	movf	strcspn@i,w
  9918  2647  00B8               	movwf	?_strcspn
  9919  2648  0008               	return
  9920  2649                     __end_of_strcspn:	
  9921                           
  9922                           	psect	text5
  9923  2276                     __ptext5:	
  9924 ;; *************** function _strchr *****************
  9925 ;; Defined at:
  9926 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  9927 ;; Parameters:    Size  Location     Type
  9928 ;;  ptr             2   17[BANK0 ] PTR const unsigned char 
  9929 ;;		 -> STR_57(2), STR_56(2), 
  9930 ;;  chr             2   19[BANK0 ] int 
  9931 ;; Auto vars:     Size  Location     Type
  9932 ;;		None
  9933 ;; Return value:  Size  Location     Type
  9934 ;;                  2   17[BANK0 ] PTR unsigned char 
  9935 ;; Registers used:
  9936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  9937 ;; Tracked objects:
  9938 ;;		On entry : 0/0
  9939 ;;		On exit  : 0/0
  9940 ;;		Unchanged: 0/0
  9941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9942 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9944 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9945 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9946 ;;Total ram usage:        7 bytes
  9947 ;; Hardware stack levels used:    1
  9948 ;; Hardware stack levels required when called:    6
  9949 ;; This function calls:
  9950 ;;		Nothing
  9951 ;; This function is called by:
  9952 ;;		_strcspn
  9953 ;;		_strspn
  9954 ;; This function uses a non-reentrant model
  9955 ;;
  9956                           
  9957                           
  9958                           ;psect for function _strchr
  9959  2276                     _strchr:	
  9960  2276                     l2204:	
  9961                           ;incstack = 0
  9962                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0+pclath]
  9963                           
  9964  2276  0020               	movlb	0	; select bank0
  9965  2277  0831               	movf	strchr@ptr,w
  9966  2278  0084               	movwf	4
  9967  2279  0832               	movf	strchr@ptr+1,w
  9968  227A  0085               	movwf	5
  9969  227B  0800               	movf	0,w	;code access
  9970  227C  0633               	xorwf	strchr@chr,w
  9971  227D  1903               	btfsc	3,2
  9972  227E  0008               	return
  9973  227F  0832               	movf	strchr@ptr+1,w
  9974  2280  00B6               	movwf	??_strchr+1
  9975  2281  0831               	movf	strchr@ptr,w
  9976  2282  00B5               	movwf	??_strchr
  9977  2283  0AB1               	incf	strchr@ptr,f
  9978  2284  1903               	skipnz
  9979  2285  0AB2               	incf	strchr@ptr+1,f
  9980  2286  0835               	movf	??_strchr,w
  9981  2287  0084               	movwf	4
  9982  2288  0836               	movf	??_strchr+1,w
  9983  2289  0085               	movwf	5
  9984  228A  0012               	moviw fsr0++
  9985  228B  1D03               	btfss	3,2
  9986  228C  2A76               	goto	l2204
  9987  228D  01B1               	clrf	?_strchr
  9988  228E  01B2               	clrf	?_strchr+1
  9989  228F  0008               	return
  9990  2290                     __end_of_strchr:	
  9991                           
  9992                           	psect	text6
  9993  26AC                     __ptext6:	
  9994 ;; *************** function _stricmp *****************
  9995 ;; Defined at:
  9996 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\stricmp.c"
  9997 ;; Parameters:    Size  Location     Type
  9998 ;;  s1              1    wreg     PTR const unsigned char 
  9999 ;;		 -> readdata(20), NULL(0), 
 10000 ;;  s2              2   19[BANK0 ] PTR const unsigned char 
 10001 ;;		 -> STR_82(10), STR_81(5), STR_80(5), STR_79(7), 
 10002 ;;		 -> STR_78(8), STR_77(5), STR_76(5), STR_75(11), 
 10003 ;;		 -> STR_74(13), STR_73(7), STR_72(8), STR_71(10), 
 10004 ;;		 -> STR_70(11), STR_69(15), STR_68(14), STR_67(12), 
 10005 ;;		 -> STR_66(8), STR_65(8), STR_64(2), STR_63(5), 
 10006 ;;		 -> STR_62(5), STR_61(2), STR_60(4), STR_59(4), 
 10007 ;;		 -> STR_58(4), 
 10008 ;; Auto vars:     Size  Location     Type
 10009 ;;  s1              1   24[BANK0 ] PTR const unsigned char 
 10010 ;;		 -> readdata(20), NULL(0), 
 10011 ;;  r               1   23[BANK0 ] char 
 10012 ;; Return value:  Size  Location     Type
 10013 ;;                  2   19[BANK0 ] int 
 10014 ;; Registers used:
 10015 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10016 ;; Tracked objects:
 10017 ;;		On entry : 0/0
 10018 ;;		On exit  : 0/0
 10019 ;;		Unchanged: 0/0
 10020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10021 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10022 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10023 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10024 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10025 ;;Total ram usage:        6 bytes
 10026 ;; Hardware stack levels used:    1
 10027 ;; Hardware stack levels required when called:    7
 10028 ;; This function calls:
 10029 ;;		_toupper
 10030 ;; This function is called by:
 10031 ;;		_parseCmd
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           
 10036                           ;psect for function _stricmp
 10037  26AC                     _stricmp:	
 10038                           
 10039                           ;incstack = 0
 10040                           ; Regs used in _stricmp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10041                           ;stricmp@s1 stored from wreg
 10042  26AC  0020               	movlb	0	; select bank0
 10043  26AD  00B8               	movwf	stricmp@s1
 10044  26AE  2EB7               	goto	l6719
 10045  26AF                     l6717:	
 10046  26AF  3001               	movlw	1
 10047  26B0  00B5               	movwf	??_stricmp
 10048  26B1  0835               	movf	??_stricmp,w
 10049  26B2  07B8               	addwf	stricmp@s1,f
 10050  26B3  3001               	movlw	1
 10051  26B4  07B3               	addwf	stricmp@s2,f
 10052  26B5  3000               	movlw	0
 10053  26B6  3DB4               	addwfc	stricmp@s2+1,f
 10054  26B7                     l6719:	
 10055  26B7  0833               	movf	stricmp@s2,w
 10056  26B8  0084               	movwf	4
 10057  26B9  0834               	movf	stricmp@s2+1,w
 10058  26BA  0085               	movwf	5
 10059  26BB  0800               	movf	0,w	;code access
 10060  26BC  31A1  219C  31A6   	fcall	_toupper
 10061  26BF  3AFF               	xorlw	255
 10062  26C0  3E01               	addlw	1
 10063  26C1  0020               	movlb	0	; select bank0
 10064  26C2  00B5               	movwf	??_stricmp
 10065  26C3  0838               	movf	stricmp@s1,w
 10066  26C4  0086               	movwf	6
 10067  26C5  3001               	movlw	1	; select bank2/3
 10068  26C6  0087               	movwf	7
 10069  26C7  0801               	movf	1,w
 10070  26C8  31A1  219C  31A6   	fcall	_toupper
 10071  26CB  0020               	movlb	0	; select bank0
 10072  26CC  0735               	addwf	??_stricmp,w
 10073  26CD  00B6               	movwf	??_stricmp+1
 10074  26CE  0836               	movf	??_stricmp+1,w
 10075  26CF  00B7               	movwf	stricmp@r
 10076  26D0  0837               	movf	stricmp@r,w
 10077  26D1  1D03               	btfss	3,2
 10078  26D2  2EDA               	goto	l6723
 10079  26D3  0838               	movf	stricmp@s1,w
 10080  26D4  0086               	movwf	6
 10081  26D5  3001               	movlw	1	; select bank2/3
 10082  26D6  0087               	movwf	7
 10083  26D7  0801               	movf	1,w
 10084  26D8  1D03               	btfss	3,2
 10085  26D9  2EAF               	goto	l6717
 10086  26DA                     l6723:	
 10087  26DA  0837               	movf	stricmp@r,w
 10088  26DB  00B3               	movwf	?_stricmp
 10089  26DC  01B4               	clrf	?_stricmp+1
 10090  26DD  1BB3               	btfsc	?_stricmp,7
 10091  26DE  03B4               	decf	?_stricmp+1,f
 10092  26DF  0008               	return
 10093  26E0                     __end_of_stricmp:	
 10094                           
 10095                           	psect	text7
 10096  219C                     __ptext7:	
 10097 ;; *************** function _toupper *****************
 10098 ;; Defined at:
 10099 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
 10100 ;; Parameters:    Size  Location     Type
 10101 ;;  c               1    wreg     unsigned char 
 10102 ;; Auto vars:     Size  Location     Type
 10103 ;;  c               1   18[BANK0 ] unsigned char 
 10104 ;; Return value:  Size  Location     Type
 10105 ;;                  1    wreg      unsigned char 
 10106 ;; Registers used:
 10107 ;;		wreg, status,2, status,0
 10108 ;; Tracked objects:
 10109 ;;		On entry : 0/0
 10110 ;;		On exit  : 0/0
 10111 ;;		Unchanged: 0/0
 10112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10116 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10117 ;;Total ram usage:        2 bytes
 10118 ;; Hardware stack levels used:    1
 10119 ;; Hardware stack levels required when called:    6
 10120 ;; This function calls:
 10121 ;;		Nothing
 10122 ;; This function is called by:
 10123 ;;		_stricmp
 10124 ;; This function uses a non-reentrant model
 10125 ;;
 10126                           
 10127                           
 10128                           ;psect for function _toupper
 10129  219C                     _toupper:	
 10130                           
 10131                           ;incstack = 0
 10132                           ; Regs used in _toupper: [wreg+status,2+status,0]
 10133                           ;toupper@c stored from wreg
 10134  219C  0020               	movlb	0	; select bank0
 10135  219D  00B2               	movwf	toupper@c
 10136  219E  307B               	movlw	123
 10137  219F  0232               	subwf	toupper@c,w
 10138  21A0  1803               	skipnc
 10139  21A1  29AA               	goto	l6111
 10140  21A2  3061               	movlw	97
 10141  21A3  0232               	subwf	toupper@c,w
 10142  21A4  1C03               	skipc
 10143  21A5  29AA               	goto	l6111
 10144  21A6  30DF               	movlw	223
 10145  21A7  00B1               	movwf	??_toupper
 10146  21A8  0831               	movf	??_toupper,w
 10147  21A9  05B2               	andwf	toupper@c,f
 10148  21AA                     l6111:	
 10149  21AA  0832               	movf	toupper@c,w
 10150  21AB  0008               	return
 10151  21AC                     __end_of_toupper:	
 10152                           
 10153                           	psect	text8
 10154  1F8F                     __ptext8:	
 10155 ;; *************** function _atoi *****************
 10156 ;; Defined at:
 10157 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
 10158 ;; Parameters:    Size  Location     Type
 10159 ;;  s               1    wreg     PTR const unsigned char 
 10160 ;;		 -> readdata(20), NULL(0), 
 10161 ;; Auto vars:     Size  Location     Type
 10162 ;;  s               1   30[BANK0 ] PTR const unsigned char 
 10163 ;;		 -> readdata(20), NULL(0), 
 10164 ;;  a               2   28[BANK0 ] int 
 10165 ;;  sign            1   27[BANK0 ] unsigned char 
 10166 ;; Return value:  Size  Location     Type
 10167 ;;                  2   23[BANK0 ] int 
 10168 ;; Registers used:
 10169 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10170 ;; Tracked objects:
 10171 ;;		On entry : 0/0
 10172 ;;		On exit  : 0/0
 10173 ;;		Unchanged: 0/0
 10174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10175 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10176 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10177 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10178 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10179 ;;Total ram usage:        8 bytes
 10180 ;; Hardware stack levels used:    1
 10181 ;; Hardware stack levels required when called:    7
 10182 ;; This function calls:
 10183 ;;		___wmul
 10184 ;;		_isdigit
 10185 ;; This function is called by:
 10186 ;;		_parseCmd
 10187 ;; This function uses a non-reentrant model
 10188 ;;
 10189                           
 10190                           
 10191                           ;psect for function _atoi
 10192  1F8F                     _atoi:	
 10193                           
 10194                           ;incstack = 0
 10195                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10196                           ;atoi@s stored from wreg
 10197  1F8F  0020               	movlb	0	; select bank0
 10198  1F90  00BE               	movwf	atoi@s
 10199  1F91                     l8993:	
 10200  1F91  083E               	movf	atoi@s,w
 10201  1F92  0086               	movwf	6
 10202  1F93  3001               	movlw	1	; select bank2/3
 10203  1F94  0087               	movwf	7
 10204  1F95  3020               	movlw	32
 10205  1F96  0601               	xorwf	1,w
 10206  1F97  1D03               	btfss	3,2
 10207  1F98  2F9E               	goto	l8995
 10208  1F99                     l8991:	
 10209  1F99  3001               	movlw	1
 10210  1F9A  00B9               	movwf	??_atoi
 10211  1F9B  0839               	movf	??_atoi,w
 10212  1F9C  07BE               	addwf	atoi@s,f
 10213  1F9D  2F91               	goto	l8993
 10214  1F9E                     l8995:	
 10215  1F9E  083E               	movf	atoi@s,w
 10216  1F9F  0086               	movwf	6
 10217  1FA0  3001               	movlw	1	; select bank2/3
 10218  1FA1  0087               	movwf	7
 10219  1FA2  3009               	movlw	9
 10220  1FA3  0601               	xorwf	1,w
 10221  1FA4  1903               	btfsc	3,2
 10222  1FA5  2F99               	goto	l8991
 10223  1FA6  01BC               	clrf	atoi@a
 10224  1FA7  01BD               	clrf	atoi@a+1
 10225  1FA8  01BB               	clrf	atoi@sign
 10226  1FA9  083E               	movf	atoi@s,w
 10227  1FAA  0086               	movwf	6
 10228  1FAB  3001               	movlw	1	; select bank2/3
 10229  1FAC  0087               	movwf	7
 10230  1FAD  302D               	movlw	45
 10231  1FAE  0601               	xorwf	1,w
 10232  1FAF  1D03               	btfss	3,2
 10233  1FB0  2FB6               	goto	l9003
 10234  1FB1  3001               	movlw	1
 10235  1FB2  00B9               	movwf	??_atoi
 10236  1FB3  0839               	movf	??_atoi,w
 10237  1FB4  07BB               	addwf	atoi@sign,f
 10238  1FB5  2FBE               	goto	l9009
 10239  1FB6                     l9003:	
 10240  1FB6  083E               	movf	atoi@s,w
 10241  1FB7  0086               	movwf	6
 10242  1FB8  3001               	movlw	1	; select bank2/3
 10243  1FB9  0087               	movwf	7
 10244  1FBA  302B               	movlw	43
 10245  1FBB  0601               	xorwf	1,w
 10246  1FBC  1D03               	btfss	3,2
 10247  1FBD  2FC2               	goto	l9011
 10248  1FBE                     l9009:	
 10249  1FBE  3001               	movlw	1
 10250  1FBF  00B9               	movwf	??_atoi
 10251  1FC0  0839               	movf	??_atoi,w
 10252  1FC1  07BE               	addwf	atoi@s,f
 10253  1FC2                     l9011:	
 10254  1FC2  083E               	movf	atoi@s,w
 10255  1FC3  0086               	movwf	6
 10256  1FC4  3001               	movlw	1	; select bank2/3
 10257  1FC5  0087               	movwf	7
 10258  1FC6  0801               	movf	1,w
 10259  1FC7  31A1  218D  319F   	fcall	_isdigit
 10260  1FCA  1C03               	btfss	3,0
 10261  1FCB  2FEB               	goto	l9013
 10262  1FCC  0020               	movlb	0	; select bank0
 10263  1FCD  083D               	movf	atoi@a+1,w
 10264  1FCE  00B2               	movwf	___wmul@multiplier+1
 10265  1FCF  083C               	movf	atoi@a,w
 10266  1FD0  00B1               	movwf	___wmul@multiplier
 10267  1FD1  300A               	movlw	10
 10268  1FD2  00B3               	movwf	___wmul@multiplicand
 10269  1FD3  3000               	movlw	0
 10270  1FD4  00B4               	movwf	___wmul@multiplicand+1
 10271  1FD5  31A2  22C7  319F   	fcall	___wmul
 10272  1FD8  0020               	movlb	0	; select bank0
 10273  1FD9  083E               	movf	atoi@s,w
 10274  1FDA  0086               	movwf	6
 10275  1FDB  3001               	movlw	1	; select bank2/3
 10276  1FDC  0087               	movwf	7
 10277  1FDD  0801               	movf	1,w
 10278  1FDE  0731               	addwf	?___wmul,w
 10279  1FDF  00B9               	movwf	??_atoi
 10280  1FE0  0832               	movf	?___wmul+1,w
 10281  1FE1  1803               	skipnc
 10282  1FE2  0A32               	incf	?___wmul+1,w
 10283  1FE3  00BA               	movwf	??_atoi+1
 10284  1FE4  0839               	movf	??_atoi,w
 10285  1FE5  3ED0               	addlw	208
 10286  1FE6  00BC               	movwf	atoi@a
 10287  1FE7  30FF               	movlw	255
 10288  1FE8  3D3A               	addwfc	??_atoi+1,w
 10289  1FE9  00BD               	movwf	atoi@a+1
 10290  1FEA  2FBE               	goto	l9009
 10291  1FEB                     l9013:	
 10292  1FEB  0020               	movlb	0	; select bank0
 10293  1FEC  083B               	movf	atoi@sign,w
 10294  1FED  1903               	btfsc	3,2
 10295  1FEE  2FFB               	goto	l9019
 10296  1FEF  093C               	comf	atoi@a,w
 10297  1FF0  00B9               	movwf	??_atoi
 10298  1FF1  093D               	comf	atoi@a+1,w
 10299  1FF2  00BA               	movwf	??_atoi+1
 10300  1FF3  0AB9               	incf	??_atoi,f
 10301  1FF4  1903               	skipnz
 10302  1FF5  0ABA               	incf	??_atoi+1,f
 10303  1FF6  0839               	movf	??_atoi,w
 10304  1FF7  00B7               	movwf	?_atoi
 10305  1FF8  083A               	movf	??_atoi+1,w
 10306  1FF9  00B8               	movwf	?_atoi+1
 10307  1FFA  0008               	return
 10308  1FFB                     l9019:	
 10309  1FFB  083D               	movf	atoi@a+1,w
 10310  1FFC  00B8               	movwf	?_atoi+1
 10311  1FFD  083C               	movf	atoi@a,w
 10312  1FFE  00B7               	movwf	?_atoi
 10313  1FFF  0008               	return
 10314  2000                     __end_of_atoi:	
 10315                           
 10316                           	psect	text9
 10317  218D                     __ptext9:	
 10318 ;; *************** function _isdigit *****************
 10319 ;; Defined at:
 10320 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 10321 ;; Parameters:    Size  Location     Type
 10322 ;;  c               1    wreg     unsigned char 
 10323 ;; Auto vars:     Size  Location     Type
 10324 ;;  c               1   18[BANK0 ] unsigned char 
 10325 ;; Return value:  Size  Location     Type
 10326 ;;		None               void
 10327 ;; Registers used:
 10328 ;;		wreg, status,2, status,0
 10329 ;; Tracked objects:
 10330 ;;		On entry : 0/0
 10331 ;;		On exit  : 0/0
 10332 ;;		Unchanged: 0/0
 10333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10335 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10338 ;;Total ram usage:        2 bytes
 10339 ;; Hardware stack levels used:    1
 10340 ;; Hardware stack levels required when called:    6
 10341 ;; This function calls:
 10342 ;;		Nothing
 10343 ;; This function is called by:
 10344 ;;		_atoi
 10345 ;; This function uses a non-reentrant model
 10346 ;;
 10347                           
 10348                           
 10349                           ;psect for function _isdigit
 10350  218D                     _isdigit:	
 10351                           
 10352                           ;incstack = 0
 10353                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 10354                           ;isdigit@c stored from wreg
 10355  218D  0020               	movlb	0	; select bank0
 10356  218E  00B2               	movwf	isdigit@c
 10357  218F  01B1               	clrf	_isdigit$2365
 10358  2190  303A               	movlw	58
 10359  2191  0232               	subwf	isdigit@c,w
 10360  2192  1803               	skipnc
 10361  2193  299A               	goto	l6051
 10362  2194  3030               	movlw	48
 10363  2195  0232               	subwf	isdigit@c,w
 10364  2196  1C03               	skipc
 10365  2197  299A               	goto	l6051
 10366  2198  01B1               	clrf	_isdigit$2365
 10367  2199  0AB1               	incf	_isdigit$2365,f
 10368  219A                     l6051:	
 10369  219A  0C31               	rrf	_isdigit$2365,w
 10370  219B  0008               	return
 10371  219C                     __end_of_isdigit:	
 10372                           
 10373                           	psect	text10
 10374  0AEB                     __ptext10:	
 10375 ;; *************** function _main_initialize *****************
 10376 ;; Defined at:
 10377 ;;		line 194 in file "main.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;		None
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;		None
 10382 ;; Return value:  Size  Location     Type
 10383 ;;                  1    wreg      void 
 10384 ;; Registers used:
 10385 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10386 ;; Tracked objects:
 10387 ;;		On entry : 0/0
 10388 ;;		On exit  : 0/0
 10389 ;;		Unchanged: 0/0
 10390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10395 ;;Total ram usage:        0 bytes
 10396 ;; Hardware stack levels used:    1
 10397 ;; Hardware stack levels required when called:   15
 10398 ;; This function calls:
 10399 ;;		_LED_setBrightnessRange
 10400 ;;		_LEDsPwr
 10401 ;;		_TMR0_Load8bitPeriod
 10402 ;;		_TMR2_LoadPeriodRegister
 10403 ;;		___awtoft
 10404 ;;		___ftadd
 10405 ;;		___ftmul
 10406 ;;		___fttol
 10407 ;;		_drv_init
 10408 ;;		_printf
 10409 ;; This function is called by:
 10410 ;;		_main
 10411 ;; This function uses a non-reentrant model
 10412 ;;
 10413                           
 10414                           
 10415                           ;psect for function _main_initialize
 10416  0AEB                     _main_initialize:	
 10417                           
 10418                           ;main.c: 196: LEDsPwr(LEDpower, 1);
 10419                           
 10420                           ;incstack = 0
 10421                           ; Regs used in _main_initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10422  0AEB  3052               	movlw	low (_LEDpower| (0+32768))
 10423  0AEC  0084               	movwf	4
 10424  0AED  30B0               	movlw	high (_LEDpower| (0+32768))
 10425  0AEE  0085               	movwf	5
 10426  0AEF  3F00               	moviw [0]fsr0
 10427  0AF0  0020               	movlb	0	; select bank0
 10428  0AF1  00C4               	movwf	LEDsPwr@pwr
 10429  0AF2  3F01               	moviw [1]fsr0
 10430  0AF3  00C5               	movwf	LEDsPwr@pwr+1
 10431  0AF4  3001               	movlw	1
 10432  0AF5  00C6               	movwf	LEDsPwr@topOrBottom
 10433  0AF6  3000               	movlw	0
 10434  0AF7  00C7               	movwf	LEDsPwr@topOrBottom+1
 10435  0AF8  319E  26C6  318A   	fcall	_LEDsPwr
 10436                           
 10437                           ;main.c: 197: LEDsPwr(LEDpower, 2);
 10438  0AFB  3052               	movlw	low (_LEDpower| (0+32768))
 10439  0AFC  0084               	movwf	4
 10440  0AFD  30B0               	movlw	high (_LEDpower| (0+32768))
 10441  0AFE  0085               	movwf	5
 10442  0AFF  3F00               	moviw [0]fsr0
 10443  0B00  0020               	movlb	0	; select bank0
 10444  0B01  00C4               	movwf	LEDsPwr@pwr
 10445  0B02  3F01               	moviw [1]fsr0
 10446  0B03  00C5               	movwf	LEDsPwr@pwr+1
 10447  0B04  3002               	movlw	2
 10448  0B05  00C6               	movwf	LEDsPwr@topOrBottom
 10449  0B06  3000               	movlw	0
 10450  0B07  00C7               	movwf	LEDsPwr@topOrBottom+1
 10451  0B08  319E  26C6  318A   	fcall	_LEDsPwr
 10452                           
 10453                           ;main.c: 199: LED_setBrightnessRange(1, 1);
 10454  0B0B  3001               	movlw	1
 10455  0B0C  0020               	movlb	0	; select bank0
 10456  0B0D  00C4               	movwf	LED_setBrightnessRange@range
 10457  0B0E  3000               	movlw	0
 10458  0B0F  00C5               	movwf	LED_setBrightnessRange@range+1
 10459  0B10  3001               	movlw	1
 10460  0B11  00C6               	movwf	LED_setBrightnessRange@topOrBottom
 10461  0B12  3000               	movlw	0
 10462  0B13  00C7               	movwf	LED_setBrightnessRange@topOrBottom+1
 10463  0B14  3188  202B  318A   	fcall	_LED_setBrightnessRange
 10464                           
 10465                           ;main.c: 200: LED_setBrightnessRange(1, 2);
 10466  0B17  3001               	movlw	1
 10467  0B18  0020               	movlb	0	; select bank0
 10468  0B19  00C4               	movwf	LED_setBrightnessRange@range
 10469  0B1A  3000               	movlw	0
 10470  0B1B  00C5               	movwf	LED_setBrightnessRange@range+1
 10471  0B1C  3002               	movlw	2
 10472  0B1D  00C6               	movwf	LED_setBrightnessRange@topOrBottom
 10473  0B1E  3000               	movlw	0
 10474  0B1F  00C7               	movwf	LED_setBrightnessRange@topOrBottom+1
 10475  0B20  3188  202B  318A   	fcall	_LED_setBrightnessRange
 10476                           
 10477                           ;main.c: 201: do { LATCbits.LATC1 = 1; } while(0);
 10478  0B23  0022               	movlb	2	; select bank2
 10479  0B24  148E               	bsf	14,1	;volatile
 10480                           
 10481                           ;main.c: 204: TMR2_LoadPeriodRegister((heater_pre_time_ms*TMR2_RANGE)-1);
 10482  0B25  0021               	movlb	1	; select bank1
 10483  0B26  086D               	movf	(_heater_pre_time_ms+1)^(0+128),w
 10484  0B27  0020               	movlb	0	; select bank0
 10485  0B28  00C1               	movwf	___awtoft@c+1
 10486  0B29  0021               	movlb	1	; select bank1
 10487  0B2A  086C               	movf	_heater_pre_time_ms^(0+128),w
 10488  0B2B  0020               	movlb	0	; select bank0
 10489  0B2C  00C0               	movwf	___awtoft@c
 10490  0B2D  31A4  241B  318A   	fcall	___awtoft
 10491  0B30  0020               	movlb	0	; select bank0
 10492  0B31  0840               	movf	?___awtoft,w
 10493  0B32  00C9               	movwf	___ftmul@f2
 10494  0B33  0841               	movf	?___awtoft+1,w
 10495  0B34  00CA               	movwf	___ftmul@f2+1
 10496  0B35  0842               	movf	?___awtoft+2,w
 10497  0B36  00CB               	movwf	___ftmul@f2+2
 10498  0B37  3040               	movlw	low (_TMR2_RANGE| (0+32768))
 10499  0B38  0084               	movwf	4
 10500  0B39  30B0               	movlw	high (_TMR2_RANGE| (0+32768))
 10501  0B3A  0085               	movwf	5
 10502  0B3B  3F00               	moviw [0]fsr0
 10503  0B3C  00C6               	movwf	___ftmul@f1
 10504  0B3D  3F01               	moviw [1]fsr0
 10505  0B3E  00C7               	movwf	___ftmul@f1+1
 10506  0B3F  3F02               	moviw [2]fsr0
 10507  0B40  00C8               	movwf	___ftmul@f1+2
 10508  0B41  318B  23BF  318A   	fcall	___ftmul
 10509  0B44  0020               	movlb	0	; select bank0
 10510  0B45  0846               	movf	?___ftmul,w
 10511  0B46  0021               	movlb	1	; select bank1
 10512  0B47  00AD               	movwf	___ftadd@f2^(0+128)
 10513  0B48  0020               	movlb	0	; select bank0
 10514  0B49  0847               	movf	?___ftmul+1,w
 10515  0B4A  0021               	movlb	1	; select bank1
 10516  0B4B  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 10517  0B4C  0020               	movlb	0	; select bank0
 10518  0B4D  0848               	movf	?___ftmul+2,w
 10519  0B4E  0021               	movlb	1	; select bank1
 10520  0B4F  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 10521  0B50  3000               	movlw	0
 10522  0B51  00AA               	movwf	___ftadd@f1^(0+128)
 10523  0B52  3080               	movlw	128
 10524  0B53  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 10525  0B54  30BF               	movlw	191
 10526  0B55  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 10527  0B56  318C  24A8  318A   	fcall	___ftadd
 10528  0B59  0021               	movlb	1	; select bank1
 10529  0B5A  082A               	movf	?___ftadd^(0+128),w
 10530  0B5B  00B7               	movwf	___fttol@f1^(0+128)
 10531  0B5C  082B               	movf	(?___ftadd+1)^(0+128),w
 10532  0B5D  00B8               	movwf	(___fttol@f1+1)^(0+128)
 10533  0B5E  082C               	movf	(?___ftadd+2)^(0+128),w
 10534  0B5F  00B9               	movwf	(___fttol@f1+2)^(0+128)
 10535  0B60  3197  2779  318A   	fcall	___fttol
 10536  0B63  0021               	movlb	1	; select bank1
 10537  0B64  0837               	movf	?___fttol^(0+128),w
 10538  0B65  31AF  27B7  318A   	fcall	_TMR2_LoadPeriodRegister
 10539                           
 10540                           ;main.c: 205: TMR0_Load8bitPeriod(((piezo_on_time_ms)*TMR0_RANGE)-1);
 10541  0B68  0021               	movlb	1	; select bank1
 10542  0B69  086B               	movf	(_piezo_on_time_ms+1)^(0+128),w
 10543  0B6A  0020               	movlb	0	; select bank0
 10544  0B6B  00C1               	movwf	___awtoft@c+1
 10545  0B6C  0021               	movlb	1	; select bank1
 10546  0B6D  086A               	movf	_piezo_on_time_ms^(0+128),w
 10547  0B6E  0020               	movlb	0	; select bank0
 10548  0B6F  00C0               	movwf	___awtoft@c
 10549  0B70  31A4  241B  318A   	fcall	___awtoft
 10550  0B73  0020               	movlb	0	; select bank0
 10551  0B74  0840               	movf	?___awtoft,w
 10552  0B75  00C9               	movwf	___ftmul@f2
 10553  0B76  0841               	movf	?___awtoft+1,w
 10554  0B77  00CA               	movwf	___ftmul@f2+1
 10555  0B78  0842               	movf	?___awtoft+2,w
 10556  0B79  00CB               	movwf	___ftmul@f2+2
 10557  0B7A  3043               	movlw	low (_TMR0_RANGE| (0+32768))
 10558  0B7B  0084               	movwf	4
 10559  0B7C  30B0               	movlw	high (_TMR0_RANGE| (0+32768))
 10560  0B7D  0085               	movwf	5
 10561  0B7E  3F00               	moviw [0]fsr0
 10562  0B7F  00C6               	movwf	___ftmul@f1
 10563  0B80  3F01               	moviw [1]fsr0
 10564  0B81  00C7               	movwf	___ftmul@f1+1
 10565  0B82  3F02               	moviw [2]fsr0
 10566  0B83  00C8               	movwf	___ftmul@f1+2
 10567  0B84  318B  23BF  318A   	fcall	___ftmul
 10568  0B87  0020               	movlb	0	; select bank0
 10569  0B88  0846               	movf	?___ftmul,w
 10570  0B89  0021               	movlb	1	; select bank1
 10571  0B8A  00AD               	movwf	___ftadd@f2^(0+128)
 10572  0B8B  0020               	movlb	0	; select bank0
 10573  0B8C  0847               	movf	?___ftmul+1,w
 10574  0B8D  0021               	movlb	1	; select bank1
 10575  0B8E  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 10576  0B8F  0020               	movlb	0	; select bank0
 10577  0B90  0848               	movf	?___ftmul+2,w
 10578  0B91  0021               	movlb	1	; select bank1
 10579  0B92  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 10580  0B93  3000               	movlw	0
 10581  0B94  00AA               	movwf	___ftadd@f1^(0+128)
 10582  0B95  3080               	movlw	128
 10583  0B96  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 10584  0B97  30BF               	movlw	191
 10585  0B98  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 10586  0B99  318C  24A8  318A   	fcall	___ftadd
 10587  0B9C  0021               	movlb	1	; select bank1
 10588  0B9D  082A               	movf	?___ftadd^(0+128),w
 10589  0B9E  00B7               	movwf	___fttol@f1^(0+128)
 10590  0B9F  082B               	movf	(?___ftadd+1)^(0+128),w
 10591  0BA0  00B8               	movwf	(___fttol@f1+1)^(0+128)
 10592  0BA1  082C               	movf	(?___ftadd+2)^(0+128),w
 10593  0BA2  00B9               	movwf	(___fttol@f1+2)^(0+128)
 10594  0BA3  3197  2779  318A   	fcall	___fttol
 10595  0BA6  0021               	movlb	1	; select bank1
 10596  0BA7  0837               	movf	?___fttol^(0+128),w
 10597  0BA8  31AF  27B2  318A   	fcall	_TMR0_Load8bitPeriod
 10598                           
 10599                           ;main.c: 209: drv_init(0x03, 0x0c);
 10600  0BAB  3003               	movlw	3
 10601  0BAC  0023               	movlb	3	; select bank3
 10602  0BAD  00DE               	movwf	drv_init@output_gain^(0+384)
 10603  0BAE  3000               	movlw	0
 10604  0BAF  00DF               	movwf	(drv_init@output_gain^(0+384)+1)
 10605  0BB0  300C               	movlw	12
 10606  0BB1  00E0               	movwf	drv_init@idle_timeout^(0+384)
 10607  0BB2  3000               	movlw	0
 10608  0BB3  00E1               	movwf	(drv_init@idle_timeout^(0+384)+1)
 10609  0BB4  3193  2329  318A   	fcall	_drv_init
 10610                           
 10611                           ;main.c: 210: printf("initialized\n");
 10612  0BB7  30F2               	movlw	low ((STR_52+4)| (0+32768))
 10613  0BB8  0021               	movlb	1	; select bank1
 10614  0BB9  00A0               	movwf	printf@f^(0+128)
 10615  0BBA  30A8               	movlw	high ((STR_52+4)| (0+32768))
 10616  0BBB  00A1               	movwf	(printf@f^(0+128)+1)
 10617  0BBC  318E  26CE         	fcall	_printf
 10618  0BBE  0008               	return
 10619  0BBF                     __end_of_main_initialize:	
 10620                           
 10621                           	psect	text11
 10622  1329                     __ptext11:	
 10623 ;; *************** function _drv_init *****************
 10624 ;; Defined at:
 10625 ;;		line 4 in file "drv2665.c"
 10626 ;; Parameters:    Size  Location     Type
 10627 ;;  output_gain     2    5[BANK3 ] int 
 10628 ;;  idle_timeout    2    7[BANK3 ] int 
 10629 ;; Auto vars:     Size  Location     Type
 10630 ;;		None
 10631 ;; Return value:  Size  Location     Type
 10632 ;;                  1    wreg      void 
 10633 ;; Registers used:
 10634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10635 ;; Tracked objects:
 10636 ;;		On entry : 0/0
 10637 ;;		On exit  : 0/0
 10638 ;;		Unchanged: 0/0
 10639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10640 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10642 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10643 ;;      Totals:         0       0       1       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10644 ;;Total ram usage:        5 bytes
 10645 ;; Hardware stack levels used:    1
 10646 ;; Hardware stack levels required when called:   14
 10647 ;; This function calls:
 10648 ;;		_calcDownstroke
 10649 ;;		_calcUpstroke
 10650 ;;		_drv_reset
 10651 ;;		_drv_write
 10652 ;;		_i2c_open
 10653 ;;		_i2c_setAddress
 10654 ;;		_printf
 10655 ;; This function is called by:
 10656 ;;		_main_initialize
 10657 ;; This function uses a non-reentrant model
 10658 ;;
 10659                           
 10660                           
 10661                           ;psect for function _drv_init
 10662  1329                     _drv_init:	
 10663                           
 10664                           ;drv2665.c: 6: i2c_setAddress(drv_address);
 10665                           
 10666                           ;incstack = 0
 10667                           ; Regs used in _drv_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10668  1329  3056               	movlw	low (_drv_address| (0+32768))
 10669  132A  0084               	movwf	4
 10670  132B  30B0               	movlw	high (_drv_address| (0+32768))
 10671  132C  0085               	movwf	5
 10672  132D  0800               	movf	0,w	;code access
 10673  132E  31A0  2062  3193   	fcall	_i2c_setAddress
 10674                           
 10675                           ;drv2665.c: 7: i2c_open(drv_address);
 10676  1331  3056               	movlw	low (_drv_address| (0+32768))
 10677  1332  0084               	movwf	4
 10678  1333  30B0               	movlw	high (_drv_address| (0+32768))
 10679  1334  0085               	movwf	5
 10680  1335  0800               	movf	0,w	;code access
 10681  1336  319A  22EF  3193   	fcall	_i2c_open
 10682                           
 10683                           ;drv2665.c: 8: _delay((unsigned long)((10)*(1000000/4000.0)));
 10684  1339  3004               	movlw	4
 10685  133A  0021               	movlb	1	; select bank1
 10686  133B  00D5               	movwf	??_drv_init^(0+128)
 10687  133C  303D               	movlw	61
 10688  133D                     u10147:	
 10689  133D  0B89               	decfsz	9,f
 10690  133E  2B3D               	goto	u10147
 10691  133F  0BD5               	decfsz	??_drv_init^(0+128),f
 10692  1340  2B3D               	goto	u10147
 10693  1341  3200               	nop2
 10694                           
 10695                           ;drv2665.c: 10: drv_reset();
 10696  1342  31A0  20DA  3193   	fcall	_drv_reset
 10697                           
 10698                           ;drv2665.c: 11: _delay((unsigned long)((10)*(1000000/4000.0)));
 10699  1345  3004               	movlw	4
 10700  1346  0021               	movlb	1	; select bank1
 10701  1347  00D5               	movwf	??_drv_init^(0+128)
 10702  1348  303D               	movlw	61
 10703  1349                     u10157:	
 10704  1349  0B89               	decfsz	9,f
 10705  134A  2B49               	goto	u10157
 10706  134B  0BD5               	decfsz	??_drv_init^(0+128),f
 10707  134C  2B49               	goto	u10157
 10708  134D  3200               	nop2
 10709                           
 10710                           ;drv2665.c: 12: drv_write(0x02, 0);
 10711  134E  0020               	movlb	0	; select bank0
 10712  134F  01C9               	clrf	drv_write@data
 10713  1350  3002               	movlw	2
 10714  1351  31A4  24A8  3193   	fcall	_drv_write
 10715                           
 10716                           ;drv2665.c: 13: _delay((unsigned long)((10)*(1000000/4000.0)));
 10717  1354  3004               	movlw	4
 10718  1355  0021               	movlb	1	; select bank1
 10719  1356  00D5               	movwf	??_drv_init^(0+128)
 10720  1357  303D               	movlw	61
 10721  1358                     u10167:	
 10722  1358  0B89               	decfsz	9,f
 10723  1359  2B58               	goto	u10167
 10724  135A  0BD5               	decfsz	??_drv_init^(0+128),f
 10725  135B  2B58               	goto	u10167
 10726  135C  3200               	nop2
 10727                           
 10728                           ;drv2665.c: 14: drv_write(0x01, 0x38 | output_gain);
 10729  135D  0023               	movlb	3	; select bank3
 10730  135E  085E               	movf	drv_init@output_gain^(0+384),w
 10731  135F  3838               	iorlw	56
 10732  1360  0021               	movlb	1	; select bank1
 10733  1361  00D5               	movwf	??_drv_init^(0+128)
 10734  1362  0855               	movf	??_drv_init^(0+128),w
 10735  1363  0020               	movlb	0	; select bank0
 10736  1364  00C9               	movwf	drv_write@data
 10737  1365  3001               	movlw	1
 10738  1366  31A4  24A8  3193   	fcall	_drv_write
 10739                           
 10740                           ;drv2665.c: 16: _delay((unsigned long)((10)*(1000000/4000.0)));
 10741  1369  3004               	movlw	4
 10742  136A  0021               	movlb	1	; select bank1
 10743  136B  00D5               	movwf	??_drv_init^(0+128)
 10744  136C  303D               	movlw	61
 10745  136D                     u10177:	
 10746  136D  0B89               	decfsz	9,f
 10747  136E  2B6D               	goto	u10177
 10748  136F  0BD5               	decfsz	??_drv_init^(0+128),f
 10749  1370  2B6D               	goto	u10177
 10750  1371  3200               	nop2
 10751                           
 10752                           ;drv2665.c: 17: drv_write(0x02, idle_timeout);
 10753  1372  0023               	movlb	3	; select bank3
 10754  1373  0860               	movf	drv_init@idle_timeout^(0+384),w
 10755  1374  0021               	movlb	1	; select bank1
 10756  1375  00D5               	movwf	??_drv_init^(0+128)
 10757  1376  0855               	movf	??_drv_init^(0+128),w
 10758  1377  0020               	movlb	0	; select bank0
 10759  1378  00C9               	movwf	drv_write@data
 10760  1379  3002               	movlw	2
 10761  137A  31A4  24A8  3193   	fcall	_drv_write
 10762                           
 10763                           ;drv2665.c: 19: _delay((unsigned long)((10)*(1000000/4000.0)));
 10764  137D  3004               	movlw	4
 10765  137E  0021               	movlb	1	; select bank1
 10766  137F  00D5               	movwf	??_drv_init^(0+128)
 10767  1380  303D               	movlw	61
 10768  1381                     u10187:	
 10769  1381  0B89               	decfsz	9,f
 10770  1382  2B81               	goto	u10187
 10771  1383  0BD5               	decfsz	??_drv_init^(0+128),f
 10772  1384  2B81               	goto	u10187
 10773  1385  3200               	nop2
 10774                           
 10775                           ;drv2665.c: 20: calcUpstroke(drv_peak_val);
 10776  1386  0021               	movlb	1	; select bank1
 10777  1387  086F               	movf	(_drv_peak_val+1)^(0+128),w
 10778  1388  00D4               	movwf	(calcUpstroke@maxVal+1)^(0+128)
 10779  1389  086E               	movf	_drv_peak_val^(0+128),w
 10780  138A  00D3               	movwf	calcUpstroke@maxVal^(0+128)
 10781  138B  3195  257E  3193   	fcall	_calcUpstroke
 10782                           
 10783                           ;drv2665.c: 21: calcDownstroke(drv_peak_val);
 10784  138E  0021               	movlb	1	; select bank1
 10785  138F  086F               	movf	(_drv_peak_val+1)^(0+128),w
 10786  1390  00D4               	movwf	(calcDownstroke@maxVal+1)^(0+128)
 10787  1391  086E               	movf	_drv_peak_val^(0+128),w
 10788  1392  00D3               	movwf	calcDownstroke@maxVal^(0+128)
 10789  1393  3188  20C3  3193   	fcall	_calcDownstroke
 10790                           
 10791                           ;drv2665.c: 22: printf("drv initialized\n");
 10792  1396  30EE               	movlw	low (STR_52| (0+32768))
 10793  1397  0021               	movlb	1	; select bank1
 10794  1398  00A0               	movwf	printf@f^(0+128)
 10795  1399  30A8               	movlw	high (STR_52| (0+32768))
 10796  139A  00A1               	movwf	(printf@f^(0+128)+1)
 10797  139B  318E  26CE         	fcall	_printf
 10798  139D  0008               	return
 10799  139E                     __end_of_drv_init:	
 10800                           
 10801                           	psect	text12
 10802  2062                     __ptext12:	
 10803 ;; *************** function _i2c_setAddress *****************
 10804 ;; Defined at:
 10805 ;;		line 156 in file "mcc_generated_files/drivers/i2c_master.c"
 10806 ;; Parameters:    Size  Location     Type
 10807 ;;  address         1    wreg     unsigned char 
 10808 ;; Auto vars:     Size  Location     Type
 10809 ;;  address         1   18[BANK0 ] unsigned char 
 10810 ;; Return value:  Size  Location     Type
 10811 ;;                  1    wreg      void 
 10812 ;; Registers used:
 10813 ;;		wreg
 10814 ;; Tracked objects:
 10815 ;;		On entry : 0/0
 10816 ;;		On exit  : 0/0
 10817 ;;		Unchanged: 0/0
 10818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10820 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10821 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10822 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10823 ;;Total ram usage:        2 bytes
 10824 ;; Hardware stack levels used:    1
 10825 ;; Hardware stack levels required when called:    6
 10826 ;; This function calls:
 10827 ;;		Nothing
 10828 ;; This function is called by:
 10829 ;;		_drv_init
 10830 ;; This function uses a non-reentrant model
 10831 ;;
 10832                           
 10833                           
 10834                           ;psect for function _i2c_setAddress
 10835  2062                     _i2c_setAddress:	
 10836                           
 10837                           ;incstack = 0
 10838                           ; Regs used in _i2c_setAddress: [wreg]
 10839                           ;i2c_setAddress@address stored from wreg
 10840  2062  0020               	movlb	0	; select bank0
 10841  2063  00B2               	movwf	i2c_setAddress@address
 10842                           
 10843                           ;i2c_master.c: 158: i2c_status.address = address;
 10844  2064  0832               	movf	i2c_setAddress@address,w
 10845  2065  00B1               	movwf	??_i2c_setAddress
 10846  2066  0831               	movf	??_i2c_setAddress,w
 10847  2067  0022               	movlb	2	; select bank2
 10848  2068  00A1               	movwf	(_i2c_status^(0+256)+1)
 10849  2069  0008               	return
 10850  206A                     __end_of_i2c_setAddress:	
 10851                           
 10852                           	psect	text13
 10853  1AEF                     __ptext13:	
 10854 ;; *************** function _i2c_open *****************
 10855 ;; Defined at:
 10856 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
 10857 ;; Parameters:    Size  Location     Type
 10858 ;;  address         1    wreg     unsigned char 
 10859 ;; Auto vars:     Size  Location     Type
 10860 ;;  address         1   21[BANK0 ] unsigned char 
 10861 ;;  ret             1   20[BANK0 ] enum E8193
 10862 ;; Return value:  Size  Location     Type
 10863 ;;                  1    wreg      enum E8193
 10864 ;; Registers used:
 10865 ;;		wreg, status,2, status,0, pclath, cstack
 10866 ;; Tracked objects:
 10867 ;;		On entry : 0/0
 10868 ;;		On exit  : 0/0
 10869 ;;		Unchanged: 0/0
 10870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10872 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10873 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10874 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10875 ;;Total ram usage:        3 bytes
 10876 ;; Hardware stack levels used:    1
 10877 ;; Hardware stack levels required when called:    7
 10878 ;; This function calls:
 10879 ;;		_i2c1_driver_open
 10880 ;;		_i2c1_driver_setBusCollisionISR
 10881 ;;		_i2c1_driver_setI2cISR
 10882 ;;		_mssp1_clearIRQ
 10883 ;; This function is called by:
 10884 ;;		_drv_init
 10885 ;; This function uses a non-reentrant model
 10886 ;;
 10887                           
 10888                           
 10889                           ;psect for function _i2c_open
 10890  1AEF                     _i2c_open:	
 10891                           
 10892                           ;incstack = 0
 10893                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
 10894                           ;i2c_open@address stored from wreg
 10895  1AEF  0020               	movlb	0	; select bank0
 10896  1AF0  00B5               	movwf	i2c_open@address
 10897                           
 10898                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
 10899  1AF1  01B4               	clrf	i2c_open@ret
 10900  1AF2  0AB4               	incf	i2c_open@ret,f
 10901                           
 10902                           ;i2c_master.c: 120: if(!i2c_status.inUse)
 10903  1AF3  0022               	movlb	2	; select bank2
 10904  1AF4  18A0               	btfsc	_i2c_status^(0+256),1
 10905  1AF5  0008               	return
 10906                           
 10907                           ;i2c_master.c: 121: {
 10908                           ;i2c_master.c: 122: i2c_status.address = address;
 10909  1AF6  0020               	movlb	0	; select bank0
 10910  1AF7  0835               	movf	i2c_open@address,w
 10911  1AF8  00B3               	movwf	??_i2c_open
 10912  1AF9  0833               	movf	??_i2c_open,w
 10913  1AFA  0022               	movlb	2	; select bank2
 10914  1AFB  00A1               	movwf	(_i2c_status^(0+256)+1)
 10915                           
 10916                           ;i2c_master.c: 123: i2c_status.busy = 0;
 10917  1AFC  1020               	bcf	_i2c_status^(0+256),0
 10918                           
 10919                           ;i2c_master.c: 124: i2c_status.inUse = 1;
 10920  1AFD  14A0               	bsf	_i2c_status^(0+256),1
 10921                           
 10922                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
 10923  1AFE  11A0               	bcf	_i2c_status^(0+256),3
 10924                           
 10925                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
 10926  1AFF  300E               	movlw	14
 10927  1B00  0020               	movlb	0	; select bank0
 10928  1B01  00B3               	movwf	??_i2c_open
 10929  1B02  0833               	movf	??_i2c_open,w
 10930  1B03  0022               	movlb	2	; select bank2
 10931  1B04  00AA               	movwf	(_i2c_status^(0+256)+10)
 10932                           
 10933                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
 10934  1B05  30F4               	movlw	244
 10935  1B06  00A8               	movwf	(_i2c_status^(0+256)+8)
 10936  1B07  3001               	movlw	1
 10937  1B08  00A9               	movwf	(_i2c_status^(0+256)+9)
 10938                           
 10939                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
 10940  1B09  1520               	bsf	_i2c_status^(0+256),2
 10941                           
 10942                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
 10943  1B0A  30C2               	movlw	low _returnStop
 10944  1B0B  00AC               	movwf	(low ((_i2c_status| (0+256)+12)))^0
 10945  1B0C  302F               	movlw	high _returnStop
 10946  1B0D  00AD               	movwf	((low ((_i2c_status| (0+256)+12)))^0+1)
 10947                           
 10948                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
 10949  1B0E  01B8               	clrf	(low ((_i2c_status| (0+256)+24)))^0
 10950                           
 10951                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
 10952  1B0F  30C2               	movlw	low _returnStop
 10953  1B10  00AE               	movwf	(low ((_i2c_status| (0+256)+14)))^0
 10954  1B11  302F               	movlw	high _returnStop
 10955  1B12  00AF               	movwf	((low ((_i2c_status| (0+256)+14)))^0+1)
 10956                           
 10957                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
 10958  1B13  01B9               	clrf	(low ((_i2c_status| (0+256)+25)))^0
 10959                           
 10960                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
 10961  1B14  30C2               	movlw	low _returnStop
 10962  1B15  00B0               	movwf	(low ((_i2c_status| (0+256)+16)))^0
 10963  1B16  302F               	movlw	high _returnStop
 10964  1B17  00B1               	movwf	((low ((_i2c_status| (0+256)+16)))^0+1)
 10965                           
 10966                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
 10967  1B18  01BA               	clrf	(low ((_i2c_status| (0+256)+26)))^0
 10968                           
 10969                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
 10970  1B19  30C2               	movlw	low _returnStop
 10971  1B1A  00B2               	movwf	(low ((_i2c_status| (0+256)+18)))^0
 10972  1B1B  302F               	movlw	high _returnStop
 10973  1B1C  00B3               	movwf	((low ((_i2c_status| (0+256)+18)))^0+1)
 10974                           
 10975                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
 10976  1B1D  01BB               	clrf	(low ((_i2c_status| (0+256)+27)))^0
 10977                           
 10978                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
 10979  1B1E  30C8               	movlw	low _returnReset
 10980  1B1F  00B4               	movwf	(low ((_i2c_status| (0+256)+20)))^0
 10981  1B20  302F               	movlw	high _returnReset
 10982  1B21  00B5               	movwf	((low ((_i2c_status| (0+256)+20)))^0+1)
 10983                           
 10984                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
 10985  1B22  01BC               	clrf	(low ((_i2c_status| (0+256)+28)))^0
 10986                           
 10987                           ;i2c_master.c: 142: i2c1_driver_open();
 10988  1B23  31A0  20E4  319A   	fcall	_i2c1_driver_open
 10989                           
 10990                           ;i2c_master.c: 143: mssp1_clearIRQ();
 10991  1B26  31AF  275E  319A   	fcall	_mssp1_clearIRQ
 10992                           
 10993                           ;i2c_master.c: 145: i2c1_driver_setBusCollisionISR(i2c_busCollisionISR);
 10994  1B29  302E               	movlw	low _i2c_busCollisionISR
 10995  1B2A  0020               	movlb	0	; select bank0
 10996  1B2B  00B1               	movwf	i2c1_driver_setBusCollisionISR@f
 10997  1B2C  302F               	movlw	high _i2c_busCollisionISR
 10998  1B2D  00B2               	movwf	i2c1_driver_setBusCollisionISR@f+1
 10999  1B2E  31A0  20A0  319A   	fcall	_i2c1_driver_setBusCollisionISR
 11000                           
 11001                           ;i2c_master.c: 146: i2c1_driver_setI2cISR(i2c_ISR);
 11002  1B31  30F1               	movlw	low _i2c_ISR
 11003  1B32  0020               	movlb	0	; select bank0
 11004  1B33  00B1               	movwf	i2c1_driver_setI2cISR@f
 11005  1B34  3024               	movlw	high _i2c_ISR
 11006  1B35  00B2               	movwf	i2c1_driver_setI2cISR@f+1
 11007  1B36  31A0  20A9         	fcall	_i2c1_driver_setI2cISR
 11008                           
 11009                           ;i2c_master.c: 151: ret = I2C_NOERR;
 11010  1B38  0020               	movlb	0	; select bank0
 11011  1B39  01B4               	clrf	i2c_open@ret
 11012  1B3A  0008               	return
 11013  1B3B                     __end_of_i2c_open:	
 11014                           ;i2c_master.c: 152: }
 11015                           ;i2c_master.c: 153: return ret;
 11016                           ;	Return value of _i2c_open is never used
 11017                           
 11018                           
 11019                           	psect	text14
 11020  20A9                     __ptext14:	
 11021 ;; *************** function _i2c1_driver_setI2cISR *****************
 11022 ;; Defined at:
 11023 ;;		line 262 in file "mcc_generated_files/i2c1_driver.c"
 11024 ;; Parameters:    Size  Location     Type
 11025 ;;  f               2   17[BANK0 ] PTR void 
 11026 ;;		 -> i2c_ISR(1), 
 11027 ;; Auto vars:     Size  Location     Type
 11028 ;;		None
 11029 ;; Return value:  Size  Location     Type
 11030 ;;                  1    wreg      void 
 11031 ;; Registers used:
 11032 ;;		wreg
 11033 ;; Tracked objects:
 11034 ;;		On entry : 0/0
 11035 ;;		On exit  : 0/0
 11036 ;;		Unchanged: 0/0
 11037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11038 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11041 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11042 ;;Total ram usage:        2 bytes
 11043 ;; Hardware stack levels used:    1
 11044 ;; Hardware stack levels required when called:    6
 11045 ;; This function calls:
 11046 ;;		Nothing
 11047 ;; This function is called by:
 11048 ;;		_i2c_open
 11049 ;; This function uses a non-reentrant model
 11050 ;;
 11051                           
 11052                           
 11053                           ;psect for function _i2c1_driver_setI2cISR
 11054  20A9                     _i2c1_driver_setI2cISR:	
 11055                           
 11056                           ;i2c1_driver.c: 263: i2c1_driver_i2cISR = f;
 11057                           
 11058                           ;incstack = 0
 11059                           ; Regs used in _i2c1_driver_setI2cISR: [wreg]
 11060  20A9  0020               	movlb	0	; select bank0
 11061  20AA  0832               	movf	i2c1_driver_setI2cISR@f+1,w
 11062  20AB  0022               	movlb	2	; select bank2
 11063  20AC  00EB               	movwf	(_i2c1_driver_i2cISR+1)^(0+256)
 11064  20AD  0020               	movlb	0	; select bank0
 11065  20AE  0831               	movf	i2c1_driver_setI2cISR@f,w
 11066  20AF  0022               	movlb	2	; select bank2
 11067  20B0  00EA               	movwf	_i2c1_driver_i2cISR^(0+256)
 11068  20B1  0008               	return
 11069  20B2                     __end_of_i2c1_driver_setI2cISR:	
 11070                           
 11071                           	psect	text15
 11072  20A0                     __ptext15:	
 11073 ;; *************** function _i2c1_driver_setBusCollisionISR *****************
 11074 ;; Defined at:
 11075 ;;		line 258 in file "mcc_generated_files/i2c1_driver.c"
 11076 ;; Parameters:    Size  Location     Type
 11077 ;;  f               2   17[BANK0 ] PTR void 
 11078 ;;		 -> i2c_busCollisionISR(1), 
 11079 ;; Auto vars:     Size  Location     Type
 11080 ;;		None
 11081 ;; Return value:  Size  Location     Type
 11082 ;;                  1    wreg      void 
 11083 ;; Registers used:
 11084 ;;		wreg
 11085 ;; Tracked objects:
 11086 ;;		On entry : 0/0
 11087 ;;		On exit  : 0/0
 11088 ;;		Unchanged: 0/0
 11089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11090 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11093 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11094 ;;Total ram usage:        2 bytes
 11095 ;; Hardware stack levels used:    1
 11096 ;; Hardware stack levels required when called:    6
 11097 ;; This function calls:
 11098 ;;		Nothing
 11099 ;; This function is called by:
 11100 ;;		_i2c_open
 11101 ;; This function uses a non-reentrant model
 11102 ;;
 11103                           
 11104                           
 11105                           ;psect for function _i2c1_driver_setBusCollisionISR
 11106  20A0                     _i2c1_driver_setBusCollisionISR:	
 11107                           
 11108                           ;i2c1_driver.c: 259: i2c1_driver_busCollisionISR = f;
 11109                           
 11110                           ;incstack = 0
 11111                           ; Regs used in _i2c1_driver_setBusCollisionISR: [wreg]
 11112  20A0  0020               	movlb	0	; select bank0
 11113  20A1  0832               	movf	i2c1_driver_setBusCollisionISR@f+1,w
 11114  20A2  0021               	movlb	1	; select bank1
 11115  20A3  00E9               	movwf	(_i2c1_driver_busCollisionISR+1)^(0+128)
 11116  20A4  0020               	movlb	0	; select bank0
 11117  20A5  0831               	movf	i2c1_driver_setBusCollisionISR@f,w
 11118  20A6  0021               	movlb	1	; select bank1
 11119  20A7  00E8               	movwf	_i2c1_driver_busCollisionISR^(0+128)
 11120  20A8  0008               	return
 11121  20A9                     __end_of_i2c1_driver_setBusCollisionISR:	
 11122                           
 11123                           	psect	text16
 11124  20E4                     __ptext16:	
 11125 ;; *************** function _i2c1_driver_open *****************
 11126 ;; Defined at:
 11127 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
 11128 ;; Parameters:    Size  Location     Type
 11129 ;;		None
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;		None
 11132 ;; Return value:  Size  Location     Type
 11133 ;;		None               void
 11134 ;; Registers used:
 11135 ;;		wreg, status,2
 11136 ;; Tracked objects:
 11137 ;;		On entry : 0/0
 11138 ;;		On exit  : 0/0
 11139 ;;		Unchanged: 0/0
 11140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11145 ;;Total ram usage:        0 bytes
 11146 ;; Hardware stack levels used:    1
 11147 ;; Hardware stack levels required when called:    6
 11148 ;; This function calls:
 11149 ;;		Nothing
 11150 ;; This function is called by:
 11151 ;;		_i2c_open
 11152 ;; This function uses a non-reentrant model
 11153 ;;
 11154                           
 11155                           
 11156                           ;psect for function _i2c1_driver_open
 11157  20E4                     _i2c1_driver_open:	
 11158                           
 11159                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
 11160                           
 11161                           ;incstack = 0
 11162                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
 11163  20E4  0024               	movlb	4	; select bank4
 11164  20E5  1A95               	btfsc	21,5	;volatile
 11165  20E6  0008               	return
 11166                           
 11167                           ;i2c1_driver.c: 86: {
 11168                           ;i2c1_driver.c: 87: SSP1STAT = 0x00;
 11169  20E7  0194               	clrf	20	;volatile
 11170                           
 11171                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
 11172  20E8  3028               	movlw	40
 11173  20E9  0095               	movwf	21	;volatile
 11174                           
 11175                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
 11176  20EA  0196               	clrf	22	;volatile
 11177                           
 11178                           ;i2c1_driver.c: 90: SSP1ADD = 0x3;
 11179  20EB  3003               	movlw	3
 11180  20EC  0092               	movwf	18	;volatile
 11181                           
 11182                           ;i2c1_driver.c: 93: else
 11183                           ;i2c1_driver.c: 94: return 0;
 11184                           ;	Return value of _i2c1_driver_open is never used
 11185                           
 11186                           ;i2c1_driver.c: 92: }
 11187                           
 11188                           ;i2c1_driver.c: 91: return 1;
 11189                           ;	Return value of _i2c1_driver_open is never used
 11190  20ED  0008               	return
 11191  20EE                     __end_of_i2c1_driver_open:	
 11192                           
 11193                           	psect	text17
 11194  20DA                     __ptext17:	
 11195 ;; *************** function _drv_reset *****************
 11196 ;; Defined at:
 11197 ;;		line 25 in file "drv2665.c"
 11198 ;; Parameters:    Size  Location     Type
 11199 ;;		None
 11200 ;; Auto vars:     Size  Location     Type
 11201 ;;		None
 11202 ;; Return value:  Size  Location     Type
 11203 ;;                  1    wreg      void 
 11204 ;; Registers used:
 11205 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11206 ;; Tracked objects:
 11207 ;;		On entry : 0/0
 11208 ;;		On exit  : 0/0
 11209 ;;		Unchanged: 0/0
 11210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11213 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11214 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11215 ;;Total ram usage:        1 bytes
 11216 ;; Hardware stack levels used:    1
 11217 ;; Hardware stack levels required when called:   13
 11218 ;; This function calls:
 11219 ;;		_drv_write
 11220 ;; This function is called by:
 11221 ;;		_drv_init
 11222 ;; This function uses a non-reentrant model
 11223 ;;
 11224                           
 11225                           
 11226                           ;psect for function _drv_reset
 11227  20DA                     _drv_reset:	
 11228                           
 11229                           ;drv2665.c: 26: drv_write(0x02, 0x80);
 11230                           
 11231                           ;incstack = 0
 11232                           ; Regs used in _drv_reset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11233  20DA  3080               	movlw	128
 11234  20DB  0021               	movlb	1	; select bank1
 11235  20DC  00B5               	movwf	??_drv_reset^(0+128)
 11236  20DD  0835               	movf	??_drv_reset^(0+128),w
 11237  20DE  0020               	movlb	0	; select bank0
 11238  20DF  00C9               	movwf	drv_write@data
 11239  20E0  3002               	movlw	2
 11240  20E1  31A4  24A8         	fcall	_drv_write
 11241  20E3  0008               	return
 11242  20E4                     __end_of_drv_reset:	
 11243                           
 11244                           	psect	text18
 11245  039E                     __ptext18:	
 11246 ;; *************** function _execCmd *****************
 11247 ;; Defined at:
 11248 ;;		line 77 in file "cmd_parser.c"
 11249 ;; Parameters:    Size  Location     Type
 11250 ;;  s               1    wreg     PTR struct CMD_STRUCT
 11251 ;;		 -> cmd_struct(21), 
 11252 ;; Auto vars:     Size  Location     Type
 11253 ;;  s               1   55[BANK1 ] PTR struct CMD_STRUCT
 11254 ;;		 -> cmd_struct(21), 
 11255 ;; Return value:  Size  Location     Type
 11256 ;;                  2  987[None  ] int 
 11257 ;; Registers used:
 11258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11259 ;; Tracked objects:
 11260 ;;		On entry : 0/0
 11261 ;;		On exit  : 0/0
 11262 ;;		Unchanged: 0/0
 11263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11265 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11267 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11268 ;;Total ram usage:        1 bytes
 11269 ;; Hardware stack levels used:    1
 11270 ;; Hardware stack levels required when called:   15
 11271 ;; This function calls:
 11272 ;;		_commCheck
 11273 ;;		_doMove
 11274 ;;		_getActive
 11275 ;;		_getMotionStatus
 11276 ;;		_getMoveMask
 11277 ;;		_getPosition
 11278 ;;		_printf
 11279 ;;		_setActive
 11280 ;;		_setDrvGain
 11281 ;;		_setDrvPeak
 11282 ;;		_setDrvPiezoOnTime
 11283 ;;		_setH1OffTime
 11284 ;;		_setH2OnTime
 11285 ;;		_setHeaterPostTime
 11286 ;;		_setHeaterPreTime
 11287 ;;		_setHeaterToggle
 11288 ;;		_setLEDBrightnessRange
 11289 ;;		_setLEDPwr
 11290 ;;		_setMoveMask
 11291 ;;		_startAbsMove
 11292 ;;		_startRelMove
 11293 ;;		_stop
 11294 ;;		_timedActiveHeatOn
 11295 ;;		_zeroPosition
 11296 ;; This function is called by:
 11297 ;;		_main
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           
 11302                           ;psect for function _execCmd
 11303  039E                     _execCmd:	
 11304                           
 11305                           ;incstack = 0
 11306                           ; Regs used in _execCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11307                           ;execCmd@s stored from wreg
 11308  039E  0021               	movlb	1	; select bank1
 11309  039F  00D7               	movwf	execCmd@s^(0+128)
 11310                           
 11311                           ;cmd_parser.c: 78: errorOut = 1;
 11312  03A0  3001               	movlw	1
 11313  03A1  0022               	movlb	2	; select bank2
 11314  03A2  00E6               	movwf	_errorOut^(0+256)
 11315  03A3  3000               	movlw	0
 11316  03A4  00E7               	movwf	(_errorOut^(0+256)+1)
 11317                           
 11318                           ;cmd_parser.c: 80: switch(s->c){
 11319  03A5  2D7D               	goto	l9349
 11320  03A6                     l9299:	
 11321                           ;cmd_parser.c: 81: case CMD_REL: errorOut = startRelMove(s->p1.paramI); break;
 11322                           
 11323  03A6  0021               	movlb	1	; select bank1
 11324  03A7  0A57               	incf	execCmd@s^(0+128),w
 11325  03A8  0086               	movwf	6
 11326  03A9  3001               	movlw	1	; select bank2/3
 11327  03AA  0087               	movwf	7
 11328  03AB  3F40               	moviw [0]fsr1
 11329  03AC  00B5               	movwf	startRelMove@steps^(0+128)
 11330  03AD  3F41               	moviw [1]fsr1
 11331  03AE  00B6               	movwf	(startRelMove@steps+1)^(0+128)
 11332  03AF  31A2  2290         	fcall	_startRelMove
 11333  03B1  0021               	movlb	1	; select bank1
 11334  03B2  0836               	movf	(?_startRelMove+1)^(0+128),w
 11335  03B3  0022               	movlb	2	; select bank2
 11336  03B4  00E7               	movwf	(_errorOut+1)^(0+256)
 11337  03B5  0021               	movlb	1	; select bank1
 11338  03B6  0835               	movf	?_startRelMove^(0+128),w
 11339  03B7  0022               	movlb	2	; select bank2
 11340  03B8  00E6               	movwf	_errorOut^(0+256)
 11341  03B9  0008               	return
 11342  03BA                     l9301:	
 11343                           ;cmd_parser.c: 82: case CMD_ABS: errorOut = startAbsMove(s->p1.paramI); break;
 11344                           
 11345  03BA  0021               	movlb	1	; select bank1
 11346  03BB  0A57               	incf	execCmd@s^(0+128),w
 11347  03BC  0086               	movwf	6
 11348  03BD  3001               	movlw	1	; select bank2/3
 11349  03BE  0087               	movwf	7
 11350  03BF  3F40               	moviw [0]fsr1
 11351  03C0  00B5               	movwf	startAbsMove@steps^(0+128)
 11352  03C1  3F41               	moviw [1]fsr1
 11353  03C2  00B6               	movwf	(startAbsMove@steps+1)^(0+128)
 11354  03C3  31A2  22E3         	fcall	_startAbsMove
 11355  03C5  0021               	movlb	1	; select bank1
 11356  03C6  0836               	movf	(?_startAbsMove+1)^(0+128),w
 11357  03C7  0022               	movlb	2	; select bank2
 11358  03C8  00E7               	movwf	(_errorOut+1)^(0+256)
 11359  03C9  0021               	movlb	1	; select bank1
 11360  03CA  0835               	movf	?_startAbsMove^(0+128),w
 11361  03CB  0022               	movlb	2	; select bank2
 11362  03CC  00E6               	movwf	_errorOut^(0+256)
 11363  03CD  0008               	return
 11364  03CE                     l9303:	
 11365                           ;cmd_parser.c: 83: case CMD_P: errorOut = getPosition(s->p1.paramI); break;
 11366                           
 11367  03CE  0021               	movlb	1	; select bank1
 11368  03CF  0A57               	incf	execCmd@s^(0+128),w
 11369  03D0  0086               	movwf	6
 11370  03D1  3001               	movlw	1	; select bank2/3
 11371  03D2  0087               	movwf	7
 11372  03D3  3F40               	moviw [0]fsr1
 11373  03D4  00B5               	movwf	getPosition@a^(0+128)
 11374  03D5  3F41               	moviw [1]fsr1
 11375  03D6  00B6               	movwf	(getPosition@a+1)^(0+128)
 11376  03D7  31A7  27C1         	fcall	_getPosition
 11377  03D9  0021               	movlb	1	; select bank1
 11378  03DA  0836               	movf	(?_getPosition+1)^(0+128),w
 11379  03DB  0022               	movlb	2	; select bank2
 11380  03DC  00E7               	movwf	(_errorOut+1)^(0+256)
 11381  03DD  0021               	movlb	1	; select bank1
 11382  03DE  0835               	movf	?_getPosition^(0+128),w
 11383  03DF  0022               	movlb	2	; select bank2
 11384  03E0  00E6               	movwf	_errorOut^(0+256)
 11385  03E1  0008               	return
 11386  03E2                     l9305:	
 11387                           ;cmd_parser.c: 84: case CMD_STOP: errorOut = stop(); break;
 11388                           
 11389  03E2  31A5  2517         	fcall	_stop
 11390  03E4  0021               	movlb	1	; select bank1
 11391  03E5  0836               	movf	(?_stop+1)^(0+128),w
 11392  03E6  0022               	movlb	2	; select bank2
 11393  03E7  00E7               	movwf	(_errorOut+1)^(0+256)
 11394  03E8  0021               	movlb	1	; select bank1
 11395  03E9  0835               	movf	?_stop^(0+128),w
 11396  03EA  0022               	movlb	2	; select bank2
 11397  03EB  00E6               	movwf	_errorOut^(0+256)
 11398  03EC  0008               	return
 11399  03ED                     l9307:	
 11400                           ;cmd_parser.c: 85: case CMD_ZERO: errorOut = zeroPosition(); break;
 11401                           
 11402  03ED  3192  22B4         	fcall	_zeroPosition
 11403  03EF  0021               	movlb	1	; select bank1
 11404  03F0  0836               	movf	(?_zeroPosition+1)^(0+128),w
 11405  03F1  0022               	movlb	2	; select bank2
 11406  03F2  00E7               	movwf	(_errorOut+1)^(0+256)
 11407  03F3  0021               	movlb	1	; select bank1
 11408  03F4  0835               	movf	?_zeroPosition^(0+128),w
 11409  03F5  0022               	movlb	2	; select bank2
 11410  03F6  00E6               	movwf	_errorOut^(0+256)
 11411  03F7  0008               	return
 11412  03F8                     l9309:	
 11413                           ;cmd_parser.c: 88: case CMD_DRV_PEAK: errorOut = setDrvPeak(s->p1.paramI); break;
 11414                           
 11415  03F8  0021               	movlb	1	; select bank1
 11416  03F9  0A57               	incf	execCmd@s^(0+128),w
 11417  03FA  0086               	movwf	6
 11418  03FB  3001               	movlw	1	; select bank2/3
 11419  03FC  0087               	movwf	7
 11420  03FD  3F40               	moviw [0]fsr1
 11421  03FE  00D5               	movwf	setDrvPeak@pk^(0+128)
 11422  03FF  3F41               	moviw [1]fsr1
 11423  0400  00D6               	movwf	(setDrvPeak@pk+1)^(0+128)
 11424  0401  31A3  235A         	fcall	_setDrvPeak
 11425  0403  0021               	movlb	1	; select bank1
 11426  0404  0856               	movf	(?_setDrvPeak+1)^(0+128),w
 11427  0405  0022               	movlb	2	; select bank2
 11428  0406  00E7               	movwf	(_errorOut+1)^(0+256)
 11429  0407  0021               	movlb	1	; select bank1
 11430  0408  0855               	movf	?_setDrvPeak^(0+128),w
 11431  0409  0022               	movlb	2	; select bank2
 11432  040A  00E6               	movwf	_errorOut^(0+256)
 11433  040B  0008               	return
 11434  040C                     l9311:	
 11435                           ;cmd_parser.c: 89: case CMD_DRV_GAIN: errorOut = setDrvGain(s->p1.paramI); break;
 11436                           
 11437  040C  0021               	movlb	1	; select bank1
 11438  040D  0A57               	incf	execCmd@s^(0+128),w
 11439  040E  0086               	movwf	6
 11440  040F  3001               	movlw	1	; select bank2/3
 11441  0410  0087               	movwf	7
 11442  0411  3F40               	moviw [0]fsr1
 11443  0412  00B5               	movwf	setDrvGain@gain^(0+128)
 11444  0413  3F41               	moviw [1]fsr1
 11445  0414  00B6               	movwf	(setDrvGain@gain+1)^(0+128)
 11446  0415  3199  2189         	fcall	_setDrvGain
 11447  0417  0021               	movlb	1	; select bank1
 11448  0418  0836               	movf	(?_setDrvGain+1)^(0+128),w
 11449  0419  0022               	movlb	2	; select bank2
 11450  041A  00E7               	movwf	(_errorOut+1)^(0+256)
 11451  041B  0021               	movlb	1	; select bank1
 11452  041C  0835               	movf	?_setDrvGain^(0+128),w
 11453  041D  0022               	movlb	2	; select bank2
 11454  041E  00E6               	movwf	_errorOut^(0+256)
 11455  041F  0008               	return
 11456  0420                     l9313:	
 11457                           ;cmd_parser.c: 90: case CMD_DRV_PIEZOONTIME: errorOut = setDrvPiezoOnTime(s->p1.paramI);
      +                           break;
 11458                           
 11459  0420  0021               	movlb	1	; select bank1
 11460  0421  0A57               	incf	execCmd@s^(0+128),w
 11461  0422  0086               	movwf	6
 11462  0423  3001               	movlw	1	; select bank2/3
 11463  0424  0087               	movwf	7
 11464  0425  3F40               	moviw [0]fsr1
 11465  0426  00C5               	movwf	setDrvPiezoOnTime@t^(0+128)
 11466  0427  3F41               	moviw [1]fsr1
 11467  0428  00C6               	movwf	(setDrvPiezoOnTime@t+1)^(0+128)
 11468  0429  319E  2667         	fcall	_setDrvPiezoOnTime
 11469  042B  0021               	movlb	1	; select bank1
 11470  042C  0846               	movf	(?_setDrvPiezoOnTime+1)^(0+128),w
 11471  042D  0022               	movlb	2	; select bank2
 11472  042E  00E7               	movwf	(_errorOut+1)^(0+256)
 11473  042F  0021               	movlb	1	; select bank1
 11474  0430  0845               	movf	?_setDrvPiezoOnTime^(0+128),w
 11475  0431  0022               	movlb	2	; select bank2
 11476  0432  00E6               	movwf	_errorOut^(0+256)
 11477  0433  0008               	return
 11478  0434                     l9315:	
 11479                           ;cmd_parser.c: 93: case CMD_HEATER_PRETIME: errorOut = setHeaterPreTime(s->p1.paramI); b
      +                          reak;
 11480                           
 11481  0434  0021               	movlb	1	; select bank1
 11482  0435  0A57               	incf	execCmd@s^(0+128),w
 11483  0436  0086               	movwf	6
 11484  0437  3001               	movlw	1	; select bank2/3
 11485  0438  0087               	movwf	7
 11486  0439  3F40               	moviw [0]fsr1
 11487  043A  00B5               	movwf	setHeaterPreTime@t^(0+128)
 11488  043B  3F41               	moviw [1]fsr1
 11489  043C  00B6               	movwf	(setHeaterPreTime@t+1)^(0+128)
 11490  043D  31A1  217E         	fcall	_setHeaterPreTime
 11491  043F  0021               	movlb	1	; select bank1
 11492  0440  0836               	movf	(?_setHeaterPreTime+1)^(0+128),w
 11493  0441  0022               	movlb	2	; select bank2
 11494  0442  00E7               	movwf	(_errorOut+1)^(0+256)
 11495  0443  0021               	movlb	1	; select bank1
 11496  0444  0835               	movf	?_setHeaterPreTime^(0+128),w
 11497  0445  0022               	movlb	2	; select bank2
 11498  0446  00E6               	movwf	_errorOut^(0+256)
 11499  0447  0008               	return
 11500  0448                     l9317:	
 11501                           ;cmd_parser.c: 94: case CMD_HEATER_POSTTIME: errorOut = setHeaterPostTime(s->p1.paramI);
      +                           break;
 11502                           
 11503  0448  0021               	movlb	1	; select bank1
 11504  0449  0A57               	incf	execCmd@s^(0+128),w
 11505  044A  0086               	movwf	6
 11506  044B  3001               	movlw	1	; select bank2/3
 11507  044C  0087               	movwf	7
 11508  044D  3F40               	moviw [0]fsr1
 11509  044E  00B5               	movwf	setHeaterPostTime@t^(0+128)
 11510  044F  3F41               	moviw [1]fsr1
 11511  0450  00B6               	movwf	(setHeaterPostTime@t+1)^(0+128)
 11512  0451  31A1  21BF         	fcall	_setHeaterPostTime
 11513  0453  0021               	movlb	1	; select bank1
 11514  0454  0836               	movf	(?_setHeaterPostTime+1)^(0+128),w
 11515  0455  0022               	movlb	2	; select bank2
 11516  0456  00E7               	movwf	(_errorOut+1)^(0+256)
 11517  0457  0021               	movlb	1	; select bank1
 11518  0458  0835               	movf	?_setHeaterPostTime^(0+128),w
 11519  0459  0022               	movlb	2	; select bank2
 11520  045A  00E6               	movwf	_errorOut^(0+256)
 11521  045B  0008               	return
 11522  045C                     l9319:	
 11523                           ;cmd_parser.c: 95: case CMD_HEATER_H1OFF: errorOut = setH1OffTime(s->p1.paramI); break;
 11524                           
 11525  045C  0021               	movlb	1	; select bank1
 11526  045D  0A57               	incf	execCmd@s^(0+128),w
 11527  045E  0086               	movwf	6
 11528  045F  3001               	movlw	1	; select bank2/3
 11529  0460  0087               	movwf	7
 11530  0461  3F40               	moviw [0]fsr1
 11531  0462  00C5               	movwf	setH1OffTime@t^(0+128)
 11532  0463  3F41               	moviw [1]fsr1
 11533  0464  00C6               	movwf	(setH1OffTime@t+1)^(0+128)
 11534  0465  319C  2423         	fcall	_setH1OffTime
 11535  0467  0021               	movlb	1	; select bank1
 11536  0468  0846               	movf	(?_setH1OffTime+1)^(0+128),w
 11537  0469  0022               	movlb	2	; select bank2
 11538  046A  00E7               	movwf	(_errorOut+1)^(0+256)
 11539  046B  0021               	movlb	1	; select bank1
 11540  046C  0845               	movf	?_setH1OffTime^(0+128),w
 11541  046D  0022               	movlb	2	; select bank2
 11542  046E  00E6               	movwf	_errorOut^(0+256)
 11543  046F  0008               	return
 11544  0470                     l9321:	
 11545                           ;cmd_parser.c: 96: case CMD_HEATER_H2ON: errorOut = setH2OnTime(s->p1.paramI); break;
 11546                           
 11547  0470  0021               	movlb	1	; select bank1
 11548  0471  0A57               	incf	execCmd@s^(0+128),w
 11549  0472  0086               	movwf	6
 11550  0473  3001               	movlw	1	; select bank2/3
 11551  0474  0087               	movwf	7
 11552  0475  3F40               	moviw [0]fsr1
 11553  0476  00C5               	movwf	setH2OnTime@t^(0+128)
 11554  0477  3F41               	moviw [1]fsr1
 11555  0478  00C6               	movwf	(setH2OnTime@t+1)^(0+128)
 11556  0479  319C  2471         	fcall	_setH2OnTime
 11557  047B  0021               	movlb	1	; select bank1
 11558  047C  0846               	movf	(?_setH2OnTime+1)^(0+128),w
 11559  047D  0022               	movlb	2	; select bank2
 11560  047E  00E7               	movwf	(_errorOut+1)^(0+256)
 11561  047F  0021               	movlb	1	; select bank1
 11562  0480  0845               	movf	?_setH2OnTime^(0+128),w
 11563  0481  0022               	movlb	2	; select bank2
 11564  0482  00E6               	movwf	_errorOut^(0+256)
 11565  0483  0008               	return
 11566  0484                     l9323:	
 11567                           ;cmd_parser.c: 97: case CMD_HEATER_GAIN: errorOut = setLEDBrightnessRange(s->p1.paramI, 
      +                          s->p2.paramI); break;
 11568                           
 11569  0484  0021               	movlb	1	; select bank1
 11570  0485  0A57               	incf	execCmd@s^(0+128),w
 11571  0486  0086               	movwf	6
 11572  0487  3001               	movlw	1	; select bank2/3
 11573  0488  0087               	movwf	7
 11574  0489  3F40               	moviw [0]fsr1
 11575  048A  00B5               	movwf	setLEDBrightnessRange@r^(0+128)
 11576  048B  3F41               	moviw [1]fsr1
 11577  048C  00B6               	movwf	(setLEDBrightnessRange@r+1)^(0+128)
 11578  048D  0857               	movf	execCmd@s^(0+128),w
 11579  048E  3E0B               	addlw	11
 11580  048F  0086               	movwf	6
 11581  0490  3001               	movlw	1	; select bank2/3
 11582  0491  0087               	movwf	7
 11583  0492  3F40               	moviw [0]fsr1
 11584  0493  00B7               	movwf	setLEDBrightnessRange@tOB^(0+128)
 11585  0494  3F41               	moviw [1]fsr1
 11586  0495  00B8               	movwf	(setLEDBrightnessRange@tOB+1)^(0+128)
 11587  0496  31A3  231E         	fcall	_setLEDBrightnessRange
 11588  0498  0021               	movlb	1	; select bank1
 11589  0499  0836               	movf	(?_setLEDBrightnessRange+1)^(0+128),w
 11590  049A  0022               	movlb	2	; select bank2
 11591  049B  00E7               	movwf	(_errorOut+1)^(0+256)
 11592  049C  0021               	movlb	1	; select bank1
 11593  049D  0835               	movf	?_setLEDBrightnessRange^(0+128),w
 11594  049E  0022               	movlb	2	; select bank2
 11595  049F  00E6               	movwf	_errorOut^(0+256)
 11596  04A0  0008               	return
 11597  04A1                     l9325:	
 11598                           ;cmd_parser.c: 98: case CMD_HEATER_PWR: errorOut = setLEDPwr(s->p1.paramI, s->p2.paramI)
      +                          ; break;
 11599                           
 11600  04A1  0021               	movlb	1	; select bank1
 11601  04A2  0A57               	incf	execCmd@s^(0+128),w
 11602  04A3  0086               	movwf	6
 11603  04A4  3001               	movlw	1	; select bank2/3
 11604  04A5  0087               	movwf	7
 11605  04A6  3F40               	moviw [0]fsr1
 11606  04A7  00B5               	movwf	setLEDPwr@pwr^(0+128)
 11607  04A8  3F41               	moviw [1]fsr1
 11608  04A9  00B6               	movwf	(setLEDPwr@pwr+1)^(0+128)
 11609  04AA  0857               	movf	execCmd@s^(0+128),w
 11610  04AB  3E0B               	addlw	11
 11611  04AC  0086               	movwf	6
 11612  04AD  3001               	movlw	1	; select bank2/3
 11613  04AE  0087               	movwf	7
 11614  04AF  3F40               	moviw [0]fsr1
 11615  04B0  00B7               	movwf	setLEDPwr@topOrBottom^(0+128)
 11616  04B1  3F41               	moviw [1]fsr1
 11617  04B2  00B8               	movwf	(setLEDPwr@topOrBottom+1)^(0+128)
 11618  04B3  31A3  233C         	fcall	_setLEDPwr
 11619  04B5  0021               	movlb	1	; select bank1
 11620  04B6  0836               	movf	(?_setLEDPwr+1)^(0+128),w
 11621  04B7  0022               	movlb	2	; select bank2
 11622  04B8  00E7               	movwf	(_errorOut+1)^(0+256)
 11623  04B9  0021               	movlb	1	; select bank1
 11624  04BA  0835               	movf	?_setLEDPwr^(0+128),w
 11625  04BB  0022               	movlb	2	; select bank2
 11626  04BC  00E6               	movwf	_errorOut^(0+256)
 11627  04BD  0008               	return
 11628  04BE                     l9327:	
 11629                           ;cmd_parser.c: 99: case CMD_HEATER_TOGGLE: errorOut = setHeaterToggle(s->p1.paramI, s->p
      +                          2.paramI); break;
 11630                           
 11631  04BE  0021               	movlb	1	; select bank1
 11632  04BF  0A57               	incf	execCmd@s^(0+128),w
 11633  04C0  0086               	movwf	6
 11634  04C1  3001               	movlw	1	; select bank2/3
 11635  04C2  0087               	movwf	7
 11636  04C3  3F40               	moviw [0]fsr1
 11637  04C4  00B5               	movwf	setHeaterToggle@num^(0+128)
 11638  04C5  3F41               	moviw [1]fsr1
 11639  04C6  00B6               	movwf	(setHeaterToggle@num+1)^(0+128)
 11640  04C7  0857               	movf	execCmd@s^(0+128),w
 11641  04C8  3E0B               	addlw	11
 11642  04C9  0086               	movwf	6
 11643  04CA  3001               	movlw	1	; select bank2/3
 11644  04CB  0087               	movwf	7
 11645  04CC  3F40               	moviw [0]fsr1
 11646  04CD  00B7               	movwf	setHeaterToggle@topOrB^(0+128)
 11647  04CE  3F41               	moviw [1]fsr1
 11648  04CF  00B8               	movwf	(setHeaterToggle@topOrB+1)^(0+128)
 11649  04D0  3196  2675         	fcall	_setHeaterToggle
 11650  04D2  0021               	movlb	1	; select bank1
 11651  04D3  0836               	movf	(?_setHeaterToggle+1)^(0+128),w
 11652  04D4  0022               	movlb	2	; select bank2
 11653  04D5  00E7               	movwf	(_errorOut+1)^(0+256)
 11654  04D6  0021               	movlb	1	; select bank1
 11655  04D7  0835               	movf	?_setHeaterToggle^(0+128),w
 11656  04D8  0022               	movlb	2	; select bank2
 11657  04D9  00E6               	movwf	_errorOut^(0+256)
 11658  04DA  0008               	return
 11659  04DB                     l9329:	
 11660                           ;cmd_parser.c: 100: case CMD_HEATER_TIMED: errorOut = timedActiveHeatOn(s->p1.paramL, s-
      +                          >p2.paramI); break;
 11661                           
 11662  04DB  0021               	movlb	1	; select bank1
 11663  04DC  0A57               	incf	execCmd@s^(0+128),w
 11664  04DD  0086               	movwf	6
 11665  04DE  3001               	movlw	1	; select bank2/3
 11666  04DF  0087               	movwf	7
 11667  04E0  3F40               	moviw [0]fsr1
 11668  04E1  00B5               	movwf	timedActiveHeatOn@onTime^(0+128)
 11669  04E2  3F41               	moviw [1]fsr1
 11670  04E3  00B6               	movwf	(timedActiveHeatOn@onTime+1)^(0+128)
 11671  04E4  3F42               	moviw [2]fsr1
 11672  04E5  00B7               	movwf	(timedActiveHeatOn@onTime+2)^(0+128)
 11673  04E6  3F43               	moviw [3]fsr1
 11674  04E7  00B8               	movwf	(timedActiveHeatOn@onTime+3)^(0+128)
 11675  04E8  0857               	movf	execCmd@s^(0+128),w
 11676  04E9  3E0B               	addlw	11
 11677  04EA  0086               	movwf	6
 11678  04EB  3001               	movlw	1	; select bank2/3
 11679  04EC  0087               	movwf	7
 11680  04ED  3F40               	moviw [0]fsr1
 11681  04EE  00B9               	movwf	timedActiveHeatOn@topOrBorBoth^(0+128)
 11682  04EF  3F41               	moviw [1]fsr1
 11683  04F0  00BA               	movwf	(timedActiveHeatOn@topOrBorBoth+1)^(0+128)
 11684  04F1  3189  216F         	fcall	_timedActiveHeatOn
 11685  04F3  0021               	movlb	1	; select bank1
 11686  04F4  0836               	movf	(?_timedActiveHeatOn+1)^(0+128),w
 11687  04F5  0022               	movlb	2	; select bank2
 11688  04F6  00E7               	movwf	(_errorOut+1)^(0+256)
 11689  04F7  0021               	movlb	1	; select bank1
 11690  04F8  0835               	movf	?_timedActiveHeatOn^(0+128),w
 11691  04F9  0022               	movlb	2	; select bank2
 11692  04FA  00E6               	movwf	_errorOut^(0+256)
 11693  04FB  0008               	return
 11694  04FC                     l9331:	
 11695                           ;cmd_parser.c: 103: case CMD_SETA: errorOut = setActive(s->p1.paramI, s->p2.paramI); bre
      +                          ak;
 11696                           
 11697  04FC  0021               	movlb	1	; select bank1
 11698  04FD  0A57               	incf	execCmd@s^(0+128),w
 11699  04FE  0086               	movwf	6
 11700  04FF  3001               	movlw	1	; select bank2/3
 11701  0500  0087               	movwf	7
 11702  0501  3F40               	moviw [0]fsr1
 11703  0502  00B5               	movwf	setActive@probeNum^(0+128)
 11704  0503  3F41               	moviw [1]fsr1
 11705  0504  00B6               	movwf	(setActive@probeNum+1)^(0+128)
 11706  0505  0857               	movf	execCmd@s^(0+128),w
 11707  0506  3E0B               	addlw	11
 11708  0507  0086               	movwf	6
 11709  0508  3001               	movlw	1	; select bank2/3
 11710  0509  0087               	movwf	7
 11711  050A  3F40               	moviw [0]fsr1
 11712  050B  00B7               	movwf	setActive@onOff^(0+128)
 11713  050C  3F41               	moviw [1]fsr1
 11714  050D  00B8               	movwf	(setActive@onOff+1)^(0+128)
 11715  050E  3193  239E         	fcall	_setActive
 11716  0510  0021               	movlb	1	; select bank1
 11717  0511  0836               	movf	(?_setActive+1)^(0+128),w
 11718  0512  0022               	movlb	2	; select bank2
 11719  0513  00E7               	movwf	(_errorOut+1)^(0+256)
 11720  0514  0021               	movlb	1	; select bank1
 11721  0515  0835               	movf	?_setActive^(0+128),w
 11722  0516  0022               	movlb	2	; select bank2
 11723  0517  00E6               	movwf	_errorOut^(0+256)
 11724  0518  0008               	return
 11725  0519                     l9333:	
 11726                           ;cmd_parser.c: 104: case CMD_SETM: errorOut = setMoveMask(s->p1.paramI, s->p2.paramI); b
      +                          reak;
 11727                           
 11728  0519  0021               	movlb	1	; select bank1
 11729  051A  0A57               	incf	execCmd@s^(0+128),w
 11730  051B  0086               	movwf	6
 11731  051C  3001               	movlw	1	; select bank2/3
 11732  051D  0087               	movwf	7
 11733  051E  3F40               	moviw [0]fsr1
 11734  051F  00B5               	movwf	setMoveMask@probeNum^(0+128)
 11735  0520  3F41               	moviw [1]fsr1
 11736  0521  00B6               	movwf	(setMoveMask@probeNum+1)^(0+128)
 11737  0522  0857               	movf	execCmd@s^(0+128),w
 11738  0523  3E0B               	addlw	11
 11739  0524  0086               	movwf	6
 11740  0525  3001               	movlw	1	; select bank2/3
 11741  0526  0087               	movwf	7
 11742  0527  3F40               	moviw [0]fsr1
 11743  0528  00B7               	movwf	setMoveMask@onOff^(0+128)
 11744  0529  3F41               	moviw [1]fsr1
 11745  052A  00B8               	movwf	(setMoveMask@onOff+1)^(0+128)
 11746  052B  3192  2241         	fcall	_setMoveMask
 11747  052D  0021               	movlb	1	; select bank1
 11748  052E  0836               	movf	(?_setMoveMask+1)^(0+128),w
 11749  052F  0022               	movlb	2	; select bank2
 11750  0530  00E7               	movwf	(_errorOut+1)^(0+256)
 11751  0531  0021               	movlb	1	; select bank1
 11752  0532  0835               	movf	?_setMoveMask^(0+128),w
 11753  0533  0022               	movlb	2	; select bank2
 11754  0534  00E6               	movwf	_errorOut^(0+256)
 11755  0535  0008               	return
 11756  0536                     l9335:	
 11757                           ;cmd_parser.c: 105: case CMD_GET_ACTIVE: errorOut = getActive(); break;
 11758                           
 11759  0536  319B  233B         	fcall	_getActive
 11760  0538  0021               	movlb	1	; select bank1
 11761  0539  0836               	movf	(?_getActive+1)^(0+128),w
 11762  053A  0022               	movlb	2	; select bank2
 11763  053B  00E7               	movwf	(_errorOut+1)^(0+256)
 11764  053C  0021               	movlb	1	; select bank1
 11765  053D  0835               	movf	?_getActive^(0+128),w
 11766  053E  0022               	movlb	2	; select bank2
 11767  053F  00E6               	movwf	_errorOut^(0+256)
 11768  0540  0008               	return
 11769  0541                     l9337:	
 11770                           ;cmd_parser.c: 106: case CMD_GET_MOVABLE: errorOut = getMoveMask(); break;
 11771                           
 11772  0541  319B  2388         	fcall	_getMoveMask
 11773  0543  0021               	movlb	1	; select bank1
 11774  0544  0836               	movf	(?_getMoveMask+1)^(0+128),w
 11775  0545  0022               	movlb	2	; select bank2
 11776  0546  00E7               	movwf	(_errorOut+1)^(0+256)
 11777  0547  0021               	movlb	1	; select bank1
 11778  0548  0835               	movf	?_getMoveMask^(0+128),w
 11779  0549  0022               	movlb	2	; select bank2
 11780  054A  00E6               	movwf	_errorOut^(0+256)
 11781  054B  0008               	return
 11782  054C                     l9339:	
 11783                           ;cmd_parser.c: 107: case CMD_MOTION_STATUS: errorOut = getMotionStatus(); break;
 11784                           
 11785  054C  31A4  243D         	fcall	_getMotionStatus
 11786  054E  0021               	movlb	1	; select bank1
 11787  054F  0836               	movf	(?_getMotionStatus+1)^(0+128),w
 11788  0550  0022               	movlb	2	; select bank2
 11789  0551  00E7               	movwf	(_errorOut+1)^(0+256)
 11790  0552  0021               	movlb	1	; select bank1
 11791  0553  0835               	movf	?_getMotionStatus^(0+128),w
 11792  0554  0022               	movlb	2	; select bank2
 11793  0555  00E6               	movwf	_errorOut^(0+256)
 11794  0556  0008               	return
 11795  0557                     l9341:	
 11796                           ;cmd_parser.c: 108: case CMD_DOMOVE: errorOut = doMove(); break;
 11797                           
 11798  0557  3187  2761         	fcall	_doMove
 11799  0559  0021               	movlb	1	; select bank1
 11800  055A  083D               	movf	(?_doMove+1)^(0+128),w
 11801  055B  0022               	movlb	2	; select bank2
 11802  055C  00E7               	movwf	(_errorOut+1)^(0+256)
 11803  055D  0021               	movlb	1	; select bank1
 11804  055E  083C               	movf	?_doMove^(0+128),w
 11805  055F  0022               	movlb	2	; select bank2
 11806  0560  00E6               	movwf	_errorOut^(0+256)
 11807  0561  0008               	return
 11808  0562                     l9343:	
 11809                           ;cmd_parser.c: 109: case CMD_COMM_CHECK: errorOut = commCheck(); break;
 11810                           
 11811  0562  318A  2224         	fcall	_commCheck
 11812  0564  0021               	movlb	1	; select bank1
 11813  0565  0855               	movf	(?_commCheck+1)^(0+128),w
 11814  0566  0022               	movlb	2	; select bank2
 11815  0567  00E7               	movwf	(_errorOut+1)^(0+256)
 11816  0568  0021               	movlb	1	; select bank1
 11817  0569  0854               	movf	?_commCheck^(0+128),w
 11818  056A  0022               	movlb	2	; select bank2
 11819  056B  00E6               	movwf	_errorOut^(0+256)
 11820  056C  0008               	return
 11821  056D                     l9345:	
 11822                           ;cmd_parser.c: 110: case CMD_PING: printf("!\n"); break;
 11823                           
 11824  056D  30C8               	movlw	low ((STR_84+20)| (0+32768))
 11825  056E  0021               	movlb	1	; select bank1
 11826  056F  00A0               	movwf	printf@f^(0+128)
 11827  0570  30A8               	movlw	high ((STR_84+20)| (0+32768))
 11828  0571  00A1               	movwf	(printf@f^(0+128)+1)
 11829  0572  318E  26CE         	fcall	_printf
 11830  0574  0008               	return
 11831  0575                     l9347:	
 11832                           ;cmd_parser.c: 111: default: printf("UNRECOGNIZED COMMAND!\n");
 11833                           
 11834  0575  30B4               	movlw	low (STR_84| (0+32768))
 11835  0576  0021               	movlb	1	; select bank1
 11836  0577  00A0               	movwf	printf@f^(0+128)
 11837  0578  30A8               	movlw	high (STR_84| (0+32768))
 11838  0579  00A1               	movwf	(printf@f^(0+128)+1)
 11839  057A  318E  26CE         	fcall	_printf
 11840                           
 11841                           ;cmd_parser.c: 118: }
 11842  057C  0008               	return
 11843  057D                     l9349:	
 11844  057D  0021               	movlb	1	; select bank1
 11845  057E  0857               	movf	execCmd@s^(0+128),w
 11846  057F  0086               	movwf	6
 11847  0580  3001               	movlw	1	; select bank2/3
 11848  0581  0087               	movwf	7
 11849  0582  0801               	movf	1,w
 11850                           
 11851                           ; Switch size 1, requested type "space"
 11852                           ; Number of cases is 24, Range of values is 1 to 25
 11853                           ; switch strategies available:
 11854                           ; Name         Instructions Cycles
 11855                           ; direct_byte           59     9 (fixed)
 11856                           ; simple_byte           73    37 (average)
 11857                           ; jumptable            263     9 (fixed)
 11858                           ;	Chosen strategy is direct_byte
 11859  0583  3EFF               	addlw	-1
 11860  0584  1C03               	skipc
 11861  0585  2D75               	goto	l9347
 11862  0586  0084               	movwf	4
 11863  0587  3019               	movlw	25
 11864  0588  0204               	subwf	4,w
 11865  0589  1803               	skipnc
 11866  058A  2D75               	goto	l9347
 11867  058B  31A0               	movlp	high S9679
 11868  058C  3504               	lslf	4,w
 11869  058D  3E00               	addlw	low S9679
 11870  058E  0082               	movwf	2
 11871                           
 11872                           ;cmd_parser.c: 120: return errorOut;
 11873                           ;	Return value of _execCmd is never used
 11874  058F  0008               	return
 11875  0590                     __end_of_execCmd:	
 11876                           
 11877                           	psect	swtext1
 11878  2000                     __pswtext1:	
 11879  2000                     S9679:	
 11880  2000  3183  2BBA         	ljmp	l9301
 11881  2002  3183  2BA6         	ljmp	l9299
 11882  2004  3183  2BCE         	ljmp	l9303
 11883  2006  3183  2BE2         	ljmp	l9305
 11884  2008  3185  2D75         	ljmp	l9347
 11885  200A  3184  2CFC         	ljmp	l9331
 11886  200C  3185  2D19         	ljmp	l9333
 11887  200E  3183  2BED         	ljmp	l9307
 11888  2010  3183  2BF8         	ljmp	l9309
 11889  2012  3184  2C0C         	ljmp	l9311
 11890  2014  3184  2C20         	ljmp	l9313
 11891  2016  3184  2C34         	ljmp	l9315
 11892  2018  3184  2C48         	ljmp	l9317
 11893  201A  3184  2C5C         	ljmp	l9319
 11894  201C  3184  2C70         	ljmp	l9321
 11895  201E  3184  2C84         	ljmp	l9323
 11896  2020  3184  2CA1         	ljmp	l9325
 11897  2022  3184  2CBE         	ljmp	l9327
 11898  2024  3184  2CDB         	ljmp	l9329
 11899  2026  3185  2D36         	ljmp	l9335
 11900  2028  3185  2D41         	ljmp	l9337
 11901  202A  3185  2D4C         	ljmp	l9339
 11902  202C  3185  2D57         	ljmp	l9341
 11903  202E  3185  2D62         	ljmp	l9343
 11904  2030  3185  2D6D         	ljmp	l9345
 11905                           
 11906                           	psect	text19
 11907  12B4                     __ptext19:	
 11908 ;; *************** function _zeroPosition *****************
 11909 ;; Defined at:
 11910 ;;		line 388 in file "main.c"
 11911 ;; Parameters:    Size  Location     Type
 11912 ;;		None
 11913 ;; Auto vars:     Size  Location     Type
 11914 ;;  i               2   41[BANK0 ] int 
 11915 ;; Return value:  Size  Location     Type
 11916 ;;                  2   21[BANK1 ] int 
 11917 ;; Registers used:
 11918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11919 ;; Tracked objects:
 11920 ;;		On entry : 0/0
 11921 ;;		On exit  : 0/0
 11922 ;;		Unchanged: 0/0
 11923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11924 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11925 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11926 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11927 ;;      Totals:         0       2      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11928 ;;Total ram usage:       12 bytes
 11929 ;; Hardware stack levels used:    1
 11930 ;; Hardware stack levels required when called:    9
 11931 ;; This function calls:
 11932 ;;		_printf
 11933 ;; This function is called by:
 11934 ;;		_execCmd
 11935 ;; This function uses a non-reentrant model
 11936 ;;
 11937                           
 11938                           
 11939                           ;psect for function _zeroPosition
 11940  12B4                     _zeroPosition:	
 11941                           
 11942                           ;main.c: 389: for(int i = 0; i<24; i++){
 11943                           
 11944                           ;incstack = 0
 11945                           ; Regs used in _zeroPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11946  12B4  0020               	movlb	0	; select bank0
 11947  12B5  01C9               	clrf	zeroPosition@i
 11948  12B6  01CA               	clrf	zeroPosition@i+1
 11949  12B7  084A               	movf	zeroPosition@i+1,w
 11950  12B8  3A80               	xorlw	128
 11951  12B9  0021               	movlb	1	; select bank1
 11952  12BA  00B7               	movwf	??_zeroPosition^(0+128)
 11953  12BB  3080               	movlw	128
 11954  12BC  0237               	subwf	??_zeroPosition^(0+128),w
 11955  12BD  1D03               	skipz
 11956  12BE  2AC2               	goto	u8755
 11957  12BF  3018               	movlw	24
 11958  12C0  0020               	movlb	0	; select bank0
 11959  12C1  0249               	subwf	zeroPosition@i,w
 11960  12C2                     u8755:	
 11961  12C2  1803               	btfsc	3,0
 11962  12C3  2B1E               	goto	l8721
 11963  12C4                     l8713:	
 11964                           
 11965                           ;main.c: 390: if((activeMask & (1UL << i)) > 0)
 11966  12C4  0021               	movlb	1	; select bank1
 11967  12C5  085C               	movf	_activeMask^(0+128),w
 11968  12C6  00B7               	movwf	??_zeroPosition^(0+128)
 11969  12C7  085D               	movf	(_activeMask+1)^(0+128),w
 11970  12C8  00B8               	movwf	(??_zeroPosition^(0+128)+1)
 11971  12C9  085E               	movf	(_activeMask+2)^(0+128),w
 11972  12CA  00B9               	movwf	(??_zeroPosition^(0+128)+2)
 11973  12CB  085F               	movf	(_activeMask+3)^(0+128),w
 11974  12CC  00BA               	movwf	(??_zeroPosition^(0+128)+3)
 11975  12CD  3001               	movlw	1
 11976  12CE  00BB               	movwf	(??_zeroPosition+4)^(0+128)
 11977  12CF  3000               	movlw	0
 11978  12D0  00BC               	movwf	((??_zeroPosition+4)^(0+128)+1)
 11979  12D1  3000               	movlw	0
 11980  12D2  00BD               	movwf	((??_zeroPosition+4)^(0+128)+2)
 11981  12D3  3000               	movlw	0
 11982  12D4  00BE               	movwf	((??_zeroPosition+4)^(0+128)+3)
 11983  12D5  0020               	movlb	0	; select bank0
 11984  12D6  0A49               	incf	zeroPosition@i,w
 11985  12D7  0021               	movlb	1	; select bank1
 11986  12D8  2ADD               	goto	u8760
 11987  12D9                     u8765:	
 11988  12D9  35BB               	lslf	(??_zeroPosition+4)^(0+128),f
 11989  12DA  0DBC               	rlf	((??_zeroPosition+4)^(0+128)+1),f
 11990  12DB  0DBD               	rlf	((??_zeroPosition+4)^(0+128)+2),f
 11991  12DC  0DBE               	rlf	((??_zeroPosition+4)^(0+128)+3),f
 11992  12DD                     u8760:	
 11993  12DD  0B89               	decfsz	9,f
 11994  12DE  2AD9               	goto	u8765
 11995  12DF  083B               	movf	(??_zeroPosition+4)^(0+128),w
 11996  12E0  05B7               	andwf	??_zeroPosition^(0+128),f
 11997  12E1  083C               	movf	(??_zeroPosition+5)^(0+128),w
 11998  12E2  05B8               	andwf	(??_zeroPosition^(0+128)+1),f
 11999  12E3  083D               	movf	(??_zeroPosition+6)^(0+128),w
 12000  12E4  05B9               	andwf	(??_zeroPosition^(0+128)+2),f
 12001  12E5  083E               	movf	(??_zeroPosition+7)^(0+128),w
 12002  12E6  05BA               	andwf	(??_zeroPosition^(0+128)+3),f
 12003  12E7  083A               	movf	(??_zeroPosition+3)^(0+128),w
 12004  12E8  0439               	iorwf	(??_zeroPosition+2)^(0+128),w
 12005  12E9  0438               	iorwf	(??_zeroPosition+1)^(0+128),w
 12006  12EA  0437               	iorwf	??_zeroPosition^(0+128),w
 12007  12EB  1903               	skipnz
 12008  12EC  2B0C               	goto	l8717
 12009                           
 12010                           ;main.c: 391: currentPositions_steps[i]=0;
 12011  12ED  0020               	movlb	0	; select bank0
 12012  12EE  084A               	movf	zeroPosition@i+1,w
 12013  12EF  0021               	movlb	1	; select bank1
 12014  12F0  00B8               	movwf	(??_zeroPosition^(0+128)+1)
 12015  12F1  0020               	movlb	0	; select bank0
 12016  12F2  0849               	movf	zeroPosition@i,w
 12017  12F3  0021               	movlb	1	; select bank1
 12018  12F4  00B7               	movwf	??_zeroPosition^(0+128)
 12019  12F5  35B7               	lslf	??_zeroPosition^(0+128),f
 12020  12F6  0DB8               	rlf	(??_zeroPosition^(0+128)+1),f
 12021  12F7  35B7               	lslf	??_zeroPosition^(0+128),f
 12022  12F8  0DB8               	rlf	(??_zeroPosition^(0+128)+1),f
 12023  12F9  3090               	movlw	144
 12024  12FA  00B9               	movwf	(??_zeroPosition+2)^(0+128)
 12025  12FB  3027               	movlw	39
 12026  12FC  00BA               	movwf	((??_zeroPosition+2)^(0+128)+1)
 12027  12FD  0837               	movf	??_zeroPosition^(0+128),w
 12028  12FE  0739               	addwf	(??_zeroPosition+2)^(0+128),w
 12029  12FF  00BB               	movwf	(??_zeroPosition+4)^(0+128)
 12030  1300  0838               	movf	(??_zeroPosition+1)^(0+128),w
 12031  1301  3D3A               	addwfc	(??_zeroPosition+3)^(0+128),w
 12032  1302  00BC               	movwf	(??_zeroPosition+5)^(0+128)
 12033  1303  083B               	movf	(??_zeroPosition+4)^(0+128),w
 12034  1304  0086               	movwf	6
 12035  1305  083C               	movf	(??_zeroPosition+5)^(0+128),w
 12036  1306  0087               	movwf	7
 12037  1307  3000               	movlw	0
 12038  1308  3FC0               	movwi [0]fsr1
 12039  1309  3FC1               	movwi [1]fsr1
 12040  130A  3FC2               	movwi [2]fsr1
 12041  130B  3FC3               	movwi [3]fsr1
 12042  130C                     l8717:	
 12043  130C  3001               	movlw	1
 12044  130D  0020               	movlb	0	; select bank0
 12045  130E  07C9               	addwf	zeroPosition@i,f
 12046  130F  3000               	movlw	0
 12047  1310  3DCA               	addwfc	zeroPosition@i+1,f
 12048  1311  084A               	movf	zeroPosition@i+1,w
 12049  1312  3A80               	xorlw	128
 12050  1313  0021               	movlb	1	; select bank1
 12051  1314  00B7               	movwf	??_zeroPosition^(0+128)
 12052  1315  3080               	movlw	128
 12053  1316  0237               	subwf	??_zeroPosition^(0+128),w
 12054  1317  1D03               	skipz
 12055  1318  2B1C               	goto	u8785
 12056  1319  3018               	movlw	24
 12057  131A  0020               	movlb	0	; select bank0
 12058  131B  0249               	subwf	zeroPosition@i,w
 12059  131C                     u8785:	
 12060  131C  1C03               	skipc
 12061  131D  2AC4               	goto	l8713
 12062  131E                     l8721:	
 12063                           
 12064                           ;main.c: 392: }
 12065                           ;main.c: 393: printf("A\n");
 12066  131E  3046               	movlw	low (STR_8| (0+32768))
 12067  131F  0021               	movlb	1	; select bank1
 12068  1320  00A0               	movwf	printf@f^(0+128)
 12069  1321  30B0               	movlw	high (STR_8| (0+32768))
 12070  1322  00A1               	movwf	(printf@f^(0+128)+1)
 12071  1323  318E  26CE         	fcall	_printf
 12072                           
 12073                           ;main.c: 394: return 0;
 12074  1325  0021               	movlb	1	; select bank1
 12075  1326  01B5               	clrf	?_zeroPosition^(0+128)
 12076  1327  01B6               	clrf	(?_zeroPosition+1)^(0+128)
 12077  1328  0008               	return
 12078  1329                     __end_of_zeroPosition:	
 12079                           
 12080                           	psect	text20
 12081  096F                     __ptext20:	
 12082 ;; *************** function _timedActiveHeatOn *****************
 12083 ;; Defined at:
 12084 ;;		line 508 in file "main.c"
 12085 ;; Parameters:    Size  Location     Type
 12086 ;;  onTime          4   21[BANK1 ] long 
 12087 ;;  topOrBorBoth    2   25[BANK1 ] int 
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;  t               2   32[BANK1 ] int 
 12090 ;; Return value:  Size  Location     Type
 12091 ;;                  2   21[BANK1 ] int 
 12092 ;; Registers used:
 12093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12094 ;; Tracked objects:
 12095 ;;		On entry : 0/0
 12096 ;;		On exit  : 0/0
 12097 ;;		Unchanged: 0/0
 12098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12099 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12100 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12101 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12102 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12103 ;;Total ram usage:       13 bytes
 12104 ;; Hardware stack levels used:    1
 12105 ;; Hardware stack levels required when called:    9
 12106 ;; This function calls:
 12107 ;;		_LEDsOn
 12108 ;;		_printf
 12109 ;; This function is called by:
 12110 ;;		_execCmd
 12111 ;; This function uses a non-reentrant model
 12112 ;;
 12113                           
 12114                           
 12115                           ;psect for function _timedActiveHeatOn
 12116  096F                     _timedActiveHeatOn:	
 12117                           
 12118                           ;main.c: 509: _delay((unsigned long)((2000)*(1000000/4000.0)));
 12119                           
 12120                           ;incstack = 0
 12121                           ; Regs used in _timedActiveHeatOn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12122  096F  3003               	movlw	3
 12123  0970  0021               	movlb	1	; select bank1
 12124  0971  00BC               	movwf	(??_timedActiveHeatOn^(0+128)+1)
 12125  0972  308A               	movlw	138
 12126  0973  00BB               	movwf	??_timedActiveHeatOn^(0+128)
 12127  0974  3055               	movlw	85
 12128  0975                     u10197:	
 12129  0975  0B89               	decfsz	9,f
 12130  0976  2975               	goto	u10197
 12131  0977  0BBB               	decfsz	??_timedActiveHeatOn^(0+128),f
 12132  0978  2975               	goto	u10197
 12133  0979  0BBC               	decfsz	(??_timedActiveHeatOn^(0+128)+1),f
 12134  097A  2975               	goto	u10197
 12135  097B  3200               	nop2
 12136                           
 12137                           ;main.c: 510: do { LATCbits.LATC1 = 0; } while(0);
 12138  097C  0022               	movlb	2	; select bank2
 12139  097D  108E               	bcf	14,1	;volatile
 12140                           
 12141                           ;main.c: 511: if(topOrBorBoth == 1){
 12142  097E  0021               	movlb	1	; select bank1
 12143  097F  0339               	decf	timedActiveHeatOn@topOrBorBoth^(0+128),w
 12144  0980  043A               	iorwf	(timedActiveHeatOn@topOrBorBoth+1)^(0+128),w
 12145  0981  1D03               	btfss	3,2
 12146  0982  2994               	goto	l8867
 12147                           
 12148                           ;main.c: 512: LEDsOn(activeMask, 1);
 12149  0983  085F               	movf	(_activeMask+3)^(0+128),w
 12150  0984  0020               	movlb	0	; select bank0
 12151  0985  00C7               	movwf	LEDsOn@LEDpins+3
 12152  0986  0021               	movlb	1	; select bank1
 12153  0987  085E               	movf	(_activeMask+2)^(0+128),w
 12154  0988  0020               	movlb	0	; select bank0
 12155  0989  00C6               	movwf	LEDsOn@LEDpins+2
 12156  098A  0021               	movlb	1	; select bank1
 12157  098B  085D               	movf	(_activeMask+1)^(0+128),w
 12158  098C  0020               	movlb	0	; select bank0
 12159  098D  00C5               	movwf	LEDsOn@LEDpins+1
 12160  098E  0021               	movlb	1	; select bank1
 12161  098F  085C               	movf	_activeMask^(0+128),w
 12162  0990  0020               	movlb	0	; select bank0
 12163  0991  00C4               	movwf	LEDsOn@LEDpins
 12164  0992  3001               	movlw	1
 12165  0993  29C7               	goto	L24
 12166  0994                     l8867:	
 12167                           ;main.c: 513: }
 12168                           
 12169                           
 12170                           ;main.c: 514: else if (topOrBorBoth == 2){
 12171  0994  3002               	movlw	2
 12172  0995  0021               	movlb	1	; select bank1
 12173  0996  0639               	xorwf	timedActiveHeatOn@topOrBorBoth^(0+128),w
 12174  0997  043A               	iorwf	(timedActiveHeatOn@topOrBorBoth+1)^(0+128),w
 12175  0998  1903               	btfsc	3,2
 12176  0999  29B7               	goto	L25
 12177                           
 12178                           ;main.c: 517: else if (topOrBorBoth == 3){
 12179                           
 12180                           ;main.c: 516: }
 12181                           
 12182                           ;main.c: 515: LEDsOn(activeMask, 2);
 12183  099A  3003               	movlw	3
 12184  099B  0021               	movlb	1	; select bank1
 12185  099C  0639               	xorwf	timedActiveHeatOn@topOrBorBoth^(0+128),w
 12186  099D  043A               	iorwf	(timedActiveHeatOn@topOrBorBoth+1)^(0+128),w
 12187  099E  1D03               	btfss	3,2
 12188  099F  29CD               	goto	l8875
 12189                           
 12190                           ;main.c: 518: LEDsOn(activeMask, 1);
 12191  09A0  085F               	movf	(_activeMask+3)^(0+128),w
 12192  09A1  0020               	movlb	0	; select bank0
 12193  09A2  00C7               	movwf	LEDsOn@LEDpins+3
 12194  09A3  0021               	movlb	1	; select bank1
 12195  09A4  085E               	movf	(_activeMask+2)^(0+128),w
 12196  09A5  0020               	movlb	0	; select bank0
 12197  09A6  00C6               	movwf	LEDsOn@LEDpins+2
 12198  09A7  0021               	movlb	1	; select bank1
 12199  09A8  085D               	movf	(_activeMask+1)^(0+128),w
 12200  09A9  0020               	movlb	0	; select bank0
 12201  09AA  00C5               	movwf	LEDsOn@LEDpins+1
 12202  09AB  0021               	movlb	1	; select bank1
 12203  09AC  085C               	movf	_activeMask^(0+128),w
 12204  09AD  0020               	movlb	0	; select bank0
 12205  09AE  00C4               	movwf	LEDsOn@LEDpins
 12206  09AF  3001               	movlw	1
 12207  09B0  00C8               	movwf	LEDsOn@topOrBottom
 12208  09B1  3000               	movlw	0
 12209  09B2  00C9               	movwf	LEDsOn@topOrBottom+1
 12210  09B3  31A3  23FA  3189   	fcall	_LEDsOn
 12211                           
 12212                           ;main.c: 519: LEDsOn(activeMask, 2);
 12213  09B6  0021               	movlb	1	; select bank1
 12214  09B7                     L25:	
 12215  09B7  085F               	movf	(_activeMask+3)^(0+128),w
 12216  09B8  0020               	movlb	0	; select bank0
 12217  09B9  00C7               	movwf	LEDsOn@LEDpins+3
 12218  09BA  0021               	movlb	1	; select bank1
 12219  09BB  085E               	movf	(_activeMask+2)^(0+128),w
 12220  09BC  0020               	movlb	0	; select bank0
 12221  09BD  00C6               	movwf	LEDsOn@LEDpins+2
 12222  09BE  0021               	movlb	1	; select bank1
 12223  09BF  085D               	movf	(_activeMask+1)^(0+128),w
 12224  09C0  0020               	movlb	0	; select bank0
 12225  09C1  00C5               	movwf	LEDsOn@LEDpins+1
 12226  09C2  0021               	movlb	1	; select bank1
 12227  09C3  085C               	movf	_activeMask^(0+128),w
 12228  09C4  0020               	movlb	0	; select bank0
 12229  09C5  00C4               	movwf	LEDsOn@LEDpins
 12230  09C6  3002               	movlw	2
 12231  09C7                     L24:	
 12232  09C7  00C8               	movwf	LEDsOn@topOrBottom
 12233  09C8  3000               	movlw	0
 12234  09C9  00C9               	movwf	LEDsOn@topOrBottom+1
 12235  09CA  31A3  23FA  3189   	fcall	_LEDsOn
 12236  09CD                     l8875:	
 12237                           
 12238                           ;main.c: 520: }
 12239                           ;main.c: 522: for(int t=0; t<onTime; t++) _delay((unsigned long)((1)*(1000000/4000.0)));
 12240  09CD  0021               	movlb	1	; select bank1
 12241  09CE  01C0               	clrf	timedActiveHeatOn@t^(0+128)
 12242  09CF  01C1               	clrf	(timedActiveHeatOn@t+1)^(0+128)
 12243  09D0                     l1249:	
 12244  09D0  0840               	movf	timedActiveHeatOn@t^(0+128),w
 12245  09D1  00BB               	movwf	??_timedActiveHeatOn^(0+128)
 12246  09D2  0841               	movf	(timedActiveHeatOn@t+1)^(0+128),w
 12247  09D3  00BC               	movwf	(??_timedActiveHeatOn^(0+128)+1)
 12248  09D4  3000               	movlw	0
 12249  09D5  1BBC               	btfsc	(??_timedActiveHeatOn^(0+128)+1),7
 12250  09D6  30FF               	movlw	255
 12251  09D7  00BD               	movwf	(??_timedActiveHeatOn^(0+128)+2)
 12252  09D8  00BE               	movwf	(??_timedActiveHeatOn^(0+128)+3)
 12253  09D9  083E               	movf	(??_timedActiveHeatOn+3)^(0+128),w
 12254  09DA  3A80               	xorlw	128
 12255  09DB  00BF               	movwf	(??_timedActiveHeatOn+4)^(0+128)
 12256  09DC  0838               	movf	(timedActiveHeatOn@onTime+3)^(0+128),w
 12257  09DD  3A80               	xorlw	128
 12258  09DE  023F               	subwf	(??_timedActiveHeatOn+4)^(0+128),w
 12259  09DF  1D03               	skipz
 12260  09E0  29EB               	goto	u8883
 12261  09E1  0837               	movf	(timedActiveHeatOn@onTime+2)^(0+128),w
 12262  09E2  023D               	subwf	(??_timedActiveHeatOn+2)^(0+128),w
 12263  09E3  1D03               	skipz
 12264  09E4  29EB               	goto	u8883
 12265  09E5  0836               	movf	(timedActiveHeatOn@onTime+1)^(0+128),w
 12266  09E6  023C               	subwf	(??_timedActiveHeatOn+1)^(0+128),w
 12267  09E7  1D03               	skipz
 12268  09E8  29EB               	goto	u8883
 12269  09E9  0835               	movf	timedActiveHeatOn@onTime^(0+128),w
 12270  09EA  023B               	subwf	??_timedActiveHeatOn^(0+128),w
 12271  09EB                     u8883:	
 12272  09EB  1803               	btfsc	3,0
 12273  09EC  29F7               	goto	l1252
 12274  09ED  3053               	movlw	83
 12275  09EE                     u10207:	
 12276  09EE  0B89               	decfsz	9,f
 12277  09EF  29EE               	goto	u10207
 12278  09F0  0000               	nop
 12279  09F1  3001               	movlw	1
 12280  09F2  0021               	movlb	1	; select bank1
 12281  09F3  07C0               	addwf	timedActiveHeatOn@t^(0+128),f
 12282  09F4  3000               	movlw	0
 12283  09F5  3DC1               	addwfc	(timedActiveHeatOn@t+1)^(0+128),f
 12284  09F6  29D0               	goto	l1249
 12285  09F7                     l1252:	
 12286                           ;main.c: 523: do { LATCbits.LATC1 = 1; } while(0);
 12287                           
 12288  09F7  0022               	movlb	2	; select bank2
 12289  09F8  148E               	bsf	14,1	;volatile
 12290                           
 12291                           ;main.c: 524: LEDsOn(0, 1);
 12292  09F9  3000               	movlw	0
 12293  09FA  0020               	movlb	0	; select bank0
 12294  09FB  00C7               	movwf	LEDsOn@LEDpins+3
 12295  09FC  3000               	movlw	0
 12296  09FD  00C6               	movwf	LEDsOn@LEDpins+2
 12297  09FE  3000               	movlw	0
 12298  09FF  00C5               	movwf	LEDsOn@LEDpins+1
 12299  0A00  3000               	movlw	0
 12300  0A01  00C4               	movwf	LEDsOn@LEDpins
 12301  0A02  3001               	movlw	1
 12302  0A03  00C8               	movwf	LEDsOn@topOrBottom
 12303  0A04  3000               	movlw	0
 12304  0A05  00C9               	movwf	LEDsOn@topOrBottom+1
 12305  0A06  31A3  23FA  3189   	fcall	_LEDsOn
 12306                           
 12307                           ;main.c: 525: LEDsOn(0, 2);
 12308  0A09  3000               	movlw	0
 12309  0A0A  0020               	movlb	0	; select bank0
 12310  0A0B  00C7               	movwf	LEDsOn@LEDpins+3
 12311  0A0C  3000               	movlw	0
 12312  0A0D  00C6               	movwf	LEDsOn@LEDpins+2
 12313  0A0E  3000               	movlw	0
 12314  0A0F  00C5               	movwf	LEDsOn@LEDpins+1
 12315  0A10  3000               	movlw	0
 12316  0A11  00C4               	movwf	LEDsOn@LEDpins
 12317  0A12  3002               	movlw	2
 12318  0A13  00C8               	movwf	LEDsOn@topOrBottom
 12319  0A14  3000               	movlw	0
 12320  0A15  00C9               	movwf	LEDsOn@topOrBottom+1
 12321  0A16  31A3  23FA  3189   	fcall	_LEDsOn
 12322                           
 12323                           ;main.c: 526: printf("A\n");
 12324  0A19  3046               	movlw	low (STR_8| (0+32768))
 12325  0A1A  0021               	movlb	1	; select bank1
 12326  0A1B  00A0               	movwf	printf@f^(0+128)
 12327  0A1C  30B0               	movlw	high (STR_8| (0+32768))
 12328  0A1D  00A1               	movwf	(printf@f^(0+128)+1)
 12329  0A1E  318E  26CE         	fcall	_printf
 12330                           
 12331                           ;main.c: 527: return 0;
 12332  0A20  0021               	movlb	1	; select bank1
 12333  0A21  01B5               	clrf	?_timedActiveHeatOn^(0+128)
 12334  0A22  01B6               	clrf	(?_timedActiveHeatOn+1)^(0+128)
 12335  0A23  0008               	return
 12336  0A24                     __end_of_timedActiveHeatOn:	
 12337                           
 12338                           	psect	text21
 12339  2517                     __ptext21:	
 12340 ;; *************** function _stop *****************
 12341 ;; Defined at:
 12342 ;;		line 311 in file "main.c"
 12343 ;; Parameters:    Size  Location     Type
 12344 ;;		None
 12345 ;; Auto vars:     Size  Location     Type
 12346 ;;		None
 12347 ;; Return value:  Size  Location     Type
 12348 ;;                  2   21[BANK1 ] int 
 12349 ;; Registers used:
 12350 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12351 ;; Tracked objects:
 12352 ;;		On entry : 0/0
 12353 ;;		On exit  : 0/0
 12354 ;;		Unchanged: 0/0
 12355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12356 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12359 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12360 ;;Total ram usage:        2 bytes
 12361 ;; Hardware stack levels used:    1
 12362 ;; Hardware stack levels required when called:    9
 12363 ;; This function calls:
 12364 ;;		_printf
 12365 ;; This function is called by:
 12366 ;;		_execCmd
 12367 ;; This function uses a non-reentrant model
 12368 ;;
 12369                           
 12370                           
 12371                           ;psect for function _stop
 12372  2517                     _stop:	
 12373                           
 12374                           ;main.c: 312: motionType = NONE;
 12375                           
 12376                           ;incstack = 0
 12377                           ; Regs used in _stop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12378  2517  0020               	movlb	0	; select bank0
 12379  2518  01D5               	clrf	_motionType
 12380                           
 12381                           ;main.c: 313: moveVector_ups = 0;
 12382  2519  3000               	movlw	0
 12383  251A  0021               	movlb	1	; select bank1
 12384  251B  00E7               	movwf	(_moveVector_ups+3)^(0+128)
 12385  251C  3000               	movlw	0
 12386  251D  00E6               	movwf	(_moveVector_ups+2)^(0+128)
 12387  251E  3000               	movlw	0
 12388  251F  00E5               	movwf	(_moveVector_ups+1)^(0+128)
 12389  2520  3000               	movlw	0
 12390  2521  00E4               	movwf	_moveVector_ups^(0+128)
 12391                           
 12392                           ;main.c: 314: moveVector_downs = 0;
 12393  2522  3000               	movlw	0
 12394  2523  00E3               	movwf	(_moveVector_downs+3)^(0+128)
 12395  2524  3000               	movlw	0
 12396  2525  00E2               	movwf	(_moveVector_downs+2)^(0+128)
 12397  2526  3000               	movlw	0
 12398  2527  00E1               	movwf	(_moveVector_downs+1)^(0+128)
 12399  2528  3000               	movlw	0
 12400  2529  00E0               	movwf	_moveVector_downs^(0+128)
 12401                           
 12402                           ;main.c: 315: remainingSteps = 0;
 12403  252A  3000               	movlw	0
 12404  252B  0022               	movlb	2	; select bank2
 12405  252C  00C1               	movwf	(_remainingSteps+3)^(0+256)
 12406  252D  3000               	movlw	0
 12407  252E  00C0               	movwf	(_remainingSteps+2)^(0+256)
 12408  252F  3000               	movlw	0
 12409  2530  00BF               	movwf	(_remainingSteps+1)^(0+256)
 12410  2531  3000               	movlw	0
 12411  2532  00BE               	movwf	_remainingSteps^(0+256)
 12412                           
 12413                           ;main.c: 316: printf("A\n");
 12414  2533  3046               	movlw	low (STR_8| (0+32768))
 12415  2534  0021               	movlb	1	; select bank1
 12416  2535  00A0               	movwf	printf@f^(0+128)
 12417  2536  30B0               	movlw	high (STR_8| (0+32768))
 12418  2537  00A1               	movwf	(printf@f^(0+128)+1)
 12419  2538  318E  26CE         	fcall	_printf
 12420                           
 12421                           ;main.c: 317: return 0;
 12422  253A  0021               	movlb	1	; select bank1
 12423  253B  01B5               	clrf	?_stop^(0+128)
 12424  253C  01B6               	clrf	(?_stop+1)^(0+128)
 12425  253D  0008               	return
 12426  253E                     __end_of_stop:	
 12427                           
 12428                           	psect	text22
 12429  2290                     __ptext22:	
 12430 ;; *************** function _startRelMove *****************
 12431 ;; Defined at:
 12432 ;;		line 297 in file "main.c"
 12433 ;; Parameters:    Size  Location     Type
 12434 ;;  steps           2   21[BANK1 ] int 
 12435 ;; Auto vars:     Size  Location     Type
 12436 ;;		None
 12437 ;; Return value:  Size  Location     Type
 12438 ;;                  2   21[BANK1 ] int 
 12439 ;; Registers used:
 12440 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12441 ;; Tracked objects:
 12442 ;;		On entry : 0/0
 12443 ;;		On exit  : 0/0
 12444 ;;		Unchanged: 0/0
 12445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12446 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12449 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12450 ;;Total ram usage:        2 bytes
 12451 ;; Hardware stack levels used:    1
 12452 ;; Hardware stack levels required when called:    9
 12453 ;; This function calls:
 12454 ;;		_printf
 12455 ;; This function is called by:
 12456 ;;		_execCmd
 12457 ;; This function uses a non-reentrant model
 12458 ;;
 12459                           
 12460                           
 12461                           ;psect for function _startRelMove
 12462  2290                     _startRelMove:	
 12463                           
 12464                           ;main.c: 298: motionType = REL_MOVE;
 12465                           
 12466                           ;incstack = 0
 12467                           ; Regs used in _startRelMove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12468  2290  0020               	movlb	0	; select bank0
 12469  2291  01D5               	clrf	_motionType
 12470  2292  0AD5               	incf	_motionType,f
 12471                           
 12472                           ;main.c: 299: remainingSteps = steps;
 12473  2293  0021               	movlb	1	; select bank1
 12474  2294  0835               	movf	startRelMove@steps^(0+128),w
 12475  2295  0022               	movlb	2	; select bank2
 12476  2296  00BE               	movwf	_remainingSteps^(0+256)
 12477  2297  0021               	movlb	1	; select bank1
 12478  2298  0836               	movf	(startRelMove@steps+1)^(0+128),w
 12479  2299  0022               	movlb	2	; select bank2
 12480  229A  00BF               	movwf	(_remainingSteps+1)^(0+256)
 12481  229B  0D89               	rlf	9,f
 12482  229C  3B89               	subwfb	9,f
 12483  229D  0989               	comf	9,f
 12484  229E  00C0               	movwf	(_remainingSteps+2)^(0+256)
 12485  229F  00C1               	movwf	(_remainingSteps+3)^(0+256)
 12486                           
 12487                           ;main.c: 300: printf("A\n");
 12488  22A0  3046               	movlw	low (STR_8| (0+32768))
 12489  22A1  0021               	movlb	1	; select bank1
 12490  22A2  00A0               	movwf	printf@f^(0+128)
 12491  22A3  30B0               	movlw	high (STR_8| (0+32768))
 12492  22A4  00A1               	movwf	(printf@f^(0+128)+1)
 12493  22A5  318E  26CE         	fcall	_printf
 12494                           
 12495                           ;main.c: 301: return 0;
 12496  22A7  0021               	movlb	1	; select bank1
 12497  22A8  01B5               	clrf	?_startRelMove^(0+128)
 12498  22A9  01B6               	clrf	(?_startRelMove+1)^(0+128)
 12499  22AA  0008               	return
 12500  22AB                     __end_of_startRelMove:	
 12501                           
 12502                           	psect	text23
 12503  22E3                     __ptext23:	
 12504 ;; *************** function _startAbsMove *****************
 12505 ;; Defined at:
 12506 ;;		line 303 in file "main.c"
 12507 ;; Parameters:    Size  Location     Type
 12508 ;;  steps           2   21[BANK1 ] int 
 12509 ;; Auto vars:     Size  Location     Type
 12510 ;;		None
 12511 ;; Return value:  Size  Location     Type
 12512 ;;                  2   21[BANK1 ] int 
 12513 ;; Registers used:
 12514 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12515 ;; Tracked objects:
 12516 ;;		On entry : 0/0
 12517 ;;		On exit  : 0/0
 12518 ;;		Unchanged: 0/0
 12519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12520 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12523 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12524 ;;Total ram usage:        3 bytes
 12525 ;; Hardware stack levels used:    1
 12526 ;; Hardware stack levels required when called:    9
 12527 ;; This function calls:
 12528 ;;		_printf
 12529 ;; This function is called by:
 12530 ;;		_execCmd
 12531 ;; This function uses a non-reentrant model
 12532 ;;
 12533                           
 12534                           
 12535                           ;psect for function _startAbsMove
 12536  22E3                     _startAbsMove:	
 12537                           
 12538                           ;main.c: 304: motionType = ABS_MOVE;
 12539                           
 12540                           ;incstack = 0
 12541                           ; Regs used in _startAbsMove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12542  22E3  3002               	movlw	2
 12543  22E4  0020               	movlb	0	; select bank0
 12544  22E5  00C9               	movwf	??_startAbsMove
 12545  22E6  0849               	movf	??_startAbsMove,w
 12546  22E7  00D5               	movwf	_motionType
 12547                           
 12548                           ;main.c: 305: absCommand = steps;
 12549  22E8  0021               	movlb	1	; select bank1
 12550  22E9  0835               	movf	startAbsMove@steps^(0+128),w
 12551  22EA  0020               	movlb	0	; select bank0
 12552  22EB  00CE               	movwf	_absCommand
 12553  22EC  0021               	movlb	1	; select bank1
 12554  22ED  0836               	movf	(startAbsMove@steps+1)^(0+128),w
 12555  22EE  0020               	movlb	0	; select bank0
 12556  22EF  00CF               	movwf	_absCommand+1
 12557  22F0  0D89               	rlf	9,f
 12558  22F1  3B89               	subwfb	9,f
 12559  22F2  0989               	comf	9,f
 12560  22F3  00D0               	movwf	_absCommand+2
 12561  22F4  00D1               	movwf	_absCommand+3
 12562                           
 12563                           ;main.c: 306: printf("A\n");
 12564  22F5  3046               	movlw	low (STR_8| (0+32768))
 12565  22F6  0021               	movlb	1	; select bank1
 12566  22F7  00A0               	movwf	printf@f^(0+128)
 12567  22F8  30B0               	movlw	high (STR_8| (0+32768))
 12568  22F9  00A1               	movwf	(printf@f^(0+128)+1)
 12569  22FA  318E  26CE         	fcall	_printf
 12570                           
 12571                           ;main.c: 307: return 0;
 12572  22FC  0021               	movlb	1	; select bank1
 12573  22FD  01B5               	clrf	?_startAbsMove^(0+128)
 12574  22FE  01B6               	clrf	(?_startAbsMove+1)^(0+128)
 12575  22FF  0008               	return
 12576  2300                     __end_of_startAbsMove:	
 12577                           
 12578                           	psect	text24
 12579  1241                     __ptext24:	
 12580 ;; *************** function _setMoveMask *****************
 12581 ;; Defined at:
 12582 ;;		line 550 in file "main.c"
 12583 ;; Parameters:    Size  Location     Type
 12584 ;;  probeNum        2   21[BANK1 ] int 
 12585 ;;  onOff           2   23[BANK1 ] int 
 12586 ;; Auto vars:     Size  Location     Type
 12587 ;;		None
 12588 ;; Return value:  Size  Location     Type
 12589 ;;                  2   21[BANK1 ] int 
 12590 ;; Registers used:
 12591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12592 ;; Tracked objects:
 12593 ;;		On entry : 0/0
 12594 ;;		On exit  : 0/0
 12595 ;;		Unchanged: 0/0
 12596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12597 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12599 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12600 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12601 ;;Total ram usage:        8 bytes
 12602 ;; Hardware stack levels used:    1
 12603 ;; Hardware stack levels required when called:    9
 12604 ;; This function calls:
 12605 ;;		_printf
 12606 ;; This function is called by:
 12607 ;;		_execCmd
 12608 ;; This function uses a non-reentrant model
 12609 ;;
 12610                           
 12611                           
 12612                           ;psect for function _setMoveMask
 12613  1241                     _setMoveMask:	
 12614                           
 12615                           ;main.c: 554: if (probeNum < 24){
 12616                           
 12617                           ;incstack = 0
 12618                           ; Regs used in _setMoveMask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12619  1241  0021               	movlb	1	; select bank1
 12620  1242  0836               	movf	(setMoveMask@probeNum+1)^(0+128),w
 12621  1243  3A80               	xorlw	128
 12622  1244  0020               	movlb	0	; select bank0
 12623  1245  00C9               	movwf	??_setMoveMask
 12624  1246  3080               	movlw	128
 12625  1247  0249               	subwf	??_setMoveMask,w
 12626  1248  1D03               	skipz
 12627  1249  2A4D               	goto	u8945
 12628  124A  3018               	movlw	24
 12629  124B  0021               	movlb	1	; select bank1
 12630  124C  0235               	subwf	setMoveMask@probeNum^(0+128),w
 12631  124D                     u8945:	
 12632  124D  1803               	skipnc
 12633  124E  2AA7               	goto	l8921
 12634                           
 12635                           ;main.c: 555: if (onOff)
 12636  124F  0021               	movlb	1	; select bank1
 12637  1250  0837               	movf	setMoveMask@onOff^(0+128),w
 12638  1251  0438               	iorwf	(setMoveMask@onOff+1)^(0+128),w
 12639  1252  1903               	btfsc	3,2
 12640  1253  2A77               	goto	l8913
 12641                           
 12642                           ;main.c: 556: moveMask |= (1UL<<probeNum);
 12643  1254  3001               	movlw	1
 12644  1255  0020               	movlb	0	; select bank0
 12645  1256  00C9               	movwf	??_setMoveMask
 12646  1257  3000               	movlw	0
 12647  1258  00CA               	movwf	??_setMoveMask+1
 12648  1259  3000               	movlw	0
 12649  125A  00CB               	movwf	??_setMoveMask+2
 12650  125B  3000               	movlw	0
 12651  125C  00CC               	movwf	??_setMoveMask+3
 12652  125D  0021               	movlb	1	; select bank1
 12653  125E  0A35               	incf	setMoveMask@probeNum^(0+128),w
 12654  125F  0020               	movlb	0	; select bank0
 12655  1260  2A65               	goto	u8960
 12656  1261                     u8965:	
 12657  1261  35C9               	lslf	??_setMoveMask,f
 12658  1262  0DCA               	rlf	??_setMoveMask+1,f
 12659  1263  0DCB               	rlf	??_setMoveMask+2,f
 12660  1264  0DCC               	rlf	??_setMoveMask+3,f
 12661  1265                     u8960:	
 12662  1265  0B89               	decfsz	9,f
 12663  1266  2A61               	goto	u8965
 12664  1267  0849               	movf	??_setMoveMask,w
 12665  1268  0021               	movlb	1	; select bank1
 12666  1269  04D8               	iorwf	_moveMask^(0+128),f
 12667  126A  0020               	movlb	0	; select bank0
 12668  126B  084A               	movf	??_setMoveMask+1,w
 12669  126C  0021               	movlb	1	; select bank1
 12670  126D  04D9               	iorwf	(_moveMask+1)^(0+128),f
 12671  126E  0020               	movlb	0	; select bank0
 12672  126F  084B               	movf	??_setMoveMask+2,w
 12673  1270  0021               	movlb	1	; select bank1
 12674  1271  04DA               	iorwf	(_moveMask+2)^(0+128),f
 12675  1272  0020               	movlb	0	; select bank0
 12676  1273  084C               	movf	??_setMoveMask+3,w
 12677  1274  0021               	movlb	1	; select bank1
 12678  1275  04DB               	iorwf	(_moveMask+3)^(0+128),f
 12679  1276  2A9D               	goto	l8915
 12680  1277                     l8913:	
 12681                           
 12682                           ;main.c: 557: else
 12683                           ;main.c: 558: moveMask &= ~(1UL<< probeNum);
 12684  1277  3001               	movlw	1
 12685  1278  0020               	movlb	0	; select bank0
 12686  1279  00C9               	movwf	??_setMoveMask
 12687  127A  3000               	movlw	0
 12688  127B  00CA               	movwf	??_setMoveMask+1
 12689  127C  3000               	movlw	0
 12690  127D  00CB               	movwf	??_setMoveMask+2
 12691  127E  3000               	movlw	0
 12692  127F  00CC               	movwf	??_setMoveMask+3
 12693  1280  0021               	movlb	1	; select bank1
 12694  1281  0A35               	incf	setMoveMask@probeNum^(0+128),w
 12695  1282  0020               	movlb	0	; select bank0
 12696  1283  2A88               	goto	u8970
 12697  1284                     u8975:	
 12698  1284  35C9               	lslf	??_setMoveMask,f
 12699  1285  0DCA               	rlf	??_setMoveMask+1,f
 12700  1286  0DCB               	rlf	??_setMoveMask+2,f
 12701  1287  0DCC               	rlf	??_setMoveMask+3,f
 12702  1288                     u8970:	
 12703  1288  0B89               	decfsz	9,f
 12704  1289  2A84               	goto	u8975
 12705  128A  09C9               	comf	??_setMoveMask,f
 12706  128B  09CA               	comf	??_setMoveMask+1,f
 12707  128C  09CB               	comf	??_setMoveMask+2,f
 12708  128D  09CC               	comf	??_setMoveMask+3,f
 12709  128E  0849               	movf	??_setMoveMask,w
 12710  128F  0021               	movlb	1	; select bank1
 12711  1290  05D8               	andwf	_moveMask^(0+128),f
 12712  1291  0020               	movlb	0	; select bank0
 12713  1292  084A               	movf	??_setMoveMask+1,w
 12714  1293  0021               	movlb	1	; select bank1
 12715  1294  05D9               	andwf	(_moveMask+1)^(0+128),f
 12716  1295  0020               	movlb	0	; select bank0
 12717  1296  084B               	movf	??_setMoveMask+2,w
 12718  1297  0021               	movlb	1	; select bank1
 12719  1298  05DA               	andwf	(_moveMask+2)^(0+128),f
 12720  1299  0020               	movlb	0	; select bank0
 12721  129A  084C               	movf	??_setMoveMask+3,w
 12722  129B  0021               	movlb	1	; select bank1
 12723  129C  05DB               	andwf	(_moveMask+3)^(0+128),f
 12724  129D                     l8915:	
 12725                           
 12726                           ;main.c: 559: printf("A\n");
 12727  129D  3046               	movlw	low (STR_8| (0+32768))
 12728  129E  00A0               	movwf	printf@f^(0+128)
 12729  129F  30B0               	movlw	high (STR_8| (0+32768))
 12730  12A0  00A1               	movwf	(printf@f^(0+128)+1)
 12731  12A1  318E  26CE         	fcall	_printf
 12732                           
 12733                           ;main.c: 560: return 0;
 12734  12A3  0021               	movlb	1	; select bank1
 12735  12A4  01B5               	clrf	?_setMoveMask^(0+128)
 12736  12A5  01B6               	clrf	(?_setMoveMask+1)^(0+128)
 12737  12A6  0008               	return
 12738  12A7                     l8921:	
 12739                           
 12740                           ;main.c: 561: }
 12741                           ;main.c: 562: printf("E\n");
 12742  12A7  3049               	movlw	low (STR_15| (0+32768))
 12743  12A8  0021               	movlb	1	; select bank1
 12744  12A9  00A0               	movwf	printf@f^(0+128)
 12745  12AA  30B0               	movlw	high (STR_15| (0+32768))
 12746  12AB  00A1               	movwf	(printf@f^(0+128)+1)
 12747  12AC  318E  26CE         	fcall	_printf
 12748                           
 12749                           ;main.c: 563: return 1;
 12750  12AE  3001               	movlw	1
 12751  12AF  0021               	movlb	1	; select bank1
 12752  12B0  00B5               	movwf	?_setMoveMask^(0+128)
 12753  12B1  3000               	movlw	0
 12754  12B2  00B6               	movwf	(?_setMoveMask^(0+128)+1)
 12755  12B3  0008               	return
 12756  12B4                     __end_of_setMoveMask:	
 12757                           
 12758                           	psect	text25
 12759  233C                     __ptext25:	
 12760 ;; *************** function _setLEDPwr *****************
 12761 ;; Defined at:
 12762 ;;		line 481 in file "main.c"
 12763 ;; Parameters:    Size  Location     Type
 12764 ;;  pwr             2   21[BANK1 ] int 
 12765 ;;  topOrBottom     2   23[BANK1 ] int 
 12766 ;; Auto vars:     Size  Location     Type
 12767 ;;		None
 12768 ;; Return value:  Size  Location     Type
 12769 ;;                  2   21[BANK1 ] int 
 12770 ;; Registers used:
 12771 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12772 ;; Tracked objects:
 12773 ;;		On entry : 0/0
 12774 ;;		On exit  : 0/0
 12775 ;;		Unchanged: 0/0
 12776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12777 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12780 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12781 ;;Total ram usage:        4 bytes
 12782 ;; Hardware stack levels used:    1
 12783 ;; Hardware stack levels required when called:    9
 12784 ;; This function calls:
 12785 ;;		_LEDsPwr
 12786 ;;		_printf
 12787 ;; This function is called by:
 12788 ;;		_execCmd
 12789 ;; This function uses a non-reentrant model
 12790 ;;
 12791                           
 12792                           
 12793                           ;psect for function _setLEDPwr
 12794  233C                     _setLEDPwr:	
 12795                           
 12796                           ;main.c: 482: LEDsPwr(pwr, topOrBottom);
 12797                           
 12798                           ;incstack = 0
 12799                           ; Regs used in _setLEDPwr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12800  233C  0021               	movlb	1	; select bank1
 12801  233D  0836               	movf	(setLEDPwr@pwr+1)^(0+128),w
 12802  233E  0020               	movlb	0	; select bank0
 12803  233F  00C5               	movwf	LEDsPwr@pwr+1
 12804  2340  0021               	movlb	1	; select bank1
 12805  2341  0835               	movf	setLEDPwr@pwr^(0+128),w
 12806  2342  0020               	movlb	0	; select bank0
 12807  2343  00C4               	movwf	LEDsPwr@pwr
 12808  2344  0021               	movlb	1	; select bank1
 12809  2345  0838               	movf	(setLEDPwr@topOrBottom+1)^(0+128),w
 12810  2346  0020               	movlb	0	; select bank0
 12811  2347  00C7               	movwf	LEDsPwr@topOrBottom+1
 12812  2348  0021               	movlb	1	; select bank1
 12813  2349  0837               	movf	setLEDPwr@topOrBottom^(0+128),w
 12814  234A  0020               	movlb	0	; select bank0
 12815  234B  00C6               	movwf	LEDsPwr@topOrBottom
 12816  234C  319E  26C6  31A3   	fcall	_LEDsPwr
 12817                           
 12818                           ;main.c: 483: printf("A\n");
 12819  234F  3046               	movlw	low (STR_8| (0+32768))
 12820  2350  0021               	movlb	1	; select bank1
 12821  2351  00A0               	movwf	printf@f^(0+128)
 12822  2352  30B0               	movlw	high (STR_8| (0+32768))
 12823  2353  00A1               	movwf	(printf@f^(0+128)+1)
 12824  2354  318E  26CE         	fcall	_printf
 12825                           
 12826                           ;main.c: 484: return 0;
 12827  2356  0021               	movlb	1	; select bank1
 12828  2357  01B5               	clrf	?_setLEDPwr^(0+128)
 12829  2358  01B6               	clrf	(?_setLEDPwr+1)^(0+128)
 12830  2359  0008               	return
 12831  235A                     __end_of_setLEDPwr:	
 12832                           
 12833                           	psect	text26
 12834  1EC6                     __ptext26:	
 12835 ;; *************** function _LEDsPwr *****************
 12836 ;; Defined at:
 12837 ;;		line 12 in file "LEDcomm.c"
 12838 ;; Parameters:    Size  Location     Type
 12839 ;;  pwr             2   36[BANK0 ] int 
 12840 ;;  topOrBottom     2   38[BANK0 ] int 
 12841 ;; Auto vars:     Size  Location     Type
 12842 ;;  pwrAll          4    0[BANK1 ] unsigned long 
 12843 ;; Return value:  Size  Location     Type
 12844 ;;                  1    wreg      void 
 12845 ;; Registers used:
 12846 ;;		wreg, status,2, status,0, pclath, cstack
 12847 ;; Tracked objects:
 12848 ;;		On entry : 0/0
 12849 ;;		On exit  : 0/0
 12850 ;;		Unchanged: 0/0
 12851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12852 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12853 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12854 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12855 ;;      Totals:         0      10       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12856 ;;Total ram usage:       14 bytes
 12857 ;; Hardware stack levels used:    1
 12858 ;; Hardware stack levels required when called:    8
 12859 ;; This function calls:
 12860 ;;		_send_2length_2bytes_IK
 12861 ;; This function is called by:
 12862 ;;		_main_initialize
 12863 ;;		_setLEDPwr
 12864 ;; This function uses a non-reentrant model
 12865 ;;
 12866                           
 12867                           
 12868                           ;psect for function _LEDsPwr
 12869  1EC6                     _LEDsPwr:	
 12870                           
 12871                           ;LEDcomm.c: 13: pwr = (pwr>63) ? 63 : pwr;
 12872                           
 12873                           ;incstack = 0
 12874                           ; Regs used in _LEDsPwr: [wreg+status,2+status,0+pclath+cstack]
 12875  1EC6  0020               	movlb	0	; select bank0
 12876  1EC7  0845               	movf	LEDsPwr@pwr+1,w
 12877  1EC8  3A80               	xorlw	128
 12878  1EC9  00C8               	movwf	??_LEDsPwr
 12879  1ECA  3080               	movlw	128
 12880  1ECB  0248               	subwf	??_LEDsPwr,w
 12881  1ECC  1D03               	skipz
 12882  1ECD  2ED0               	goto	u8375
 12883  1ECE  3040               	movlw	64
 12884  1ECF  0244               	subwf	LEDsPwr@pwr,w
 12885  1ED0                     u8375:	
 12886  1ED0  1C03               	btfss	3,0
 12887  1ED1  2ED7               	goto	l208
 12888  1ED2  303F               	movlw	63
 12889  1ED3  0020               	movlb	0	; select bank0
 12890  1ED4  00C4               	movwf	LEDsPwr@pwr
 12891  1ED5  3000               	movlw	0
 12892  1ED6  00C5               	movwf	LEDsPwr@pwr+1
 12893  1ED7                     l208:	
 12894                           
 12895                           ;LEDcomm.c: 14: unsigned long pwrAll = pwr | (pwr<<6) | (pwr<<12);
 12896  1ED7  0020               	movlb	0	; select bank0
 12897  1ED8  0845               	movf	LEDsPwr@pwr+1,w
 12898  1ED9  00C9               	movwf	??_LEDsPwr+1
 12899  1EDA  0844               	movf	LEDsPwr@pwr,w
 12900  1EDB  00C8               	movwf	??_LEDsPwr
 12901  1EDC  0E48               	swapf	??_LEDsPwr,w
 12902  1EDD  39F0               	andlw	240
 12903  1EDE  00C9               	movwf	??_LEDsPwr+1
 12904  1EDF  01C8               	clrf	??_LEDsPwr
 12905  1EE0  0845               	movf	LEDsPwr@pwr+1,w
 12906  1EE1  00CB               	movwf	??_LEDsPwr+3
 12907  1EE2  0844               	movf	LEDsPwr@pwr,w
 12908  1EE3  00CA               	movwf	??_LEDsPwr+2
 12909  1EE4  3006               	movlw	6
 12910  1EE5                     u8385:	
 12911  1EE5  35CA               	lslf	??_LEDsPwr+2,f
 12912  1EE6  0DCB               	rlf	??_LEDsPwr+3,f
 12913  1EE7  0B89               	decfsz	9,f
 12914  1EE8  2EE5               	goto	u8385
 12915  1EE9  0848               	movf	??_LEDsPwr,w
 12916  1EEA  044A               	iorwf	??_LEDsPwr+2,w
 12917  1EEB  00CC               	movwf	??_LEDsPwr+4
 12918  1EEC  0849               	movf	??_LEDsPwr+1,w
 12919  1EED  044B               	iorwf	??_LEDsPwr+3,w
 12920  1EEE  00CD               	movwf	??_LEDsPwr+5
 12921  1EEF  0844               	movf	LEDsPwr@pwr,w
 12922  1EF0  044C               	iorwf	??_LEDsPwr+4,w
 12923  1EF1  0021               	movlb	1	; select bank1
 12924  1EF2  00A0               	movwf	LEDsPwr@pwrAll^(0+128)
 12925  1EF3  0020               	movlb	0	; select bank0
 12926  1EF4  0845               	movf	LEDsPwr@pwr+1,w
 12927  1EF5  044D               	iorwf	??_LEDsPwr+5,w
 12928  1EF6  0021               	movlb	1	; select bank1
 12929  1EF7  00A1               	movwf	(LEDsPwr@pwrAll+1)^(0+128)
 12930  1EF8  01A2               	clrf	(LEDsPwr@pwrAll^(0+128)+2)
 12931  1EF9  1BA1               	btfsc	(LEDsPwr@pwrAll^(0+128)+1),7
 12932  1EFA  03A2               	decf	(LEDsPwr@pwrAll+2)^(0+128),f
 12933  1EFB  0822               	movf	(LEDsPwr@pwrAll^(0+128)+2),w
 12934  1EFC  00A3               	movwf	(LEDsPwr@pwrAll+3)^(0+128)
 12935                           
 12936                           ;LEDcomm.c: 15: send_2length_2bytes_IK((unsigned int)((pwrAll>>16) & 0xFFFF),(unsigned i
      +                          nt)pwrAll, 7, topOrBottom);
 12937  1EFD  0820               	movf	LEDsPwr@pwrAll^(0+128),w
 12938  1EFE  0020               	movlb	0	; select bank0
 12939  1EFF  00C8               	movwf	??_LEDsPwr
 12940  1F00  0021               	movlb	1	; select bank1
 12941  1F01  0821               	movf	(LEDsPwr@pwrAll+1)^(0+128),w
 12942  1F02  0020               	movlb	0	; select bank0
 12943  1F03  00C9               	movwf	??_LEDsPwr+1
 12944  1F04  0021               	movlb	1	; select bank1
 12945  1F05  0822               	movf	(LEDsPwr@pwrAll+2)^(0+128),w
 12946  1F06  0020               	movlb	0	; select bank0
 12947  1F07  00CA               	movwf	??_LEDsPwr+2
 12948  1F08  0021               	movlb	1	; select bank1
 12949  1F09  0823               	movf	(LEDsPwr@pwrAll+3)^(0+128),w
 12950  1F0A  0020               	movlb	0	; select bank0
 12951  1F0B  00CB               	movwf	??_LEDsPwr+3
 12952  1F0C  3010               	movlw	16
 12953  1F0D                     u8395:	
 12954  1F0D  36CB               	lsrf	??_LEDsPwr+3,f
 12955  1F0E  0CCA               	rrf	??_LEDsPwr+2,f
 12956  1F0F  0CC9               	rrf	??_LEDsPwr+1,f
 12957  1F10  0CC8               	rrf	??_LEDsPwr,f
 12958  1F11  0B89               	decfsz	9,f
 12959  1F12  2F0D               	goto	u8395
 12960  1F13  0849               	movf	??_LEDsPwr+1,w
 12961  1F14  00BD               	movwf	send_2length_2bytes_IK@data1+1
 12962  1F15  0848               	movf	??_LEDsPwr,w
 12963  1F16  00BC               	movwf	send_2length_2bytes_IK@data1
 12964  1F17  0021               	movlb	1	; select bank1
 12965  1F18  0821               	movf	(LEDsPwr@pwrAll+1)^(0+128),w
 12966  1F19  0020               	movlb	0	; select bank0
 12967  1F1A  00BF               	movwf	send_2length_2bytes_IK@data2+1
 12968  1F1B  0021               	movlb	1	; select bank1
 12969  1F1C  0820               	movf	LEDsPwr@pwrAll^(0+128),w
 12970  1F1D  0020               	movlb	0	; select bank0
 12971  1F1E  00BE               	movwf	send_2length_2bytes_IK@data2
 12972  1F1F  3007               	movlw	7
 12973  1F20  00CC               	movwf	??_LEDsPwr+4
 12974  1F21  084C               	movf	??_LEDsPwr+4,w
 12975  1F22  00C0               	movwf	send_2length_2bytes_IK@latch_start
 12976  1F23  0847               	movf	LEDsPwr@topOrBottom+1,w
 12977  1F24  00C2               	movwf	send_2length_2bytes_IK@topOrBottom+1
 12978  1F25  0846               	movf	LEDsPwr@topOrBottom,w
 12979  1F26  00C1               	movwf	send_2length_2bytes_IK@topOrBottom
 12980  1F27  31A2  222B         	fcall	_send_2length_2bytes_IK
 12981  1F29  0008               	return
 12982  1F2A                     __end_of_LEDsPwr:	
 12983                           
 12984                           	psect	text27
 12985  231E                     __ptext27:	
 12986 ;; *************** function _setLEDBrightnessRange *****************
 12987 ;; Defined at:
 12988 ;;		line 473 in file "main.c"
 12989 ;; Parameters:    Size  Location     Type
 12990 ;;  r               2   21[BANK1 ] int 
 12991 ;;  tOB             2   23[BANK1 ] int 
 12992 ;; Auto vars:     Size  Location     Type
 12993 ;;		None
 12994 ;; Return value:  Size  Location     Type
 12995 ;;                  2   21[BANK1 ] int 
 12996 ;; Registers used:
 12997 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12998 ;; Tracked objects:
 12999 ;;		On entry : 0/0
 13000 ;;		On exit  : 0/0
 13001 ;;		Unchanged: 0/0
 13002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13003 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13006 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13007 ;;Total ram usage:        4 bytes
 13008 ;; Hardware stack levels used:    1
 13009 ;; Hardware stack levels required when called:    9
 13010 ;; This function calls:
 13011 ;;		_LED_setBrightnessRange
 13012 ;;		_printf
 13013 ;; This function is called by:
 13014 ;;		_execCmd
 13015 ;; This function uses a non-reentrant model
 13016 ;;
 13017                           
 13018                           
 13019                           ;psect for function _setLEDBrightnessRange
 13020  231E                     _setLEDBrightnessRange:	
 13021                           
 13022                           ;main.c: 474: LED_setBrightnessRange(r, tOB);
 13023                           
 13024                           ;incstack = 0
 13025                           ; Regs used in _setLEDBrightnessRange: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13026  231E  0021               	movlb	1	; select bank1
 13027  231F  0836               	movf	(setLEDBrightnessRange@r+1)^(0+128),w
 13028  2320  0020               	movlb	0	; select bank0
 13029  2321  00C5               	movwf	LED_setBrightnessRange@range+1
 13030  2322  0021               	movlb	1	; select bank1
 13031  2323  0835               	movf	setLEDBrightnessRange@r^(0+128),w
 13032  2324  0020               	movlb	0	; select bank0
 13033  2325  00C4               	movwf	LED_setBrightnessRange@range
 13034  2326  0021               	movlb	1	; select bank1
 13035  2327  0838               	movf	(setLEDBrightnessRange@tOB+1)^(0+128),w
 13036  2328  0020               	movlb	0	; select bank0
 13037  2329  00C7               	movwf	LED_setBrightnessRange@topOrBottom+1
 13038  232A  0021               	movlb	1	; select bank1
 13039  232B  0837               	movf	setLEDBrightnessRange@tOB^(0+128),w
 13040  232C  0020               	movlb	0	; select bank0
 13041  232D  00C6               	movwf	LED_setBrightnessRange@topOrBottom
 13042  232E  3188  202B  31A3   	fcall	_LED_setBrightnessRange
 13043                           
 13044                           ;main.c: 475: printf("A\n");
 13045  2331  3046               	movlw	low (STR_8| (0+32768))
 13046  2332  0021               	movlb	1	; select bank1
 13047  2333  00A0               	movwf	printf@f^(0+128)
 13048  2334  30B0               	movlw	high (STR_8| (0+32768))
 13049  2335  00A1               	movwf	(printf@f^(0+128)+1)
 13050  2336  318E  26CE         	fcall	_printf
 13051                           
 13052                           ;main.c: 476: return 0;
 13053  2338  0021               	movlb	1	; select bank1
 13054  2339  01B5               	clrf	?_setLEDBrightnessRange^(0+128)
 13055  233A  01B6               	clrf	(?_setLEDBrightnessRange+1)^(0+128)
 13056  233B  0008               	return
 13057  233C                     __end_of_setLEDBrightnessRange:	
 13058                           
 13059                           	psect	text28
 13060  1675                     __ptext28:	
 13061 ;; *************** function _setHeaterToggle *****************
 13062 ;; Defined at:
 13063 ;;		line 490 in file "main.c"
 13064 ;; Parameters:    Size  Location     Type
 13065 ;;  num             2   21[BANK1 ] int 
 13066 ;;  topOrB          2   23[BANK1 ] int 
 13067 ;; Auto vars:     Size  Location     Type
 13068 ;;		None
 13069 ;; Return value:  Size  Location     Type
 13070 ;;                  2   21[BANK1 ] int 
 13071 ;; Registers used:
 13072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13073 ;; Tracked objects:
 13074 ;;		On entry : 0/0
 13075 ;;		On exit  : 0/0
 13076 ;;		Unchanged: 0/0
 13077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13078 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13080 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13081 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13082 ;;Total ram usage:        8 bytes
 13083 ;; Hardware stack levels used:    1
 13084 ;; Hardware stack levels required when called:    9
 13085 ;; This function calls:
 13086 ;;		_LEDsOn
 13087 ;;		_printf
 13088 ;; This function is called by:
 13089 ;;		_execCmd
 13090 ;; This function uses a non-reentrant model
 13091 ;;
 13092                           
 13093                           
 13094                           ;psect for function _setHeaterToggle
 13095  1675                     _setHeaterToggle:	
 13096                           
 13097                           ;incstack = 0
 13098                           ; Regs used in _setHeaterToggle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13099                           ;main.c: 491: do { LATCbits.LATC1 = 0; } while(0);
 13100  1675  0022               	movlb	2	; select bank2
 13101  1676  108E               	bcf	14,1	;volatile
 13102                           
 13103                           ;main.c: 492: if(topOrB == 1){
 13104  1677  0021               	movlb	1	; select bank1
 13105  1678  0337               	decf	setHeaterToggle@topOrB^(0+128),w
 13106  1679  0438               	iorwf	(setHeaterToggle@topOrB+1)^(0+128),w
 13107  167A  1D03               	btfss	3,2
 13108  167B  2EAC               	goto	l8847
 13109                           
 13110                           ;main.c: 493: demoHeaterToggle_top ^= 1UL << num;
 13111  167C  3001               	movlw	1
 13112  167D  00B9               	movwf	??_setHeaterToggle^(0+128)
 13113  167E  3000               	movlw	0
 13114  167F  00BA               	movwf	(??_setHeaterToggle^(0+128)+1)
 13115  1680  3000               	movlw	0
 13116  1681  00BB               	movwf	(??_setHeaterToggle^(0+128)+2)
 13117  1682  3000               	movlw	0
 13118  1683  00BC               	movwf	(??_setHeaterToggle^(0+128)+3)
 13119  1684  0A35               	incf	setHeaterToggle@num^(0+128),w
 13120  1685  2E8A               	goto	u8820
 13121  1686                     u8825:	
 13122  1686  35B9               	lslf	??_setHeaterToggle^(0+128),f
 13123  1687  0DBA               	rlf	(??_setHeaterToggle^(0+128)+1),f
 13124  1688  0DBB               	rlf	(??_setHeaterToggle^(0+128)+2),f
 13125  1689  0DBC               	rlf	(??_setHeaterToggle^(0+128)+3),f
 13126  168A                     u8820:	
 13127  168A  0B89               	decfsz	9,f
 13128  168B  2E86               	goto	u8825
 13129  168C  0839               	movf	??_setHeaterToggle^(0+128),w
 13130  168D  0022               	movlb	2	; select bank2
 13131  168E  06C6               	xorwf	_demoHeaterToggle_top^(0+256),f
 13132  168F  0021               	movlb	1	; select bank1
 13133  1690  083A               	movf	(??_setHeaterToggle+1)^(0+128),w
 13134  1691  0022               	movlb	2	; select bank2
 13135  1692  06C7               	xorwf	(_demoHeaterToggle_top+1)^(0+256),f
 13136  1693  0021               	movlb	1	; select bank1
 13137  1694  083B               	movf	(??_setHeaterToggle+2)^(0+128),w
 13138  1695  0022               	movlb	2	; select bank2
 13139  1696  06C8               	xorwf	(_demoHeaterToggle_top+2)^(0+256),f
 13140  1697  0021               	movlb	1	; select bank1
 13141  1698  083C               	movf	(??_setHeaterToggle+3)^(0+128),w
 13142  1699  0022               	movlb	2	; select bank2
 13143  169A  06C9               	xorwf	(_demoHeaterToggle_top+3)^(0+256),f
 13144                           
 13145                           ;main.c: 494: LEDsOn(demoHeaterToggle_top, 1);
 13146  169B  0849               	movf	(_demoHeaterToggle_top+3)^(0+256),w
 13147  169C  0020               	movlb	0	; select bank0
 13148  169D  00C7               	movwf	LEDsOn@LEDpins+3
 13149  169E  0022               	movlb	2	; select bank2
 13150  169F  0848               	movf	(_demoHeaterToggle_top+2)^(0+256),w
 13151  16A0  0020               	movlb	0	; select bank0
 13152  16A1  00C6               	movwf	LEDsOn@LEDpins+2
 13153  16A2  0022               	movlb	2	; select bank2
 13154  16A3  0847               	movf	(_demoHeaterToggle_top+1)^(0+256),w
 13155  16A4  0020               	movlb	0	; select bank0
 13156  16A5  00C5               	movwf	LEDsOn@LEDpins+1
 13157  16A6  0022               	movlb	2	; select bank2
 13158  16A7  0846               	movf	_demoHeaterToggle_top^(0+256),w
 13159  16A8  0020               	movlb	0	; select bank0
 13160  16A9  00C4               	movwf	LEDsOn@LEDpins
 13161  16AA  3001               	movlw	1
 13162  16AB  2EE1               	goto	L26
 13163  16AC                     l8847:	
 13164                           ;main.c: 495: }
 13165                           
 13166                           
 13167                           ;main.c: 496: else if (topOrB == 2){
 13168  16AC  3002               	movlw	2
 13169  16AD  0021               	movlb	1	; select bank1
 13170  16AE  0637               	xorwf	setHeaterToggle@topOrB^(0+128),w
 13171  16AF  0438               	iorwf	(setHeaterToggle@topOrB+1)^(0+128),w
 13172  16B0  1D03               	btfss	3,2
 13173  16B1  2EE7               	goto	l8853
 13174                           
 13175                           ;main.c: 497: demoHeaterToggle_bot ^= 1UL << num;
 13176  16B2  3001               	movlw	1
 13177  16B3  00B9               	movwf	??_setHeaterToggle^(0+128)
 13178  16B4  3000               	movlw	0
 13179  16B5  00BA               	movwf	(??_setHeaterToggle^(0+128)+1)
 13180  16B6  3000               	movlw	0
 13181  16B7  00BB               	movwf	(??_setHeaterToggle^(0+128)+2)
 13182  16B8  3000               	movlw	0
 13183  16B9  00BC               	movwf	(??_setHeaterToggle^(0+128)+3)
 13184  16BA  0A35               	incf	setHeaterToggle@num^(0+128),w
 13185  16BB  2EC0               	goto	u8840
 13186  16BC                     u8845:	
 13187  16BC  35B9               	lslf	??_setHeaterToggle^(0+128),f
 13188  16BD  0DBA               	rlf	(??_setHeaterToggle^(0+128)+1),f
 13189  16BE  0DBB               	rlf	(??_setHeaterToggle^(0+128)+2),f
 13190  16BF  0DBC               	rlf	(??_setHeaterToggle^(0+128)+3),f
 13191  16C0                     u8840:	
 13192  16C0  0B89               	decfsz	9,f
 13193  16C1  2EBC               	goto	u8845
 13194  16C2  0839               	movf	??_setHeaterToggle^(0+128),w
 13195  16C3  0022               	movlb	2	; select bank2
 13196  16C4  06C2               	xorwf	_demoHeaterToggle_bot^(0+256),f
 13197  16C5  0021               	movlb	1	; select bank1
 13198  16C6  083A               	movf	(??_setHeaterToggle+1)^(0+128),w
 13199  16C7  0022               	movlb	2	; select bank2
 13200  16C8  06C3               	xorwf	(_demoHeaterToggle_bot+1)^(0+256),f
 13201  16C9  0021               	movlb	1	; select bank1
 13202  16CA  083B               	movf	(??_setHeaterToggle+2)^(0+128),w
 13203  16CB  0022               	movlb	2	; select bank2
 13204  16CC  06C4               	xorwf	(_demoHeaterToggle_bot+2)^(0+256),f
 13205  16CD  0021               	movlb	1	; select bank1
 13206  16CE  083C               	movf	(??_setHeaterToggle+3)^(0+128),w
 13207  16CF  0022               	movlb	2	; select bank2
 13208  16D0  06C5               	xorwf	(_demoHeaterToggle_bot+3)^(0+256),f
 13209                           
 13210                           ;main.c: 498: LEDsOn(demoHeaterToggle_bot, 2);
 13211  16D1  0845               	movf	(_demoHeaterToggle_bot+3)^(0+256),w
 13212  16D2  0020               	movlb	0	; select bank0
 13213  16D3  00C7               	movwf	LEDsOn@LEDpins+3
 13214  16D4  0022               	movlb	2	; select bank2
 13215  16D5  0844               	movf	(_demoHeaterToggle_bot+2)^(0+256),w
 13216  16D6  0020               	movlb	0	; select bank0
 13217  16D7  00C6               	movwf	LEDsOn@LEDpins+2
 13218  16D8  0022               	movlb	2	; select bank2
 13219  16D9  0843               	movf	(_demoHeaterToggle_bot+1)^(0+256),w
 13220  16DA  0020               	movlb	0	; select bank0
 13221  16DB  00C5               	movwf	LEDsOn@LEDpins+1
 13222  16DC  0022               	movlb	2	; select bank2
 13223  16DD  0842               	movf	_demoHeaterToggle_bot^(0+256),w
 13224  16DE  0020               	movlb	0	; select bank0
 13225  16DF  00C4               	movwf	LEDsOn@LEDpins
 13226  16E0  3002               	movlw	2
 13227  16E1                     L26:	
 13228  16E1  00C8               	movwf	LEDsOn@topOrBottom
 13229  16E2  3000               	movlw	0
 13230  16E3  00C9               	movwf	LEDsOn@topOrBottom+1
 13231  16E4  31A3  23FA  3196   	fcall	_LEDsOn
 13232  16E7                     l8853:	
 13233                           
 13234                           ;main.c: 499: }
 13235                           ;main.c: 501: printf("A\n");
 13236  16E7  3046               	movlw	low (STR_8| (0+32768))
 13237  16E8  0021               	movlb	1	; select bank1
 13238  16E9  00A0               	movwf	printf@f^(0+128)
 13239  16EA  30B0               	movlw	high (STR_8| (0+32768))
 13240  16EB  00A1               	movwf	(printf@f^(0+128)+1)
 13241  16EC  318E  26CE         	fcall	_printf
 13242                           
 13243                           ;main.c: 502: return 0;
 13244  16EE  0021               	movlb	1	; select bank1
 13245  16EF  01B5               	clrf	?_setHeaterToggle^(0+128)
 13246  16F0  01B6               	clrf	(?_setHeaterToggle+1)^(0+128)
 13247  16F1  0008               	return
 13248  16F2                     __end_of_setHeaterToggle:	
 13249                           
 13250                           	psect	text29
 13251  217E                     __ptext29:	
 13252 ;; *************** function _setHeaterPreTime *****************
 13253 ;; Defined at:
 13254 ;;		line 443 in file "main.c"
 13255 ;; Parameters:    Size  Location     Type
 13256 ;;  t               2   21[BANK1 ] int 
 13257 ;; Auto vars:     Size  Location     Type
 13258 ;;		None
 13259 ;; Return value:  Size  Location     Type
 13260 ;;                  2   21[BANK1 ] int 
 13261 ;; Registers used:
 13262 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13263 ;; Tracked objects:
 13264 ;;		On entry : 0/0
 13265 ;;		On exit  : 0/0
 13266 ;;		Unchanged: 0/0
 13267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13268 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13271 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13272 ;;Total ram usage:        2 bytes
 13273 ;; Hardware stack levels used:    1
 13274 ;; Hardware stack levels required when called:    9
 13275 ;; This function calls:
 13276 ;;		_printf
 13277 ;; This function is called by:
 13278 ;;		_execCmd
 13279 ;; This function uses a non-reentrant model
 13280 ;;
 13281                           
 13282                           
 13283                           ;psect for function _setHeaterPreTime
 13284  217E                     _setHeaterPreTime:	
 13285                           
 13286                           ;main.c: 444: heater_pre_time_ms = t;
 13287                           
 13288                           ;incstack = 0
 13289                           ; Regs used in _setHeaterPreTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13290  217E  0021               	movlb	1	; select bank1
 13291  217F  0836               	movf	(setHeaterPreTime@t+1)^(0+128),w
 13292  2180  00ED               	movwf	(_heater_pre_time_ms+1)^(0+128)
 13293  2181  0835               	movf	setHeaterPreTime@t^(0+128),w
 13294  2182  00EC               	movwf	_heater_pre_time_ms^(0+128)
 13295                           
 13296                           ;main.c: 446: printf("A\n");
 13297  2183  3046               	movlw	low (STR_8| (0+32768))
 13298  2184  00A0               	movwf	printf@f^(0+128)
 13299  2185  30B0               	movlw	high (STR_8| (0+32768))
 13300  2186  00A1               	movwf	(printf@f^(0+128)+1)
 13301  2187  318E  26CE         	fcall	_printf
 13302                           
 13303                           ;main.c: 447: return 0;
 13304  2189  0021               	movlb	1	; select bank1
 13305  218A  01B5               	clrf	?_setHeaterPreTime^(0+128)
 13306  218B  01B6               	clrf	(?_setHeaterPreTime+1)^(0+128)
 13307  218C  0008               	return
 13308  218D                     __end_of_setHeaterPreTime:	
 13309                           
 13310                           	psect	text30
 13311  21BF                     __ptext30:	
 13312 ;; *************** function _setHeaterPostTime *****************
 13313 ;; Defined at:
 13314 ;;		line 449 in file "main.c"
 13315 ;; Parameters:    Size  Location     Type
 13316 ;;  t               2   21[BANK1 ] int 
 13317 ;; Auto vars:     Size  Location     Type
 13318 ;;		None
 13319 ;; Return value:  Size  Location     Type
 13320 ;;                  2   21[BANK1 ] int 
 13321 ;; Registers used:
 13322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13323 ;; Tracked objects:
 13324 ;;		On entry : 0/0
 13325 ;;		On exit  : 0/0
 13326 ;;		Unchanged: 0/0
 13327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13328 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13331 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13332 ;;Total ram usage:        2 bytes
 13333 ;; Hardware stack levels used:    1
 13334 ;; Hardware stack levels required when called:    9
 13335 ;; This function calls:
 13336 ;;		_printf
 13337 ;; This function is called by:
 13338 ;;		_execCmd
 13339 ;; This function uses a non-reentrant model
 13340 ;;
 13341                           
 13342                           
 13343                           ;psect for function _setHeaterPostTime
 13344  21BF                     _setHeaterPostTime:	
 13345                           
 13346                           ;main.c: 450: heater_post_time_ms = t;
 13347                           
 13348                           ;incstack = 0
 13349                           ; Regs used in _setHeaterPostTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13350  21BF  0021               	movlb	1	; select bank1
 13351  21C0  0836               	movf	(setHeaterPostTime@t+1)^(0+128),w
 13352  21C1  0022               	movlb	2	; select bank2
 13353  21C2  00ED               	movwf	(_heater_post_time_ms+1)^(0+256)
 13354  21C3  0021               	movlb	1	; select bank1
 13355  21C4  0835               	movf	setHeaterPostTime@t^(0+128),w
 13356  21C5  0022               	movlb	2	; select bank2
 13357  21C6  00EC               	movwf	_heater_post_time_ms^(0+256)
 13358                           
 13359                           ;main.c: 452: printf("A\n");
 13360  21C7  3046               	movlw	low (STR_8| (0+32768))
 13361  21C8  0021               	movlb	1	; select bank1
 13362  21C9  00A0               	movwf	printf@f^(0+128)
 13363  21CA  30B0               	movlw	high (STR_8| (0+32768))
 13364  21CB  00A1               	movwf	(printf@f^(0+128)+1)
 13365  21CC  318E  26CE         	fcall	_printf
 13366                           
 13367                           ;main.c: 453: return 0;
 13368  21CE  0021               	movlb	1	; select bank1
 13369  21CF  01B5               	clrf	?_setHeaterPostTime^(0+128)
 13370  21D0  01B6               	clrf	(?_setHeaterPostTime+1)^(0+128)
 13371  21D1  0008               	return
 13372  21D2                     __end_of_setHeaterPostTime:	
 13373                           
 13374                           	psect	text31
 13375  1C71                     __ptext31:	
 13376 ;; *************** function _setH2OnTime *****************
 13377 ;; Defined at:
 13378 ;;		line 464 in file "main.c"
 13379 ;; Parameters:    Size  Location     Type
 13380 ;;  t               2   37[BANK1 ] int 
 13381 ;; Auto vars:     Size  Location     Type
 13382 ;;		None
 13383 ;; Return value:  Size  Location     Type
 13384 ;;                  2   37[BANK1 ] int 
 13385 ;; Registers used:
 13386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13387 ;; Tracked objects:
 13388 ;;		On entry : 0/0
 13389 ;;		On exit  : 0/0
 13390 ;;		Unchanged: 0/0
 13391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13392 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13395 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13396 ;;Total ram usage:        2 bytes
 13397 ;; Hardware stack levels used:    1
 13398 ;; Hardware stack levels required when called:    9
 13399 ;; This function calls:
 13400 ;;		_TMR0_Load8bitPeriod
 13401 ;;		___awtoft
 13402 ;;		___ftadd
 13403 ;;		___ftmul
 13404 ;;		___fttol
 13405 ;;		_printf
 13406 ;; This function is called by:
 13407 ;;		_execCmd
 13408 ;; This function uses a non-reentrant model
 13409 ;;
 13410                           
 13411                           
 13412                           ;psect for function _setH2OnTime
 13413  1C71                     _setH2OnTime:	
 13414                           
 13415                           ;main.c: 465: TMR0_Load8bitPeriod((t*TMR0_RANGE)-1);
 13416                           
 13417                           ;incstack = 0
 13418                           ; Regs used in _setH2OnTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13419  1C71  0021               	movlb	1	; select bank1
 13420  1C72  0846               	movf	(setH2OnTime@t+1)^(0+128),w
 13421  1C73  0020               	movlb	0	; select bank0
 13422  1C74  00C1               	movwf	___awtoft@c+1
 13423  1C75  0021               	movlb	1	; select bank1
 13424  1C76  0845               	movf	setH2OnTime@t^(0+128),w
 13425  1C77  0020               	movlb	0	; select bank0
 13426  1C78  00C0               	movwf	___awtoft@c
 13427  1C79  31A4  241B  319C   	fcall	___awtoft
 13428  1C7C  0020               	movlb	0	; select bank0
 13429  1C7D  0840               	movf	?___awtoft,w
 13430  1C7E  00C9               	movwf	___ftmul@f2
 13431  1C7F  0841               	movf	?___awtoft+1,w
 13432  1C80  00CA               	movwf	___ftmul@f2+1
 13433  1C81  0842               	movf	?___awtoft+2,w
 13434  1C82  00CB               	movwf	___ftmul@f2+2
 13435  1C83  3043               	movlw	low (_TMR0_RANGE| (0+32768))
 13436  1C84  0084               	movwf	4
 13437  1C85  30B0               	movlw	high (_TMR0_RANGE| (0+32768))
 13438  1C86  0085               	movwf	5
 13439  1C87  3F00               	moviw [0]fsr0
 13440  1C88  00C6               	movwf	___ftmul@f1
 13441  1C89  3F01               	moviw [1]fsr0
 13442  1C8A  00C7               	movwf	___ftmul@f1+1
 13443  1C8B  3F02               	moviw [2]fsr0
 13444  1C8C  00C8               	movwf	___ftmul@f1+2
 13445  1C8D  318B  23BF  319C   	fcall	___ftmul
 13446  1C90  0020               	movlb	0	; select bank0
 13447  1C91  0846               	movf	?___ftmul,w
 13448  1C92  0021               	movlb	1	; select bank1
 13449  1C93  00AD               	movwf	___ftadd@f2^(0+128)
 13450  1C94  0020               	movlb	0	; select bank0
 13451  1C95  0847               	movf	?___ftmul+1,w
 13452  1C96  0021               	movlb	1	; select bank1
 13453  1C97  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 13454  1C98  0020               	movlb	0	; select bank0
 13455  1C99  0848               	movf	?___ftmul+2,w
 13456  1C9A  0021               	movlb	1	; select bank1
 13457  1C9B  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 13458  1C9C  3000               	movlw	0
 13459  1C9D  00AA               	movwf	___ftadd@f1^(0+128)
 13460  1C9E  3080               	movlw	128
 13461  1C9F  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 13462  1CA0  30BF               	movlw	191
 13463  1CA1  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 13464  1CA2  318C  24A8  319C   	fcall	___ftadd
 13465  1CA5  0021               	movlb	1	; select bank1
 13466  1CA6  082A               	movf	?___ftadd^(0+128),w
 13467  1CA7  00B7               	movwf	___fttol@f1^(0+128)
 13468  1CA8  082B               	movf	(?___ftadd+1)^(0+128),w
 13469  1CA9  00B8               	movwf	(___fttol@f1+1)^(0+128)
 13470  1CAA  082C               	movf	(?___ftadd+2)^(0+128),w
 13471  1CAB  00B9               	movwf	(___fttol@f1+2)^(0+128)
 13472  1CAC  3197  2779  319C   	fcall	___fttol
 13473  1CAF  0021               	movlb	1	; select bank1
 13474  1CB0  0837               	movf	?___fttol^(0+128),w
 13475  1CB1  31AF  27B2  319C   	fcall	_TMR0_Load8bitPeriod
 13476                           
 13477                           ;main.c: 466: printf("A\n");
 13478  1CB4  3046               	movlw	low (STR_8| (0+32768))
 13479  1CB5  0021               	movlb	1	; select bank1
 13480  1CB6  00A0               	movwf	printf@f^(0+128)
 13481  1CB7  30B0               	movlw	high (STR_8| (0+32768))
 13482  1CB8  00A1               	movwf	(printf@f^(0+128)+1)
 13483  1CB9  318E  26CE         	fcall	_printf
 13484                           
 13485                           ;main.c: 467: return 0;
 13486  1CBB  0021               	movlb	1	; select bank1
 13487  1CBC  01C5               	clrf	?_setH2OnTime^(0+128)
 13488  1CBD  01C6               	clrf	(?_setH2OnTime+1)^(0+128)
 13489  1CBE  0008               	return
 13490  1CBF                     __end_of_setH2OnTime:	
 13491                           
 13492                           	psect	text32
 13493  1C23                     __ptext32:	
 13494 ;; *************** function _setH1OffTime *****************
 13495 ;; Defined at:
 13496 ;;		line 457 in file "main.c"
 13497 ;; Parameters:    Size  Location     Type
 13498 ;;  t               2   37[BANK1 ] int 
 13499 ;; Auto vars:     Size  Location     Type
 13500 ;;		None
 13501 ;; Return value:  Size  Location     Type
 13502 ;;                  2   37[BANK1 ] int 
 13503 ;; Registers used:
 13504 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13505 ;; Tracked objects:
 13506 ;;		On entry : 0/0
 13507 ;;		On exit  : 0/0
 13508 ;;		Unchanged: 0/0
 13509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13510 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13513 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13514 ;;Total ram usage:        2 bytes
 13515 ;; Hardware stack levels used:    1
 13516 ;; Hardware stack levels required when called:    9
 13517 ;; This function calls:
 13518 ;;		_TMR2_LoadPeriodRegister
 13519 ;;		___awtoft
 13520 ;;		___ftadd
 13521 ;;		___ftmul
 13522 ;;		___fttol
 13523 ;;		_printf
 13524 ;; This function is called by:
 13525 ;;		_execCmd
 13526 ;; This function uses a non-reentrant model
 13527 ;;
 13528                           
 13529                           
 13530                           ;psect for function _setH1OffTime
 13531  1C23                     _setH1OffTime:	
 13532                           
 13533                           ;main.c: 458: TMR2_LoadPeriodRegister((t*TMR2_RANGE)-1);
 13534                           
 13535                           ;incstack = 0
 13536                           ; Regs used in _setH1OffTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13537  1C23  0021               	movlb	1	; select bank1
 13538  1C24  0846               	movf	(setH1OffTime@t+1)^(0+128),w
 13539  1C25  0020               	movlb	0	; select bank0
 13540  1C26  00C1               	movwf	___awtoft@c+1
 13541  1C27  0021               	movlb	1	; select bank1
 13542  1C28  0845               	movf	setH1OffTime@t^(0+128),w
 13543  1C29  0020               	movlb	0	; select bank0
 13544  1C2A  00C0               	movwf	___awtoft@c
 13545  1C2B  31A4  241B  319C   	fcall	___awtoft
 13546  1C2E  0020               	movlb	0	; select bank0
 13547  1C2F  0840               	movf	?___awtoft,w
 13548  1C30  00C9               	movwf	___ftmul@f2
 13549  1C31  0841               	movf	?___awtoft+1,w
 13550  1C32  00CA               	movwf	___ftmul@f2+1
 13551  1C33  0842               	movf	?___awtoft+2,w
 13552  1C34  00CB               	movwf	___ftmul@f2+2
 13553  1C35  3040               	movlw	low (_TMR2_RANGE| (0+32768))
 13554  1C36  0084               	movwf	4
 13555  1C37  30B0               	movlw	high (_TMR2_RANGE| (0+32768))
 13556  1C38  0085               	movwf	5
 13557  1C39  3F00               	moviw [0]fsr0
 13558  1C3A  00C6               	movwf	___ftmul@f1
 13559  1C3B  3F01               	moviw [1]fsr0
 13560  1C3C  00C7               	movwf	___ftmul@f1+1
 13561  1C3D  3F02               	moviw [2]fsr0
 13562  1C3E  00C8               	movwf	___ftmul@f1+2
 13563  1C3F  318B  23BF  319C   	fcall	___ftmul
 13564  1C42  0020               	movlb	0	; select bank0
 13565  1C43  0846               	movf	?___ftmul,w
 13566  1C44  0021               	movlb	1	; select bank1
 13567  1C45  00AD               	movwf	___ftadd@f2^(0+128)
 13568  1C46  0020               	movlb	0	; select bank0
 13569  1C47  0847               	movf	?___ftmul+1,w
 13570  1C48  0021               	movlb	1	; select bank1
 13571  1C49  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 13572  1C4A  0020               	movlb	0	; select bank0
 13573  1C4B  0848               	movf	?___ftmul+2,w
 13574  1C4C  0021               	movlb	1	; select bank1
 13575  1C4D  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 13576  1C4E  3000               	movlw	0
 13577  1C4F  00AA               	movwf	___ftadd@f1^(0+128)
 13578  1C50  3080               	movlw	128
 13579  1C51  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 13580  1C52  30BF               	movlw	191
 13581  1C53  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 13582  1C54  318C  24A8  319C   	fcall	___ftadd
 13583  1C57  0021               	movlb	1	; select bank1
 13584  1C58  082A               	movf	?___ftadd^(0+128),w
 13585  1C59  00B7               	movwf	___fttol@f1^(0+128)
 13586  1C5A  082B               	movf	(?___ftadd+1)^(0+128),w
 13587  1C5B  00B8               	movwf	(___fttol@f1+1)^(0+128)
 13588  1C5C  082C               	movf	(?___ftadd+2)^(0+128),w
 13589  1C5D  00B9               	movwf	(___fttol@f1+2)^(0+128)
 13590  1C5E  3197  2779  319C   	fcall	___fttol
 13591  1C61  0021               	movlb	1	; select bank1
 13592  1C62  0837               	movf	?___fttol^(0+128),w
 13593  1C63  31AF  27B7  319C   	fcall	_TMR2_LoadPeriodRegister
 13594                           
 13595                           ;main.c: 459: printf("A\n");
 13596  1C66  3046               	movlw	low (STR_8| (0+32768))
 13597  1C67  0021               	movlb	1	; select bank1
 13598  1C68  00A0               	movwf	printf@f^(0+128)
 13599  1C69  30B0               	movlw	high (STR_8| (0+32768))
 13600  1C6A  00A1               	movwf	(printf@f^(0+128)+1)
 13601  1C6B  318E  26CE         	fcall	_printf
 13602                           
 13603                           ;main.c: 460: return 0;
 13604  1C6D  0021               	movlb	1	; select bank1
 13605  1C6E  01C5               	clrf	?_setH1OffTime^(0+128)
 13606  1C6F  01C6               	clrf	(?_setH1OffTime+1)^(0+128)
 13607  1C70  0008               	return
 13608  1C71                     __end_of_setH1OffTime:	
 13609                           
 13610                           	psect	text33
 13611  2FB7                     __ptext33:	
 13612 ;; *************** function _TMR2_LoadPeriodRegister *****************
 13613 ;; Defined at:
 13614 ;;		line 112 in file "mcc_generated_files/tmr2.c"
 13615 ;; Parameters:    Size  Location     Type
 13616 ;;  periodVal       1    wreg     unsigned char 
 13617 ;; Auto vars:     Size  Location     Type
 13618 ;;  periodVal       1   17[BANK0 ] unsigned char 
 13619 ;; Return value:  Size  Location     Type
 13620 ;;                  1    wreg      void 
 13621 ;; Registers used:
 13622 ;;		wreg
 13623 ;; Tracked objects:
 13624 ;;		On entry : 0/0
 13625 ;;		On exit  : 0/0
 13626 ;;		Unchanged: 0/0
 13627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13631 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13632 ;;Total ram usage:        1 bytes
 13633 ;; Hardware stack levels used:    1
 13634 ;; Hardware stack levels required when called:    6
 13635 ;; This function calls:
 13636 ;;		Nothing
 13637 ;; This function is called by:
 13638 ;;		_main_initialize
 13639 ;;		_setH1OffTime
 13640 ;; This function uses a non-reentrant model
 13641 ;;
 13642                           
 13643                           
 13644                           ;psect for function _TMR2_LoadPeriodRegister
 13645  2FB7                     _TMR2_LoadPeriodRegister:	
 13646                           
 13647                           ;incstack = 0
 13648                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
 13649                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
 13650  2FB7  0020               	movlb	0	; select bank0
 13651  2FB8  00B1               	movwf	TMR2_LoadPeriodRegister@periodVal
 13652                           
 13653                           ;tmr2.c: 114: PR2 = periodVal;
 13654  2FB9  0831               	movf	TMR2_LoadPeriodRegister@periodVal,w
 13655  2FBA  009E               	movwf	30	;volatile
 13656  2FBB  0008               	return
 13657  2FBC                     __end_of_TMR2_LoadPeriodRegister:	
 13658                           
 13659                           	psect	text34
 13660  1E67                     __ptext34:	
 13661 ;; *************** function _setDrvPiezoOnTime *****************
 13662 ;; Defined at:
 13663 ;;		line 432 in file "main.c"
 13664 ;; Parameters:    Size  Location     Type
 13665 ;;  t               2   37[BANK1 ] int 
 13666 ;; Auto vars:     Size  Location     Type
 13667 ;;		None
 13668 ;; Return value:  Size  Location     Type
 13669 ;;                  2   37[BANK1 ] int 
 13670 ;; Registers used:
 13671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13672 ;; Tracked objects:
 13673 ;;		On entry : 0/0
 13674 ;;		On exit  : 0/0
 13675 ;;		Unchanged: 0/0
 13676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13677 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13679 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13680 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13681 ;;Total ram usage:        4 bytes
 13682 ;; Hardware stack levels used:    1
 13683 ;; Hardware stack levels required when called:    9
 13684 ;; This function calls:
 13685 ;;		_TMR0_Load8bitPeriod
 13686 ;;		___awtoft
 13687 ;;		___ftadd
 13688 ;;		___ftmul
 13689 ;;		___fttol
 13690 ;;		_printf
 13691 ;; This function is called by:
 13692 ;;		_execCmd
 13693 ;; This function uses a non-reentrant model
 13694 ;;
 13695                           
 13696                           
 13697                           ;psect for function _setDrvPiezoOnTime
 13698  1E67                     _setDrvPiezoOnTime:	
 13699                           
 13700                           ;main.c: 433: piezo_on_time_ms = t;
 13701                           
 13702                           ;incstack = 0
 13703                           ; Regs used in _setDrvPiezoOnTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13704  1E67  0021               	movlb	1	; select bank1
 13705  1E68  0846               	movf	(setDrvPiezoOnTime@t+1)^(0+128),w
 13706  1E69  00EB               	movwf	(_piezo_on_time_ms+1)^(0+128)
 13707  1E6A  0845               	movf	setDrvPiezoOnTime@t^(0+128),w
 13708  1E6B  00EA               	movwf	_piezo_on_time_ms^(0+128)
 13709                           
 13710                           ;main.c: 434: TMR0_Load8bitPeriod(((piezo_on_time_ms-heater_pre_time_ms)*TMR0_RANGE)-1);
 13711  1E6C  096C               	comf	_heater_pre_time_ms^(0+128),w
 13712  1E6D  0020               	movlb	0	; select bank0
 13713  1E6E  00CC               	movwf	??_setDrvPiezoOnTime
 13714  1E6F  0021               	movlb	1	; select bank1
 13715  1E70  096D               	comf	(_heater_pre_time_ms+1)^(0+128),w
 13716  1E71  0020               	movlb	0	; select bank0
 13717  1E72  00CD               	movwf	??_setDrvPiezoOnTime+1
 13718  1E73  0ACC               	incf	??_setDrvPiezoOnTime,f
 13719  1E74  1903               	skipnz
 13720  1E75  0ACD               	incf	??_setDrvPiezoOnTime+1,f
 13721  1E76  0021               	movlb	1	; select bank1
 13722  1E77  086A               	movf	_piezo_on_time_ms^(0+128),w
 13723  1E78  0020               	movlb	0	; select bank0
 13724  1E79  074C               	addwf	??_setDrvPiezoOnTime,w
 13725  1E7A  00C0               	movwf	___awtoft@c
 13726  1E7B  0021               	movlb	1	; select bank1
 13727  1E7C  086B               	movf	(_piezo_on_time_ms+1)^(0+128),w
 13728  1E7D  0020               	movlb	0	; select bank0
 13729  1E7E  3D4D               	addwfc	??_setDrvPiezoOnTime+1,w
 13730  1E7F  00C1               	movwf	___awtoft@c+1
 13731  1E80  31A4  241B  319E   	fcall	___awtoft
 13732  1E83  0020               	movlb	0	; select bank0
 13733  1E84  0840               	movf	?___awtoft,w
 13734  1E85  00C9               	movwf	___ftmul@f2
 13735  1E86  0841               	movf	?___awtoft+1,w
 13736  1E87  00CA               	movwf	___ftmul@f2+1
 13737  1E88  0842               	movf	?___awtoft+2,w
 13738  1E89  00CB               	movwf	___ftmul@f2+2
 13739  1E8A  3043               	movlw	low (_TMR0_RANGE| (0+32768))
 13740  1E8B  0084               	movwf	4
 13741  1E8C  30B0               	movlw	high (_TMR0_RANGE| (0+32768))
 13742  1E8D  0085               	movwf	5
 13743  1E8E  3F00               	moviw [0]fsr0
 13744  1E8F  00C6               	movwf	___ftmul@f1
 13745  1E90  3F01               	moviw [1]fsr0
 13746  1E91  00C7               	movwf	___ftmul@f1+1
 13747  1E92  3F02               	moviw [2]fsr0
 13748  1E93  00C8               	movwf	___ftmul@f1+2
 13749  1E94  318B  23BF  319E   	fcall	___ftmul
 13750  1E97  0020               	movlb	0	; select bank0
 13751  1E98  0846               	movf	?___ftmul,w
 13752  1E99  0021               	movlb	1	; select bank1
 13753  1E9A  00AD               	movwf	___ftadd@f2^(0+128)
 13754  1E9B  0020               	movlb	0	; select bank0
 13755  1E9C  0847               	movf	?___ftmul+1,w
 13756  1E9D  0021               	movlb	1	; select bank1
 13757  1E9E  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 13758  1E9F  0020               	movlb	0	; select bank0
 13759  1EA0  0848               	movf	?___ftmul+2,w
 13760  1EA1  0021               	movlb	1	; select bank1
 13761  1EA2  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 13762  1EA3  3000               	movlw	0
 13763  1EA4  00AA               	movwf	___ftadd@f1^(0+128)
 13764  1EA5  3080               	movlw	128
 13765  1EA6  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 13766  1EA7  30BF               	movlw	191
 13767  1EA8  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 13768  1EA9  318C  24A8  319E   	fcall	___ftadd
 13769  1EAC  0021               	movlb	1	; select bank1
 13770  1EAD  082A               	movf	?___ftadd^(0+128),w
 13771  1EAE  00B7               	movwf	___fttol@f1^(0+128)
 13772  1EAF  082B               	movf	(?___ftadd+1)^(0+128),w
 13773  1EB0  00B8               	movwf	(___fttol@f1+1)^(0+128)
 13774  1EB1  082C               	movf	(?___ftadd+2)^(0+128),w
 13775  1EB2  00B9               	movwf	(___fttol@f1+2)^(0+128)
 13776  1EB3  3197  2779  319E   	fcall	___fttol
 13777  1EB6  0021               	movlb	1	; select bank1
 13778  1EB7  0837               	movf	?___fttol^(0+128),w
 13779  1EB8  31AF  27B2  319E   	fcall	_TMR0_Load8bitPeriod
 13780                           
 13781                           ;main.c: 435: printf("A\n");
 13782  1EBB  3046               	movlw	low (STR_8| (0+32768))
 13783  1EBC  0021               	movlb	1	; select bank1
 13784  1EBD  00A0               	movwf	printf@f^(0+128)
 13785  1EBE  30B0               	movlw	high (STR_8| (0+32768))
 13786  1EBF  00A1               	movwf	(printf@f^(0+128)+1)
 13787  1EC0  318E  26CE         	fcall	_printf
 13788                           
 13789                           ;main.c: 436: return 0;
 13790  1EC2  0021               	movlb	1	; select bank1
 13791  1EC3  01C5               	clrf	?_setDrvPiezoOnTime^(0+128)
 13792  1EC4  01C6               	clrf	(?_setDrvPiezoOnTime+1)^(0+128)
 13793  1EC5  0008               	return
 13794  1EC6                     __end_of_setDrvPiezoOnTime:	
 13795                           
 13796                           	psect	text35
 13797  0BBF                     __ptext35:	
 13798 ;; *************** function ___ftmul *****************
 13799 ;; Defined at:
 13800 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 13801 ;; Parameters:    Size  Location     Type
 13802 ;;  f1              3   38[BANK0 ] float 
 13803 ;;  f2              3   41[BANK0 ] float 
 13804 ;; Auto vars:     Size  Location     Type
 13805 ;;  f3_as_produc    3    5[BANK1 ] unsigned um
 13806 ;;  sign            1    9[BANK1 ] unsigned char 
 13807 ;;  cntr            1    8[BANK1 ] unsigned char 
 13808 ;;  exp             1    4[BANK1 ] unsigned char 
 13809 ;; Return value:  Size  Location     Type
 13810 ;;                  3   38[BANK0 ] float 
 13811 ;; Registers used:
 13812 ;;		wreg, status,2, status,0, pclath, cstack
 13813 ;; Tracked objects:
 13814 ;;		On entry : 0/0
 13815 ;;		On exit  : 0/0
 13816 ;;		Unchanged: 0/0
 13817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13818 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13819 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13820 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13821 ;;      Totals:         0       6      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13822 ;;Total ram usage:       16 bytes
 13823 ;; Hardware stack levels used:    1
 13824 ;; Hardware stack levels required when called:    7
 13825 ;; This function calls:
 13826 ;;		___ftpack
 13827 ;; This function is called by:
 13828 ;;		_main_initialize
 13829 ;;		_setDrvPiezoOnTime
 13830 ;;		_setH1OffTime
 13831 ;;		_setH2OnTime
 13832 ;;		_drv_outputSine
 13833 ;; This function uses a non-reentrant model
 13834 ;;
 13835                           
 13836                           
 13837                           ;psect for function ___ftmul
 13838  0BBF                     ___ftmul:	
 13839                           
 13840                           ;incstack = 0
 13841                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 13842  0BBF  0020               	movlb	0	; select bank0
 13843  0BC0  0846               	movf	___ftmul@f1,w
 13844  0BC1  0021               	movlb	1	; select bank1
 13845  0BC2  00A0               	movwf	??___ftmul^(0+128)
 13846  0BC3  0020               	movlb	0	; select bank0
 13847  0BC4  0847               	movf	___ftmul@f1+1,w
 13848  0BC5  0021               	movlb	1	; select bank1
 13849  0BC6  00A1               	movwf	(??___ftmul^(0+128)+1)
 13850  0BC7  0020               	movlb	0	; select bank0
 13851  0BC8  0848               	movf	___ftmul@f1+2,w
 13852  0BC9  0021               	movlb	1	; select bank1
 13853  0BCA  00A2               	movwf	(??___ftmul^(0+128)+2)
 13854  0BCB  1003               	clrc
 13855  0BCC  0D21               	rlf	(??___ftmul^(0+128)+1),w
 13856  0BCD  0D22               	rlf	(??___ftmul^(0+128)+2),w
 13857  0BCE  00A3               	movwf	(??___ftmul+3)^(0+128)
 13858  0BCF  0823               	movf	(??___ftmul+3)^(0+128),w
 13859  0BD0  00A4               	movwf	___ftmul@exp^(0+128)
 13860  0BD1  0824               	movf	___ftmul@exp^(0+128),w
 13861  0BD2  1D03               	btfss	3,2
 13862  0BD3  2BDC               	goto	l8495
 13863  0BD4  3000               	movlw	0
 13864  0BD5  0020               	movlb	0	; select bank0
 13865  0BD6  00C6               	movwf	?___ftmul
 13866  0BD7  3000               	movlw	0
 13867  0BD8  00C7               	movwf	?___ftmul+1
 13868  0BD9  3000               	movlw	0
 13869  0BDA  00C8               	movwf	?___ftmul+2
 13870  0BDB  0008               	return
 13871  0BDC                     l8495:	
 13872  0BDC  0020               	movlb	0	; select bank0
 13873  0BDD  0849               	movf	___ftmul@f2,w
 13874  0BDE  0021               	movlb	1	; select bank1
 13875  0BDF  00A0               	movwf	??___ftmul^(0+128)
 13876  0BE0  0020               	movlb	0	; select bank0
 13877  0BE1  084A               	movf	___ftmul@f2+1,w
 13878  0BE2  0021               	movlb	1	; select bank1
 13879  0BE3  00A1               	movwf	(??___ftmul^(0+128)+1)
 13880  0BE4  0020               	movlb	0	; select bank0
 13881  0BE5  084B               	movf	___ftmul@f2+2,w
 13882  0BE6  0021               	movlb	1	; select bank1
 13883  0BE7  00A2               	movwf	(??___ftmul^(0+128)+2)
 13884  0BE8  1003               	clrc
 13885  0BE9  0D21               	rlf	(??___ftmul^(0+128)+1),w
 13886  0BEA  0D22               	rlf	(??___ftmul^(0+128)+2),w
 13887  0BEB  00A3               	movwf	(??___ftmul+3)^(0+128)
 13888  0BEC  0823               	movf	(??___ftmul+3)^(0+128),w
 13889  0BED  00A9               	movwf	___ftmul@sign^(0+128)
 13890  0BEE  0829               	movf	___ftmul@sign^(0+128),w
 13891  0BEF  1D03               	btfss	3,2
 13892  0BF0  2BF9               	goto	l8501
 13893  0BF1  3000               	movlw	0
 13894  0BF2  0020               	movlb	0	; select bank0
 13895  0BF3  00C6               	movwf	?___ftmul
 13896  0BF4  3000               	movlw	0
 13897  0BF5  00C7               	movwf	?___ftmul+1
 13898  0BF6  3000               	movlw	0
 13899  0BF7  00C8               	movwf	?___ftmul+2
 13900  0BF8  0008               	return
 13901  0BF9                     l8501:	
 13902  0BF9  0021               	movlb	1	; select bank1
 13903  0BFA  0829               	movf	___ftmul@sign^(0+128),w
 13904  0BFB  3E7B               	addlw	123
 13905  0BFC  00A0               	movwf	??___ftmul^(0+128)
 13906  0BFD  0820               	movf	??___ftmul^(0+128),w
 13907  0BFE  07A4               	addwf	___ftmul@exp^(0+128),f
 13908  0BFF  0020               	movlb	0	; select bank0
 13909  0C00  0846               	movf	___ftmul@f1,w
 13910  0C01  0021               	movlb	1	; select bank1
 13911  0C02  00A0               	movwf	??___ftmul^(0+128)
 13912  0C03  0020               	movlb	0	; select bank0
 13913  0C04  0847               	movf	___ftmul@f1+1,w
 13914  0C05  0021               	movlb	1	; select bank1
 13915  0C06  00A1               	movwf	(??___ftmul^(0+128)+1)
 13916  0C07  0020               	movlb	0	; select bank0
 13917  0C08  0848               	movf	___ftmul@f1+2,w
 13918  0C09  0021               	movlb	1	; select bank1
 13919  0C0A  00A2               	movwf	(??___ftmul^(0+128)+2)
 13920  0C0B  3010               	movlw	16
 13921  0C0C                     u8625:	
 13922  0C0C  36A2               	lsrf	(??___ftmul^(0+128)+2),f
 13923  0C0D  0CA1               	rrf	(??___ftmul^(0+128)+1),f
 13924  0C0E  0CA0               	rrf	??___ftmul^(0+128),f
 13925  0C0F  0B89               	decfsz	9,f
 13926  0C10  2C0C               	goto	u8625
 13927  0C11  0820               	movf	??___ftmul^(0+128),w
 13928  0C12  00A3               	movwf	(??___ftmul+3)^(0+128)
 13929  0C13  0823               	movf	(??___ftmul+3)^(0+128),w
 13930  0C14  00A9               	movwf	___ftmul@sign^(0+128)
 13931  0C15  0020               	movlb	0	; select bank0
 13932  0C16  0849               	movf	___ftmul@f2,w
 13933  0C17  0021               	movlb	1	; select bank1
 13934  0C18  00A0               	movwf	??___ftmul^(0+128)
 13935  0C19  0020               	movlb	0	; select bank0
 13936  0C1A  084A               	movf	___ftmul@f2+1,w
 13937  0C1B  0021               	movlb	1	; select bank1
 13938  0C1C  00A1               	movwf	(??___ftmul^(0+128)+1)
 13939  0C1D  0020               	movlb	0	; select bank0
 13940  0C1E  084B               	movf	___ftmul@f2+2,w
 13941  0C1F  0021               	movlb	1	; select bank1
 13942  0C20  00A2               	movwf	(??___ftmul^(0+128)+2)
 13943  0C21  3010               	movlw	16
 13944  0C22                     u8635:	
 13945  0C22  36A2               	lsrf	(??___ftmul^(0+128)+2),f
 13946  0C23  0CA1               	rrf	(??___ftmul^(0+128)+1),f
 13947  0C24  0CA0               	rrf	??___ftmul^(0+128),f
 13948  0C25  0B89               	decfsz	9,f
 13949  0C26  2C22               	goto	u8635
 13950  0C27  0820               	movf	??___ftmul^(0+128),w
 13951  0C28  00A3               	movwf	(??___ftmul+3)^(0+128)
 13952  0C29  0823               	movf	(??___ftmul+3)^(0+128),w
 13953  0C2A  06A9               	xorwf	___ftmul@sign^(0+128),f
 13954  0C2B  3080               	movlw	128
 13955  0C2C  00A0               	movwf	??___ftmul^(0+128)
 13956  0C2D  0820               	movf	??___ftmul^(0+128),w
 13957  0C2E  05A9               	andwf	___ftmul@sign^(0+128),f
 13958  0C2F  0020               	movlb	0	; select bank0
 13959  0C30  17C7               	bsf	___ftmul@f1+1,7
 13960  0C31  17CA               	bsf	___ftmul@f2+1,7
 13961  0C32  30FF               	movlw	255
 13962  0C33  05C9               	andwf	___ftmul@f2,f
 13963  0C34  30FF               	movlw	255
 13964  0C35  05CA               	andwf	___ftmul@f2+1,f
 13965  0C36  3000               	movlw	0
 13966  0C37  05CB               	andwf	___ftmul@f2+2,f
 13967  0C38  3000               	movlw	0
 13968  0C39  0021               	movlb	1	; select bank1
 13969  0C3A  00A5               	movwf	___ftmul@f3_as_product^(0+128)
 13970  0C3B  3000               	movlw	0
 13971  0C3C  00A6               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 13972  0C3D  3000               	movlw	0
 13973  0C3E  00A7               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 13974  0C3F  3007               	movlw	7
 13975  0C40  00A0               	movwf	??___ftmul^(0+128)
 13976  0C41  0820               	movf	??___ftmul^(0+128),w
 13977  0C42  00A8               	movwf	___ftmul@cntr^(0+128)
 13978  0C43                     l8513:	
 13979  0C43  0020               	movlb	0	; select bank0
 13980  0C44  1C46               	btfss	___ftmul@f1,0
 13981  0C45  2C51               	goto	l8517
 13982  0C46  0849               	movf	___ftmul@f2,w
 13983  0C47  0021               	movlb	1	; select bank1
 13984  0C48  07A5               	addwf	___ftmul@f3_as_product^(0+128),f
 13985  0C49  0020               	movlb	0	; select bank0
 13986  0C4A  084A               	movf	___ftmul@f2+1,w
 13987  0C4B  0021               	movlb	1	; select bank1
 13988  0C4C  3DA6               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 13989  0C4D  0020               	movlb	0	; select bank0
 13990  0C4E  084B               	movf	___ftmul@f2+2,w
 13991  0C4F  0021               	movlb	1	; select bank1
 13992  0C50  3DA7               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 13993  0C51                     l8517:	
 13994  0C51  3001               	movlw	1
 13995  0C52                     u8655:	
 13996  0C52  0020               	movlb	0	; select bank0
 13997  0C53  36C8               	lsrf	___ftmul@f1+2,f
 13998  0C54  0CC7               	rrf	___ftmul@f1+1,f
 13999  0C55  0CC6               	rrf	___ftmul@f1,f
 14000  0C56  0B89               	decfsz	9,f
 14001  0C57  2C52               	goto	u8655
 14002  0C58  3001               	movlw	1
 14003  0C59                     u8665:	
 14004  0C59  35C9               	lslf	___ftmul@f2,f
 14005  0C5A  0DCA               	rlf	___ftmul@f2+1,f
 14006  0C5B  0DCB               	rlf	___ftmul@f2+2,f
 14007  0C5C  0B89               	decfsz	9,f
 14008  0C5D  2C59               	goto	u8665
 14009  0C5E  3001               	movlw	1
 14010  0C5F  0021               	movlb	1	; select bank1
 14011  0C60  02A8               	subwf	___ftmul@cntr^(0+128),f
 14012  0C61  1D03               	btfss	3,2
 14013  0C62  2C43               	goto	l8513
 14014  0C63  3009               	movlw	9
 14015  0C64  00A0               	movwf	??___ftmul^(0+128)
 14016  0C65  0820               	movf	??___ftmul^(0+128),w
 14017  0C66  00A8               	movwf	___ftmul@cntr^(0+128)
 14018  0C67                     l8525:	
 14019  0C67  0020               	movlb	0	; select bank0
 14020  0C68  1C46               	btfss	___ftmul@f1,0
 14021  0C69  2C75               	goto	l8529
 14022  0C6A  0849               	movf	___ftmul@f2,w
 14023  0C6B  0021               	movlb	1	; select bank1
 14024  0C6C  07A5               	addwf	___ftmul@f3_as_product^(0+128),f
 14025  0C6D  0020               	movlb	0	; select bank0
 14026  0C6E  084A               	movf	___ftmul@f2+1,w
 14027  0C6F  0021               	movlb	1	; select bank1
 14028  0C70  3DA6               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 14029  0C71  0020               	movlb	0	; select bank0
 14030  0C72  084B               	movf	___ftmul@f2+2,w
 14031  0C73  0021               	movlb	1	; select bank1
 14032  0C74  3DA7               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 14033  0C75                     l8529:	
 14034  0C75  3001               	movlw	1
 14035  0C76                     u8695:	
 14036  0C76  0020               	movlb	0	; select bank0
 14037  0C77  36C8               	lsrf	___ftmul@f1+2,f
 14038  0C78  0CC7               	rrf	___ftmul@f1+1,f
 14039  0C79  0CC6               	rrf	___ftmul@f1,f
 14040  0C7A  0B89               	decfsz	9,f
 14041  0C7B  2C76               	goto	u8695
 14042  0C7C  3001               	movlw	1
 14043  0C7D                     u8705:	
 14044  0C7D  0021               	movlb	1	; select bank1
 14045  0C7E  36A7               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 14046  0C7F  0CA6               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 14047  0C80  0CA5               	rrf	___ftmul@f3_as_product^(0+128),f
 14048  0C81  0B89               	decfsz	9,f
 14049  0C82  2C7D               	goto	u8705
 14050  0C83  3001               	movlw	1
 14051  0C84  02A8               	subwf	___ftmul@cntr^(0+128),f
 14052  0C85  1D03               	btfss	3,2
 14053  0C86  2C67               	goto	l8525
 14054  0C87  0825               	movf	___ftmul@f3_as_product^(0+128),w
 14055  0C88  0020               	movlb	0	; select bank0
 14056  0C89  00B1               	movwf	___ftpack@arg
 14057  0C8A  0021               	movlb	1	; select bank1
 14058  0C8B  0826               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 14059  0C8C  0020               	movlb	0	; select bank0
 14060  0C8D  00B2               	movwf	___ftpack@arg+1
 14061  0C8E  0021               	movlb	1	; select bank1
 14062  0C8F  0827               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 14063  0C90  0020               	movlb	0	; select bank0
 14064  0C91  00B3               	movwf	___ftpack@arg+2
 14065  0C92  0021               	movlb	1	; select bank1
 14066  0C93  0824               	movf	___ftmul@exp^(0+128),w
 14067  0C94  00A0               	movwf	??___ftmul^(0+128)
 14068  0C95  0820               	movf	??___ftmul^(0+128),w
 14069  0C96  0020               	movlb	0	; select bank0
 14070  0C97  00B4               	movwf	___ftpack@exp
 14071  0C98  0021               	movlb	1	; select bank1
 14072  0C99  0829               	movf	___ftmul@sign^(0+128),w
 14073  0C9A  00A1               	movwf	(??___ftmul+1)^(0+128)
 14074  0C9B  0821               	movf	(??___ftmul+1)^(0+128),w
 14075  0C9C  0020               	movlb	0	; select bank0
 14076  0C9D  00B5               	movwf	___ftpack@sign
 14077  0C9E  319F  272A         	fcall	___ftpack
 14078  0CA0  0020               	movlb	0	; select bank0
 14079  0CA1  0831               	movf	?___ftpack,w
 14080  0CA2  00C6               	movwf	?___ftmul
 14081  0CA3  0832               	movf	?___ftpack+1,w
 14082  0CA4  00C7               	movwf	?___ftmul+1
 14083  0CA5  0833               	movf	?___ftpack+2,w
 14084  0CA6  00C8               	movwf	?___ftmul+2
 14085  0CA7  0008               	return
 14086  0CA8                     __end_of___ftmul:	
 14087                           
 14088                           	psect	text36
 14089  2FB2                     __ptext36:	
 14090 ;; *************** function _TMR0_Load8bitPeriod *****************
 14091 ;; Defined at:
 14092 ;;		line 113 in file "mcc_generated_files/tmr0.c"
 14093 ;; Parameters:    Size  Location     Type
 14094 ;;  periodVal       1    wreg     unsigned char 
 14095 ;; Auto vars:     Size  Location     Type
 14096 ;;  periodVal       1   17[BANK0 ] unsigned char 
 14097 ;; Return value:  Size  Location     Type
 14098 ;;                  1    wreg      void 
 14099 ;; Registers used:
 14100 ;;		wreg
 14101 ;; Tracked objects:
 14102 ;;		On entry : 0/0
 14103 ;;		On exit  : 0/0
 14104 ;;		Unchanged: 0/0
 14105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14107 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14109 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14110 ;;Total ram usage:        1 bytes
 14111 ;; Hardware stack levels used:    1
 14112 ;; Hardware stack levels required when called:    6
 14113 ;; This function calls:
 14114 ;;		Nothing
 14115 ;; This function is called by:
 14116 ;;		_main_initialize
 14117 ;;		_setDrvPiezoOnTime
 14118 ;;		_setH2OnTime
 14119 ;; This function uses a non-reentrant model
 14120 ;;
 14121                           
 14122                           
 14123                           ;psect for function _TMR0_Load8bitPeriod
 14124  2FB2                     _TMR0_Load8bitPeriod:	
 14125                           
 14126                           ;incstack = 0
 14127                           ; Regs used in _TMR0_Load8bitPeriod: [wreg]
 14128                           ;TMR0_Load8bitPeriod@periodVal stored from wreg
 14129  2FB2  0020               	movlb	0	; select bank0
 14130  2FB3  00B1               	movwf	TMR0_Load8bitPeriod@periodVal
 14131                           
 14132                           ;tmr0.c: 116: TMR0H = periodVal;
 14133  2FB4  0831               	movf	TMR0_Load8bitPeriod@periodVal,w
 14134  2FB5  0096               	movwf	22	;volatile
 14135  2FB6  0008               	return
 14136  2FB7                     __end_of_TMR0_Load8bitPeriod:	
 14137                           
 14138                           	psect	text37
 14139  235A                     __ptext37:	
 14140 ;; *************** function _setDrvPeak *****************
 14141 ;; Defined at:
 14142 ;;		line 409 in file "main.c"
 14143 ;; Parameters:    Size  Location     Type
 14144 ;;  pk              2   53[BANK1 ] int 
 14145 ;; Auto vars:     Size  Location     Type
 14146 ;;		None
 14147 ;; Return value:  Size  Location     Type
 14148 ;;                  2   53[BANK1 ] int 
 14149 ;; Registers used:
 14150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14151 ;; Tracked objects:
 14152 ;;		On entry : 0/0
 14153 ;;		On exit  : 0/0
 14154 ;;		Unchanged: 0/0
 14155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14156 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14159 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14160 ;;Total ram usage:        2 bytes
 14161 ;; Hardware stack levels used:    1
 14162 ;; Hardware stack levels required when called:   11
 14163 ;; This function calls:
 14164 ;;		_calcDownstroke
 14165 ;;		_calcUpstroke
 14166 ;;		_printf
 14167 ;; This function is called by:
 14168 ;;		_execCmd
 14169 ;; This function uses a non-reentrant model
 14170 ;;
 14171                           
 14172                           
 14173                           ;psect for function _setDrvPeak
 14174  235A                     _setDrvPeak:	
 14175                           
 14176                           ;main.c: 410: drv_peak_val = pk;
 14177                           
 14178                           ;incstack = 0
 14179                           ; Regs used in _setDrvPeak: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14180  235A  0021               	movlb	1	; select bank1
 14181  235B  0856               	movf	(setDrvPeak@pk+1)^(0+128),w
 14182  235C  00EF               	movwf	(_drv_peak_val+1)^(0+128)
 14183  235D  0855               	movf	setDrvPeak@pk^(0+128),w
 14184  235E  00EE               	movwf	_drv_peak_val^(0+128)
 14185                           
 14186                           ;main.c: 411: calcUpstroke(drv_peak_val);
 14187  235F  086F               	movf	(_drv_peak_val+1)^(0+128),w
 14188  2360  00D4               	movwf	(calcUpstroke@maxVal+1)^(0+128)
 14189  2361  086E               	movf	_drv_peak_val^(0+128),w
 14190  2362  00D3               	movwf	calcUpstroke@maxVal^(0+128)
 14191  2363  3195  257E  31A3   	fcall	_calcUpstroke
 14192                           
 14193                           ;main.c: 412: calcDownstroke(drv_peak_val);
 14194  2366  0021               	movlb	1	; select bank1
 14195  2367  086F               	movf	(_drv_peak_val+1)^(0+128),w
 14196  2368  00D4               	movwf	(calcDownstroke@maxVal+1)^(0+128)
 14197  2369  086E               	movf	_drv_peak_val^(0+128),w
 14198  236A  00D3               	movwf	calcDownstroke@maxVal^(0+128)
 14199  236B  3188  20C3  31A3   	fcall	_calcDownstroke
 14200                           
 14201                           ;main.c: 413: printf("A\n");
 14202  236E  3046               	movlw	low (STR_8| (0+32768))
 14203  236F  0021               	movlb	1	; select bank1
 14204  2370  00A0               	movwf	printf@f^(0+128)
 14205  2371  30B0               	movlw	high (STR_8| (0+32768))
 14206  2372  00A1               	movwf	(printf@f^(0+128)+1)
 14207  2373  318E  26CE         	fcall	_printf
 14208                           
 14209                           ;main.c: 414: return 0;
 14210  2375  0021               	movlb	1	; select bank1
 14211  2376  01D5               	clrf	?_setDrvPeak^(0+128)
 14212  2377  01D6               	clrf	(?_setDrvPeak+1)^(0+128)
 14213  2378  0008               	return
 14214  2379                     __end_of_setDrvPeak:	
 14215                           
 14216                           	psect	text38
 14217  157E                     __ptext38:	
 14218 ;; *************** function _calcUpstroke *****************
 14219 ;; Defined at:
 14220 ;;		line 151 in file "drv2665.c"
 14221 ;; Parameters:    Size  Location     Type
 14222 ;;  maxVal          2   51[BANK1 ] int 
 14223 ;; Auto vars:     Size  Location     Type
 14224 ;;  i               2    3[BANK3 ] int 
 14225 ;; Return value:  Size  Location     Type
 14226 ;;                  1    wreg      void 
 14227 ;; Registers used:
 14228 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14229 ;; Tracked objects:
 14230 ;;		On entry : 0/0
 14231 ;;		On exit  : 0/0
 14232 ;;		Unchanged: 0/0
 14233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14234 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14235 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14236 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14237 ;;      Totals:         0       1       2       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14238 ;;Total ram usage:        8 bytes
 14239 ;; Hardware stack levels used:    1
 14240 ;; Hardware stack levels required when called:   10
 14241 ;; This function calls:
 14242 ;;		___awdiv
 14243 ;;		___awtoft
 14244 ;;		___fttol
 14245 ;;		___wmul
 14246 ;;		_round
 14247 ;; This function is called by:
 14248 ;;		_setDrvPeak
 14249 ;;		_drv_init
 14250 ;; This function uses a non-reentrant model
 14251 ;;
 14252                           
 14253                           
 14254                           ;psect for function _calcUpstroke
 14255  157E                     _calcUpstroke:	
 14256                           
 14257                           ;drv2665.c: 153: drv_fifo_upstroke[0] = 0x0b;
 14258                           
 14259                           ;incstack = 0
 14260                           ; Regs used in _calcUpstroke: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14261  157E  300B               	movlw	11
 14262  157F  0020               	movlb	0	; select bank0
 14263  1580  00CD               	movwf	??_calcUpstroke
 14264  1581  084D               	movf	??_calcUpstroke,w
 14265  1582  0024               	movlb	4	; select bank4
 14266  1583  00A0               	movwf	_drv_fifo_upstroke^(0+512)
 14267                           
 14268                           ;drv2665.c: 154: for(int i = 1; i < 40; i++){
 14269  1584  3001               	movlw	1
 14270  1585  0023               	movlb	3	; select bank3
 14271  1586  00DC               	movwf	calcUpstroke@i^(0+384)
 14272  1587  3000               	movlw	0
 14273  1588  00DD               	movwf	(calcUpstroke@i^(0+384)+1)
 14274  1589                     L27:	
 14275  1589  085D               	movf	(calcUpstroke@i+1)^(0+384),w
 14276  158A  3A80               	xorlw	128
 14277  158B  0020               	movlb	0	; select bank0
 14278  158C  00CD               	movwf	??_calcUpstroke
 14279  158D  3080               	movlw	128
 14280  158E  024D               	subwf	??_calcUpstroke,w
 14281  158F  1D03               	skipz
 14282  1590  2D94               	goto	u8545
 14283  1591  3028               	movlw	40
 14284  1592  0023               	movlb	3	; select bank3
 14285  1593  025C               	subwf	calcUpstroke@i^(0+384),w
 14286  1594                     u8545:	
 14287  1594  1803               	btfsc	3,0
 14288  1595  0008               	return
 14289                           
 14290                           ;drv2665.c: 155: drv_fifo_upstroke[i] = (char)round(i*maxVal/40);
 14291  1596  0021               	movlb	1	; select bank1
 14292  1597  0854               	movf	(calcUpstroke@maxVal+1)^(0+128),w
 14293  1598  0020               	movlb	0	; select bank0
 14294  1599  00B4               	movwf	___wmul@multiplicand+1
 14295  159A  0021               	movlb	1	; select bank1
 14296  159B  0853               	movf	calcUpstroke@maxVal^(0+128),w
 14297  159C  0020               	movlb	0	; select bank0
 14298  159D  00B3               	movwf	___wmul@multiplicand
 14299  159E  0023               	movlb	3	; select bank3
 14300  159F  085D               	movf	(calcUpstroke@i+1)^(0+384),w
 14301  15A0  0020               	movlb	0	; select bank0
 14302  15A1  00B2               	movwf	___wmul@multiplier+1
 14303  15A2  0023               	movlb	3	; select bank3
 14304  15A3  085C               	movf	calcUpstroke@i^(0+384),w
 14305  15A4  0020               	movlb	0	; select bank0
 14306  15A5  00B1               	movwf	___wmul@multiplier
 14307  15A6  31A2  22C7  3195   	fcall	___wmul
 14308  15A9  0020               	movlb	0	; select bank0
 14309  15AA  0832               	movf	?___wmul+1,w
 14310  15AB  00BA               	movwf	___awdiv@dividend+1
 14311  15AC  0831               	movf	?___wmul,w
 14312  15AD  00B9               	movwf	___awdiv@dividend
 14313  15AE  3028               	movlw	40
 14314  15AF  00B7               	movwf	___awdiv@divisor
 14315  15B0  3000               	movlw	0
 14316  15B1  00B8               	movwf	___awdiv@divisor+1
 14317  15B2  319C  24BF  3195   	fcall	___awdiv
 14318  15B5  0020               	movlb	0	; select bank0
 14319  15B6  0838               	movf	?___awdiv+1,w
 14320  15B7  00C1               	movwf	___awtoft@c+1
 14321  15B8  0837               	movf	?___awdiv,w
 14322  15B9  00C0               	movwf	___awtoft@c
 14323  15BA  31A4  241B  3195   	fcall	___awtoft
 14324  15BD  0020               	movlb	0	; select bank0
 14325  15BE  0840               	movf	?___awtoft,w
 14326  15BF  0021               	movlb	1	; select bank1
 14327  15C0  00CD               	movwf	round@x^(0+128)
 14328  15C1  0020               	movlb	0	; select bank0
 14329  15C2  0841               	movf	?___awtoft+1,w
 14330  15C3  0021               	movlb	1	; select bank1
 14331  15C4  00CE               	movwf	(round@x+1)^(0+128)
 14332  15C5  0020               	movlb	0	; select bank0
 14333  15C6  0842               	movf	?___awtoft+2,w
 14334  15C7  0021               	movlb	1	; select bank1
 14335  15C8  00CF               	movwf	(round@x+2)^(0+128)
 14336  15C9  3191  21E6  3195   	fcall	_round
 14337  15CC  0021               	movlb	1	; select bank1
 14338  15CD  084D               	movf	?_round^(0+128),w
 14339  15CE  0023               	movlb	3	; select bank3
 14340  15CF  00D9               	movwf	_calcUpstroke$2995^(0+384)
 14341  15D0  0021               	movlb	1	; select bank1
 14342  15D1  084E               	movf	(?_round+1)^(0+128),w
 14343  15D2  0023               	movlb	3	; select bank3
 14344  15D3  00DA               	movwf	(_calcUpstroke$2995+1)^(0+384)
 14345  15D4  0021               	movlb	1	; select bank1
 14346  15D5  084F               	movf	(?_round+2)^(0+128),w
 14347  15D6  0023               	movlb	3	; select bank3
 14348  15D7  00DB               	movwf	(_calcUpstroke$2995+2)^(0+384)
 14349                           
 14350                           ;drv2665.c: 155: drv_fifo_upstroke[i] = (char)round(i*maxVal/40);
 14351  15D8  0859               	movf	_calcUpstroke$2995^(0+384),w
 14352  15D9  0021               	movlb	1	; select bank1
 14353  15DA  00B7               	movwf	___fttol@f1^(0+128)
 14354  15DB  0023               	movlb	3	; select bank3
 14355  15DC  085A               	movf	(_calcUpstroke$2995+1)^(0+384),w
 14356  15DD  0021               	movlb	1	; select bank1
 14357  15DE  00B8               	movwf	(___fttol@f1+1)^(0+128)
 14358  15DF  0023               	movlb	3	; select bank3
 14359  15E0  085B               	movf	(_calcUpstroke$2995+2)^(0+384),w
 14360  15E1  0021               	movlb	1	; select bank1
 14361  15E2  00B9               	movwf	(___fttol@f1+2)^(0+128)
 14362  15E3  3197  2779  3195   	fcall	___fttol
 14363  15E6  0021               	movlb	1	; select bank1
 14364  15E7  0837               	movf	?___fttol^(0+128),w
 14365  15E8  0020               	movlb	0	; select bank0
 14366  15E9  00CD               	movwf	??_calcUpstroke
 14367  15EA  0023               	movlb	3	; select bank3
 14368  15EB  085C               	movf	calcUpstroke@i^(0+384),w
 14369  15EC  3E20               	addlw	(low (_drv_fifo_upstroke| (0+512)))& (0+255)
 14370  15ED  0086               	movwf	6
 14371  15EE  3002               	movlw	2	; select bank4/5
 14372  15EF  0087               	movwf	7
 14373  15F0  0020               	movlb	0	; select bank0
 14374  15F1  084D               	movf	??_calcUpstroke,w
 14375  15F2  0081               	movwf	1
 14376  15F3  3001               	movlw	1
 14377  15F4  0023               	movlb	3	; select bank3
 14378  15F5  07DC               	addwf	calcUpstroke@i^(0+384),f
 14379  15F6  3000               	movlw	0
 14380  15F7  3DDD               	addwfc	(calcUpstroke@i+1)^(0+384),f
 14381  15F8  2D89               	goto	L27
 14382  15F9                     __end_of_calcUpstroke:	
 14383                           
 14384                           	psect	text39
 14385  08C3                     __ptext39:	
 14386 ;; *************** function _calcDownstroke *****************
 14387 ;; Defined at:
 14388 ;;		line 159 in file "drv2665.c"
 14389 ;; Parameters:    Size  Location     Type
 14390 ;;  maxVal          2   51[BANK1 ] int 
 14391 ;; Auto vars:     Size  Location     Type
 14392 ;;  i               2    3[BANK3 ] int 
 14393 ;; Return value:  Size  Location     Type
 14394 ;;                  1    wreg      void 
 14395 ;; Registers used:
 14396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14397 ;; Tracked objects:
 14398 ;;		On entry : 0/0
 14399 ;;		On exit  : 0/0
 14400 ;;		Unchanged: 0/0
 14401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14402 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14403 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14404 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14405 ;;      Totals:         0       1       2       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14406 ;;Total ram usage:        8 bytes
 14407 ;; Hardware stack levels used:    1
 14408 ;; Hardware stack levels required when called:   10
 14409 ;; This function calls:
 14410 ;;		___awdiv
 14411 ;;		___awtoft
 14412 ;;		___ftadd
 14413 ;;		___ftneg
 14414 ;;		___fttol
 14415 ;;		___wmul
 14416 ;;		_round
 14417 ;; This function is called by:
 14418 ;;		_setDrvPeak
 14419 ;;		_drv_init
 14420 ;; This function uses a non-reentrant model
 14421 ;;
 14422                           
 14423                           
 14424                           ;psect for function _calcDownstroke
 14425  08C3                     _calcDownstroke:	
 14426                           
 14427                           ;drv2665.c: 160: drv_fifo_downstroke[0] = 0x0b;
 14428                           
 14429                           ;incstack = 0
 14430                           ; Regs used in _calcDownstroke: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14431  08C3  300B               	movlw	11
 14432  08C4  0020               	movlb	0	; select bank0
 14433  08C5  00CD               	movwf	??_calcDownstroke
 14434  08C6  084D               	movf	??_calcDownstroke,w
 14435  08C7  0025               	movlb	5	; select bank5
 14436  08C8  00A0               	movwf	_drv_fifo_downstroke^(0+640)
 14437                           
 14438                           ;drv2665.c: 161: for(int i = 1; i < 40; i++){
 14439  08C9  3001               	movlw	1
 14440  08CA  0023               	movlb	3	; select bank3
 14441  08CB  00DC               	movwf	calcDownstroke@i^(0+384)
 14442  08CC  3000               	movlw	0
 14443  08CD  00DD               	movwf	(calcDownstroke@i^(0+384)+1)
 14444  08CE                     L28:	
 14445  08CE  085D               	movf	(calcDownstroke@i+1)^(0+384),w
 14446  08CF  3A80               	xorlw	128
 14447  08D0  0020               	movlb	0	; select bank0
 14448  08D1  00CD               	movwf	??_calcDownstroke
 14449  08D2  3080               	movlw	128
 14450  08D3  024D               	subwf	??_calcDownstroke,w
 14451  08D4  1D03               	skipz
 14452  08D5  28D9               	goto	u8565
 14453  08D6  3028               	movlw	40
 14454  08D7  0023               	movlb	3	; select bank3
 14455  08D8  025C               	subwf	calcDownstroke@i^(0+384),w
 14456  08D9                     u8565:	
 14457  08D9  1803               	btfsc	3,0
 14458  08DA  0008               	return
 14459                           
 14460                           ;drv2665.c: 162: drv_fifo_downstroke[i] = (char)(maxVal - round(i*maxVal/40));
 14461  08DB  0021               	movlb	1	; select bank1
 14462  08DC  0854               	movf	(calcDownstroke@maxVal+1)^(0+128),w
 14463  08DD  0020               	movlb	0	; select bank0
 14464  08DE  00B4               	movwf	___wmul@multiplicand+1
 14465  08DF  0021               	movlb	1	; select bank1
 14466  08E0  0853               	movf	calcDownstroke@maxVal^(0+128),w
 14467  08E1  0020               	movlb	0	; select bank0
 14468  08E2  00B3               	movwf	___wmul@multiplicand
 14469  08E3  0023               	movlb	3	; select bank3
 14470  08E4  085D               	movf	(calcDownstroke@i+1)^(0+384),w
 14471  08E5  0020               	movlb	0	; select bank0
 14472  08E6  00B2               	movwf	___wmul@multiplier+1
 14473  08E7  0023               	movlb	3	; select bank3
 14474  08E8  085C               	movf	calcDownstroke@i^(0+384),w
 14475  08E9  0020               	movlb	0	; select bank0
 14476  08EA  00B1               	movwf	___wmul@multiplier
 14477  08EB  31A2  22C7  3188   	fcall	___wmul
 14478  08EE  0020               	movlb	0	; select bank0
 14479  08EF  0832               	movf	?___wmul+1,w
 14480  08F0  00BA               	movwf	___awdiv@dividend+1
 14481  08F1  0831               	movf	?___wmul,w
 14482  08F2  00B9               	movwf	___awdiv@dividend
 14483  08F3  3028               	movlw	40
 14484  08F4  00B7               	movwf	___awdiv@divisor
 14485  08F5  3000               	movlw	0
 14486  08F6  00B8               	movwf	___awdiv@divisor+1
 14487  08F7  319C  24BF  3188   	fcall	___awdiv
 14488  08FA  0020               	movlb	0	; select bank0
 14489  08FB  0838               	movf	?___awdiv+1,w
 14490  08FC  00C1               	movwf	___awtoft@c+1
 14491  08FD  0837               	movf	?___awdiv,w
 14492  08FE  00C0               	movwf	___awtoft@c
 14493  08FF  31A4  241B  3188   	fcall	___awtoft
 14494  0902  0020               	movlb	0	; select bank0
 14495  0903  0840               	movf	?___awtoft,w
 14496  0904  0021               	movlb	1	; select bank1
 14497  0905  00CD               	movwf	round@x^(0+128)
 14498  0906  0020               	movlb	0	; select bank0
 14499  0907  0841               	movf	?___awtoft+1,w
 14500  0908  0021               	movlb	1	; select bank1
 14501  0909  00CE               	movwf	(round@x+1)^(0+128)
 14502  090A  0020               	movlb	0	; select bank0
 14503  090B  0842               	movf	?___awtoft+2,w
 14504  090C  0021               	movlb	1	; select bank1
 14505  090D  00CF               	movwf	(round@x+2)^(0+128)
 14506  090E  3191  21E6  3188   	fcall	_round
 14507  0911  0021               	movlb	1	; select bank1
 14508  0912  084D               	movf	?_round^(0+128),w
 14509  0913  0023               	movlb	3	; select bank3
 14510  0914  00D9               	movwf	_calcDownstroke$2996^(0+384)
 14511  0915  0021               	movlb	1	; select bank1
 14512  0916  084E               	movf	(?_round+1)^(0+128),w
 14513  0917  0023               	movlb	3	; select bank3
 14514  0918  00DA               	movwf	(_calcDownstroke$2996+1)^(0+384)
 14515  0919  0021               	movlb	1	; select bank1
 14516  091A  084F               	movf	(?_round+2)^(0+128),w
 14517  091B  0023               	movlb	3	; select bank3
 14518  091C  00DB               	movwf	(_calcDownstroke$2996+2)^(0+384)
 14519                           
 14520                           ;drv2665.c: 162: drv_fifo_downstroke[i] = (char)(maxVal - round(i*maxVal/40));
 14521  091D  0021               	movlb	1	; select bank1
 14522  091E  0854               	movf	(calcDownstroke@maxVal+1)^(0+128),w
 14523  091F  0020               	movlb	0	; select bank0
 14524  0920  00C1               	movwf	___awtoft@c+1
 14525  0921  0021               	movlb	1	; select bank1
 14526  0922  0853               	movf	calcDownstroke@maxVal^(0+128),w
 14527  0923  0020               	movlb	0	; select bank0
 14528  0924  00C0               	movwf	___awtoft@c
 14529  0925  31A4  241B  3188   	fcall	___awtoft
 14530  0928  0020               	movlb	0	; select bank0
 14531  0929  0840               	movf	?___awtoft,w
 14532  092A  0021               	movlb	1	; select bank1
 14533  092B  00AD               	movwf	___ftadd@f2^(0+128)
 14534  092C  0020               	movlb	0	; select bank0
 14535  092D  0841               	movf	?___awtoft+1,w
 14536  092E  0021               	movlb	1	; select bank1
 14537  092F  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 14538  0930  0020               	movlb	0	; select bank0
 14539  0931  0842               	movf	?___awtoft+2,w
 14540  0932  0021               	movlb	1	; select bank1
 14541  0933  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 14542  0934  0023               	movlb	3	; select bank3
 14543  0935  0859               	movf	_calcDownstroke$2996^(0+384),w
 14544  0936  0020               	movlb	0	; select bank0
 14545  0937  00C6               	movwf	___ftneg@f1
 14546  0938  0023               	movlb	3	; select bank3
 14547  0939  085A               	movf	(_calcDownstroke$2996+1)^(0+384),w
 14548  093A  0020               	movlb	0	; select bank0
 14549  093B  00C7               	movwf	___ftneg@f1+1
 14550  093C  0023               	movlb	3	; select bank3
 14551  093D  085B               	movf	(_calcDownstroke$2996+2)^(0+384),w
 14552  093E  0020               	movlb	0	; select bank0
 14553  093F  00C8               	movwf	___ftneg@f1+2
 14554  0940  31A0  2097  3188   	fcall	___ftneg
 14555  0943  0020               	movlb	0	; select bank0
 14556  0944  0846               	movf	?___ftneg,w
 14557  0945  0021               	movlb	1	; select bank1
 14558  0946  00AA               	movwf	___ftadd@f1^(0+128)
 14559  0947  0020               	movlb	0	; select bank0
 14560  0948  0847               	movf	?___ftneg+1,w
 14561  0949  0021               	movlb	1	; select bank1
 14562  094A  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 14563  094B  0020               	movlb	0	; select bank0
 14564  094C  0848               	movf	?___ftneg+2,w
 14565  094D  0021               	movlb	1	; select bank1
 14566  094E  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 14567  094F  318C  24A8  3188   	fcall	___ftadd
 14568  0952  0021               	movlb	1	; select bank1
 14569  0953  082A               	movf	?___ftadd^(0+128),w
 14570  0954  00B7               	movwf	___fttol@f1^(0+128)
 14571  0955  082B               	movf	(?___ftadd+1)^(0+128),w
 14572  0956  00B8               	movwf	(___fttol@f1+1)^(0+128)
 14573  0957  082C               	movf	(?___ftadd+2)^(0+128),w
 14574  0958  00B9               	movwf	(___fttol@f1+2)^(0+128)
 14575  0959  3197  2779  3188   	fcall	___fttol
 14576  095C  0021               	movlb	1	; select bank1
 14577  095D  0837               	movf	?___fttol^(0+128),w
 14578  095E  0020               	movlb	0	; select bank0
 14579  095F  00CD               	movwf	??_calcDownstroke
 14580  0960  0023               	movlb	3	; select bank3
 14581  0961  085C               	movf	calcDownstroke@i^(0+384),w
 14582  0962  3EA0               	addlw	(low (_drv_fifo_downstroke| (0+512)))& (0+255)
 14583  0963  0086               	movwf	6
 14584  0964  3002               	movlw	2	; select bank5/6
 14585  0965  0087               	movwf	7
 14586  0966  0020               	movlb	0	; select bank0
 14587  0967  084D               	movf	??_calcDownstroke,w
 14588  0968  0081               	movwf	1
 14589  0969  3001               	movlw	1
 14590  096A  0023               	movlb	3	; select bank3
 14591  096B  07DC               	addwf	calcDownstroke@i^(0+384),f
 14592  096C  3000               	movlw	0
 14593  096D  3DDD               	addwfc	(calcDownstroke@i+1)^(0+384),f
 14594  096E  28CE               	goto	L28
 14595  096F                     __end_of_calcDownstroke:	
 14596                           
 14597                           	psect	text40
 14598  11E6                     __ptext40:	
 14599 ;; *************** function _round *****************
 14600 ;; Defined at:
 14601 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\round.c"
 14602 ;; Parameters:    Size  Location     Type
 14603 ;;  x               3   45[BANK1 ] void 
 14604 ;; Auto vars:     Size  Location     Type
 14605 ;;  f               3   48[BANK1 ] void 
 14606 ;; Return value:  Size  Location     Type
 14607 ;;                  3   45[BANK1 ] void 
 14608 ;; Registers used:
 14609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14610 ;; Tracked objects:
 14611 ;;		On entry : 0/0
 14612 ;;		On exit  : 0/0
 14613 ;;		Unchanged: 0/0
 14614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14615 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14616 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14618 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14619 ;;Total ram usage:        6 bytes
 14620 ;; Hardware stack levels used:    1
 14621 ;; Hardware stack levels required when called:    9
 14622 ;; This function calls:
 14623 ;;		___ftadd
 14624 ;;		___ftneg
 14625 ;;		_trunc
 14626 ;; This function is called by:
 14627 ;;		_calcUpstroke
 14628 ;;		_calcDownstroke
 14629 ;; This function uses a non-reentrant model
 14630 ;;
 14631                           
 14632                           
 14633                           ;psect for function _round
 14634  11E6                     _round:	
 14635                           
 14636                           ;incstack = 0
 14637                           ; Regs used in _round: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14638  11E6  0021               	movlb	1	; select bank1
 14639  11E7  084D               	movf	round@x^(0+128),w
 14640  11E8  00AA               	movwf	___ftadd@f1^(0+128)
 14641  11E9  084E               	movf	(round@x+1)^(0+128),w
 14642  11EA  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 14643  11EB  084F               	movf	(round@x+2)^(0+128),w
 14644  11EC  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 14645  11ED  084D               	movf	round@x^(0+128),w
 14646  11EE  00C5               	movwf	trunc@x^(0+128)
 14647  11EF  084E               	movf	(round@x+1)^(0+128),w
 14648  11F0  00C6               	movwf	(trunc@x+1)^(0+128)
 14649  11F1  084F               	movf	(round@x+2)^(0+128),w
 14650  11F2  00C7               	movwf	(trunc@x+2)^(0+128)
 14651  11F3  319D  2511  3191   	fcall	_trunc
 14652  11F6  0021               	movlb	1	; select bank1
 14653  11F7  0845               	movf	?_trunc^(0+128),w
 14654  11F8  0020               	movlb	0	; select bank0
 14655  11F9  00C6               	movwf	___ftneg@f1
 14656  11FA  0021               	movlb	1	; select bank1
 14657  11FB  0846               	movf	(?_trunc+1)^(0+128),w
 14658  11FC  0020               	movlb	0	; select bank0
 14659  11FD  00C7               	movwf	___ftneg@f1+1
 14660  11FE  0021               	movlb	1	; select bank1
 14661  11FF  0847               	movf	(?_trunc+2)^(0+128),w
 14662  1200  0020               	movlb	0	; select bank0
 14663  1201  00C8               	movwf	___ftneg@f1+2
 14664  1202  31A0  2097  3191   	fcall	___ftneg
 14665  1205  0020               	movlb	0	; select bank0
 14666  1206  0846               	movf	?___ftneg,w
 14667  1207  0021               	movlb	1	; select bank1
 14668  1208  00AD               	movwf	___ftadd@f2^(0+128)
 14669  1209  0020               	movlb	0	; select bank0
 14670  120A  0847               	movf	?___ftneg+1,w
 14671  120B  0021               	movlb	1	; select bank1
 14672  120C  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 14673  120D  0020               	movlb	0	; select bank0
 14674  120E  0848               	movf	?___ftneg+2,w
 14675  120F  0021               	movlb	1	; select bank1
 14676  1210  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 14677  1211  318C  24A8  3191   	fcall	___ftadd
 14678  1214  0021               	movlb	1	; select bank1
 14679  1215  082A               	movf	?___ftadd^(0+128),w
 14680  1216  00D0               	movwf	round@f^(0+128)
 14681  1217  082B               	movf	(?___ftadd+1)^(0+128),w
 14682  1218  00D1               	movwf	(round@f+1)^(0+128)
 14683  1219  082C               	movf	(?___ftadd+2)^(0+128),w
 14684  121A  00D2               	movwf	(round@f+2)^(0+128)
 14685  121B  0850               	movf	round@f^(0+128),w
 14686  121C  00AA               	movwf	___ftadd@f1^(0+128)
 14687  121D  0851               	movf	(round@f+1)^(0+128),w
 14688  121E  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 14689  121F  0852               	movf	(round@f+2)^(0+128),w
 14690  1220  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 14691  1221  084D               	movf	round@x^(0+128),w
 14692  1222  00AD               	movwf	___ftadd@f2^(0+128)
 14693  1223  084E               	movf	(round@x+1)^(0+128),w
 14694  1224  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 14695  1225  084F               	movf	(round@x+2)^(0+128),w
 14696  1226  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 14697  1227  318C  24A8  3191   	fcall	___ftadd
 14698  122A  0021               	movlb	1	; select bank1
 14699  122B  082A               	movf	?___ftadd^(0+128),w
 14700  122C  00CD               	movwf	round@x^(0+128)
 14701  122D  082B               	movf	(?___ftadd+1)^(0+128),w
 14702  122E  00CE               	movwf	(round@x+1)^(0+128)
 14703  122F  082C               	movf	(?___ftadd+2)^(0+128),w
 14704  1230  00CF               	movwf	(round@x+2)^(0+128)
 14705  1231  084D               	movf	round@x^(0+128),w
 14706  1232  00C5               	movwf	trunc@x^(0+128)
 14707  1233  084E               	movf	(round@x+1)^(0+128),w
 14708  1234  00C6               	movwf	(trunc@x+1)^(0+128)
 14709  1235  084F               	movf	(round@x+2)^(0+128),w
 14710  1236  00C7               	movwf	(trunc@x+2)^(0+128)
 14711  1237  319D  2511         	fcall	_trunc
 14712  1239  0021               	movlb	1	; select bank1
 14713  123A  0845               	movf	?_trunc^(0+128),w
 14714  123B  00CD               	movwf	?_round^(0+128)
 14715  123C  0846               	movf	(?_trunc+1)^(0+128),w
 14716  123D  00CE               	movwf	(?_round+1)^(0+128)
 14717  123E  0847               	movf	(?_trunc+2)^(0+128),w
 14718  123F  00CF               	movwf	(?_round+2)^(0+128)
 14719  1240  0008               	return
 14720  1241                     __end_of_round:	
 14721                           
 14722                           	psect	text41
 14723  1D11                     __ptext41:	
 14724 ;; *************** function _trunc *****************
 14725 ;; Defined at:
 14726 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\trunc.c"
 14727 ;; Parameters:    Size  Location     Type
 14728 ;;  x               3   37[BANK1 ] void 
 14729 ;; Auto vars:     Size  Location     Type
 14730 ;;  i               3   40[BANK1 ] void 
 14731 ;;  expon           2   43[BANK1 ] int 
 14732 ;; Return value:  Size  Location     Type
 14733 ;;                  3   37[BANK1 ] int 
 14734 ;; Registers used:
 14735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14736 ;; Tracked objects:
 14737 ;;		On entry : 0/0
 14738 ;;		On exit  : 0/0
 14739 ;;		Unchanged: 0/0
 14740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14741 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14742 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14743 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14744 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14745 ;;Total ram usage:        9 bytes
 14746 ;; Hardware stack levels used:    1
 14747 ;; Hardware stack levels required when called:    8
 14748 ;; This function calls:
 14749 ;;		___altoft
 14750 ;;		___fttol
 14751 ;;		_frexp
 14752 ;; This function is called by:
 14753 ;;		_round
 14754 ;; This function uses a non-reentrant model
 14755 ;;
 14756                           
 14757                           
 14758                           ;psect for function _trunc
 14759  1D11                     _trunc:	
 14760                           
 14761                           ;incstack = 0
 14762                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14763  1D11  0021               	movlb	1	; select bank1
 14764  1D12  0845               	movf	trunc@x^(0+128),w
 14765  1D13  0020               	movlb	0	; select bank0
 14766  1D14  00B1               	movwf	frexp@value
 14767  1D15  0021               	movlb	1	; select bank1
 14768  1D16  0846               	movf	(trunc@x+1)^(0+128),w
 14769  1D17  0020               	movlb	0	; select bank0
 14770  1D18  00B2               	movwf	frexp@value+1
 14771  1D19  0021               	movlb	1	; select bank1
 14772  1D1A  0847               	movf	(trunc@x+2)^(0+128),w
 14773  1D1B  0020               	movlb	0	; select bank0
 14774  1D1C  00B3               	movwf	frexp@value+2
 14775  1D1D  30CB               	movlw	(low (trunc@expon| 0))& (0+255)
 14776  1D1E  00CC               	movwf	??_trunc
 14777  1D1F  084C               	movf	??_trunc,w
 14778  1D20  00B4               	movwf	frexp@eptr
 14779  1D21  31A6  26E0  319D   	fcall	_frexp
 14780  1D24  0021               	movlb	1	; select bank1
 14781  1D25  1FCC               	btfss	(trunc@expon+1)^(0+128),7
 14782  1D26  2D2E               	goto	l8173
 14783  1D27  3000               	movlw	0
 14784  1D28  00C5               	movwf	?_trunc^(0+128)
 14785  1D29  3000               	movlw	0
 14786  1D2A  00C6               	movwf	(?_trunc+1)^(0+128)
 14787  1D2B  3000               	movlw	0
 14788  1D2C  00C7               	movwf	(?_trunc+2)^(0+128)
 14789  1D2D  0008               	return
 14790  1D2E                     l8173:	
 14791  1D2E  3000               	movlw	0
 14792  1D2F  024C               	subwf	(trunc@expon+1)^(0+128),w
 14793  1D30  3015               	movlw	21
 14794  1D31  1903               	skipnz
 14795  1D32  024B               	subwf	trunc@expon^(0+128),w
 14796  1D33  1803               	btfsc	3,0
 14797  1D34  0008               	return
 14798  1D35  0845               	movf	trunc@x^(0+128),w
 14799  1D36  00B7               	movwf	___fttol@f1^(0+128)
 14800  1D37  0846               	movf	(trunc@x+1)^(0+128),w
 14801  1D38  00B8               	movwf	(___fttol@f1+1)^(0+128)
 14802  1D39  0847               	movf	(trunc@x+2)^(0+128),w
 14803  1D3A  00B9               	movwf	(___fttol@f1+2)^(0+128)
 14804  1D3B  3197  2779  319D   	fcall	___fttol
 14805  1D3E  0021               	movlb	1	; select bank1
 14806  1D3F  083A               	movf	(?___fttol+3)^(0+128),w
 14807  1D40  0020               	movlb	0	; select bank0
 14808  1D41  00BC               	movwf	___altoft@c+3
 14809  1D42  0021               	movlb	1	; select bank1
 14810  1D43  0839               	movf	(?___fttol+2)^(0+128),w
 14811  1D44  0020               	movlb	0	; select bank0
 14812  1D45  00BB               	movwf	___altoft@c+2
 14813  1D46  0021               	movlb	1	; select bank1
 14814  1D47  0838               	movf	(?___fttol+1)^(0+128),w
 14815  1D48  0020               	movlb	0	; select bank0
 14816  1D49  00BA               	movwf	___altoft@c+1
 14817  1D4A  0021               	movlb	1	; select bank1
 14818  1D4B  0837               	movf	?___fttol^(0+128),w
 14819  1D4C  0020               	movlb	0	; select bank0
 14820  1D4D  00B9               	movwf	___altoft@c
 14821  1D4E  31A7  2784         	fcall	___altoft
 14822  1D50  0020               	movlb	0	; select bank0
 14823  1D51  0839               	movf	?___altoft,w
 14824  1D52  0021               	movlb	1	; select bank1
 14825  1D53  00C8               	movwf	trunc@i^(0+128)
 14826  1D54  0020               	movlb	0	; select bank0
 14827  1D55  083A               	movf	?___altoft+1,w
 14828  1D56  0021               	movlb	1	; select bank1
 14829  1D57  00C9               	movwf	(trunc@i+1)^(0+128)
 14830  1D58  0020               	movlb	0	; select bank0
 14831  1D59  083B               	movf	?___altoft+2,w
 14832  1D5A  0021               	movlb	1	; select bank1
 14833  1D5B  00CA               	movwf	(trunc@i+2)^(0+128)
 14834  1D5C  0848               	movf	trunc@i^(0+128),w
 14835  1D5D  00C5               	movwf	?_trunc^(0+128)
 14836  1D5E  0849               	movf	(trunc@i+1)^(0+128),w
 14837  1D5F  00C6               	movwf	(?_trunc+1)^(0+128)
 14838  1D60  084A               	movf	(trunc@i+2)^(0+128),w
 14839  1D61  00C7               	movwf	(?_trunc+2)^(0+128)
 14840  1D62  0008               	return
 14841  1D63                     __end_of_trunc:	
 14842                           
 14843                           	psect	text42
 14844  26E0                     __ptext42:	
 14845 ;; *************** function _frexp *****************
 14846 ;; Defined at:
 14847 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 14848 ;; Parameters:    Size  Location     Type
 14849 ;;  value           3   17[BANK0 ] int 
 14850 ;;  eptr            1   20[BANK0 ] PTR int 
 14851 ;;		 -> floor@expon(2), trunc@expon(2), 
 14852 ;; Auto vars:     Size  Location     Type
 14853 ;;		None
 14854 ;; Return value:  Size  Location     Type
 14855 ;;                  3   17[BANK0 ] PTR int 
 14856 ;; Registers used:
 14857 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14858 ;; Tracked objects:
 14859 ;;		On entry : 0/0
 14860 ;;		On exit  : 0/0
 14861 ;;		Unchanged: 0/0
 14862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14863 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14865 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14866 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14867 ;;Total ram usage:        6 bytes
 14868 ;; Hardware stack levels used:    1
 14869 ;; Hardware stack levels required when called:    6
 14870 ;; This function calls:
 14871 ;;		Nothing
 14872 ;; This function is called by:
 14873 ;;		_trunc
 14874 ;; This function uses a non-reentrant model
 14875 ;;
 14876                           
 14877                           
 14878                           ;psect for function _frexp
 14879  26E0                     _frexp:	
 14880                           
 14881                           ;incstack = 0
 14882                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 14883  26E0  0020               	movlb	0	; select bank0
 14884  26E1  0833               	movf	frexp@value+2,w
 14885  26E2  0432               	iorwf	frexp@value+1,w
 14886  26E3  0431               	iorwf	frexp@value,w
 14887  26E4  1D03               	skipz
 14888  26E5  2EED               	goto	l8019
 14889  26E6  0834               	movf	frexp@eptr,w
 14890  26E7  0086               	movwf	6
 14891  26E8  0187               	clrf	7
 14892  26E9  3000               	movlw	0
 14893  26EA  3FC0               	movwi [0]fsr1
 14894  26EB  3FC1               	movwi [1]fsr1
 14895                           
 14896                           ;	Return value of _frexp is never used
 14897  26EC  0008               	return
 14898  26ED                     l8019:	
 14899  26ED  0833               	movf	frexp@value+2,w
 14900  26EE  397F               	andlw	127
 14901  26EF  00B5               	movwf	??_frexp
 14902  26F0  01B6               	clrf	??_frexp+1
 14903  26F1  35B5               	lslf	??_frexp,f
 14904  26F2  0DB6               	rlf	??_frexp+1,f
 14905  26F3  0834               	movf	frexp@eptr,w
 14906  26F4  0086               	movwf	6
 14907  26F5  0187               	clrf	7
 14908  26F6  0835               	movf	??_frexp,w
 14909  26F7  3FC0               	movwi [0]fsr1
 14910  26F8  0836               	movf	??_frexp+1,w
 14911  26F9  3FC1               	movwi [1]fsr1
 14912  26FA  0D32               	rlf	frexp@value+1,w
 14913  26FB  0D32               	rlf	frexp@value+1,w
 14914  26FC  3901               	andlw	1
 14915  26FD  00B5               	movwf	??_frexp
 14916  26FE  01B6               	clrf	??_frexp+1
 14917  26FF  0834               	movf	frexp@eptr,w
 14918  2700  0086               	movwf	6
 14919  2701  0187               	clrf	7
 14920  2702  0835               	movf	??_frexp,w
 14921  2703  0481               	iorwf	1,f
 14922  2704  3141               	addfsr 1,1
 14923  2705  0836               	movf	??_frexp+1,w
 14924  2706  0481               	iorwf	1,f
 14925  2707  0834               	movf	frexp@eptr,w
 14926  2708  0086               	movwf	6
 14927  2709  0187               	clrf	7
 14928  270A  3082               	movlw	130
 14929  270B  0781               	addwf	1,f
 14930  270C  3141               	addfsr 1,1
 14931  270D  30FF               	movlw	255
 14932  270E  3D81               	addwfc	1,f
 14933  270F  317F               	addfsr 1,-1
 14934  2710  0833               	movf	frexp@value+2,w
 14935  2711  3980               	andlw	-128
 14936  2712  383F               	iorlw	63
 14937  2713  00B3               	movwf	frexp@value+2
 14938  2714  13B2               	bcf	frexp@value+1,7
 14939  2715  0008               	return
 14940  2716                     __end_of_frexp:	
 14941                           ;	Return value of _frexp is never used
 14942                           
 14943                           
 14944                           	psect	text43
 14945  1779                     __ptext43:	
 14946 ;; *************** function ___fttol *****************
 14947 ;; Defined at:
 14948 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 14949 ;; Parameters:    Size  Location     Type
 14950 ;;  f1              3   23[BANK1 ] float 
 14951 ;; Auto vars:     Size  Location     Type
 14952 ;;  lval            4   32[BANK1 ] unsigned long 
 14953 ;;  exp1            1   36[BANK1 ] unsigned char 
 14954 ;;  sign1           1   31[BANK1 ] unsigned char 
 14955 ;; Return value:  Size  Location     Type
 14956 ;;                  4   23[BANK1 ] long 
 14957 ;; Registers used:
 14958 ;;		wreg, status,2, status,0
 14959 ;; Tracked objects:
 14960 ;;		On entry : 0/0
 14961 ;;		On exit  : 0/0
 14962 ;;		Unchanged: 0/0
 14963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14964 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14965 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14966 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14967 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14968 ;;Total ram usage:       14 bytes
 14969 ;; Hardware stack levels used:    1
 14970 ;; Hardware stack levels required when called:    6
 14971 ;; This function calls:
 14972 ;;		Nothing
 14973 ;; This function is called by:
 14974 ;;		_main_initialize
 14975 ;;		_setDrvPiezoOnTime
 14976 ;;		_setH1OffTime
 14977 ;;		_setH2OnTime
 14978 ;;		_calcUpstroke
 14979 ;;		_calcDownstroke
 14980 ;;		_trunc
 14981 ;;		_drv_outputSine
 14982 ;; This function uses a non-reentrant model
 14983 ;;
 14984                           
 14985                           
 14986                           ;psect for function ___fttol
 14987  1779                     ___fttol:	
 14988                           
 14989                           ;incstack = 0
 14990                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14991  1779  0021               	movlb	1	; select bank1
 14992  177A  0837               	movf	___fttol@f1^(0+128),w
 14993  177B  00BB               	movwf	??___fttol^(0+128)
 14994  177C  0838               	movf	(___fttol@f1+1)^(0+128),w
 14995  177D  00BC               	movwf	(??___fttol^(0+128)+1)
 14996  177E  0839               	movf	(___fttol@f1+2)^(0+128),w
 14997  177F  00BD               	movwf	(??___fttol^(0+128)+2)
 14998  1780  1003               	clrc
 14999  1781  0D3C               	rlf	(??___fttol^(0+128)+1),w
 15000  1782  0D3D               	rlf	(??___fttol^(0+128)+2),w
 15001  1783  00BE               	movwf	(??___fttol+3)^(0+128)
 15002  1784  083E               	movf	(??___fttol+3)^(0+128),w
 15003  1785  00C4               	movwf	___fttol@exp1^(0+128)
 15004  1786  0844               	movf	___fttol@exp1^(0+128),w
 15005  1787  1D03               	btfss	3,2
 15006  1788  2F92               	goto	l7977
 15007  1789  3000               	movlw	0
 15008  178A  00BA               	movwf	(?___fttol+3)^(0+128)
 15009  178B  3000               	movlw	0
 15010  178C  00B9               	movwf	(?___fttol+2)^(0+128)
 15011  178D  3000               	movlw	0
 15012  178E  00B8               	movwf	(?___fttol+1)^(0+128)
 15013  178F  3000               	movlw	0
 15014  1790  00B7               	movwf	?___fttol^(0+128)
 15015  1791  0008               	return
 15016  1792                     l7977:	
 15017  1792  0837               	movf	___fttol@f1^(0+128),w
 15018  1793  00BB               	movwf	??___fttol^(0+128)
 15019  1794  0838               	movf	(___fttol@f1+1)^(0+128),w
 15020  1795  00BC               	movwf	(??___fttol^(0+128)+1)
 15021  1796  0839               	movf	(___fttol@f1+2)^(0+128),w
 15022  1797  00BD               	movwf	(??___fttol^(0+128)+2)
 15023  1798  3017               	movlw	23
 15024  1799                     u7585:	
 15025  1799  36BD               	lsrf	(??___fttol^(0+128)+2),f
 15026  179A  0CBC               	rrf	(??___fttol^(0+128)+1),f
 15027  179B  0CBB               	rrf	??___fttol^(0+128),f
 15028  179C  0B89               	decfsz	9,f
 15029  179D  2F99               	goto	u7585
 15030  179E  083B               	movf	??___fttol^(0+128),w
 15031  179F  00BE               	movwf	(??___fttol+3)^(0+128)
 15032  17A0  083E               	movf	(??___fttol+3)^(0+128),w
 15033  17A1  00BF               	movwf	___fttol@sign1^(0+128)
 15034  17A2  17B8               	bsf	(___fttol@f1^(0+128)+1),7
 15035  17A3  30FF               	movlw	255
 15036  17A4  05B7               	andwf	___fttol@f1^(0+128),f
 15037  17A5  30FF               	movlw	255
 15038  17A6  05B8               	andwf	(___fttol@f1+1)^(0+128),f
 15039  17A7  3000               	movlw	0
 15040  17A8  05B9               	andwf	(___fttol@f1+2)^(0+128),f
 15041  17A9  0837               	movf	___fttol@f1^(0+128),w
 15042  17AA  00C0               	movwf	___fttol@lval^(0+128)
 15043  17AB  0838               	movf	(___fttol@f1+1)^(0+128),w
 15044  17AC  00C1               	movwf	(___fttol@lval^(0+128)+1)
 15045  17AD  0839               	movf	(___fttol@f1+2)^(0+128),w
 15046  17AE  00C2               	movwf	(___fttol@lval^(0+128)+2)
 15047  17AF  01C3               	clrf	(___fttol@lval^(0+128)+3)
 15048  17B0  308E               	movlw	142
 15049  17B1  02C4               	subwf	___fttol@exp1^(0+128),f
 15050  17B2  1FC4               	btfss	___fttol@exp1^(0+128),7
 15051  17B3  2FD0               	goto	l7997
 15052  17B4  0844               	movf	___fttol@exp1^(0+128),w
 15053  17B5  3A80               	xorlw	128
 15054  17B6  3E8F               	addlw	143
 15055  17B7  1803               	skipnc
 15056  17B8  2FC2               	goto	l7995
 15057  17B9  3000               	movlw	0
 15058  17BA  00BA               	movwf	(?___fttol+3)^(0+128)
 15059  17BB  3000               	movlw	0
 15060  17BC  00B9               	movwf	(?___fttol+2)^(0+128)
 15061  17BD  3000               	movlw	0
 15062  17BE  00B8               	movwf	(?___fttol+1)^(0+128)
 15063  17BF  3000               	movlw	0
 15064  17C0  00B7               	movwf	?___fttol^(0+128)
 15065  17C1  0008               	return
 15066  17C2                     l7995:	
 15067  17C2  3001               	movlw	1
 15068  17C3                     u7615:	
 15069  17C3  36C3               	lsrf	(___fttol@lval+3)^(0+128),f
 15070  17C4  0CC2               	rrf	(___fttol@lval+2)^(0+128),f
 15071  17C5  0CC1               	rrf	(___fttol@lval+1)^(0+128),f
 15072  17C6  0CC0               	rrf	___fttol@lval^(0+128),f
 15073  17C7  0B89               	decfsz	9,f
 15074  17C8  2FC3               	goto	u7615
 15075  17C9  3001               	movlw	1
 15076  17CA  00BB               	movwf	??___fttol^(0+128)
 15077  17CB  083B               	movf	??___fttol^(0+128),w
 15078  17CC  07C4               	addwf	___fttol@exp1^(0+128),f
 15079  17CD  1903               	btfsc	3,2
 15080  17CE  2FE9               	goto	l8005
 15081  17CF  2FC2               	goto	l7995
 15082  17D0                     l7997:	
 15083  17D0  3018               	movlw	24
 15084  17D1  0244               	subwf	___fttol@exp1^(0+128),w
 15085  17D2  1C03               	skipc
 15086  17D3  2FE6               	goto	l1986
 15087  17D4  3000               	movlw	0
 15088  17D5  00BA               	movwf	(?___fttol+3)^(0+128)
 15089  17D6  3000               	movlw	0
 15090  17D7  00B9               	movwf	(?___fttol+2)^(0+128)
 15091  17D8  3000               	movlw	0
 15092  17D9  00B8               	movwf	(?___fttol+1)^(0+128)
 15093  17DA  3000               	movlw	0
 15094  17DB  00B7               	movwf	?___fttol^(0+128)
 15095  17DC  0008               	return
 15096  17DD                     l8003:	
 15097  17DD  3001               	movlw	1
 15098  17DE                     u7645:	
 15099  17DE  35C0               	lslf	___fttol@lval^(0+128),f
 15100  17DF  0DC1               	rlf	(___fttol@lval+1)^(0+128),f
 15101  17E0  0DC2               	rlf	(___fttol@lval+2)^(0+128),f
 15102  17E1  0DC3               	rlf	(___fttol@lval+3)^(0+128),f
 15103  17E2  0B89               	decfsz	9,f
 15104  17E3  2FDE               	goto	u7645
 15105  17E4  3001               	movlw	1
 15106  17E5  02C4               	subwf	___fttol@exp1^(0+128),f
 15107  17E6                     l1986:	
 15108  17E6  0844               	movf	___fttol@exp1^(0+128),w
 15109  17E7  1D03               	btfss	3,2
 15110  17E8  2FDD               	goto	l8003
 15111  17E9                     l8005:	
 15112  17E9  083F               	movf	___fttol@sign1^(0+128),w
 15113  17EA  1903               	btfsc	3,2
 15114  17EB  2FF7               	goto	l8009
 15115  17EC  09C0               	comf	___fttol@lval^(0+128),f
 15116  17ED  09C1               	comf	(___fttol@lval+1)^(0+128),f
 15117  17EE  09C2               	comf	(___fttol@lval+2)^(0+128),f
 15118  17EF  09C3               	comf	(___fttol@lval+3)^(0+128),f
 15119  17F0  0AC0               	incf	___fttol@lval^(0+128),f
 15120  17F1  1903               	skipnz
 15121  17F2  0AC1               	incf	(___fttol@lval+1)^(0+128),f
 15122  17F3  1903               	skipnz
 15123  17F4  0AC2               	incf	(___fttol@lval+2)^(0+128),f
 15124  17F5  1903               	skipnz
 15125  17F6  0AC3               	incf	(___fttol@lval+3)^(0+128),f
 15126  17F7                     l8009:	
 15127  17F7  0843               	movf	(___fttol@lval+3)^(0+128),w
 15128  17F8  00BA               	movwf	(?___fttol+3)^(0+128)
 15129  17F9  0842               	movf	(___fttol@lval+2)^(0+128),w
 15130  17FA  00B9               	movwf	(?___fttol+2)^(0+128)
 15131  17FB  0841               	movf	(___fttol@lval+1)^(0+128),w
 15132  17FC  00B8               	movwf	(?___fttol+1)^(0+128)
 15133  17FD  0840               	movf	___fttol@lval^(0+128),w
 15134  17FE  00B7               	movwf	?___fttol^(0+128)
 15135  17FF  0008               	return
 15136  1800                     __end_of___fttol:	
 15137                           
 15138                           	psect	text44
 15139  2784                     __ptext44:	
 15140 ;; *************** function ___altoft *****************
 15141 ;; Defined at:
 15142 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 15143 ;; Parameters:    Size  Location     Type
 15144 ;;  c               4   25[BANK0 ] long 
 15145 ;; Auto vars:     Size  Location     Type
 15146 ;;  sign            1   32[BANK0 ] unsigned char 
 15147 ;;  exp             1   31[BANK0 ] unsigned char 
 15148 ;; Return value:  Size  Location     Type
 15149 ;;                  3   25[BANK0 ] float 
 15150 ;; Registers used:
 15151 ;;		wreg, status,2, status,0, pclath, cstack
 15152 ;; Tracked objects:
 15153 ;;		On entry : 0/0
 15154 ;;		On exit  : 0/0
 15155 ;;		Unchanged: 0/0
 15156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15157 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15158 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15160 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15161 ;;Total ram usage:        8 bytes
 15162 ;; Hardware stack levels used:    1
 15163 ;; Hardware stack levels required when called:    7
 15164 ;; This function calls:
 15165 ;;		___ftpack
 15166 ;; This function is called by:
 15167 ;;		_trunc
 15168 ;; This function uses a non-reentrant model
 15169 ;;
 15170                           
 15171                           
 15172                           ;psect for function ___altoft
 15173  2784                     ___altoft:	
 15174                           
 15175                           ;incstack = 0
 15176                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 15177  2784  0020               	movlb	0	; select bank0
 15178  2785  01C0               	clrf	___altoft@sign
 15179  2786  308E               	movlw	142
 15180  2787  00BD               	movwf	??___altoft
 15181  2788  083D               	movf	??___altoft,w
 15182  2789  00BF               	movwf	___altoft@exp
 15183  278A  1FBC               	btfss	___altoft@c+3,7
 15184  278B  2F99               	goto	l7965
 15185  278C  09B9               	comf	___altoft@c,f
 15186  278D  09BA               	comf	___altoft@c+1,f
 15187  278E  09BB               	comf	___altoft@c+2,f
 15188  278F  09BC               	comf	___altoft@c+3,f
 15189  2790  0AB9               	incf	___altoft@c,f
 15190  2791  1903               	skipnz
 15191  2792  0ABA               	incf	___altoft@c+1,f
 15192  2793  1903               	skipnz
 15193  2794  0ABB               	incf	___altoft@c+2,f
 15194  2795  1903               	skipnz
 15195  2796  0ABC               	incf	___altoft@c+3,f
 15196  2797  01C0               	clrf	___altoft@sign
 15197  2798  0AC0               	incf	___altoft@sign,f
 15198  2799                     l7965:	
 15199  2799  30FF               	movlw	255
 15200  279A  053C               	andwf	___altoft@c+3,w
 15201  279B  1903               	btfsc	3,2
 15202  279C  2FA9               	goto	l7967
 15203  279D  3001               	movlw	1
 15204  279E                     u7555:	
 15205  279E  36BC               	lsrf	___altoft@c+3,f
 15206  279F  0CBB               	rrf	___altoft@c+2,f
 15207  27A0  0CBA               	rrf	___altoft@c+1,f
 15208  27A1  0CB9               	rrf	___altoft@c,f
 15209  27A2  0B89               	decfsz	9,f
 15210  27A3  2F9E               	goto	u7555
 15211  27A4  3001               	movlw	1
 15212  27A5  00BD               	movwf	??___altoft
 15213  27A6  083D               	movf	??___altoft,w
 15214  27A7  07BF               	addwf	___altoft@exp,f
 15215  27A8  2F99               	goto	l7965
 15216  27A9                     l7967:	
 15217  27A9  0839               	movf	___altoft@c,w
 15218  27AA  00B1               	movwf	___ftpack@arg
 15219  27AB  083A               	movf	___altoft@c+1,w
 15220  27AC  00B2               	movwf	___ftpack@arg+1
 15221  27AD  083B               	movf	___altoft@c+2,w
 15222  27AE  00B3               	movwf	___ftpack@arg+2
 15223  27AF  083F               	movf	___altoft@exp,w
 15224  27B0  00BD               	movwf	??___altoft
 15225  27B1  083D               	movf	??___altoft,w
 15226  27B2  00B4               	movwf	___ftpack@exp
 15227  27B3  0840               	movf	___altoft@sign,w
 15228  27B4  00BE               	movwf	??___altoft+1
 15229  27B5  083E               	movf	??___altoft+1,w
 15230  27B6  00B5               	movwf	___ftpack@sign
 15231  27B7  319F  272A         	fcall	___ftpack
 15232  27B9  0020               	movlb	0	; select bank0
 15233  27BA  0831               	movf	?___ftpack,w
 15234  27BB  00B9               	movwf	?___altoft
 15235  27BC  0832               	movf	?___ftpack+1,w
 15236  27BD  00BA               	movwf	?___altoft+1
 15237  27BE  0833               	movf	?___ftpack+2,w
 15238  27BF  00BB               	movwf	?___altoft+2
 15239  27C0  0008               	return
 15240  27C1                     __end_of___altoft:	
 15241                           
 15242                           	psect	text45
 15243  2097                     __ptext45:	
 15244 ;; *************** function ___ftneg *****************
 15245 ;; Defined at:
 15246 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 15247 ;; Parameters:    Size  Location     Type
 15248 ;;  f1              3   38[BANK0 ] float 
 15249 ;; Auto vars:     Size  Location     Type
 15250 ;;		None
 15251 ;; Return value:  Size  Location     Type
 15252 ;;                  3   38[BANK0 ] float 
 15253 ;; Registers used:
 15254 ;;		wreg
 15255 ;; Tracked objects:
 15256 ;;		On entry : 0/0
 15257 ;;		On exit  : 0/0
 15258 ;;		Unchanged: 0/0
 15259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15260 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15263 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15264 ;;Total ram usage:        3 bytes
 15265 ;; Hardware stack levels used:    1
 15266 ;; Hardware stack levels required when called:    6
 15267 ;; This function calls:
 15268 ;;		Nothing
 15269 ;; This function is called by:
 15270 ;;		_calcDownstroke
 15271 ;;		_round
 15272 ;; This function uses a non-reentrant model
 15273 ;;
 15274                           
 15275                           
 15276                           ;psect for function ___ftneg
 15277  2097                     ___ftneg:	
 15278                           
 15279                           ;incstack = 0
 15280                           ; Regs used in ___ftneg: [wreg]
 15281  2097  0020               	movlb	0	; select bank0
 15282  2098  0848               	movf	___ftneg@f1+2,w
 15283  2099  0447               	iorwf	___ftneg@f1+1,w
 15284  209A  0446               	iorwf	___ftneg@f1,w
 15285  209B  1903               	skipnz
 15286  209C  0008               	return
 15287  209D  3080               	movlw	128
 15288  209E  06C8               	xorwf	___ftneg@f1+2,f
 15289  209F  0008               	return
 15290  20A0                     __end_of___ftneg:	
 15291                           
 15292                           	psect	text46
 15293  0CA8                     __ptext46:	
 15294 ;; *************** function ___ftadd *****************
 15295 ;; Defined at:
 15296 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 15297 ;; Parameters:    Size  Location     Type
 15298 ;;  f1              3   10[BANK1 ] float 
 15299 ;;  f2              3   13[BANK1 ] float 
 15300 ;; Auto vars:     Size  Location     Type
 15301 ;;  exp1            1   22[BANK1 ] unsigned char 
 15302 ;;  exp2            1   21[BANK1 ] unsigned char 
 15303 ;;  sign            1   20[BANK1 ] unsigned char 
 15304 ;; Return value:  Size  Location     Type
 15305 ;;                  3   10[BANK1 ] float 
 15306 ;; Registers used:
 15307 ;;		wreg, status,2, status,0, pclath, cstack
 15308 ;; Tracked objects:
 15309 ;;		On entry : 0/0
 15310 ;;		On exit  : 0/0
 15311 ;;		Unchanged: 0/0
 15312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15313 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15314 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15315 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15316 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15317 ;;Total ram usage:       13 bytes
 15318 ;; Hardware stack levels used:    1
 15319 ;; Hardware stack levels required when called:    7
 15320 ;; This function calls:
 15321 ;;		___ftpack
 15322 ;; This function is called by:
 15323 ;;		_main_initialize
 15324 ;;		_setDrvPiezoOnTime
 15325 ;;		_setH1OffTime
 15326 ;;		_setH2OnTime
 15327 ;;		_calcDownstroke
 15328 ;;		_round
 15329 ;; This function uses a non-reentrant model
 15330 ;;
 15331                           
 15332                           
 15333                           ;psect for function ___ftadd
 15334  0CA8                     ___ftadd:	
 15335                           
 15336                           ;incstack = 0
 15337                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 15338  0CA8  0021               	movlb	1	; select bank1
 15339  0CA9  082A               	movf	___ftadd@f1^(0+128),w
 15340  0CAA  00B0               	movwf	??___ftadd^(0+128)
 15341  0CAB  082B               	movf	(___ftadd@f1+1)^(0+128),w
 15342  0CAC  00B1               	movwf	(??___ftadd^(0+128)+1)
 15343  0CAD  082C               	movf	(___ftadd@f1+2)^(0+128),w
 15344  0CAE  00B2               	movwf	(??___ftadd^(0+128)+2)
 15345  0CAF  1003               	clrc
 15346  0CB0  0D31               	rlf	(??___ftadd^(0+128)+1),w
 15347  0CB1  0D32               	rlf	(??___ftadd^(0+128)+2),w
 15348  0CB2  00B3               	movwf	(??___ftadd+3)^(0+128)
 15349  0CB3  0833               	movf	(??___ftadd+3)^(0+128),w
 15350  0CB4  00B6               	movwf	___ftadd@exp1^(0+128)
 15351  0CB5  082D               	movf	___ftadd@f2^(0+128),w
 15352  0CB6  00B0               	movwf	??___ftadd^(0+128)
 15353  0CB7  082E               	movf	(___ftadd@f2+1)^(0+128),w
 15354  0CB8  00B1               	movwf	(??___ftadd^(0+128)+1)
 15355  0CB9  082F               	movf	(___ftadd@f2+2)^(0+128),w
 15356  0CBA  00B2               	movwf	(??___ftadd^(0+128)+2)
 15357  0CBB  1003               	clrc
 15358  0CBC  0D31               	rlf	(??___ftadd^(0+128)+1),w
 15359  0CBD  0D32               	rlf	(??___ftadd^(0+128)+2),w
 15360  0CBE  00B3               	movwf	(??___ftadd+3)^(0+128)
 15361  0CBF  0833               	movf	(??___ftadd+3)^(0+128),w
 15362  0CC0  00B5               	movwf	___ftadd@exp2^(0+128)
 15363  0CC1  0836               	movf	___ftadd@exp1^(0+128),w
 15364  0CC2  1903               	btfsc	3,2
 15365  0CC3  2CD0               	goto	l8093
 15366  0CC4  0835               	movf	___ftadd@exp2^(0+128),w
 15367  0CC5  0236               	subwf	___ftadd@exp1^(0+128),w
 15368  0CC6  1803               	skipnc
 15369  0CC7  2CD7               	goto	l8097
 15370  0CC8  0336               	decf	___ftadd@exp1^(0+128),w
 15371  0CC9  3AFF               	xorlw	255
 15372  0CCA  0735               	addwf	___ftadd@exp2^(0+128),w
 15373  0CCB  00B0               	movwf	??___ftadd^(0+128)
 15374  0CCC  3019               	movlw	25
 15375  0CCD  0230               	subwf	??___ftadd^(0+128),w
 15376  0CCE  1C03               	skipc
 15377  0CCF  2CD7               	goto	l8097
 15378  0CD0                     l8093:	
 15379  0CD0  082D               	movf	___ftadd@f2^(0+128),w
 15380  0CD1  00AA               	movwf	?___ftadd^(0+128)
 15381  0CD2  082E               	movf	(___ftadd@f2+1)^(0+128),w
 15382  0CD3  00AB               	movwf	(?___ftadd+1)^(0+128)
 15383  0CD4  082F               	movf	(___ftadd@f2+2)^(0+128),w
 15384  0CD5  00AC               	movwf	(?___ftadd+2)^(0+128)
 15385  0CD6  0008               	return
 15386  0CD7                     l8097:	
 15387  0CD7  0835               	movf	___ftadd@exp2^(0+128),w
 15388  0CD8  1903               	btfsc	3,2
 15389  0CD9  0008               	return
 15390  0CDA  0836               	movf	___ftadd@exp1^(0+128),w
 15391  0CDB  0235               	subwf	___ftadd@exp2^(0+128),w
 15392  0CDC  1803               	skipnc
 15393  0CDD  2CE6               	goto	l8103
 15394  0CDE  0335               	decf	___ftadd@exp2^(0+128),w
 15395  0CDF  3AFF               	xorlw	255
 15396  0CE0  0736               	addwf	___ftadd@exp1^(0+128),w
 15397  0CE1  00B0               	movwf	??___ftadd^(0+128)
 15398  0CE2  3019               	movlw	25
 15399  0CE3  0230               	subwf	??___ftadd^(0+128),w
 15400  0CE4  1803               	btfsc	3,0
 15401  0CE5  0008               	return
 15402  0CE6                     l8103:	
 15403  0CE6  3006               	movlw	6
 15404  0CE7  00B0               	movwf	??___ftadd^(0+128)
 15405  0CE8  0830               	movf	??___ftadd^(0+128),w
 15406  0CE9  00B4               	movwf	___ftadd@sign^(0+128)
 15407  0CEA  1BAC               	btfsc	(___ftadd@f1+2)^(0+128),7
 15408  0CEB  17B4               	bsf	___ftadd@sign^(0+128),7
 15409  0CEC  1BAF               	btfsc	(___ftadd@f2+2)^(0+128),7
 15410  0CED  1734               	bsf	___ftadd@sign^(0+128),6
 15411  0CEE  17AB               	bsf	(___ftadd@f1^(0+128)+1),7
 15412  0CEF  30FF               	movlw	255
 15413  0CF0  05AA               	andwf	___ftadd@f1^(0+128),f
 15414  0CF1  30FF               	movlw	255
 15415  0CF2  05AB               	andwf	(___ftadd@f1+1)^(0+128),f
 15416  0CF3  3000               	movlw	0
 15417  0CF4  05AC               	andwf	(___ftadd@f1+2)^(0+128),f
 15418  0CF5  17AE               	bsf	(___ftadd@f2^(0+128)+1),7
 15419  0CF6  30FF               	movlw	255
 15420  0CF7  05AD               	andwf	___ftadd@f2^(0+128),f
 15421  0CF8  30FF               	movlw	255
 15422  0CF9  05AE               	andwf	(___ftadd@f2+1)^(0+128),f
 15423  0CFA  3000               	movlw	0
 15424  0CFB  05AF               	andwf	(___ftadd@f2+2)^(0+128),f
 15425  0CFC  0835               	movf	___ftadd@exp2^(0+128),w
 15426  0CFD  0236               	subwf	___ftadd@exp1^(0+128),w
 15427  0CFE  1803               	skipnc
 15428  0CFF  2D22               	goto	l8125
 15429  0D00                     l8115:	
 15430  0D00  3001               	movlw	1
 15431  0D01                     u7875:	
 15432  0D01  35AD               	lslf	___ftadd@f2^(0+128),f
 15433  0D02  0DAE               	rlf	(___ftadd@f2+1)^(0+128),f
 15434  0D03  0DAF               	rlf	(___ftadd@f2+2)^(0+128),f
 15435  0D04  0B89               	decfsz	9,f
 15436  0D05  2D01               	goto	u7875
 15437  0D06  3001               	movlw	1
 15438  0D07  02B5               	subwf	___ftadd@exp2^(0+128),f
 15439  0D08  0835               	movf	___ftadd@exp2^(0+128),w
 15440  0D09  0636               	xorwf	___ftadd@exp1^(0+128),w
 15441  0D0A  1903               	skipnz
 15442  0D0B  2D1D               	goto	l8123
 15443  0D0C  3001               	movlw	1
 15444  0D0D  02B4               	subwf	___ftadd@sign^(0+128),f
 15445  0D0E  0834               	movf	___ftadd@sign^(0+128),w
 15446  0D0F  3907               	andlw	7
 15447  0D10  1903               	btfsc	3,2
 15448  0D11  2D1D               	goto	l8123
 15449  0D12  2D00               	goto	l8115
 15450  0D13                     l8121:	
 15451  0D13  3001               	movlw	1
 15452  0D14                     u7905:	
 15453  0D14  36AC               	lsrf	(___ftadd@f1+2)^(0+128),f
 15454  0D15  0CAB               	rrf	(___ftadd@f1+1)^(0+128),f
 15455  0D16  0CAA               	rrf	___ftadd@f1^(0+128),f
 15456  0D17  0B89               	decfsz	9,f
 15457  0D18  2D14               	goto	u7905
 15458  0D19  3001               	movlw	1
 15459  0D1A  00B0               	movwf	??___ftadd^(0+128)
 15460  0D1B  0830               	movf	??___ftadd^(0+128),w
 15461  0D1C  07B6               	addwf	___ftadd@exp1^(0+128),f
 15462  0D1D                     l8123:	
 15463  0D1D  0836               	movf	___ftadd@exp1^(0+128),w
 15464  0D1E  0635               	xorwf	___ftadd@exp2^(0+128),w
 15465  0D1F  1903               	btfsc	3,2
 15466  0D20  2D47               	goto	l1926
 15467  0D21  2D13               	goto	l8121
 15468  0D22                     l8125:	
 15469  0D22  0836               	movf	___ftadd@exp1^(0+128),w
 15470  0D23  0235               	subwf	___ftadd@exp2^(0+128),w
 15471  0D24  1803               	skipnc
 15472  0D25  2D47               	goto	l1926
 15473  0D26                     l8127:	
 15474  0D26  3001               	movlw	1
 15475  0D27                     u7935:	
 15476  0D27  35AA               	lslf	___ftadd@f1^(0+128),f
 15477  0D28  0DAB               	rlf	(___ftadd@f1+1)^(0+128),f
 15478  0D29  0DAC               	rlf	(___ftadd@f1+2)^(0+128),f
 15479  0D2A  0B89               	decfsz	9,f
 15480  0D2B  2D27               	goto	u7935
 15481  0D2C  3001               	movlw	1
 15482  0D2D  02B6               	subwf	___ftadd@exp1^(0+128),f
 15483  0D2E  0835               	movf	___ftadd@exp2^(0+128),w
 15484  0D2F  0636               	xorwf	___ftadd@exp1^(0+128),w
 15485  0D30  1903               	skipnz
 15486  0D31  2D43               	goto	l8135
 15487  0D32  3001               	movlw	1
 15488  0D33  02B4               	subwf	___ftadd@sign^(0+128),f
 15489  0D34  0834               	movf	___ftadd@sign^(0+128),w
 15490  0D35  3907               	andlw	7
 15491  0D36  1903               	btfsc	3,2
 15492  0D37  2D43               	goto	l8135
 15493  0D38  2D26               	goto	l8127
 15494  0D39                     l8133:	
 15495  0D39  3001               	movlw	1
 15496  0D3A                     u7965:	
 15497  0D3A  36AF               	lsrf	(___ftadd@f2+2)^(0+128),f
 15498  0D3B  0CAE               	rrf	(___ftadd@f2+1)^(0+128),f
 15499  0D3C  0CAD               	rrf	___ftadd@f2^(0+128),f
 15500  0D3D  0B89               	decfsz	9,f
 15501  0D3E  2D3A               	goto	u7965
 15502  0D3F  3001               	movlw	1
 15503  0D40  00B0               	movwf	??___ftadd^(0+128)
 15504  0D41  0830               	movf	??___ftadd^(0+128),w
 15505  0D42  07B5               	addwf	___ftadd@exp2^(0+128),f
 15506  0D43                     l8135:	
 15507  0D43  0836               	movf	___ftadd@exp1^(0+128),w
 15508  0D44  0635               	xorwf	___ftadd@exp2^(0+128),w
 15509  0D45  1D03               	skipz
 15510  0D46  2D39               	goto	l8133
 15511  0D47                     l1926:	
 15512  0D47  1FB4               	btfss	___ftadd@sign^(0+128),7
 15513  0D48  2D59               	goto	l8139
 15514  0D49  30FF               	movlw	255
 15515  0D4A  06AA               	xorwf	___ftadd@f1^(0+128),f
 15516  0D4B  30FF               	movlw	255
 15517  0D4C  06AB               	xorwf	(___ftadd@f1+1)^(0+128),f
 15518  0D4D  30FF               	movlw	255
 15519  0D4E  06AC               	xorwf	(___ftadd@f1+2)^(0+128),f
 15520  0D4F  3001               	movlw	1
 15521  0D50  07AA               	addwf	___ftadd@f1^(0+128),f
 15522  0D51  3000               	movlw	0
 15523  0D52  1803               	skipnc
 15524  0D53  3001               	movlw	1
 15525  0D54  07AB               	addwf	(___ftadd@f1+1)^(0+128),f
 15526  0D55  3000               	movlw	0
 15527  0D56  1803               	skipnc
 15528  0D57  3001               	movlw	1
 15529  0D58  07AC               	addwf	(___ftadd@f1+2)^(0+128),f
 15530  0D59                     l8139:	
 15531  0D59  1F34               	btfss	___ftadd@sign^(0+128),6
 15532  0D5A  2D6B               	goto	l8143
 15533  0D5B  30FF               	movlw	255
 15534  0D5C  06AD               	xorwf	___ftadd@f2^(0+128),f
 15535  0D5D  30FF               	movlw	255
 15536  0D5E  06AE               	xorwf	(___ftadd@f2+1)^(0+128),f
 15537  0D5F  30FF               	movlw	255
 15538  0D60  06AF               	xorwf	(___ftadd@f2+2)^(0+128),f
 15539  0D61  3001               	movlw	1
 15540  0D62  07AD               	addwf	___ftadd@f2^(0+128),f
 15541  0D63  3000               	movlw	0
 15542  0D64  1803               	skipnc
 15543  0D65  3001               	movlw	1
 15544  0D66  07AE               	addwf	(___ftadd@f2+1)^(0+128),f
 15545  0D67  3000               	movlw	0
 15546  0D68  1803               	skipnc
 15547  0D69  3001               	movlw	1
 15548  0D6A  07AF               	addwf	(___ftadd@f2+2)^(0+128),f
 15549  0D6B                     l8143:	
 15550  0D6B  01B4               	clrf	___ftadd@sign^(0+128)
 15551  0D6C  082A               	movf	___ftadd@f1^(0+128),w
 15552  0D6D  07AD               	addwf	___ftadd@f2^(0+128),f
 15553  0D6E  082B               	movf	(___ftadd@f1+1)^(0+128),w
 15554  0D6F  3DAE               	addwfc	(___ftadd@f2+1)^(0+128),f
 15555  0D70  082C               	movf	(___ftadd@f1+2)^(0+128),w
 15556  0D71  3DAF               	addwfc	(___ftadd@f2+2)^(0+128),f
 15557  0D72  1FAF               	btfss	(___ftadd@f2+2)^(0+128),7
 15558  0D73  2D86               	goto	l8153
 15559  0D74  30FF               	movlw	255
 15560  0D75  06AD               	xorwf	___ftadd@f2^(0+128),f
 15561  0D76  30FF               	movlw	255
 15562  0D77  06AE               	xorwf	(___ftadd@f2+1)^(0+128),f
 15563  0D78  30FF               	movlw	255
 15564  0D79  06AF               	xorwf	(___ftadd@f2+2)^(0+128),f
 15565  0D7A  3001               	movlw	1
 15566  0D7B  07AD               	addwf	___ftadd@f2^(0+128),f
 15567  0D7C  3000               	movlw	0
 15568  0D7D  1803               	skipnc
 15569  0D7E  3001               	movlw	1
 15570  0D7F  07AE               	addwf	(___ftadd@f2+1)^(0+128),f
 15571  0D80  3000               	movlw	0
 15572  0D81  1803               	skipnc
 15573  0D82  3001               	movlw	1
 15574  0D83  07AF               	addwf	(___ftadd@f2+2)^(0+128),f
 15575  0D84  01B4               	clrf	___ftadd@sign^(0+128)
 15576  0D85  0AB4               	incf	___ftadd@sign^(0+128),f
 15577  0D86                     l8153:	
 15578  0D86  082D               	movf	___ftadd@f2^(0+128),w
 15579  0D87  0020               	movlb	0	; select bank0
 15580  0D88  00B1               	movwf	___ftpack@arg
 15581  0D89  0021               	movlb	1	; select bank1
 15582  0D8A  082E               	movf	(___ftadd@f2+1)^(0+128),w
 15583  0D8B  0020               	movlb	0	; select bank0
 15584  0D8C  00B2               	movwf	___ftpack@arg+1
 15585  0D8D  0021               	movlb	1	; select bank1
 15586  0D8E  082F               	movf	(___ftadd@f2+2)^(0+128),w
 15587  0D8F  0020               	movlb	0	; select bank0
 15588  0D90  00B3               	movwf	___ftpack@arg+2
 15589  0D91  0021               	movlb	1	; select bank1
 15590  0D92  0836               	movf	___ftadd@exp1^(0+128),w
 15591  0D93  00B0               	movwf	??___ftadd^(0+128)
 15592  0D94  0830               	movf	??___ftadd^(0+128),w
 15593  0D95  0020               	movlb	0	; select bank0
 15594  0D96  00B4               	movwf	___ftpack@exp
 15595  0D97  0021               	movlb	1	; select bank1
 15596  0D98  0834               	movf	___ftadd@sign^(0+128),w
 15597  0D99  00B1               	movwf	(??___ftadd+1)^(0+128)
 15598  0D9A  0831               	movf	(??___ftadd+1)^(0+128),w
 15599  0D9B  0020               	movlb	0	; select bank0
 15600  0D9C  00B5               	movwf	___ftpack@sign
 15601  0D9D  319F  272A         	fcall	___ftpack
 15602  0D9F  0020               	movlb	0	; select bank0
 15603  0DA0  0831               	movf	?___ftpack,w
 15604  0DA1  0021               	movlb	1	; select bank1
 15605  0DA2  00AA               	movwf	?___ftadd^(0+128)
 15606  0DA3  0020               	movlb	0	; select bank0
 15607  0DA4  0832               	movf	?___ftpack+1,w
 15608  0DA5  0021               	movlb	1	; select bank1
 15609  0DA6  00AB               	movwf	(?___ftadd+1)^(0+128)
 15610  0DA7  0020               	movlb	0	; select bank0
 15611  0DA8  0833               	movf	?___ftpack+2,w
 15612  0DA9  0021               	movlb	1	; select bank1
 15613  0DAA  00AC               	movwf	(?___ftadd+2)^(0+128)
 15614  0DAB  0008               	return
 15615  0DAC                     __end_of___ftadd:	
 15616                           
 15617                           	psect	text47
 15618  22C7                     __ptext47:	
 15619 ;; *************** function ___wmul *****************
 15620 ;; Defined at:
 15621 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 15622 ;; Parameters:    Size  Location     Type
 15623 ;;  multiplier      2   17[BANK0 ] unsigned int 
 15624 ;;  multiplicand    2   19[BANK0 ] unsigned int 
 15625 ;; Auto vars:     Size  Location     Type
 15626 ;;  product         2   21[BANK0 ] unsigned int 
 15627 ;; Return value:  Size  Location     Type
 15628 ;;                  2   17[BANK0 ] unsigned int 
 15629 ;; Registers used:
 15630 ;;		wreg, status,2, status,0
 15631 ;; Tracked objects:
 15632 ;;		On entry : 0/0
 15633 ;;		On exit  : 0/0
 15634 ;;		Unchanged: 0/0
 15635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15636 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15637 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15639 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15640 ;;Total ram usage:        6 bytes
 15641 ;; Hardware stack levels used:    1
 15642 ;; Hardware stack levels required when called:    6
 15643 ;; This function calls:
 15644 ;;		Nothing
 15645 ;; This function is called by:
 15646 ;;		_calcUpstroke
 15647 ;;		_calcDownstroke
 15648 ;;		_atoi
 15649 ;; This function uses a non-reentrant model
 15650 ;;
 15651                           
 15652                           
 15653                           ;psect for function ___wmul
 15654  22C7                     ___wmul:	
 15655                           
 15656                           ;incstack = 0
 15657                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 15658  22C7  0020               	movlb	0	; select bank0
 15659  22C8  01B5               	clrf	___wmul@product
 15660  22C9  01B6               	clrf	___wmul@product+1
 15661  22CA                     l8259:	
 15662  22CA  1C31               	btfss	___wmul@multiplier,0
 15663  22CB  2AD0               	goto	l1719
 15664  22CC  0833               	movf	___wmul@multiplicand,w
 15665  22CD  07B5               	addwf	___wmul@product,f
 15666  22CE  0834               	movf	___wmul@multiplicand+1,w
 15667  22CF  3DB6               	addwfc	___wmul@product+1,f
 15668  22D0                     l1719:	
 15669  22D0  3001               	movlw	1
 15670  22D1                     u8235:	
 15671  22D1  35B3               	lslf	___wmul@multiplicand,f
 15672  22D2  0DB4               	rlf	___wmul@multiplicand+1,f
 15673  22D3  0B89               	decfsz	9,f
 15674  22D4  2AD1               	goto	u8235
 15675  22D5  3001               	movlw	1
 15676  22D6                     u8245:	
 15677  22D6  36B2               	lsrf	___wmul@multiplier+1,f
 15678  22D7  0CB1               	rrf	___wmul@multiplier,f
 15679  22D8  0B89               	decfsz	9,f
 15680  22D9  2AD6               	goto	u8245
 15681  22DA  0831               	movf	___wmul@multiplier,w
 15682  22DB  0432               	iorwf	___wmul@multiplier+1,w
 15683  22DC  1D03               	btfss	3,2
 15684  22DD  2ACA               	goto	l8259
 15685  22DE  0836               	movf	___wmul@product+1,w
 15686  22DF  00B2               	movwf	?___wmul+1
 15687  22E0  0835               	movf	___wmul@product,w
 15688  22E1  00B1               	movwf	?___wmul
 15689  22E2  0008               	return
 15690  22E3                     __end_of___wmul:	
 15691                           
 15692                           	psect	text48
 15693  241B                     __ptext48:	
 15694 ;; *************** function ___awtoft *****************
 15695 ;; Defined at:
 15696 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15697 ;; Parameters:    Size  Location     Type
 15698 ;;  c               2   32[BANK0 ] int 
 15699 ;; Auto vars:     Size  Location     Type
 15700 ;;  sign            1   37[BANK0 ] unsigned char 
 15701 ;; Return value:  Size  Location     Type
 15702 ;;                  3   32[BANK0 ] float 
 15703 ;; Registers used:
 15704 ;;		wreg, status,2, status,0, pclath, cstack
 15705 ;; Tracked objects:
 15706 ;;		On entry : 0/0
 15707 ;;		On exit  : 0/0
 15708 ;;		Unchanged: 0/0
 15709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15710 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15711 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15712 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15713 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15714 ;;Total ram usage:        6 bytes
 15715 ;; Hardware stack levels used:    1
 15716 ;; Hardware stack levels required when called:    7
 15717 ;; This function calls:
 15718 ;;		___ftpack
 15719 ;; This function is called by:
 15720 ;;		_main_initialize
 15721 ;;		_setDrvPiezoOnTime
 15722 ;;		_setH1OffTime
 15723 ;;		_setH2OnTime
 15724 ;;		_calcUpstroke
 15725 ;;		_calcDownstroke
 15726 ;;		_drv_outputSine
 15727 ;; This function uses a non-reentrant model
 15728 ;;
 15729                           
 15730                           
 15731                           ;psect for function ___awtoft
 15732  241B                     ___awtoft:	
 15733                           
 15734                           ;incstack = 0
 15735                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15736  241B  0020               	movlb	0	; select bank0
 15737  241C  01C5               	clrf	___awtoft@sign
 15738  241D  1FC1               	btfss	___awtoft@c+1,7
 15739  241E  2C26               	goto	l8323
 15740  241F  09C0               	comf	___awtoft@c,f
 15741  2420  09C1               	comf	___awtoft@c+1,f
 15742  2421  0AC0               	incf	___awtoft@c,f
 15743  2422  1903               	skipnz
 15744  2423  0AC1               	incf	___awtoft@c+1,f
 15745  2424  01C5               	clrf	___awtoft@sign
 15746  2425  0AC5               	incf	___awtoft@sign,f
 15747  2426                     l8323:	
 15748  2426  0840               	movf	___awtoft@c,w
 15749  2427  00B1               	movwf	___ftpack@arg
 15750  2428  0841               	movf	___awtoft@c+1,w
 15751  2429  00B2               	movwf	___ftpack@arg+1
 15752  242A  01B3               	clrf	___ftpack@arg+2
 15753  242B  308E               	movlw	142
 15754  242C  00C3               	movwf	??___awtoft
 15755  242D  0843               	movf	??___awtoft,w
 15756  242E  00B4               	movwf	___ftpack@exp
 15757  242F  0845               	movf	___awtoft@sign,w
 15758  2430  00C4               	movwf	??___awtoft+1
 15759  2431  0844               	movf	??___awtoft+1,w
 15760  2432  00B5               	movwf	___ftpack@sign
 15761  2433  319F  272A         	fcall	___ftpack
 15762  2435  0020               	movlb	0	; select bank0
 15763  2436  0831               	movf	?___ftpack,w
 15764  2437  00C0               	movwf	?___awtoft
 15765  2438  0832               	movf	?___ftpack+1,w
 15766  2439  00C1               	movwf	?___awtoft+1
 15767  243A  0833               	movf	?___ftpack+2,w
 15768  243B  00C2               	movwf	?___awtoft+2
 15769  243C  0008               	return
 15770  243D                     __end_of___awtoft:	
 15771                           
 15772                           	psect	text49
 15773  1F2A                     __ptext49:	
 15774 ;; *************** function ___ftpack *****************
 15775 ;; Defined at:
 15776 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15777 ;; Parameters:    Size  Location     Type
 15778 ;;  arg             3   17[BANK0 ] unsigned um
 15779 ;;  exp             1   20[BANK0 ] unsigned char 
 15780 ;;  sign            1   21[BANK0 ] unsigned char 
 15781 ;; Auto vars:     Size  Location     Type
 15782 ;;		None
 15783 ;; Return value:  Size  Location     Type
 15784 ;;                  3   17[BANK0 ] float 
 15785 ;; Registers used:
 15786 ;;		wreg, status,2, status,0
 15787 ;; Tracked objects:
 15788 ;;		On entry : 0/0
 15789 ;;		On exit  : 0/0
 15790 ;;		Unchanged: 0/0
 15791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15792 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15794 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15795 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15796 ;;Total ram usage:        8 bytes
 15797 ;; Hardware stack levels used:    1
 15798 ;; Hardware stack levels required when called:    6
 15799 ;; This function calls:
 15800 ;;		Nothing
 15801 ;; This function is called by:
 15802 ;;		___altoft
 15803 ;;		___awtoft
 15804 ;;		___ftadd
 15805 ;;		___ftmul
 15806 ;; This function uses a non-reentrant model
 15807 ;;
 15808                           
 15809                           
 15810                           ;psect for function ___ftpack
 15811  1F2A                     ___ftpack:	
 15812                           
 15813                           ;incstack = 0
 15814                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15815  1F2A  0020               	movlb	0	; select bank0
 15816  1F2B  0834               	movf	___ftpack@exp,w
 15817  1F2C  1903               	btfsc	3,2
 15818  1F2D  2F33               	goto	l7775
 15819  1F2E  0833               	movf	___ftpack@arg+2,w
 15820  1F2F  0432               	iorwf	___ftpack@arg+1,w
 15821  1F30  0431               	iorwf	___ftpack@arg,w
 15822  1F31  1D03               	skipz
 15823  1F32  2F44               	goto	l7781
 15824  1F33                     l7775:	
 15825  1F33  3000               	movlw	0
 15826  1F34  00B1               	movwf	?___ftpack
 15827  1F35  3000               	movlw	0
 15828  1F36  00B2               	movwf	?___ftpack+1
 15829  1F37  3000               	movlw	0
 15830  1F38  00B3               	movwf	?___ftpack+2
 15831  1F39  0008               	return
 15832  1F3A                     l7779:	
 15833  1F3A  3001               	movlw	1
 15834  1F3B  00B6               	movwf	??___ftpack
 15835  1F3C  0836               	movf	??___ftpack,w
 15836  1F3D  07B4               	addwf	___ftpack@exp,f
 15837  1F3E  3001               	movlw	1
 15838  1F3F                     u7075:	
 15839  1F3F  36B3               	lsrf	___ftpack@arg+2,f
 15840  1F40  0CB2               	rrf	___ftpack@arg+1,f
 15841  1F41  0CB1               	rrf	___ftpack@arg,f
 15842  1F42  0B89               	decfsz	9,f
 15843  1F43  2F3F               	goto	u7075
 15844  1F44                     l7781:	
 15845  1F44  30FE               	movlw	254
 15846  1F45  0533               	andwf	___ftpack@arg+2,w
 15847  1F46  1903               	btfsc	3,2
 15848  1F47  2F5D               	goto	l1895
 15849  1F48  2F3A               	goto	l7779
 15850  1F49                     l7783:	
 15851  1F49  3001               	movlw	1
 15852  1F4A  00B6               	movwf	??___ftpack
 15853  1F4B  0836               	movf	??___ftpack,w
 15854  1F4C  07B4               	addwf	___ftpack@exp,f
 15855  1F4D  3001               	movlw	1
 15856  1F4E  07B1               	addwf	___ftpack@arg,f
 15857  1F4F  3000               	movlw	0
 15858  1F50  1803               	skipnc
 15859  1F51  3001               	movlw	1
 15860  1F52  07B2               	addwf	___ftpack@arg+1,f
 15861  1F53  3000               	movlw	0
 15862  1F54  1803               	skipnc
 15863  1F55  3001               	movlw	1
 15864  1F56  07B3               	addwf	___ftpack@arg+2,f
 15865  1F57  3001               	movlw	1
 15866  1F58                     u7095:	
 15867  1F58  36B3               	lsrf	___ftpack@arg+2,f
 15868  1F59  0CB2               	rrf	___ftpack@arg+1,f
 15869  1F5A  0CB1               	rrf	___ftpack@arg,f
 15870  1F5B  0B89               	decfsz	9,f
 15871  1F5C  2F58               	goto	u7095
 15872  1F5D                     l1895:	
 15873  1F5D  30FF               	movlw	255
 15874  1F5E  0533               	andwf	___ftpack@arg+2,w
 15875  1F5F  1903               	btfsc	3,2
 15876  1F60  2F6A               	goto	l7791
 15877  1F61  2F49               	goto	l7783
 15878  1F62                     l7789:	
 15879  1F62  3001               	movlw	1
 15880  1F63  02B4               	subwf	___ftpack@exp,f
 15881  1F64  3001               	movlw	1
 15882  1F65                     u7115:	
 15883  1F65  35B1               	lslf	___ftpack@arg,f
 15884  1F66  0DB2               	rlf	___ftpack@arg+1,f
 15885  1F67  0DB3               	rlf	___ftpack@arg+2,f
 15886  1F68  0B89               	decfsz	9,f
 15887  1F69  2F65               	goto	u7115
 15888  1F6A                     l7791:	
 15889  1F6A  1BB2               	btfsc	___ftpack@arg+1,7
 15890  1F6B  2F70               	goto	l1902
 15891  1F6C  3002               	movlw	2
 15892  1F6D  0234               	subwf	___ftpack@exp,w
 15893  1F6E  1803               	skipnc
 15894  1F6F  2F62               	goto	l7789
 15895  1F70                     l1902:	
 15896  1F70  1834               	btfsc	___ftpack@exp,0
 15897  1F71  2F78               	goto	l1903
 15898  1F72  30FF               	movlw	255
 15899  1F73  05B1               	andwf	___ftpack@arg,f
 15900  1F74  307F               	movlw	127
 15901  1F75  05B2               	andwf	___ftpack@arg+1,f
 15902  1F76  30FF               	movlw	255
 15903  1F77  05B3               	andwf	___ftpack@arg+2,f
 15904  1F78                     l1903:	
 15905  1F78  1003               	clrc
 15906  1F79  0CB4               	rrf	___ftpack@exp,f
 15907  1F7A  0834               	movf	___ftpack@exp,w
 15908  1F7B  00B6               	movwf	??___ftpack
 15909  1F7C  01B7               	clrf	??___ftpack+1
 15910  1F7D  01B8               	clrf	??___ftpack+2
 15911  1F7E  3010               	movlw	16
 15912  1F7F                     u7155:	
 15913  1F7F  35B6               	lslf	??___ftpack,f
 15914  1F80  0DB7               	rlf	??___ftpack+1,f
 15915  1F81  0DB8               	rlf	??___ftpack+2,f
 15916  1F82  0B89               	decfsz	9,f
 15917  1F83  2F7F               	goto	u7155
 15918  1F84  0836               	movf	??___ftpack,w
 15919  1F85  04B1               	iorwf	___ftpack@arg,f
 15920  1F86  0837               	movf	??___ftpack+1,w
 15921  1F87  04B2               	iorwf	___ftpack@arg+1,f
 15922  1F88  0838               	movf	??___ftpack+2,w
 15923  1F89  04B3               	iorwf	___ftpack@arg+2,f
 15924  1F8A  0835               	movf	___ftpack@sign,w
 15925  1F8B  1903               	btfsc	3,2
 15926  1F8C  0008               	return
 15927  1F8D  17B3               	bsf	___ftpack@arg+2,7
 15928  1F8E  0008               	return
 15929  1F8F                     __end_of___ftpack:	
 15930                           
 15931                           	psect	text50
 15932  1989                     __ptext50:	
 15933 ;; *************** function _setDrvGain *****************
 15934 ;; Defined at:
 15935 ;;		line 418 in file "main.c"
 15936 ;; Parameters:    Size  Location     Type
 15937 ;;  gain            2   21[BANK1 ] int 
 15938 ;; Auto vars:     Size  Location     Type
 15939 ;;  setGain         2   24[BANK1 ] int 
 15940 ;; Return value:  Size  Location     Type
 15941 ;;                  2   21[BANK1 ] int 
 15942 ;; Registers used:
 15943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15944 ;; Tracked objects:
 15945 ;;		On entry : 0/0
 15946 ;;		On exit  : 0/0
 15947 ;;		Unchanged: 0/0
 15948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15949 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15950 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15951 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15952 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15953 ;;Total ram usage:        5 bytes
 15954 ;; Hardware stack levels used:    1
 15955 ;; Hardware stack levels required when called:   13
 15956 ;; This function calls:
 15957 ;;		_drv_write
 15958 ;;		_printf
 15959 ;; This function is called by:
 15960 ;;		_execCmd
 15961 ;; This function uses a non-reentrant model
 15962 ;;
 15963                           
 15964                           
 15965                           ;psect for function _setDrvGain
 15966  1989                     _setDrvGain:	
 15967                           
 15968                           ;main.c: 419: int setGain = 0;
 15969                           
 15970                           ;incstack = 0
 15971                           ; Regs used in _setDrvGain: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15972  1989  0021               	movlb	1	; select bank1
 15973  198A  01B8               	clrf	setDrvGain@setGain^(0+128)
 15974  198B  01B9               	clrf	(setDrvGain@setGain+1)^(0+128)
 15975                           
 15976                           ;main.c: 420: switch (gain){
 15977  198C  29A5               	goto	l8771
 15978  198D                     l8755:	
 15979                           ;main.c: 421: case 0: setGain = 0x00; break;
 15980                           
 15981  198D  01B8               	clrf	setDrvGain@setGain^(0+128)
 15982  198E  01B9               	clrf	(setDrvGain@setGain+1)^(0+128)
 15983  198F  29B8               	goto	l8773
 15984  1990                     l8757:	
 15985                           ;main.c: 422: case 1: setGain = 0x01; break;
 15986                           
 15987  1990  3001               	movlw	1
 15988  1991  2995               	goto	L30
 15989  1992                     l8759:	
 15990                           ;main.c: 423: case 2: setGain = 0x02; break;
 15991                           
 15992  1992  3002               	movlw	2
 15993  1993  2995               	goto	L30
 15994  1994                     l8761:	
 15995                           ;main.c: 424: case 3: setGain = 0x03; break;
 15996                           
 15997  1994  3003               	movlw	3
 15998  1995                     L30:	
 15999  1995  00B8               	movwf	setDrvGain@setGain^(0+128)
 16000  1996  3000               	movlw	0
 16001  1997  00B9               	movwf	(setDrvGain@setGain^(0+128)+1)
 16002  1998  29B8               	goto	l8773
 16003  1999                     l8763:	
 16004                           ;main.c: 425: default: printf("E\n"); return 1;
 16005                           
 16006  1999  3049               	movlw	low (STR_15| (0+32768))
 16007  199A  00A0               	movwf	printf@f^(0+128)
 16008  199B  30B0               	movlw	high (STR_15| (0+32768))
 16009  199C  00A1               	movwf	(printf@f^(0+128)+1)
 16010  199D  318E  26CE         	fcall	_printf
 16011  199F  3001               	movlw	1
 16012  19A0  0021               	movlb	1	; select bank1
 16013  19A1  00B5               	movwf	?_setDrvGain^(0+128)
 16014  19A2  3000               	movlw	0
 16015  19A3  00B6               	movwf	(?_setDrvGain^(0+128)+1)
 16016  19A4  0008               	return
 16017  19A5                     l8771:	
 16018                           ;main.c: 426: }
 16019                           
 16020                           
 16021                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16022                           ; Switch size 1, requested type "space"
 16023                           ; Number of cases is 1, Range of values is 0 to 0
 16024                           ; switch strategies available:
 16025                           ; Name         Instructions Cycles
 16026                           ; simple_byte            4     3 (average)
 16027                           ; direct_byte            8     6 (fixed)
 16028                           ; jumptable            260     6 (fixed)
 16029                           ;	Chosen strategy is simple_byte
 16030  19A5  0836               	movf	(setDrvGain@gain+1)^(0+128),w
 16031  19A6  3A00               	xorlw	0	; case 0
 16032  19A7  1903               	skipnz
 16033  19A8  29AA               	goto	l9681
 16034  19A9  2999               	goto	l8763
 16035  19AA                     l9681:	
 16036                           
 16037                           ; Switch size 1, requested type "space"
 16038                           ; Number of cases is 4, Range of values is 0 to 3
 16039                           ; switch strategies available:
 16040                           ; Name         Instructions Cycles
 16041                           ; simple_byte           13     7 (average)
 16042                           ; direct_byte           14     6 (fixed)
 16043                           ; jumptable            260     6 (fixed)
 16044                           ;	Chosen strategy is simple_byte
 16045  19AA  0835               	movf	setDrvGain@gain^(0+128),w
 16046  19AB  3A00               	xorlw	0	; case 0
 16047  19AC  1903               	skipnz
 16048  19AD  298D               	goto	l8755
 16049  19AE  3A01               	xorlw	1	; case 1
 16050  19AF  1903               	skipnz
 16051  19B0  2990               	goto	l8757
 16052  19B1  3A03               	xorlw	3	; case 2
 16053  19B2  1903               	skipnz
 16054  19B3  2992               	goto	l8759
 16055  19B4  3A01               	xorlw	1	; case 3
 16056  19B5  1903               	skipnz
 16057  19B6  2994               	goto	l8761
 16058  19B7  2999               	goto	l8763
 16059  19B8                     l8773:	
 16060                           
 16061                           ;main.c: 427: drv_write(0x01, setGain);
 16062  19B8  0838               	movf	setDrvGain@setGain^(0+128),w
 16063  19B9  00B7               	movwf	??_setDrvGain^(0+128)
 16064  19BA  0837               	movf	??_setDrvGain^(0+128),w
 16065  19BB  0020               	movlb	0	; select bank0
 16066  19BC  00C9               	movwf	drv_write@data
 16067  19BD  3001               	movlw	1
 16068  19BE  31A4  24A8  3199   	fcall	_drv_write
 16069                           
 16070                           ;main.c: 428: printf("A\n");
 16071  19C1  3046               	movlw	low (STR_8| (0+32768))
 16072  19C2  0021               	movlb	1	; select bank1
 16073  19C3  00A0               	movwf	printf@f^(0+128)
 16074  19C4  30B0               	movlw	high (STR_8| (0+32768))
 16075  19C5  00A1               	movwf	(printf@f^(0+128)+1)
 16076  19C6  318E  26CE         	fcall	_printf
 16077                           
 16078                           ;main.c: 429: return 0;
 16079  19C8  0021               	movlb	1	; select bank1
 16080  19C9  01B5               	clrf	?_setDrvGain^(0+128)
 16081  19CA  01B6               	clrf	(?_setDrvGain+1)^(0+128)
 16082  19CB  0008               	return
 16083  19CC                     __end_of_setDrvGain:	
 16084                           
 16085                           	psect	text51
 16086  139E                     __ptext51:	
 16087 ;; *************** function _setActive *****************
 16088 ;; Defined at:
 16089 ;;		line 535 in file "main.c"
 16090 ;; Parameters:    Size  Location     Type
 16091 ;;  probeNum        2   21[BANK1 ] int 
 16092 ;;  onOff           2   23[BANK1 ] int 
 16093 ;; Auto vars:     Size  Location     Type
 16094 ;;		None
 16095 ;; Return value:  Size  Location     Type
 16096 ;;                  2   21[BANK1 ] int 
 16097 ;; Registers used:
 16098 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16099 ;; Tracked objects:
 16100 ;;		On entry : 0/0
 16101 ;;		On exit  : 0/0
 16102 ;;		Unchanged: 0/0
 16103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16104 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16106 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16107 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16108 ;;Total ram usage:       12 bytes
 16109 ;; Hardware stack levels used:    1
 16110 ;; Hardware stack levels required when called:    9
 16111 ;; This function calls:
 16112 ;;		_printf
 16113 ;; This function is called by:
 16114 ;;		_execCmd
 16115 ;; This function uses a non-reentrant model
 16116 ;;
 16117                           
 16118                           
 16119                           ;psect for function _setActive
 16120  139E                     _setActive:	
 16121                           
 16122                           ;main.c: 538: if(moveMask & 1UL << probeNum){
 16123                           
 16124                           ;incstack = 0
 16125                           ; Regs used in _setActive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16126  139E  0021               	movlb	1	; select bank1
 16127  139F  0858               	movf	_moveMask^(0+128),w
 16128  13A0  00B9               	movwf	??_setActive^(0+128)
 16129  13A1  0859               	movf	(_moveMask+1)^(0+128),w
 16130  13A2  00BA               	movwf	(??_setActive^(0+128)+1)
 16131  13A3  085A               	movf	(_moveMask+2)^(0+128),w
 16132  13A4  00BB               	movwf	(??_setActive^(0+128)+2)
 16133  13A5  085B               	movf	(_moveMask+3)^(0+128),w
 16134  13A6  00BC               	movwf	(??_setActive^(0+128)+3)
 16135  13A7  3001               	movlw	1
 16136  13A8  00BD               	movwf	(??_setActive+4)^(0+128)
 16137  13A9  3000               	movlw	0
 16138  13AA  00BE               	movwf	((??_setActive+4)^(0+128)+1)
 16139  13AB  3000               	movlw	0
 16140  13AC  00BF               	movwf	((??_setActive+4)^(0+128)+2)
 16141  13AD  3000               	movlw	0
 16142  13AE  00C0               	movwf	((??_setActive+4)^(0+128)+3)
 16143  13AF  0A35               	incf	setActive@probeNum^(0+128),w
 16144  13B0  2BB5               	goto	u8890
 16145  13B1                     u8895:	
 16146  13B1  35BD               	lslf	(??_setActive+4)^(0+128),f
 16147  13B2  0DBE               	rlf	((??_setActive+4)^(0+128)+1),f
 16148  13B3  0DBF               	rlf	((??_setActive+4)^(0+128)+2),f
 16149  13B4  0DC0               	rlf	((??_setActive+4)^(0+128)+3),f
 16150  13B5                     u8890:	
 16151  13B5  0B89               	decfsz	9,f
 16152  13B6  2BB1               	goto	u8895
 16153  13B7  083D               	movf	(??_setActive+4)^(0+128),w
 16154  13B8  05B9               	andwf	??_setActive^(0+128),f
 16155  13B9  083E               	movf	(??_setActive+5)^(0+128),w
 16156  13BA  05BA               	andwf	(??_setActive^(0+128)+1),f
 16157  13BB  083F               	movf	(??_setActive+6)^(0+128),w
 16158  13BC  05BB               	andwf	(??_setActive^(0+128)+2),f
 16159  13BD  0840               	movf	(??_setActive+7)^(0+128),w
 16160  13BE  05BC               	andwf	(??_setActive^(0+128)+3),f
 16161  13BF  083C               	movf	(??_setActive+3)^(0+128),w
 16162  13C0  043B               	iorwf	(??_setActive+2)^(0+128),w
 16163  13C1  043A               	iorwf	(??_setActive+1)^(0+128),w
 16164  13C2  0439               	iorwf	??_setActive^(0+128),w
 16165  13C3  1903               	skipnz
 16166  13C4  2C08               	goto	l8901
 16167                           
 16168                           ;main.c: 539: if (onOff)
 16169  13C5  0837               	movf	setActive@onOff^(0+128),w
 16170  13C6  0438               	iorwf	(setActive@onOff+1)^(0+128),w
 16171  13C7  1903               	btfsc	3,2
 16172  13C8  2BE2               	goto	l8893
 16173                           
 16174                           ;main.c: 540: activeMask |= 1UL << probeNum;
 16175  13C9  3001               	movlw	1
 16176  13CA  00B9               	movwf	??_setActive^(0+128)
 16177  13CB  3000               	movlw	0
 16178  13CC  00BA               	movwf	(??_setActive^(0+128)+1)
 16179  13CD  3000               	movlw	0
 16180  13CE  00BB               	movwf	(??_setActive^(0+128)+2)
 16181  13CF  3000               	movlw	0
 16182  13D0  00BC               	movwf	(??_setActive^(0+128)+3)
 16183  13D1  0A35               	incf	setActive@probeNum^(0+128),w
 16184  13D2  2BD7               	goto	u8920
 16185  13D3                     u8925:	
 16186  13D3  35B9               	lslf	??_setActive^(0+128),f
 16187  13D4  0DBA               	rlf	(??_setActive^(0+128)+1),f
 16188  13D5  0DBB               	rlf	(??_setActive^(0+128)+2),f
 16189  13D6  0DBC               	rlf	(??_setActive^(0+128)+3),f
 16190  13D7                     u8920:	
 16191  13D7  0B89               	decfsz	9,f
 16192  13D8  2BD3               	goto	u8925
 16193  13D9  0839               	movf	??_setActive^(0+128),w
 16194  13DA  04DC               	iorwf	_activeMask^(0+128),f
 16195  13DB  083A               	movf	(??_setActive+1)^(0+128),w
 16196  13DC  04DD               	iorwf	(_activeMask+1)^(0+128),f
 16197  13DD  083B               	movf	(??_setActive+2)^(0+128),w
 16198  13DE  04DE               	iorwf	(_activeMask+2)^(0+128),f
 16199  13DF  083C               	movf	(??_setActive+3)^(0+128),w
 16200  13E0  04DF               	iorwf	(_activeMask+3)^(0+128),f
 16201  13E1  2BFE               	goto	l8895
 16202  13E2                     l8893:	
 16203                           
 16204                           ;main.c: 541: else
 16205                           ;main.c: 542: activeMask &= ~(1UL << probeNum);
 16206  13E2  3001               	movlw	1
 16207  13E3  00B9               	movwf	??_setActive^(0+128)
 16208  13E4  3000               	movlw	0
 16209  13E5  00BA               	movwf	(??_setActive^(0+128)+1)
 16210  13E6  3000               	movlw	0
 16211  13E7  00BB               	movwf	(??_setActive^(0+128)+2)
 16212  13E8  3000               	movlw	0
 16213  13E9  00BC               	movwf	(??_setActive^(0+128)+3)
 16214  13EA  0A35               	incf	setActive@probeNum^(0+128),w
 16215  13EB  2BF0               	goto	u8930
 16216  13EC                     u8935:	
 16217  13EC  35B9               	lslf	??_setActive^(0+128),f
 16218  13ED  0DBA               	rlf	(??_setActive^(0+128)+1),f
 16219  13EE  0DBB               	rlf	(??_setActive^(0+128)+2),f
 16220  13EF  0DBC               	rlf	(??_setActive^(0+128)+3),f
 16221  13F0                     u8930:	
 16222  13F0  0B89               	decfsz	9,f
 16223  13F1  2BEC               	goto	u8935
 16224  13F2  09B9               	comf	??_setActive^(0+128),f
 16225  13F3  09BA               	comf	(??_setActive^(0+128)+1),f
 16226  13F4  09BB               	comf	(??_setActive^(0+128)+2),f
 16227  13F5  09BC               	comf	(??_setActive^(0+128)+3),f
 16228  13F6  0839               	movf	??_setActive^(0+128),w
 16229  13F7  05DC               	andwf	_activeMask^(0+128),f
 16230  13F8  083A               	movf	(??_setActive+1)^(0+128),w
 16231  13F9  05DD               	andwf	(_activeMask+1)^(0+128),f
 16232  13FA  083B               	movf	(??_setActive+2)^(0+128),w
 16233  13FB  05DE               	andwf	(_activeMask+2)^(0+128),f
 16234  13FC  083C               	movf	(??_setActive+3)^(0+128),w
 16235  13FD  05DF               	andwf	(_activeMask+3)^(0+128),f
 16236  13FE                     l8895:	
 16237                           
 16238                           ;main.c: 543: printf("A\n");
 16239  13FE  3046               	movlw	low (STR_8| (0+32768))
 16240  13FF  00A0               	movwf	printf@f^(0+128)
 16241  1400  30B0               	movlw	high (STR_8| (0+32768))
 16242  1401  00A1               	movwf	(printf@f^(0+128)+1)
 16243  1402  318E  26CE         	fcall	_printf
 16244                           
 16245                           ;main.c: 544: return 0;
 16246  1404  0021               	movlb	1	; select bank1
 16247  1405  01B5               	clrf	?_setActive^(0+128)
 16248  1406  01B6               	clrf	(?_setActive+1)^(0+128)
 16249  1407  0008               	return
 16250  1408                     l8901:	
 16251                           
 16252                           ;main.c: 545: }
 16253                           ;main.c: 546: printf("E\n");
 16254  1408  3049               	movlw	low (STR_15| (0+32768))
 16255  1409  00A0               	movwf	printf@f^(0+128)
 16256  140A  30B0               	movlw	high (STR_15| (0+32768))
 16257  140B  00A1               	movwf	(printf@f^(0+128)+1)
 16258  140C  318E  26CE         	fcall	_printf
 16259                           
 16260                           ;main.c: 547: return 1;
 16261  140E  3001               	movlw	1
 16262  140F  0021               	movlb	1	; select bank1
 16263  1410  00B5               	movwf	?_setActive^(0+128)
 16264  1411  3000               	movlw	0
 16265  1412  00B6               	movwf	(?_setActive^(0+128)+1)
 16266  1413  0008               	return
 16267  1414                     __end_of_setActive:	
 16268                           
 16269                           	psect	text52
 16270  27C1                     __ptext52:	
 16271 ;; *************** function _getPosition *****************
 16272 ;; Defined at:
 16273 ;;		line 398 in file "main.c"
 16274 ;; Parameters:    Size  Location     Type
 16275 ;;  a               2   21[BANK1 ] int 
 16276 ;; Auto vars:     Size  Location     Type
 16277 ;;		None
 16278 ;; Return value:  Size  Location     Type
 16279 ;;                  2   21[BANK1 ] int 
 16280 ;; Registers used:
 16281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16282 ;; Tracked objects:
 16283 ;;		On entry : 0/0
 16284 ;;		On exit  : 0/0
 16285 ;;		Unchanged: 0/0
 16286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16287 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16289 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16290 ;;      Totals:         0       4       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16291 ;;Total ram usage:        6 bytes
 16292 ;; Hardware stack levels used:    1
 16293 ;; Hardware stack levels required when called:    9
 16294 ;; This function calls:
 16295 ;;		_printf
 16296 ;; This function is called by:
 16297 ;;		_execCmd
 16298 ;; This function uses a non-reentrant model
 16299 ;;
 16300                           
 16301                           
 16302                           ;psect for function _getPosition
 16303  27C1                     _getPosition:	
 16304                           
 16305                           ;main.c: 400: if (a>=0 && a < 24){
 16306                           
 16307                           ;incstack = 0
 16308                           ; Regs used in _getPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16309  27C1  0021               	movlb	1	; select bank1
 16310  27C2  1BB6               	btfsc	(getPosition@a+1)^(0+128),7
 16311  27C3  2FFA               	goto	l8737
 16312  27C4  0836               	movf	(getPosition@a+1)^(0+128),w
 16313  27C5  3A80               	xorlw	128
 16314  27C6  0020               	movlb	0	; select bank0
 16315  27C7  00C9               	movwf	??_getPosition
 16316  27C8  3080               	movlw	128
 16317  27C9  0249               	subwf	??_getPosition,w
 16318  27CA  1D03               	skipz
 16319  27CB  2FCF               	goto	u8805
 16320  27CC  3018               	movlw	24
 16321  27CD  0021               	movlb	1	; select bank1
 16322  27CE  0235               	subwf	getPosition@a^(0+128),w
 16323  27CF                     u8805:	
 16324  27CF  1803               	skipnc
 16325  27D0  2FFA               	goto	l8737
 16326                           
 16327                           ;main.c: 401: printf("%d\n", currentPositions_steps[a]);
 16328  27D1  3038               	movlw	low (STR_13| (0+32768))
 16329  27D2  0021               	movlb	1	; select bank1
 16330  27D3  00A0               	movwf	printf@f^(0+128)
 16331  27D4  30B0               	movlw	high (STR_13| (0+32768))
 16332  27D5  00A1               	movwf	(printf@f^(0+128)+1)
 16333  27D6  0836               	movf	(getPosition@a+1)^(0+128),w
 16334  27D7  0020               	movlb	0	; select bank0
 16335  27D8  00CA               	movwf	??_getPosition+1
 16336  27D9  0021               	movlb	1	; select bank1
 16337  27DA  0835               	movf	getPosition@a^(0+128),w
 16338  27DB  0020               	movlb	0	; select bank0
 16339  27DC  00C9               	movwf	??_getPosition
 16340  27DD  35C9               	lslf	??_getPosition,f
 16341  27DE  0DCA               	rlf	??_getPosition+1,f
 16342  27DF  35C9               	lslf	??_getPosition,f
 16343  27E0  0DCA               	rlf	??_getPosition+1,f
 16344  27E1  3090               	movlw	144
 16345  27E2  00CB               	movwf	??_getPosition+2
 16346  27E3  3027               	movlw	39
 16347  27E4  00CC               	movwf	??_getPosition+3
 16348  27E5  0849               	movf	??_getPosition,w
 16349  27E6  074B               	addwf	??_getPosition+2,w
 16350  27E7  0086               	movwf	6
 16351  27E8  084A               	movf	??_getPosition+1,w
 16352  27E9  3D4C               	addwfc	??_getPosition+3,w
 16353  27EA  0087               	movwf	7
 16354  27EB  3F40               	moviw [0]fsr1
 16355  27EC  0021               	movlb	1	; select bank1
 16356  27ED  00A2               	movwf	(?_printf^(0+128)+2)
 16357  27EE  3F41               	moviw [1]fsr1
 16358  27EF  00A3               	movwf	((?_printf+1)^(0+128)+2)
 16359  27F0  3F42               	moviw [2]fsr1
 16360  27F1  00A4               	movwf	((?_printf+2)^(0+128)+2)
 16361  27F2  3F43               	moviw [3]fsr1
 16362  27F3  00A5               	movwf	((?_printf+3)^(0+128)+2)
 16363  27F4  318E  26CE         	fcall	_printf
 16364                           
 16365                           ;main.c: 402: return 0;
 16366  27F6  0021               	movlb	1	; select bank1
 16367  27F7  01B5               	clrf	?_getPosition^(0+128)
 16368  27F8  01B6               	clrf	(?_getPosition+1)^(0+128)
 16369  27F9  0008               	return
 16370  27FA                     l8737:	
 16371                           
 16372                           ;main.c: 403: }
 16373                           ;main.c: 405: return 1;
 16374  27FA  3001               	movlw	1
 16375  27FB  0021               	movlb	1	; select bank1
 16376  27FC  00B5               	movwf	?_getPosition^(0+128)
 16377  27FD  3000               	movlw	0
 16378  27FE  00B6               	movwf	(?_getPosition^(0+128)+1)
 16379  27FF  0008               	return
 16380  2800                     __end_of_getPosition:	
 16381                           
 16382                           	psect	text53
 16383  1B88                     __ptext53:	
 16384 ;; *************** function _getMoveMask *****************
 16385 ;; Defined at:
 16386 ;;		line 575 in file "main.c"
 16387 ;; Parameters:    Size  Location     Type
 16388 ;;		None
 16389 ;; Auto vars:     Size  Location     Type
 16390 ;;  i               2   23[BANK1 ] int 
 16391 ;; Return value:  Size  Location     Type
 16392 ;;                  2   21[BANK1 ] int 
 16393 ;; Registers used:
 16394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16395 ;; Tracked objects:
 16396 ;;		On entry : 0/0
 16397 ;;		On exit  : 0/0
 16398 ;;		Unchanged: 0/0
 16399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16400 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16401 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16402 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16403 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16404 ;;Total ram usage:        8 bytes
 16405 ;; Hardware stack levels used:    1
 16406 ;; Hardware stack levels required when called:    9
 16407 ;; This function calls:
 16408 ;;		_printf
 16409 ;; This function is called by:
 16410 ;;		_execCmd
 16411 ;; This function uses a non-reentrant model
 16412 ;;
 16413                           
 16414                           
 16415                           ;psect for function _getMoveMask
 16416  1B88                     _getMoveMask:	
 16417                           
 16418                           ;main.c: 576: for(int i=24-1; i>=0; i--){
 16419                           
 16420                           ;incstack = 0
 16421                           ; Regs used in _getMoveMask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16422  1B88  3017               	movlw	23
 16423  1B89  0021               	movlb	1	; select bank1
 16424  1B8A  00B7               	movwf	getMoveMask@i^(0+128)
 16425  1B8B  3000               	movlw	0
 16426  1B8C  00B8               	movwf	(getMoveMask@i^(0+128)+1)
 16427  1B8D  1BB8               	btfsc	(getMoveMask@i+1)^(0+128),7
 16428  1B8E  2BCB               	goto	l8957
 16429  1B8F                     l8951:	
 16430                           
 16431                           ;main.c: 577: printf("%d ", (moveMask >> i) & 1 );
 16432  1B8F  303C               	movlw	low (STR_1| (0+32768))
 16433  1B90  00A0               	movwf	printf@f^(0+128)
 16434  1B91  30B0               	movlw	high (STR_1| (0+32768))
 16435  1B92  00A1               	movwf	(printf@f^(0+128)+1)
 16436  1B93  0858               	movf	_moveMask^(0+128),w
 16437  1B94  0020               	movlb	0	; select bank0
 16438  1B95  00C9               	movwf	??_getMoveMask
 16439  1B96  0021               	movlb	1	; select bank1
 16440  1B97  0859               	movf	(_moveMask+1)^(0+128),w
 16441  1B98  0020               	movlb	0	; select bank0
 16442  1B99  00CA               	movwf	??_getMoveMask+1
 16443  1B9A  0021               	movlb	1	; select bank1
 16444  1B9B  085A               	movf	(_moveMask+2)^(0+128),w
 16445  1B9C  0020               	movlb	0	; select bank0
 16446  1B9D  00CB               	movwf	??_getMoveMask+2
 16447  1B9E  0021               	movlb	1	; select bank1
 16448  1B9F  085B               	movf	(_moveMask+3)^(0+128),w
 16449  1BA0  0020               	movlb	0	; select bank0
 16450  1BA1  00CC               	movwf	??_getMoveMask+3
 16451  1BA2  0021               	movlb	1	; select bank1
 16452  1BA3  0A37               	incf	getMoveMask@i^(0+128),w
 16453  1BA4  0020               	movlb	0	; select bank0
 16454  1BA5  2BAB               	goto	u9020
 16455  1BA6                     u9025:	
 16456  1BA6  1003               	clrc
 16457  1BA7  0CCC               	rrf	??_getMoveMask+3,f
 16458  1BA8  0CCB               	rrf	??_getMoveMask+2,f
 16459  1BA9  0CCA               	rrf	??_getMoveMask+1,f
 16460  1BAA  0CC9               	rrf	??_getMoveMask,f
 16461  1BAB                     u9020:	
 16462  1BAB  3EFF               	addlw	-1
 16463  1BAC  1D03               	skipz
 16464  1BAD  2BA6               	goto	u9025
 16465  1BAE  3001               	movlw	1
 16466  1BAF  0549               	andwf	??_getMoveMask,w
 16467  1BB0  0021               	movlb	1	; select bank1
 16468  1BB1  00A2               	movwf	(?_printf^(0+128)+2)
 16469  1BB2  3000               	movlw	0
 16470  1BB3  0020               	movlb	0	; select bank0
 16471  1BB4  054A               	andwf	??_getMoveMask+1,w
 16472  1BB5  0021               	movlb	1	; select bank1
 16473  1BB6  00A3               	movwf	((?_printf+1)^(0+128)+2)
 16474  1BB7  3000               	movlw	0
 16475  1BB8  0020               	movlb	0	; select bank0
 16476  1BB9  054B               	andwf	??_getMoveMask+2,w
 16477  1BBA  0021               	movlb	1	; select bank1
 16478  1BBB  00A4               	movwf	((?_printf+2)^(0+128)+2)
 16479  1BBC  3000               	movlw	0
 16480  1BBD  0020               	movlb	0	; select bank0
 16481  1BBE  054C               	andwf	??_getMoveMask+3,w
 16482  1BBF  0021               	movlb	1	; select bank1
 16483  1BC0  00A5               	movwf	((?_printf+3)^(0+128)+2)
 16484  1BC1  318E  26CE  319B   	fcall	_printf
 16485  1BC4  30FF               	movlw	255
 16486  1BC5  0021               	movlb	1	; select bank1
 16487  1BC6  07B7               	addwf	getMoveMask@i^(0+128),f
 16488  1BC7  30FF               	movlw	255
 16489  1BC8  3DB8               	addwfc	(getMoveMask@i+1)^(0+128),f
 16490  1BC9  1FB8               	btfss	(getMoveMask@i+1)^(0+128),7
 16491  1BCA  2B8F               	goto	l8951
 16492  1BCB                     l8957:	
 16493                           
 16494                           ;main.c: 578: }
 16495                           ;main.c: 579: printf("\n");
 16496  1BCB  3063               	movlw	low ((STR_37+28)| (0+32768))
 16497  1BCC  00A0               	movwf	printf@f^(0+128)
 16498  1BCD  30A8               	movlw	high ((STR_37+28)| (0+32768))
 16499  1BCE  00A1               	movwf	(printf@f^(0+128)+1)
 16500  1BCF  318E  26CE         	fcall	_printf
 16501                           
 16502                           ;main.c: 580: return 0;
 16503  1BD1  0021               	movlb	1	; select bank1
 16504  1BD2  01B5               	clrf	?_getMoveMask^(0+128)
 16505  1BD3  01B6               	clrf	(?_getMoveMask+1)^(0+128)
 16506  1BD4  0008               	return
 16507  1BD5                     __end_of_getMoveMask:	
 16508                           
 16509                           	psect	text54
 16510  243D                     __ptext54:	
 16511 ;; *************** function _getMotionStatus *****************
 16512 ;; Defined at:
 16513 ;;		line 582 in file "main.c"
 16514 ;; Parameters:    Size  Location     Type
 16515 ;;		None
 16516 ;; Auto vars:     Size  Location     Type
 16517 ;;		None
 16518 ;; Return value:  Size  Location     Type
 16519 ;;                  2   21[BANK1 ] int 
 16520 ;; Registers used:
 16521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16522 ;; Tracked objects:
 16523 ;;		On entry : 0/0
 16524 ;;		On exit  : 0/0
 16525 ;;		Unchanged: 0/0
 16526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16527 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16530 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16531 ;;Total ram usage:        2 bytes
 16532 ;; Hardware stack levels used:    1
 16533 ;; Hardware stack levels required when called:    9
 16534 ;; This function calls:
 16535 ;;		_printf
 16536 ;; This function is called by:
 16537 ;;		_execCmd
 16538 ;; This function uses a non-reentrant model
 16539 ;;
 16540                           
 16541                           
 16542                           ;psect for function _getMotionStatus
 16543  243D                     _getMotionStatus:	
 16544                           
 16545                           ;main.c: 583: switch(motionType){
 16546                           
 16547                           ;incstack = 0
 16548                           ; Regs used in _getMotionStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16549  243D  2C56               	goto	l8973
 16550  243E                     l8965:	
 16551                           ;main.c: 584: case REL_MOVE: printf("R\n"); break;
 16552                           
 16553  243E  304F               	movlw	low (STR_34| (0+32768))
 16554  243F  0021               	movlb	1	; select bank1
 16555  2440  00A0               	movwf	printf@f^(0+128)
 16556  2441  30B0               	movlw	high (STR_34| (0+32768))
 16557  2442  00A1               	movwf	(printf@f^(0+128)+1)
 16558  2443  318E  26CE         	fcall	_printf
 16559  2445  0008               	return
 16560  2446                     l8967:	
 16561                           ;main.c: 585: case ABS_MOVE: printf("A\n"); break;
 16562                           
 16563  2446  3046               	movlw	low (STR_8| (0+32768))
 16564  2447  0021               	movlb	1	; select bank1
 16565  2448  00A0               	movwf	printf@f^(0+128)
 16566  2449  30B0               	movlw	high (STR_8| (0+32768))
 16567  244A  00A1               	movwf	(printf@f^(0+128)+1)
 16568  244B  318E  26CE         	fcall	_printf
 16569  244D  0008               	return
 16570  244E                     l8969:	
 16571                           ;main.c: 586: default: printf("N\n"); break;
 16572                           
 16573  244E  304C               	movlw	low (STR_36| (0+32768))
 16574  244F  0021               	movlb	1	; select bank1
 16575  2450  00A0               	movwf	printf@f^(0+128)
 16576  2451  30B0               	movlw	high (STR_36| (0+32768))
 16577  2452  00A1               	movwf	(printf@f^(0+128)+1)
 16578  2453  318E  26CE         	fcall	_printf
 16579                           
 16580                           ;main.c: 587: }
 16581  2455  0008               	return
 16582  2456                     l8973:	
 16583  2456  0020               	movlb	0	; select bank0
 16584  2457  0855               	movf	_motionType,w
 16585                           
 16586                           ; Switch size 1, requested type "space"
 16587                           ; Number of cases is 2, Range of values is 1 to 2
 16588                           ; switch strategies available:
 16589                           ; Name         Instructions Cycles
 16590                           ; simple_byte            7     4 (average)
 16591                           ; direct_byte           13     9 (fixed)
 16592                           ; jumptable            263     9 (fixed)
 16593                           ;	Chosen strategy is simple_byte
 16594  2458  3A01               	xorlw	1	; case 1
 16595  2459  1903               	skipnz
 16596  245A  2C3E               	goto	l8965
 16597  245B  3A03               	xorlw	3	; case 2
 16598  245C  1903               	skipnz
 16599  245D  2C46               	goto	l8967
 16600  245E  2C4E               	goto	l8969
 16601  245F  0008               	return
 16602  2460                     __end_of_getMotionStatus:	
 16603                           
 16604                           	psect	text55
 16605  1B3B                     __ptext55:	
 16606 ;; *************** function _getActive *****************
 16607 ;; Defined at:
 16608 ;;		line 567 in file "main.c"
 16609 ;; Parameters:    Size  Location     Type
 16610 ;;		None
 16611 ;; Auto vars:     Size  Location     Type
 16612 ;;  i               2   23[BANK1 ] int 
 16613 ;; Return value:  Size  Location     Type
 16614 ;;                  2   21[BANK1 ] int 
 16615 ;; Registers used:
 16616 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16617 ;; Tracked objects:
 16618 ;;		On entry : 0/0
 16619 ;;		On exit  : 0/0
 16620 ;;		Unchanged: 0/0
 16621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16622 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16623 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16624 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16625 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16626 ;;Total ram usage:        8 bytes
 16627 ;; Hardware stack levels used:    1
 16628 ;; Hardware stack levels required when called:    9
 16629 ;; This function calls:
 16630 ;;		_printf
 16631 ;; This function is called by:
 16632 ;;		_execCmd
 16633 ;; This function uses a non-reentrant model
 16634 ;;
 16635                           
 16636                           
 16637                           ;psect for function _getActive
 16638  1B3B                     _getActive:	
 16639                           
 16640                           ;main.c: 568: for(int i=24-1; i>=0; i--){
 16641                           
 16642                           ;incstack = 0
 16643                           ; Regs used in _getActive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16644  1B3B  3017               	movlw	23
 16645  1B3C  0021               	movlb	1	; select bank1
 16646  1B3D  00B7               	movwf	getActive@i^(0+128)
 16647  1B3E  3000               	movlw	0
 16648  1B3F  00B8               	movwf	(getActive@i^(0+128)+1)
 16649  1B40  1BB8               	btfsc	(getActive@i+1)^(0+128),7
 16650  1B41  2B7E               	goto	l8939
 16651  1B42                     l8933:	
 16652                           
 16653                           ;main.c: 569: printf("%d ", (activeMask >> i) & 1 );
 16654  1B42  303C               	movlw	low (STR_1| (0+32768))
 16655  1B43  00A0               	movwf	printf@f^(0+128)
 16656  1B44  30B0               	movlw	high (STR_1| (0+32768))
 16657  1B45  00A1               	movwf	(printf@f^(0+128)+1)
 16658  1B46  085C               	movf	_activeMask^(0+128),w
 16659  1B47  0020               	movlb	0	; select bank0
 16660  1B48  00C9               	movwf	??_getActive
 16661  1B49  0021               	movlb	1	; select bank1
 16662  1B4A  085D               	movf	(_activeMask+1)^(0+128),w
 16663  1B4B  0020               	movlb	0	; select bank0
 16664  1B4C  00CA               	movwf	??_getActive+1
 16665  1B4D  0021               	movlb	1	; select bank1
 16666  1B4E  085E               	movf	(_activeMask+2)^(0+128),w
 16667  1B4F  0020               	movlb	0	; select bank0
 16668  1B50  00CB               	movwf	??_getActive+2
 16669  1B51  0021               	movlb	1	; select bank1
 16670  1B52  085F               	movf	(_activeMask+3)^(0+128),w
 16671  1B53  0020               	movlb	0	; select bank0
 16672  1B54  00CC               	movwf	??_getActive+3
 16673  1B55  0021               	movlb	1	; select bank1
 16674  1B56  0A37               	incf	getActive@i^(0+128),w
 16675  1B57  0020               	movlb	0	; select bank0
 16676  1B58  2B5E               	goto	u8990
 16677  1B59                     u8995:	
 16678  1B59  1003               	clrc
 16679  1B5A  0CCC               	rrf	??_getActive+3,f
 16680  1B5B  0CCB               	rrf	??_getActive+2,f
 16681  1B5C  0CCA               	rrf	??_getActive+1,f
 16682  1B5D  0CC9               	rrf	??_getActive,f
 16683  1B5E                     u8990:	
 16684  1B5E  3EFF               	addlw	-1
 16685  1B5F  1D03               	skipz
 16686  1B60  2B59               	goto	u8995
 16687  1B61  3001               	movlw	1
 16688  1B62  0549               	andwf	??_getActive,w
 16689  1B63  0021               	movlb	1	; select bank1
 16690  1B64  00A2               	movwf	(?_printf^(0+128)+2)
 16691  1B65  3000               	movlw	0
 16692  1B66  0020               	movlb	0	; select bank0
 16693  1B67  054A               	andwf	??_getActive+1,w
 16694  1B68  0021               	movlb	1	; select bank1
 16695  1B69  00A3               	movwf	((?_printf+1)^(0+128)+2)
 16696  1B6A  3000               	movlw	0
 16697  1B6B  0020               	movlb	0	; select bank0
 16698  1B6C  054B               	andwf	??_getActive+2,w
 16699  1B6D  0021               	movlb	1	; select bank1
 16700  1B6E  00A4               	movwf	((?_printf+2)^(0+128)+2)
 16701  1B6F  3000               	movlw	0
 16702  1B70  0020               	movlb	0	; select bank0
 16703  1B71  054C               	andwf	??_getActive+3,w
 16704  1B72  0021               	movlb	1	; select bank1
 16705  1B73  00A5               	movwf	((?_printf+3)^(0+128)+2)
 16706  1B74  318E  26CE  319B   	fcall	_printf
 16707  1B77  30FF               	movlw	255
 16708  1B78  0021               	movlb	1	; select bank1
 16709  1B79  07B7               	addwf	getActive@i^(0+128),f
 16710  1B7A  30FF               	movlw	255
 16711  1B7B  3DB8               	addwfc	(getActive@i+1)^(0+128),f
 16712  1B7C  1FB8               	btfss	(getActive@i+1)^(0+128),7
 16713  1B7D  2B42               	goto	l8933
 16714  1B7E                     l8939:	
 16715                           
 16716                           ;main.c: 570: }
 16717                           ;main.c: 571: printf("\n");
 16718  1B7E  3063               	movlw	low ((STR_37+28)| (0+32768))
 16719  1B7F  00A0               	movwf	printf@f^(0+128)
 16720  1B80  30A8               	movlw	high ((STR_37+28)| (0+32768))
 16721  1B81  00A1               	movwf	(printf@f^(0+128)+1)
 16722  1B82  318E  26CE         	fcall	_printf
 16723                           
 16724                           ;main.c: 572: return 0;
 16725  1B84  0021               	movlb	1	; select bank1
 16726  1B85  01B5               	clrf	?_getActive^(0+128)
 16727  1B86  01B6               	clrf	(?_getActive+1)^(0+128)
 16728  1B87  0008               	return
 16729  1B88                     __end_of_getActive:	
 16730                           
 16731                           	psect	text56
 16732  0A24                     __ptext56:	
 16733 ;; *************** function _commCheck *****************
 16734 ;; Defined at:
 16735 ;;		line 590 in file "main.c"
 16736 ;; Parameters:    Size  Location     Type
 16737 ;;		None
 16738 ;; Auto vars:     Size  Location     Type
 16739 ;;		None
 16740 ;; Return value:  Size  Location     Type
 16741 ;;                  2   52[BANK1 ] int 
 16742 ;; Registers used:
 16743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16744 ;; Tracked objects:
 16745 ;;		On entry : 0/0
 16746 ;;		On exit  : 0/0
 16747 ;;		Unchanged: 0/0
 16748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16749 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16751 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16752 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16753 ;;Total ram usage:        3 bytes
 16754 ;; Hardware stack levels used:    1
 16755 ;; Hardware stack levels required when called:   13
 16756 ;; This function calls:
 16757 ;;		_LED_testComm
 16758 ;;		_LED_test_openshort
 16759 ;;		_drv_read
 16760 ;;		_printf
 16761 ;; This function is called by:
 16762 ;;		_execCmd
 16763 ;; This function uses a non-reentrant model
 16764 ;;
 16765                           
 16766                           
 16767                           ;psect for function _commCheck
 16768  0A24                     _commCheck:	
 16769                           
 16770                           ;main.c: 591: printf("\n----starting comm test----\n\n");
 16771                           
 16772                           ;incstack = 0
 16773                           ; Regs used in _commCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16774  0A24  3047               	movlw	low (STR_37| (0+32768))
 16775  0A25  0021               	movlb	1	; select bank1
 16776  0A26  00A0               	movwf	printf@f^(0+128)
 16777  0A27  30A8               	movlw	high (STR_37| (0+32768))
 16778  0A28  00A1               	movwf	(printf@f^(0+128)+1)
 16779  0A29  318E  26CE  318A   	fcall	_printf
 16780                           
 16781                           ;main.c: 594: printf("testing top LED driver...");
 16782  0A2C  3081               	movlw	low (STR_38| (0+32768))
 16783  0A2D  0021               	movlb	1	; select bank1
 16784  0A2E  00A0               	movwf	printf@f^(0+128)
 16785  0A2F  30A8               	movlw	high (STR_38| (0+32768))
 16786  0A30  00A1               	movwf	(printf@f^(0+128)+1)
 16787  0A31  318E  26CE  318A   	fcall	_printf
 16788                           
 16789                           ;main.c: 595: if (!LED_testComm(1))
 16790  0A34  3001               	movlw	1
 16791  0A35  0021               	movlb	1	; select bank1
 16792  0A36  00CA               	movwf	LED_testComm@topOrBottom^(0+128)
 16793  0A37  3000               	movlw	0
 16794  0A38  00CB               	movwf	(LED_testComm@topOrBottom^(0+128)+1)
 16795  0A39  3194  2414  318A   	fcall	_LED_testComm
 16796  0A3C  0021               	movlb	1	; select bank1
 16797  0A3D  084A               	movf	?_LED_testComm^(0+128),w
 16798  0A3E  044B               	iorwf	(?_LED_testComm+1)^(0+128),w
 16799  0A3F  1D03               	btfss	3,2
 16800  0A40  2A45               	goto	l8979
 16801                           
 16802                           ;main.c: 596: printf("passed\n");
 16803  0A41  30EE               	movlw	low (STR_39| (0+32768))
 16804  0A42  00A0               	movwf	printf@f^(0+128)
 16805  0A43  30A9               	movlw	high (STR_39| (0+32768))
 16806  0A44  2A49               	goto	L31
 16807  0A45                     l8979:	
 16808                           
 16809                           ;main.c: 597: else
 16810                           ;main.c: 598: printf("FAILED\n");
 16811  0A45  30E6               	movlw	low (STR_40| (0+32768))
 16812  0A46  0021               	movlb	1	; select bank1
 16813  0A47  00A0               	movwf	printf@f^(0+128)
 16814  0A48  30A9               	movlw	high (STR_40| (0+32768))
 16815  0A49                     L31:	
 16816  0A49  00A1               	movwf	(printf@f^(0+128)+1)
 16817  0A4A  318E  26CE  318A   	fcall	_printf
 16818                           
 16819                           ;main.c: 600: printf("opens: ");
 16820  0A4D  30FE               	movlw	low (STR_41| (0+32768))
 16821  0A4E  0021               	movlb	1	; select bank1
 16822  0A4F  00A0               	movwf	printf@f^(0+128)
 16823  0A50  30A9               	movlw	high (STR_41| (0+32768))
 16824  0A51  00A1               	movwf	(printf@f^(0+128)+1)
 16825  0A52  318E  26CE  318A   	fcall	_printf
 16826                           
 16827                           ;main.c: 601: LED_test_openshort(10, 1);
 16828  0A55  300A               	movlw	10
 16829  0A56  0021               	movlb	1	; select bank1
 16830  0A57  00B5               	movwf	LED_test_openshort@type^(0+128)
 16831  0A58  3000               	movlw	0
 16832  0A59  00B6               	movwf	(LED_test_openshort@type^(0+128)+1)
 16833  0A5A  3001               	movlw	1
 16834  0A5B  00B7               	movwf	LED_test_openshort@topOrBottom^(0+128)
 16835  0A5C  3000               	movlw	0
 16836  0A5D  00B8               	movwf	(LED_test_openshort@topOrBottom^(0+128)+1)
 16837  0A5E  3195  25F9  318A   	fcall	_LED_test_openshort
 16838                           
 16839                           ;main.c: 602: printf("\n\nshorts: ");
 16840  0A61  3095               	movlw	low (STR_42| (0+32768))
 16841  0A62  0021               	movlb	1	; select bank1
 16842  0A63  00A0               	movwf	printf@f^(0+128)
 16843  0A64  30A9               	movlw	high (STR_42| (0+32768))
 16844  0A65  00A1               	movwf	(printf@f^(0+128)+1)
 16845  0A66  318E  26CE  318A   	fcall	_printf
 16846                           
 16847                           ;main.c: 603: LED_test_openshort(11, 1);
 16848  0A69  300B               	movlw	11
 16849  0A6A  0021               	movlb	1	; select bank1
 16850  0A6B  00B5               	movwf	LED_test_openshort@type^(0+128)
 16851  0A6C  3000               	movlw	0
 16852  0A6D  00B6               	movwf	(LED_test_openshort@type^(0+128)+1)
 16853  0A6E  3001               	movlw	1
 16854  0A6F  00B7               	movwf	LED_test_openshort@topOrBottom^(0+128)
 16855  0A70  3000               	movlw	0
 16856  0A71  00B8               	movwf	(LED_test_openshort@topOrBottom^(0+128)+1)
 16857  0A72  3195  25F9  318A   	fcall	_LED_test_openshort
 16858                           
 16859                           ;main.c: 606: printf("\ntesting bottom LED driver...\n");
 16860  0A75  3028               	movlw	low (STR_43| (0+32768))
 16861  0A76  0021               	movlb	1	; select bank1
 16862  0A77  00A0               	movwf	printf@f^(0+128)
 16863  0A78  30A8               	movlw	high (STR_43| (0+32768))
 16864  0A79  00A1               	movwf	(printf@f^(0+128)+1)
 16865  0A7A  318E  26CE  318A   	fcall	_printf
 16866                           
 16867                           ;main.c: 607: if (!LED_testComm(2))
 16868  0A7D  3002               	movlw	2
 16869  0A7E  0021               	movlb	1	; select bank1
 16870  0A7F  00CA               	movwf	LED_testComm@topOrBottom^(0+128)
 16871  0A80  3000               	movlw	0
 16872  0A81  00CB               	movwf	(LED_testComm@topOrBottom^(0+128)+1)
 16873  0A82  3194  2414  318A   	fcall	_LED_testComm
 16874  0A85  0021               	movlb	1	; select bank1
 16875  0A86  084A               	movf	?_LED_testComm^(0+128),w
 16876  0A87  044B               	iorwf	(?_LED_testComm+1)^(0+128),w
 16877  0A88  1D03               	btfss	3,2
 16878  0A89  2A8E               	goto	l8983
 16879                           
 16880                           ;main.c: 608: printf("passed\n");
 16881  0A8A  30EE               	movlw	low (STR_39| (0+32768))
 16882  0A8B  00A0               	movwf	printf@f^(0+128)
 16883  0A8C  30A9               	movlw	high (STR_39| (0+32768))
 16884  0A8D  2A92               	goto	L32
 16885  0A8E                     l8983:	
 16886                           
 16887                           ;main.c: 609: else
 16888                           ;main.c: 610: printf("FAILED\n");
 16889  0A8E  30E6               	movlw	low (STR_40| (0+32768))
 16890  0A8F  0021               	movlb	1	; select bank1
 16891  0A90  00A0               	movwf	printf@f^(0+128)
 16892  0A91  30A9               	movlw	high (STR_40| (0+32768))
 16893  0A92                     L32:	
 16894  0A92  00A1               	movwf	(printf@f^(0+128)+1)
 16895  0A93  318E  26CE  318A   	fcall	_printf
 16896                           
 16897                           ;main.c: 612: printf("opens: ");
 16898  0A96  30FE               	movlw	low (STR_41| (0+32768))
 16899  0A97  0021               	movlb	1	; select bank1
 16900  0A98  00A0               	movwf	printf@f^(0+128)
 16901  0A99  30A9               	movlw	high (STR_41| (0+32768))
 16902  0A9A  00A1               	movwf	(printf@f^(0+128)+1)
 16903  0A9B  318E  26CE  318A   	fcall	_printf
 16904                           
 16905                           ;main.c: 613: LED_test_openshort(10, 2);
 16906  0A9E  300A               	movlw	10
 16907  0A9F  0021               	movlb	1	; select bank1
 16908  0AA0  00B5               	movwf	LED_test_openshort@type^(0+128)
 16909  0AA1  3000               	movlw	0
 16910  0AA2  00B6               	movwf	(LED_test_openshort@type^(0+128)+1)
 16911  0AA3  3002               	movlw	2
 16912  0AA4  00B7               	movwf	LED_test_openshort@topOrBottom^(0+128)
 16913  0AA5  3000               	movlw	0
 16914  0AA6  00B8               	movwf	(LED_test_openshort@topOrBottom^(0+128)+1)
 16915  0AA7  3195  25F9  318A   	fcall	_LED_test_openshort
 16916                           
 16917                           ;main.c: 614: printf("\n\nshorts: ");
 16918  0AAA  3095               	movlw	low (STR_42| (0+32768))
 16919  0AAB  0021               	movlb	1	; select bank1
 16920  0AAC  00A0               	movwf	printf@f^(0+128)
 16921  0AAD  30A9               	movlw	high (STR_42| (0+32768))
 16922  0AAE  00A1               	movwf	(printf@f^(0+128)+1)
 16923  0AAF  318E  26CE  318A   	fcall	_printf
 16924                           
 16925                           ;main.c: 615: LED_test_openshort(11, 2);
 16926  0AB2  300B               	movlw	11
 16927  0AB3  0021               	movlb	1	; select bank1
 16928  0AB4  00B5               	movwf	LED_test_openshort@type^(0+128)
 16929  0AB5  3000               	movlw	0
 16930  0AB6  00B6               	movwf	(LED_test_openshort@type^(0+128)+1)
 16931  0AB7  3002               	movlw	2
 16932  0AB8  00B7               	movwf	LED_test_openshort@topOrBottom^(0+128)
 16933  0AB9  3000               	movlw	0
 16934  0ABA  00B8               	movwf	(LED_test_openshort@topOrBottom^(0+128)+1)
 16935  0ABB  3195  25F9  318A   	fcall	_LED_test_openshort
 16936                           
 16937                           ;main.c: 617: printf("\ntesting piezo driver...");
 16938  0ABE  309B               	movlw	low (STR_48| (0+32768))
 16939  0ABF  0021               	movlb	1	; select bank1
 16940  0AC0  00A0               	movwf	printf@f^(0+128)
 16941  0AC1  30A8               	movlw	high (STR_48| (0+32768))
 16942  0AC2  00A1               	movwf	(printf@f^(0+128)+1)
 16943  0AC3  318E  26CE  318A   	fcall	_printf
 16944                           
 16945                           ;main.c: 618: if(drv_read(0x01) > 0)
 16946  0AC6  3001               	movlw	1
 16947  0AC7  3199  21CC  318A   	fcall	_drv_read
 16948  0ACA  0021               	movlb	1	; select bank1
 16949  0ACB  0836               	movf	(?_drv_read+1)^(0+128),w
 16950  0ACC  3A80               	xorlw	128
 16951  0ACD  00D6               	movwf	??_commCheck^(0+128)
 16952  0ACE  3080               	movlw	128
 16953  0ACF  0256               	subwf	??_commCheck^(0+128),w
 16954  0AD0  1D03               	skipz
 16955  0AD1  2AD4               	goto	u9065
 16956  0AD2  3001               	movlw	1
 16957  0AD3  0235               	subwf	?_drv_read^(0+128),w
 16958  0AD4                     u9065:	
 16959  0AD4  1C03               	skipc
 16960  0AD5  2ADB               	goto	l8987
 16961                           
 16962                           ;main.c: 619: printf("passed\n\n");
 16963  0AD6  30BD               	movlw	low (STR_49| (0+32768))
 16964  0AD7  0021               	movlb	1	; select bank1
 16965  0AD8  00A0               	movwf	printf@f^(0+128)
 16966  0AD9  30A9               	movlw	high (STR_49| (0+32768))
 16967  0ADA  2ADF               	goto	L33
 16968  0ADB                     l8987:	
 16969                           
 16970                           ;main.c: 620: else
 16971                           ;main.c: 621: printf("FAILED\n\n");
 16972  0ADB  30B4               	movlw	low (STR_50| (0+32768))
 16973  0ADC  0021               	movlb	1	; select bank1
 16974  0ADD  00A0               	movwf	printf@f^(0+128)
 16975  0ADE  30A9               	movlw	high (STR_50| (0+32768))
 16976  0ADF                     L33:	
 16977  0ADF  00A1               	movwf	(printf@f^(0+128)+1)
 16978  0AE0  318E  26CE  318A   	fcall	_printf
 16979                           
 16980                           ;main.c: 622: printf("----finished comm test----\n");
 16981  0AE3  3065               	movlw	low (STR_51| (0+32768))
 16982  0AE4  0021               	movlb	1	; select bank1
 16983  0AE5  00A0               	movwf	printf@f^(0+128)
 16984  0AE6  30A8               	movlw	high (STR_51| (0+32768))
 16985  0AE7  00A1               	movwf	(printf@f^(0+128)+1)
 16986  0AE8  318E  26CE         	fcall	_printf
 16987  0AEA  0008               	return
 16988  0AEB                     __end_of_commCheck:	
 16989                           
 16990                           	psect	text57
 16991  19CC                     __ptext57:	
 16992 ;; *************** function _drv_read *****************
 16993 ;; Defined at:
 16994 ;;		line 87 in file "drv2665.c"
 16995 ;; Parameters:    Size  Location     Type
 16996 ;;  reg             1    wreg     unsigned char 
 16997 ;; Auto vars:     Size  Location     Type
 16998 ;;  reg             1   43[BANK0 ] unsigned char 
 16999 ;;  buff            1   44[BANK0 ] unsigned char 
 17000 ;; Return value:  Size  Location     Type
 17001 ;;                  2   21[BANK1 ] int 
 17002 ;; Registers used:
 17003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17004 ;; Tracked objects:
 17005 ;;		On entry : 0/0
 17006 ;;		On exit  : 0/0
 17007 ;;		Unchanged: 0/0
 17008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17009 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17010 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17011 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17012 ;;      Totals:         0       4       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17013 ;;Total ram usage:        6 bytes
 17014 ;; Hardware stack levels used:    1
 17015 ;; Hardware stack levels required when called:   12
 17016 ;; This function calls:
 17017 ;;		_i2c_masterOperation
 17018 ;;		_i2c_setBuffer
 17019 ;;		_printf
 17020 ;; This function is called by:
 17021 ;;		_commCheck
 17022 ;;		_fifo_check
 17023 ;; This function uses a non-reentrant model
 17024 ;;
 17025                           
 17026                           
 17027                           ;psect for function _drv_read
 17028  19CC                     _drv_read:	
 17029                           
 17030                           ;incstack = 0
 17031                           ; Regs used in _drv_read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17032                           ;drv_read@reg stored from wreg
 17033  19CC  0020               	movlb	0	; select bank0
 17034  19CD  00CB               	movwf	drv_read@reg
 17035                           
 17036                           ;drv2665.c: 89: char buff=0;
 17037  19CE  01CC               	clrf	drv_read@buff
 17038                           
 17039                           ;drv2665.c: 92: i2c_setBuffer(&reg, 1);
 17040  19CF  304B               	movlw	low drv_read@reg
 17041  19D0  00B1               	movwf	i2c_setBuffer@buffer
 17042  19D1  3000               	movlw	high drv_read@reg
 17043  19D2  00B2               	movwf	i2c_setBuffer@buffer+1
 17044  19D3  3001               	movlw	1
 17045  19D4  00B3               	movwf	i2c_setBuffer@bufferSize
 17046  19D5  3000               	movlw	0
 17047  19D6  00B4               	movwf	i2c_setBuffer@bufferSize+1
 17048  19D7  31A1  21E6  3199   	fcall	_i2c_setBuffer
 17049                           
 17050                           ;drv2665.c: 93: if(i2c_masterOperation(0) != I2C_NOERR)
 17051  19DA  3000               	movlw	0
 17052  19DB  31A4  2484  3199   	fcall	_i2c_masterOperation
 17053  19DE  3A00               	xorlw	0
 17054  19DF  1903               	skipnz
 17055  19E0  29E9               	goto	l8475
 17056                           
 17057                           ;drv2665.c: 94: printf("drv_write error!\n");
 17058  19E1  30CB               	movlw	low (STR_53| (0+32768))
 17059  19E2  0021               	movlb	1	; select bank1
 17060  19E3  00A0               	movwf	printf@f^(0+128)
 17061  19E4  30A8               	movlw	high (STR_53| (0+32768))
 17062  19E5  00A1               	movwf	(printf@f^(0+128)+1)
 17063  19E6  318E  26CE  3199   	fcall	_printf
 17064  19E9                     l8475:	
 17065                           
 17066                           ;drv2665.c: 97: _delay((unsigned long)((100)*(1000000/4000000.0)));
 17067  19E9  3008               	movlw	8
 17068  19EA                     u10217:	
 17069  19EA  0B89               	decfsz	9,f
 17070  19EB  29EA               	goto	u10217
 17071  19EC  0000               	nop
 17072                           
 17073                           ;drv2665.c: 100: i2c_setBuffer(&buff, 1);
 17074  19ED  304C               	movlw	low drv_read@buff
 17075  19EE  0020               	movlb	0	; select bank0
 17076  19EF  00B1               	movwf	i2c_setBuffer@buffer
 17077  19F0  3000               	movlw	high drv_read@buff
 17078  19F1  00B2               	movwf	i2c_setBuffer@buffer+1
 17079  19F2  3001               	movlw	1
 17080  19F3  00B3               	movwf	i2c_setBuffer@bufferSize
 17081  19F4  3000               	movlw	0
 17082  19F5  00B4               	movwf	i2c_setBuffer@bufferSize+1
 17083  19F6  31A1  21E6  3199   	fcall	_i2c_setBuffer
 17084                           
 17085                           ;drv2665.c: 102: if(i2c_masterOperation(1) != I2C_NOERR)
 17086  19F9  3001               	movlw	1
 17087  19FA  31A4  2484  3199   	fcall	_i2c_masterOperation
 17088  19FD  3A00               	xorlw	0
 17089  19FE  1903               	skipnz
 17090  19FF  2A07               	goto	l8483
 17091                           
 17092                           ;drv2665.c: 103: printf("drv_read error!\n");
 17093  1A00  30DD               	movlw	low (STR_55| (0+32768))
 17094  1A01  0021               	movlb	1	; select bank1
 17095  1A02  00A0               	movwf	printf@f^(0+128)
 17096  1A03  30A8               	movlw	high (STR_55| (0+32768))
 17097  1A04  00A1               	movwf	(printf@f^(0+128)+1)
 17098  1A05  318E  26CE         	fcall	_printf
 17099  1A07                     l8483:	
 17100                           
 17101                           ;drv2665.c: 105: return buff;
 17102  1A07  0020               	movlb	0	; select bank0
 17103  1A08  084C               	movf	drv_read@buff,w
 17104  1A09  00C9               	movwf	??_drv_read
 17105  1A0A  01CA               	clrf	??_drv_read+1
 17106  1A0B  0849               	movf	??_drv_read,w
 17107  1A0C  0021               	movlb	1	; select bank1
 17108  1A0D  00B5               	movwf	?_drv_read^(0+128)
 17109  1A0E  0020               	movlb	0	; select bank0
 17110  1A0F  084A               	movf	??_drv_read+1,w
 17111  1A10  0021               	movlb	1	; select bank1
 17112  1A11  00B6               	movwf	(?_drv_read+1)^(0+128)
 17113  1A12  0008               	return
 17114  1A13                     __end_of_drv_read:	
 17115                           
 17116                           	psect	text58
 17117  15F9                     __ptext58:	
 17118 ;; *************** function _LED_test_openshort *****************
 17119 ;; Defined at:
 17120 ;;		line 99 in file "LEDcomm.c"
 17121 ;; Parameters:    Size  Location     Type
 17122 ;;  type            2   21[BANK1 ] int 
 17123 ;;  topOrBottom     2   23[BANK1 ] int 
 17124 ;; Auto vars:     Size  Location     Type
 17125 ;;  j               2   26[BANK1 ] int 
 17126 ;; Return value:  Size  Location     Type
 17127 ;;                  1    wreg      void 
 17128 ;; Registers used:
 17129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17130 ;; Tracked objects:
 17131 ;;		On entry : 0/0
 17132 ;;		On exit  : 0/0
 17133 ;;		Unchanged: 0/0
 17134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17135 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17136 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17137 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17138 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17139 ;;Total ram usage:        7 bytes
 17140 ;; Hardware stack levels used:    1
 17141 ;; Hardware stack levels required when called:    9
 17142 ;; This function calls:
 17143 ;;		_LEDsOn
 17144 ;;		_printf
 17145 ;;		_send_2length_2bytes_IK
 17146 ;; This function is called by:
 17147 ;;		_commCheck
 17148 ;; This function uses a non-reentrant model
 17149 ;;
 17150                           
 17151                           
 17152                           ;psect for function _LED_test_openshort
 17153  15F9                     _LED_test_openshort:	
 17154                           
 17155                           ;incstack = 0
 17156                           ; Regs used in _LED_test_openshort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17157                           ;LEDcomm.c: 101: do { LATCbits.LATC1 = 1; } while(0);
 17158  15F9  0022               	movlb	2	; select bank2
 17159  15FA  148E               	bsf	14,1	;volatile
 17160                           
 17161                           ;LEDcomm.c: 102: LEDsOn(0xFFFFFFFF, topOrBottom);
 17162  15FB  30FF               	movlw	255
 17163  15FC  0020               	movlb	0	; select bank0
 17164  15FD  00C7               	movwf	LEDsOn@LEDpins+3
 17165  15FE  30FF               	movlw	255
 17166  15FF  00C6               	movwf	LEDsOn@LEDpins+2
 17167  1600  30FF               	movlw	255
 17168  1601  00C5               	movwf	LEDsOn@LEDpins+1
 17169  1602  30FF               	movlw	255
 17170  1603  00C4               	movwf	LEDsOn@LEDpins
 17171  1604  0021               	movlb	1	; select bank1
 17172  1605  0838               	movf	(LED_test_openshort@topOrBottom+1)^(0+128),w
 17173  1606  0020               	movlb	0	; select bank0
 17174  1607  00C9               	movwf	LEDsOn@topOrBottom+1
 17175  1608  0021               	movlb	1	; select bank1
 17176  1609  0837               	movf	LED_test_openshort@topOrBottom^(0+128),w
 17177  160A  0020               	movlb	0	; select bank0
 17178  160B  00C8               	movwf	LEDsOn@topOrBottom
 17179  160C  31A3  23FA  3195   	fcall	_LEDsOn
 17180                           
 17181                           ;LEDcomm.c: 103: send_2length_2bytes_IK(0,0,type,topOrBottom);
 17182  160F  3000               	movlw	0
 17183  1610  0020               	movlb	0	; select bank0
 17184  1611  00BC               	movwf	send_2length_2bytes_IK@data1
 17185  1612  00BD               	movwf	send_2length_2bytes_IK@data1+1
 17186  1613  3000               	movlw	0
 17187  1614  00BE               	movwf	send_2length_2bytes_IK@data2
 17188  1615  00BF               	movwf	send_2length_2bytes_IK@data2+1
 17189  1616  0021               	movlb	1	; select bank1
 17190  1617  0835               	movf	LED_test_openshort@type^(0+128),w
 17191  1618  00B9               	movwf	??_LED_test_openshort^(0+128)
 17192  1619  0839               	movf	??_LED_test_openshort^(0+128),w
 17193  161A  0020               	movlb	0	; select bank0
 17194  161B  00C0               	movwf	send_2length_2bytes_IK@latch_start
 17195  161C  0021               	movlb	1	; select bank1
 17196  161D  0838               	movf	(LED_test_openshort@topOrBottom+1)^(0+128),w
 17197  161E  0020               	movlb	0	; select bank0
 17198  161F  00C2               	movwf	send_2length_2bytes_IK@topOrBottom+1
 17199  1620  0021               	movlb	1	; select bank1
 17200  1621  0837               	movf	LED_test_openshort@topOrBottom^(0+128),w
 17201  1622  0020               	movlb	0	; select bank0
 17202  1623  00C1               	movwf	send_2length_2bytes_IK@topOrBottom
 17203  1624  31A2  222B  3195   	fcall	_send_2length_2bytes_IK
 17204                           
 17205                           ;LEDcomm.c: 105: do { LATCbits.LATC1 = 0; } while(0);
 17206  1627  0022               	movlb	2	; select bank2
 17207  1628  108E               	bcf	14,1	;volatile
 17208                           
 17209                           ;LEDcomm.c: 107: for(int j = 23; j>=0; j--){
 17210  1629  3017               	movlw	23
 17211  162A  0021               	movlb	1	; select bank1
 17212  162B  00BA               	movwf	LED_test_openshort@j^(0+128)
 17213  162C  3000               	movlw	0
 17214  162D  00BB               	movwf	(LED_test_openshort@j^(0+128)+1)
 17215  162E  1BBB               	btfsc	(LED_test_openshort@j+1)^(0+128),7
 17216  162F  2E6E               	goto	l8369
 17217  1630                     l287:	
 17218                           ;LEDcomm.c: 108: do { LATAbits.LATA2 = 1; } while(0);
 17219                           
 17220  1630  0022               	movlb	2	; select bank2
 17221  1631  150C               	bsf	12,2	;volatile
 17222                           
 17223                           ;LEDcomm.c: 109: _delay((unsigned long)((10)*(1000000/4000000.0)));
 17224  1632  3200               	nop2	;2 cycle nop
 17225                           
 17226                           ;LEDcomm.c: 110: do { LATAbits.LATA2 = 0; } while(0);
 17227  1633  0022               	movlb	2	; select bank2
 17228  1634  110C               	bcf	12,2	;volatile
 17229                           
 17230                           ;LEDcomm.c: 111: if (topOrBottom == 1)
 17231  1635  0021               	movlb	1	; select bank1
 17232  1636  0337               	decf	LED_test_openshort@topOrBottom^(0+128),w
 17233  1637  0438               	iorwf	(LED_test_openshort@topOrBottom+1)^(0+128),w
 17234  1638  1D03               	btfss	3,2
 17235  1639  2E4B               	goto	l8361
 17236                           
 17237                           ;LEDcomm.c: 112: if (PORTCbits.RC6){ printf("%d ", j);}
 17238  163A  0020               	movlb	0	; select bank0
 17239  163B  1B0E               	btfsc	14,6	;volatile
 17240  163C  2E3F               	goto	l8359
 17241                           
 17242                           ;LEDcomm.c: 113: else
 17243                           ;LEDcomm.c: 114: if (PORTCbits.RC3){ printf("%d ", j);}
 17244  163D  1D8E               	btfss	14,3	;volatile
 17245  163E  2E4B               	goto	l8361
 17246  163F                     l8359:	
 17247  163F  303C               	movlw	low (STR_1| (0+32768))
 17248  1640  0021               	movlb	1	; select bank1
 17249  1641  00A0               	movwf	printf@f^(0+128)
 17250  1642  30B0               	movlw	high (STR_1| (0+32768))
 17251  1643  00A1               	movwf	(printf@f^(0+128)+1)
 17252  1644  083B               	movf	(LED_test_openshort@j+1)^(0+128),w
 17253  1645  00A3               	movwf	((?_printf+1)^(0+128)+2)
 17254  1646  083A               	movf	LED_test_openshort@j^(0+128),w
 17255  1647  00A2               	movwf	(?_printf^(0+128)+2)
 17256  1648  318E  26CE  3195   	fcall	_printf
 17257  164B                     l8361:	
 17258                           
 17259                           ;LEDcomm.c: 117: if (j == 23) {do { LATCbits.LATC1 = 1; } while(0); LEDsOn(0, topOrBotto
      +                          m); }
 17260  164B  3017               	movlw	23
 17261  164C  0021               	movlb	1	; select bank1
 17262  164D  063A               	xorwf	LED_test_openshort@j^(0+128),w
 17263  164E  043B               	iorwf	(LED_test_openshort@j+1)^(0+128),w
 17264  164F  1D03               	btfss	3,2
 17265  1650  2E67               	goto	l8365
 17266  1651  0022               	movlb	2	; select bank2
 17267  1652  148E               	bsf	14,1	;volatile
 17268  1653  3000               	movlw	0
 17269  1654  0020               	movlb	0	; select bank0
 17270  1655  00C7               	movwf	LEDsOn@LEDpins+3
 17271  1656  3000               	movlw	0
 17272  1657  00C6               	movwf	LEDsOn@LEDpins+2
 17273  1658  3000               	movlw	0
 17274  1659  00C5               	movwf	LEDsOn@LEDpins+1
 17275  165A  3000               	movlw	0
 17276  165B  00C4               	movwf	LEDsOn@LEDpins
 17277  165C  0021               	movlb	1	; select bank1
 17278  165D  0838               	movf	(LED_test_openshort@topOrBottom+1)^(0+128),w
 17279  165E  0020               	movlb	0	; select bank0
 17280  165F  00C9               	movwf	LEDsOn@topOrBottom+1
 17281  1660  0021               	movlb	1	; select bank1
 17282  1661  0837               	movf	LED_test_openshort@topOrBottom^(0+128),w
 17283  1662  0020               	movlb	0	; select bank0
 17284  1663  00C8               	movwf	LEDsOn@topOrBottom
 17285  1664  31A3  23FA  3195   	fcall	_LEDsOn
 17286  1667                     l8365:	
 17287  1667  30FF               	movlw	255
 17288  1668  0021               	movlb	1	; select bank1
 17289  1669  07BA               	addwf	LED_test_openshort@j^(0+128),f
 17290  166A  30FF               	movlw	255
 17291  166B  3DBB               	addwfc	(LED_test_openshort@j+1)^(0+128),f
 17292  166C  1FBB               	btfss	(LED_test_openshort@j+1)^(0+128),7
 17293  166D  2E30               	goto	l287
 17294  166E                     l8369:	
 17295                           
 17296                           ;LEDcomm.c: 118: }
 17297                           ;LEDcomm.c: 119: printf("\n");
 17298  166E  3063               	movlw	low ((STR_37+28)| (0+32768))
 17299  166F  00A0               	movwf	printf@f^(0+128)
 17300  1670  30A8               	movlw	high ((STR_37+28)| (0+32768))
 17301  1671  00A1               	movwf	(printf@f^(0+128)+1)
 17302  1672  318E  26CE         	fcall	_printf
 17303  1674  0008               	return
 17304  1675                     __end_of_LED_test_openshort:	
 17305                           
 17306                           	psect	text59
 17307  1414                     __ptext59:	
 17308 ;; *************** function _LED_testComm *****************
 17309 ;; Defined at:
 17310 ;;		line 158 in file "LEDcomm.c"
 17311 ;; Parameters:    Size  Location     Type
 17312 ;;  topOrBottom     2   42[BANK1 ] int 
 17313 ;; Auto vars:     Size  Location     Type
 17314 ;;  oldConfigReg    4   48[BANK1 ] long 
 17315 ;;  readResult      2   46[BANK1 ] int 
 17316 ;; Return value:  Size  Location     Type
 17317 ;;                  2   42[BANK1 ] int 
 17318 ;; Registers used:
 17319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17320 ;; Tracked objects:
 17321 ;;		On entry : 0/0
 17322 ;;		On exit  : 0/0
 17323 ;;		Unchanged: 0/0
 17324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17325 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17326 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17327 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17328 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17329 ;;Total ram usage:       10 bytes
 17330 ;; Hardware stack levels used:    1
 17331 ;; Hardware stack levels required when called:   11
 17332 ;; This function calls:
 17333 ;;		_LED_readConfig
 17334 ;;		_LED_setBrightnessRange
 17335 ;; This function is called by:
 17336 ;;		_commCheck
 17337 ;; This function uses a non-reentrant model
 17338 ;;
 17339                           
 17340                           
 17341                           ;psect for function _LED_testComm
 17342  1414                     _LED_testComm:	
 17343                           
 17344                           ;LEDcomm.c: 160: long oldConfigReg = (topOrBottom == 1) ? LED_configReg_top : LED_config
      +                          Reg_bot;
 17345                           
 17346                           ;incstack = 0
 17347                           ; Regs used in _LED_testComm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17348  1414  0021               	movlb	1	; select bank1
 17349  1415  034A               	decf	LED_testComm@topOrBottom^(0+128),w
 17350  1416  044B               	iorwf	(LED_testComm@topOrBottom+1)^(0+128),w
 17351  1417  1903               	btfsc	3,2
 17352  1418  2C28               	goto	l8375
 17353  1419  0022               	movlb	2	; select bank2
 17354  141A  084D               	movf	(_LED_configReg_bot+3)^(0+256),w
 17355  141B  0021               	movlb	1	; select bank1
 17356  141C  00D3               	movwf	(LED_testComm@oldConfigReg+3)^(0+128)
 17357  141D  0022               	movlb	2	; select bank2
 17358  141E  084C               	movf	(_LED_configReg_bot+2)^(0+256),w
 17359  141F  0021               	movlb	1	; select bank1
 17360  1420  00D2               	movwf	(LED_testComm@oldConfigReg+2)^(0+128)
 17361  1421  0022               	movlb	2	; select bank2
 17362  1422  084B               	movf	(_LED_configReg_bot+1)^(0+256),w
 17363  1423  0021               	movlb	1	; select bank1
 17364  1424  00D1               	movwf	(LED_testComm@oldConfigReg+1)^(0+128)
 17365  1425  0022               	movlb	2	; select bank2
 17366  1426  084A               	movf	_LED_configReg_bot^(0+256),w
 17367  1427  2C36               	goto	L34
 17368  1428                     l8375:	
 17369  1428  0022               	movlb	2	; select bank2
 17370  1429  0851               	movf	(_LED_configReg_top+3)^(0+256),w
 17371  142A  0021               	movlb	1	; select bank1
 17372  142B  00D3               	movwf	(LED_testComm@oldConfigReg+3)^(0+128)
 17373  142C  0022               	movlb	2	; select bank2
 17374  142D  0850               	movf	(_LED_configReg_top+2)^(0+256),w
 17375  142E  0021               	movlb	1	; select bank1
 17376  142F  00D2               	movwf	(LED_testComm@oldConfigReg+2)^(0+128)
 17377  1430  0022               	movlb	2	; select bank2
 17378  1431  084F               	movf	(_LED_configReg_top+1)^(0+256),w
 17379  1432  0021               	movlb	1	; select bank1
 17380  1433  00D1               	movwf	(LED_testComm@oldConfigReg+1)^(0+128)
 17381  1434  0022               	movlb	2	; select bank2
 17382  1435  084E               	movf	_LED_configReg_top^(0+256),w
 17383  1436                     L34:	
 17384  1436  0021               	movlb	1	; select bank1
 17385  1437  00D0               	movwf	LED_testComm@oldConfigReg^(0+128)
 17386                           
 17387                           ;LEDcomm.c: 161: LED_setBrightnessRange(1, topOrBottom);
 17388  1438  3001               	movlw	1
 17389  1439  0020               	movlb	0	; select bank0
 17390  143A  00C4               	movwf	LED_setBrightnessRange@range
 17391  143B  3000               	movlw	0
 17392  143C  00C5               	movwf	LED_setBrightnessRange@range+1
 17393  143D  0021               	movlb	1	; select bank1
 17394  143E  084B               	movf	(LED_testComm@topOrBottom+1)^(0+128),w
 17395  143F  0020               	movlb	0	; select bank0
 17396  1440  00C7               	movwf	LED_setBrightnessRange@topOrBottom+1
 17397  1441  0021               	movlb	1	; select bank1
 17398  1442  084A               	movf	LED_testComm@topOrBottom^(0+128),w
 17399  1443  0020               	movlb	0	; select bank0
 17400  1444  00C6               	movwf	LED_setBrightnessRange@topOrBottom
 17401  1445  3188  202B  3194   	fcall	_LED_setBrightnessRange
 17402                           
 17403                           ;LEDcomm.c: 162: int readResult = LED_readConfig(topOrBottom);
 17404  1448  0021               	movlb	1	; select bank1
 17405  1449  084B               	movf	(LED_testComm@topOrBottom+1)^(0+128),w
 17406  144A  00C7               	movwf	(LED_readConfig@topOrBottom+1)^(0+128)
 17407  144B  084A               	movf	LED_testComm@topOrBottom^(0+128),w
 17408  144C  00C6               	movwf	LED_readConfig@topOrBottom^(0+128)
 17409  144D  31A5  2567  3194   	fcall	_LED_readConfig
 17410  1450  0021               	movlb	1	; select bank1
 17411  1451  0847               	movf	(?_LED_readConfig+1)^(0+128),w
 17412  1452  00CF               	movwf	(LED_testComm@readResult+1)^(0+128)
 17413  1453  0846               	movf	?_LED_readConfig^(0+128),w
 17414  1454  00CE               	movwf	LED_testComm@readResult^(0+128)
 17415                           
 17416                           ;LEDcomm.c: 164: LED_setBrightnessRange(oldConfigReg > 0, topOrBottom);
 17417  1455  1BD3               	btfsc	(LED_testComm@oldConfigReg+3)^(0+128),7
 17418  1456  2C66               	goto	u8470
 17419  1457  0853               	movf	(LED_testComm@oldConfigReg+3)^(0+128),w
 17420  1458  1D03               	btfss	3,2
 17421  1459  2C64               	goto	u8471
 17422  145A  0852               	movf	(LED_testComm@oldConfigReg+2)^(0+128),w
 17423  145B  1D03               	btfss	3,2
 17424  145C  2C64               	goto	u8471
 17425  145D  0851               	movf	(LED_testComm@oldConfigReg+1)^(0+128),w
 17426  145E  1D03               	btfss	3,2
 17427  145F  2C64               	goto	u8471
 17428  1460  3001               	movlw	1
 17429  1461  0250               	subwf	LED_testComm@oldConfigReg^(0+128),w
 17430  1462  1C03               	btfss	3,0
 17431  1463  2C66               	goto	u8470
 17432  1464                     u8471:	
 17433  1464  3001               	movlw	1
 17434  1465  2C67               	goto	u8480
 17435  1466                     u8470:	
 17436  1466  3000               	movlw	0
 17437  1467                     u8480:	
 17438  1467  00CC               	movwf	??_LED_testComm^(0+128)
 17439  1468  01CD               	clrf	(??_LED_testComm^(0+128)+1)
 17440  1469  084C               	movf	??_LED_testComm^(0+128),w
 17441  146A  0020               	movlb	0	; select bank0
 17442  146B  00C4               	movwf	LED_setBrightnessRange@range
 17443  146C  0021               	movlb	1	; select bank1
 17444  146D  084D               	movf	(??_LED_testComm+1)^(0+128),w
 17445  146E  0020               	movlb	0	; select bank0
 17446  146F  00C5               	movwf	LED_setBrightnessRange@range+1
 17447  1470  0021               	movlb	1	; select bank1
 17448  1471  084B               	movf	(LED_testComm@topOrBottom+1)^(0+128),w
 17449  1472  0020               	movlb	0	; select bank0
 17450  1473  00C7               	movwf	LED_setBrightnessRange@topOrBottom+1
 17451  1474  0021               	movlb	1	; select bank1
 17452  1475  084A               	movf	LED_testComm@topOrBottom^(0+128),w
 17453  1476  0020               	movlb	0	; select bank0
 17454  1477  00C6               	movwf	LED_setBrightnessRange@topOrBottom
 17455  1478  3188  202B  3194   	fcall	_LED_setBrightnessRange
 17456                           
 17457                           ;LEDcomm.c: 166: return (readResult != 7);
 17458  147B  3007               	movlw	7
 17459  147C  0021               	movlb	1	; select bank1
 17460  147D  064E               	xorwf	LED_testComm@readResult^(0+128),w
 17461  147E  044F               	iorwf	(LED_testComm@readResult+1)^(0+128),w
 17462  147F  1903               	btfsc	3,2
 17463  1480  2C83               	goto	u8490
 17464  1481  3001               	movlw	1
 17465  1482  2C84               	goto	u8500
 17466  1483                     u8490:	
 17467  1483  3000               	movlw	0
 17468  1484                     u8500:	
 17469  1484  00CC               	movwf	??_LED_testComm^(0+128)
 17470  1485  01CD               	clrf	(??_LED_testComm^(0+128)+1)
 17471  1486  084C               	movf	??_LED_testComm^(0+128),w
 17472  1487  00CA               	movwf	?_LED_testComm^(0+128)
 17473  1488  084D               	movf	(??_LED_testComm+1)^(0+128),w
 17474  1489  00CB               	movwf	(?_LED_testComm+1)^(0+128)
 17475  148A  0008               	return
 17476  148B                     __end_of_LED_testComm:	
 17477                           
 17478                           	psect	text60
 17479  082B                     __ptext60:	
 17480 ;; *************** function _LED_setBrightnessRange *****************
 17481 ;; Defined at:
 17482 ;;		line 77 in file "LEDcomm.c"
 17483 ;; Parameters:    Size  Location     Type
 17484 ;;  range           2   36[BANK0 ] int 
 17485 ;;  topOrBottom     2   38[BANK0 ] int 
 17486 ;; Auto vars:     Size  Location     Type
 17487 ;;  LED_configRe    4    0[BANK1 ] long 
 17488 ;; Return value:  Size  Location     Type
 17489 ;;                  1    wreg      void 
 17490 ;; Registers used:
 17491 ;;		wreg, status,2, status,0, pclath, cstack
 17492 ;; Tracked objects:
 17493 ;;		On entry : 0/0
 17494 ;;		On exit  : 0/0
 17495 ;;		Unchanged: 0/0
 17496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17497 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17498 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17499 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17500 ;;      Totals:         0      10       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17501 ;;Total ram usage:       14 bytes
 17502 ;; Hardware stack levels used:    1
 17503 ;; Hardware stack levels required when called:    8
 17504 ;; This function calls:
 17505 ;;		_send_2length_2bytes_IK
 17506 ;; This function is called by:
 17507 ;;		_LED_testComm
 17508 ;;		_main_initialize
 17509 ;;		_setLEDBrightnessRange
 17510 ;; This function uses a non-reentrant model
 17511 ;;
 17512                           
 17513                           
 17514                           ;psect for function _LED_setBrightnessRange
 17515  082B                     _LED_setBrightnessRange:	
 17516                           
 17517                           ;LEDcomm.c: 79: long LED_configReg = (topOrBottom == 1) ? LED_configReg_top : LED_config
      +                          Reg_bot;
 17518                           
 17519                           ;incstack = 0
 17520                           ; Regs used in _LED_setBrightnessRange: [wreg+status,2+status,0+pclath+cstack]
 17521  082B  0020               	movlb	0	; select bank0
 17522  082C  0346               	decf	LED_setBrightnessRange@topOrBottom,w
 17523  082D  0447               	iorwf	LED_setBrightnessRange@topOrBottom+1,w
 17524  082E  1903               	btfsc	3,2
 17525  082F  283F               	goto	l8221
 17526  0830  0022               	movlb	2	; select bank2
 17527  0831  084D               	movf	(_LED_configReg_bot+3)^(0+256),w
 17528  0832  0021               	movlb	1	; select bank1
 17529  0833  00A3               	movwf	(LED_setBrightnessRange@LED_configReg+3)^(0+128)
 17530  0834  0022               	movlb	2	; select bank2
 17531  0835  084C               	movf	(_LED_configReg_bot+2)^(0+256),w
 17532  0836  0021               	movlb	1	; select bank1
 17533  0837  00A2               	movwf	(LED_setBrightnessRange@LED_configReg+2)^(0+128)
 17534  0838  0022               	movlb	2	; select bank2
 17535  0839  084B               	movf	(_LED_configReg_bot+1)^(0+256),w
 17536  083A  0021               	movlb	1	; select bank1
 17537  083B  00A1               	movwf	(LED_setBrightnessRange@LED_configReg+1)^(0+128)
 17538  083C  0022               	movlb	2	; select bank2
 17539  083D  084A               	movf	_LED_configReg_bot^(0+256),w
 17540  083E  284D               	goto	L35
 17541  083F                     l8221:	
 17542  083F  0022               	movlb	2	; select bank2
 17543  0840  0851               	movf	(_LED_configReg_top+3)^(0+256),w
 17544  0841  0021               	movlb	1	; select bank1
 17545  0842  00A3               	movwf	(LED_setBrightnessRange@LED_configReg+3)^(0+128)
 17546  0843  0022               	movlb	2	; select bank2
 17547  0844  0850               	movf	(_LED_configReg_top+2)^(0+256),w
 17548  0845  0021               	movlb	1	; select bank1
 17549  0846  00A2               	movwf	(LED_setBrightnessRange@LED_configReg+2)^(0+128)
 17550  0847  0022               	movlb	2	; select bank2
 17551  0848  084F               	movf	(_LED_configReg_top+1)^(0+256),w
 17552  0849  0021               	movlb	1	; select bank1
 17553  084A  00A1               	movwf	(LED_setBrightnessRange@LED_configReg+1)^(0+128)
 17554  084B  0022               	movlb	2	; select bank2
 17555  084C  084E               	movf	_LED_configReg_top^(0+256),w
 17556  084D                     L35:	
 17557  084D  0021               	movlb	1	; select bank1
 17558  084E  00A0               	movwf	LED_setBrightnessRange@LED_configReg^(0+128)
 17559                           
 17560                           ;LEDcomm.c: 80: if(range > 0)
 17561  084F  0020               	movlb	0	; select bank0
 17562  0850  0845               	movf	LED_setBrightnessRange@range+1,w
 17563  0851  3A80               	xorlw	128
 17564  0852  00C8               	movwf	??_LED_setBrightnessRange
 17565  0853  3080               	movlw	128
 17566  0854  0248               	subwf	??_LED_setBrightnessRange,w
 17567  0855  1D03               	skipz
 17568  0856  2859               	goto	u8185
 17569  0857  3001               	movlw	1
 17570  0858  0244               	subwf	LED_setBrightnessRange@range,w
 17571  0859                     u8185:	
 17572  0859  1C03               	skipc
 17573  085A  2865               	goto	l8225
 17574                           
 17575                           ;LEDcomm.c: 81: LED_configReg |= (0b111);
 17576  085B  3007               	movlw	7
 17577  085C  0021               	movlb	1	; select bank1
 17578  085D  04A0               	iorwf	LED_setBrightnessRange@LED_configReg^(0+128),f
 17579  085E  3000               	movlw	0
 17580  085F  04A1               	iorwf	(LED_setBrightnessRange@LED_configReg+1)^(0+128),f
 17581  0860  3000               	movlw	0
 17582  0861  04A2               	iorwf	(LED_setBrightnessRange@LED_configReg+2)^(0+128),f
 17583  0862  3000               	movlw	0
 17584  0863  04A3               	iorwf	(LED_setBrightnessRange@LED_configReg+3)^(0+128),f
 17585  0864  286E               	goto	l8227
 17586  0865                     l8225:	
 17587                           
 17588                           ;LEDcomm.c: 82: else
 17589                           ;LEDcomm.c: 83: LED_configReg &= ~(0b111);
 17590  0865  30F8               	movlw	248
 17591  0866  0021               	movlb	1	; select bank1
 17592  0867  05A0               	andwf	LED_setBrightnessRange@LED_configReg^(0+128),f
 17593  0868  30FF               	movlw	255
 17594  0869  05A1               	andwf	(LED_setBrightnessRange@LED_configReg+1)^(0+128),f
 17595  086A  30FF               	movlw	255
 17596  086B  05A2               	andwf	(LED_setBrightnessRange@LED_configReg+2)^(0+128),f
 17597  086C  30FF               	movlw	255
 17598  086D  05A3               	andwf	(LED_setBrightnessRange@LED_configReg+3)^(0+128),f
 17599  086E                     l8227:	
 17600                           
 17601                           ;LEDcomm.c: 85: send_2length_2bytes_IK((unsigned int)((LED_configReg>>16) & 0xFFFF),(uns
      +                          igned int)LED_configReg, 3, topOrBottom);
 17602  086E  0820               	movf	LED_setBrightnessRange@LED_configReg^(0+128),w
 17603  086F  0020               	movlb	0	; select bank0
 17604  0870  00C8               	movwf	??_LED_setBrightnessRange
 17605  0871  0021               	movlb	1	; select bank1
 17606  0872  0821               	movf	(LED_setBrightnessRange@LED_configReg+1)^(0+128),w
 17607  0873  0020               	movlb	0	; select bank0
 17608  0874  00C9               	movwf	??_LED_setBrightnessRange+1
 17609  0875  0021               	movlb	1	; select bank1
 17610  0876  0822               	movf	(LED_setBrightnessRange@LED_configReg+2)^(0+128),w
 17611  0877  0020               	movlb	0	; select bank0
 17612  0878  00CA               	movwf	??_LED_setBrightnessRange+2
 17613  0879  0021               	movlb	1	; select bank1
 17614  087A  0823               	movf	(LED_setBrightnessRange@LED_configReg+3)^(0+128),w
 17615  087B  0020               	movlb	0	; select bank0
 17616  087C  00CB               	movwf	??_LED_setBrightnessRange+3
 17617  087D  3010               	movlw	16
 17618  087E  00CC               	movwf	??_LED_setBrightnessRange+4
 17619  087F                     u8195:	
 17620  087F  37CB               	asrf	??_LED_setBrightnessRange+3,f
 17621  0880  0CCA               	rrf	??_LED_setBrightnessRange+2,f
 17622  0881  0CC9               	rrf	??_LED_setBrightnessRange+1,f
 17623  0882  0CC8               	rrf	??_LED_setBrightnessRange,f
 17624  0883  0BCC               	decfsz	??_LED_setBrightnessRange+4,f
 17625  0884  287F               	goto	u8195
 17626  0885  0849               	movf	??_LED_setBrightnessRange+1,w
 17627  0886  00BD               	movwf	send_2length_2bytes_IK@data1+1
 17628  0887  0848               	movf	??_LED_setBrightnessRange,w
 17629  0888  00BC               	movwf	send_2length_2bytes_IK@data1
 17630  0889  0021               	movlb	1	; select bank1
 17631  088A  0821               	movf	(LED_setBrightnessRange@LED_configReg+1)^(0+128),w
 17632  088B  0020               	movlb	0	; select bank0
 17633  088C  00BF               	movwf	send_2length_2bytes_IK@data2+1
 17634  088D  0021               	movlb	1	; select bank1
 17635  088E  0820               	movf	LED_setBrightnessRange@LED_configReg^(0+128),w
 17636  088F  0020               	movlb	0	; select bank0
 17637  0890  00BE               	movwf	send_2length_2bytes_IK@data2
 17638  0891  3003               	movlw	3
 17639  0892  00CD               	movwf	??_LED_setBrightnessRange+5
 17640  0893  084D               	movf	??_LED_setBrightnessRange+5,w
 17641  0894  00C0               	movwf	send_2length_2bytes_IK@latch_start
 17642  0895  0847               	movf	LED_setBrightnessRange@topOrBottom+1,w
 17643  0896  00C2               	movwf	send_2length_2bytes_IK@topOrBottom+1
 17644  0897  0846               	movf	LED_setBrightnessRange@topOrBottom,w
 17645  0898  00C1               	movwf	send_2length_2bytes_IK@topOrBottom
 17646  0899  31A2  222B  3188   	fcall	_send_2length_2bytes_IK
 17647                           
 17648                           ;LEDcomm.c: 88: if (topOrBottom == 1)
 17649  089C  0020               	movlb	0	; select bank0
 17650  089D  0346               	decf	LED_setBrightnessRange@topOrBottom,w
 17651  089E  0447               	iorwf	LED_setBrightnessRange@topOrBottom+1,w
 17652  089F  1D03               	btfss	3,2
 17653  08A0  28B2               	goto	l8233
 17654                           
 17655                           ;LEDcomm.c: 89: LED_configReg_top = LED_configReg;
 17656  08A1  0021               	movlb	1	; select bank1
 17657  08A2  0823               	movf	(LED_setBrightnessRange@LED_configReg+3)^(0+128),w
 17658  08A3  0022               	movlb	2	; select bank2
 17659  08A4  00D1               	movwf	(_LED_configReg_top+3)^(0+256)
 17660  08A5  0021               	movlb	1	; select bank1
 17661  08A6  0822               	movf	(LED_setBrightnessRange@LED_configReg+2)^(0+128),w
 17662  08A7  0022               	movlb	2	; select bank2
 17663  08A8  00D0               	movwf	(_LED_configReg_top+2)^(0+256)
 17664  08A9  0021               	movlb	1	; select bank1
 17665  08AA  0821               	movf	(LED_setBrightnessRange@LED_configReg+1)^(0+128),w
 17666  08AB  0022               	movlb	2	; select bank2
 17667  08AC  00CF               	movwf	(_LED_configReg_top+1)^(0+256)
 17668  08AD  0021               	movlb	1	; select bank1
 17669  08AE  0820               	movf	LED_setBrightnessRange@LED_configReg^(0+128),w
 17670  08AF  0022               	movlb	2	; select bank2
 17671  08B0  00CE               	movwf	_LED_configReg_top^(0+256)
 17672  08B1  0008               	return
 17673  08B2                     l8233:	
 17674                           
 17675                           ;LEDcomm.c: 90: else
 17676                           ;LEDcomm.c: 91: LED_configReg_bot = LED_configReg;
 17677  08B2  0021               	movlb	1	; select bank1
 17678  08B3  0823               	movf	(LED_setBrightnessRange@LED_configReg+3)^(0+128),w
 17679  08B4  0022               	movlb	2	; select bank2
 17680  08B5  00CD               	movwf	(_LED_configReg_bot+3)^(0+256)
 17681  08B6  0021               	movlb	1	; select bank1
 17682  08B7  0822               	movf	(LED_setBrightnessRange@LED_configReg+2)^(0+128),w
 17683  08B8  0022               	movlb	2	; select bank2
 17684  08B9  00CC               	movwf	(_LED_configReg_bot+2)^(0+256)
 17685  08BA  0021               	movlb	1	; select bank1
 17686  08BB  0821               	movf	(LED_setBrightnessRange@LED_configReg+1)^(0+128),w
 17687  08BC  0022               	movlb	2	; select bank2
 17688  08BD  00CB               	movwf	(_LED_configReg_bot+1)^(0+256)
 17689  08BE  0021               	movlb	1	; select bank1
 17690  08BF  0820               	movf	LED_setBrightnessRange@LED_configReg^(0+128),w
 17691  08C0  0022               	movlb	2	; select bank2
 17692  08C1  00CA               	movwf	_LED_configReg_bot^(0+256)
 17693  08C2  0008               	return
 17694  08C3                     __end_of_LED_setBrightnessRange:	
 17695                           
 17696                           	psect	text61
 17697  2567                     __ptext61:	
 17698 ;; *************** function _LED_readConfig *****************
 17699 ;; Defined at:
 17700 ;;		line 124 in file "LEDcomm.c"
 17701 ;; Parameters:    Size  Location     Type
 17702 ;;  topOrBottom     2   38[BANK1 ] int 
 17703 ;; Auto vars:     Size  Location     Type
 17704 ;;		None
 17705 ;; Return value:  Size  Location     Type
 17706 ;;                  4   38[BANK1 ] long 
 17707 ;; Registers used:
 17708 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17709 ;; Tracked objects:
 17710 ;;		On entry : 0/0
 17711 ;;		On exit  : 0/0
 17712 ;;		Unchanged: 0/0
 17713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17714 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17716 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17717 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17718 ;;Total ram usage:        5 bytes
 17719 ;; Hardware stack levels used:    1
 17720 ;; Hardware stack levels required when called:   10
 17721 ;; This function calls:
 17722 ;;		_LED_getData
 17723 ;;		_send_2length_2bytes_IK
 17724 ;; This function is called by:
 17725 ;;		_LED_testComm
 17726 ;; This function uses a non-reentrant model
 17727 ;;
 17728                           
 17729                           
 17730                           ;psect for function _LED_readConfig
 17731  2567                     _LED_readConfig:	
 17732                           
 17733                           ;incstack = 0
 17734                           ; Regs used in _LED_readConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17735                           ;LEDcomm.c: 125: do { LATCbits.LATC1 = 1; } while(0);
 17736  2567  0022               	movlb	2	; select bank2
 17737  2568  148E               	bsf	14,1	;volatile
 17738                           
 17739                           ;LEDcomm.c: 126: send_2length_2bytes_IK(0,0,5,topOrBottom);
 17740  2569  3000               	movlw	0
 17741  256A  0020               	movlb	0	; select bank0
 17742  256B  00BC               	movwf	send_2length_2bytes_IK@data1
 17743  256C  00BD               	movwf	send_2length_2bytes_IK@data1+1
 17744  256D  3000               	movlw	0
 17745  256E  00BE               	movwf	send_2length_2bytes_IK@data2
 17746  256F  00BF               	movwf	send_2length_2bytes_IK@data2+1
 17747  2570  3005               	movlw	5
 17748  2571  00C9               	movwf	??_LED_readConfig
 17749  2572  0849               	movf	??_LED_readConfig,w
 17750  2573  00C0               	movwf	send_2length_2bytes_IK@latch_start
 17751  2574  0021               	movlb	1	; select bank1
 17752  2575  0847               	movf	(LED_readConfig@topOrBottom+1)^(0+128),w
 17753  2576  0020               	movlb	0	; select bank0
 17754  2577  00C2               	movwf	send_2length_2bytes_IK@topOrBottom+1
 17755  2578  0021               	movlb	1	; select bank1
 17756  2579  0846               	movf	LED_readConfig@topOrBottom^(0+128),w
 17757  257A  0020               	movlb	0	; select bank0
 17758  257B  00C1               	movwf	send_2length_2bytes_IK@topOrBottom
 17759  257C  31A2  222B  31A5   	fcall	_send_2length_2bytes_IK
 17760                           
 17761                           ;LEDcomm.c: 127: return LED_getData(topOrBottom);
 17762  257F  0021               	movlb	1	; select bank1
 17763  2580  0847               	movf	(LED_readConfig@topOrBottom+1)^(0+128),w
 17764  2581  00B6               	movwf	(LED_getData@topOrBottom+1)^(0+128)
 17765  2582  0846               	movf	LED_readConfig@topOrBottom^(0+128),w
 17766  2583  00B5               	movwf	LED_getData@topOrBottom^(0+128)
 17767  2584  3196  26F2         	fcall	_LED_getData
 17768  2586  0021               	movlb	1	; select bank1
 17769  2587  0838               	movf	(?_LED_getData+3)^(0+128),w
 17770  2588  00C9               	movwf	(?_LED_readConfig+3)^(0+128)
 17771  2589  0837               	movf	(?_LED_getData+2)^(0+128),w
 17772  258A  00C8               	movwf	(?_LED_readConfig+2)^(0+128)
 17773  258B  0836               	movf	(?_LED_getData+1)^(0+128),w
 17774  258C  00C7               	movwf	(?_LED_readConfig+1)^(0+128)
 17775  258D  0835               	movf	?_LED_getData^(0+128),w
 17776  258E  00C6               	movwf	?_LED_readConfig^(0+128)
 17777  258F  0008               	return
 17778  2590                     __end_of_LED_readConfig:	
 17779                           
 17780                           	psect	text62
 17781  16F2                     __ptext62:	
 17782 ;; *************** function _LED_getData *****************
 17783 ;; Defined at:
 17784 ;;		line 130 in file "LEDcomm.c"
 17785 ;; Parameters:    Size  Location     Type
 17786 ;;  topOrBottom     2   21[BANK1 ] int 
 17787 ;; Auto vars:     Size  Location     Type
 17788 ;;  j               2   36[BANK1 ] int 
 17789 ;;  readData        4   32[BANK1 ] long 
 17790 ;; Return value:  Size  Location     Type
 17791 ;;                  4   21[BANK1 ] long 
 17792 ;; Registers used:
 17793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17794 ;; Tracked objects:
 17795 ;;		On entry : 0/0
 17796 ;;		On exit  : 0/0
 17797 ;;		Unchanged: 0/0
 17798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17799 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17800 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17801 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17802 ;;      Totals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17803 ;;Total ram usage:       17 bytes
 17804 ;; Hardware stack levels used:    1
 17805 ;; Hardware stack levels required when called:    9
 17806 ;; This function calls:
 17807 ;;		_printf
 17808 ;; This function is called by:
 17809 ;;		_LED_readConfig
 17810 ;; This function uses a non-reentrant model
 17811 ;;
 17812                           
 17813                           
 17814                           ;psect for function _LED_getData
 17815  16F2                     _LED_getData:	
 17816                           
 17817                           ;LEDcomm.c: 132: long readData = 0;
 17818                           
 17819                           ;incstack = 0
 17820                           ; Regs used in _LED_getData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17821  16F2  3000               	movlw	0
 17822  16F3  0021               	movlb	1	; select bank1
 17823  16F4  00C3               	movwf	(LED_getData@readData+3)^(0+128)
 17824  16F5  3000               	movlw	0
 17825  16F6  00C2               	movwf	(LED_getData@readData+2)^(0+128)
 17826  16F7  3000               	movlw	0
 17827  16F8  00C1               	movwf	(LED_getData@readData+1)^(0+128)
 17828  16F9  3000               	movlw	0
 17829  16FA  00C0               	movwf	LED_getData@readData^(0+128)
 17830                           
 17831                           ;LEDcomm.c: 134: if (topOrBottom == 1) do { LATBbits.LATB4 = 0; } while(0);
 17832  16FB  0335               	decf	LED_getData@topOrBottom^(0+128),w
 17833  16FC  0436               	iorwf	(LED_getData@topOrBottom+1)^(0+128),w
 17834  16FD  1D03               	btfss	3,2
 17835  16FE  2F02               	goto	l310
 17836  16FF  0022               	movlb	2	; select bank2
 17837  1700  120D               	bcf	13,4	;volatile
 17838  1701  2F04               	goto	l8035
 17839  1702                     l310:	
 17840                           ;LEDcomm.c: 135: else do { LATCbits.LATC0 = 0; } while(0);
 17841                           
 17842  1702  0022               	movlb	2	; select bank2
 17843  1703  100E               	bcf	14,0	;volatile
 17844  1704                     l8035:	
 17845                           
 17846                           ;LEDcomm.c: 137: for(int j = 23; j>=0; j--){
 17847  1704  3017               	movlw	23
 17848  1705  0021               	movlb	1	; select bank1
 17849  1706  00C4               	movwf	LED_getData@j^(0+128)
 17850  1707  3000               	movlw	0
 17851  1708  00C5               	movwf	(LED_getData@j^(0+128)+1)
 17852  1709  1BC5               	btfsc	(LED_getData@j+1)^(0+128),7
 17853  170A  2F5E               	goto	l320
 17854  170B                     l314:	
 17855                           ;LEDcomm.c: 138: do { LATAbits.LATA2 = 1; } while(0);
 17856                           
 17857  170B  0022               	movlb	2	; select bank2
 17858  170C  150C               	bsf	12,2	;volatile
 17859                           
 17860                           ;LEDcomm.c: 140: if (topOrBottom == 1)
 17861  170D  0021               	movlb	1	; select bank1
 17862  170E  0335               	decf	LED_getData@topOrBottom^(0+128),w
 17863  170F  0436               	iorwf	(LED_getData@topOrBottom+1)^(0+128),w
 17864  1710  1D03               	btfss	3,2
 17865  1711  2F31               	goto	l8045
 17866                           
 17867                           ;LEDcomm.c: 141: {readData |= (PORTCbits.RC6 << j);}
 17868  1712  0020               	movlb	0	; select bank0
 17869  1713  0E0E               	swapf	14,w	;volatile
 17870  1714  0C89               	rrf	9,f
 17871  1715  0C89               	rrf	9,f
 17872  1716  3901               	andlw	1
 17873  1717  0021               	movlb	1	; select bank1
 17874  1718  00B9               	movwf	??_LED_getData^(0+128)
 17875  1719  01BA               	clrf	(??_LED_getData^(0+128)+1)
 17876  171A  0A44               	incf	LED_getData@j^(0+128),w
 17877  171B  2F1E               	goto	u7714
 17878  171C                     u7715:	
 17879  171C  35B9               	lslf	??_LED_getData^(0+128),f
 17880  171D  0DBA               	rlf	(??_LED_getData^(0+128)+1),f
 17881  171E                     u7714:	
 17882  171E  0B89               	decfsz	9,f
 17883  171F  2F1C               	goto	u7715
 17884  1720  0839               	movf	??_LED_getData^(0+128),w
 17885  1721  00BB               	movwf	(??_LED_getData+2)^(0+128)
 17886  1722  083A               	movf	(??_LED_getData+1)^(0+128),w
 17887  1723  00BC               	movwf	((??_LED_getData+2)^(0+128)+1)
 17888  1724  3000               	movlw	0
 17889  1725  1BBC               	btfsc	((??_LED_getData+2)^(0+128)+1),7
 17890  1726  30FF               	movlw	255
 17891  1727  00BD               	movwf	((??_LED_getData+2)^(0+128)+2)
 17892  1728  00BE               	movwf	((??_LED_getData+2)^(0+128)+3)
 17893  1729  083B               	movf	(??_LED_getData+2)^(0+128),w
 17894  172A  04C0               	iorwf	LED_getData@readData^(0+128),f
 17895  172B  083C               	movf	(??_LED_getData+3)^(0+128),w
 17896  172C  04C1               	iorwf	(LED_getData@readData+1)^(0+128),f
 17897  172D  083D               	movf	(??_LED_getData+4)^(0+128),w
 17898  172E  04C2               	iorwf	(LED_getData@readData+2)^(0+128),f
 17899  172F  083E               	movf	(??_LED_getData+5)^(0+128),w
 17900  1730  2F50               	goto	L36
 17901  1731                     l8045:	
 17902                           
 17903                           ;LEDcomm.c: 142: else
 17904                           ;LEDcomm.c: 143: {readData |= (PORTCbits.RC3 << j);}
 17905  1731  0020               	movlb	0	; select bank0
 17906  1732  0C0E               	rrf	14,w	;volatile
 17907  1733  0021               	movlb	1	; select bank1
 17908  1734  00B9               	movwf	??_LED_getData^(0+128)
 17909  1735  0CB9               	rrf	??_LED_getData^(0+128),f
 17910  1736  0C39               	rrf	??_LED_getData^(0+128),w
 17911  1737  3901               	andlw	1
 17912  1738  00BA               	movwf	(??_LED_getData+1)^(0+128)
 17913  1739  01BB               	clrf	((??_LED_getData+1)^(0+128)+1)
 17914  173A  0A44               	incf	LED_getData@j^(0+128),w
 17915  173B  2F3E               	goto	u7724
 17916  173C                     u7725:	
 17917  173C  35BA               	lslf	(??_LED_getData+1)^(0+128),f
 17918  173D  0DBB               	rlf	((??_LED_getData+1)^(0+128)+1),f
 17919  173E                     u7724:	
 17920  173E  0B89               	decfsz	9,f
 17921  173F  2F3C               	goto	u7725
 17922  1740  083A               	movf	(??_LED_getData+1)^(0+128),w
 17923  1741  00BC               	movwf	(??_LED_getData+3)^(0+128)
 17924  1742  083B               	movf	(??_LED_getData+2)^(0+128),w
 17925  1743  00BD               	movwf	((??_LED_getData+3)^(0+128)+1)
 17926  1744  3000               	movlw	0
 17927  1745  1BBD               	btfsc	((??_LED_getData+3)^(0+128)+1),7
 17928  1746  30FF               	movlw	255
 17929  1747  00BE               	movwf	((??_LED_getData+3)^(0+128)+2)
 17930  1748  00BF               	movwf	((??_LED_getData+3)^(0+128)+3)
 17931  1749  083C               	movf	(??_LED_getData+3)^(0+128),w
 17932  174A  04C0               	iorwf	LED_getData@readData^(0+128),f
 17933  174B  083D               	movf	(??_LED_getData+4)^(0+128),w
 17934  174C  04C1               	iorwf	(LED_getData@readData+1)^(0+128),f
 17935  174D  083E               	movf	(??_LED_getData+5)^(0+128),w
 17936  174E  04C2               	iorwf	(LED_getData@readData+2)^(0+128),f
 17937  174F  083F               	movf	(??_LED_getData+6)^(0+128),w
 17938  1750                     L36:	
 17939  1750  04C3               	iorwf	(LED_getData@readData+3)^(0+128),f
 17940                           
 17941                           ;LEDcomm.c: 145: do { LATAbits.LATA2 = 0; } while(0);
 17942  1751  0022               	movlb	2	; select bank2
 17943  1752  110C               	bcf	12,2	;volatile
 17944                           
 17945                           ;LEDcomm.c: 146: _delay((unsigned long)((100)*(1000000/4000000.0)));
 17946  1753  3008               	movlw	8
 17947  1754                     u10227:	
 17948  1754  0B89               	decfsz	9,f
 17949  1755  2F54               	goto	u10227
 17950  1756  0000               	nop
 17951  1757  30FF               	movlw	255
 17952  1758  0021               	movlb	1	; select bank1
 17953  1759  07C4               	addwf	LED_getData@j^(0+128),f
 17954  175A  30FF               	movlw	255
 17955  175B  3DC5               	addwfc	(LED_getData@j+1)^(0+128),f
 17956  175C  1FC5               	btfss	(LED_getData@j+1)^(0+128),7
 17957  175D  2F0B               	goto	l314
 17958  175E                     l320:	
 17959                           ;LEDcomm.c: 148: }
 17960                           ;LEDcomm.c: 150: do { LATAbits.LATA2 = 0; } while(0);
 17961                           
 17962  175E  0022               	movlb	2	; select bank2
 17963  175F  110C               	bcf	12,2	;volatile
 17964                           
 17965                           ;LEDcomm.c: 151: printf("read data: %lu\n", readData);
 17966  1760  300F               	movlw	low (STR_4| (0+32768))
 17967  1761  0021               	movlb	1	; select bank1
 17968  1762  00A0               	movwf	printf@f^(0+128)
 17969  1763  30A9               	movlw	high (STR_4| (0+32768))
 17970  1764  00A1               	movwf	(printf@f^(0+128)+1)
 17971  1765  0843               	movf	(LED_getData@readData+3)^(0+128),w
 17972  1766  00A5               	movwf	((?_printf+3)^(0+128)+2)
 17973  1767  0842               	movf	(LED_getData@readData+2)^(0+128),w
 17974  1768  00A4               	movwf	((?_printf+2)^(0+128)+2)
 17975  1769  0841               	movf	(LED_getData@readData+1)^(0+128),w
 17976  176A  00A3               	movwf	((?_printf+1)^(0+128)+2)
 17977  176B  0840               	movf	LED_getData@readData^(0+128),w
 17978  176C  00A2               	movwf	(?_printf^(0+128)+2)
 17979  176D  318E  26CE         	fcall	_printf
 17980                           
 17981                           ;LEDcomm.c: 152: return readData;
 17982  176F  0021               	movlb	1	; select bank1
 17983  1770  0843               	movf	(LED_getData@readData+3)^(0+128),w
 17984  1771  00B8               	movwf	(?_LED_getData+3)^(0+128)
 17985  1772  0842               	movf	(LED_getData@readData+2)^(0+128),w
 17986  1773  00B7               	movwf	(?_LED_getData+2)^(0+128)
 17987  1774  0841               	movf	(LED_getData@readData+1)^(0+128),w
 17988  1775  00B6               	movwf	(?_LED_getData+1)^(0+128)
 17989  1776  0840               	movf	LED_getData@readData^(0+128),w
 17990  1777  00B5               	movwf	?_LED_getData^(0+128)
 17991  1778  0008               	return
 17992  1779                     __end_of_LED_getData:	
 17993                           
 17994                           	psect	text63
 17995  0DAC                     __ptext63:	
 17996 ;; *************** function _doRelMove *****************
 17997 ;; Defined at:
 17998 ;;		line 353 in file "main.c"
 17999 ;; Parameters:    Size  Location     Type
 18000 ;;		None
 18001 ;; Auto vars:     Size  Location     Type
 18002 ;;  j               2   51[BANK1 ] int 
 18003 ;; Return value:  Size  Location     Type
 18004 ;;                  1    wreg      void 
 18005 ;; Registers used:
 18006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18007 ;; Tracked objects:
 18008 ;;		On entry : 0/0
 18009 ;;		On exit  : 0/0
 18010 ;;		Unchanged: 0/0
 18011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18013 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18014 ;;      Temps:          0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18015 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18016 ;;Total ram usage:       18 bytes
 18017 ;; Hardware stack levels used:    1
 18018 ;; Hardware stack levels required when called:   15
 18019 ;; This function calls:
 18020 ;;		_doMove
 18021 ;; This function is called by:
 18022 ;;		_main
 18023 ;; This function uses a non-reentrant model
 18024 ;;
 18025                           
 18026                           
 18027                           ;psect for function _doRelMove
 18028  0DAC                     _doRelMove:	
 18029                           
 18030                           ;main.c: 354: if(remainingSteps == 0){
 18031                           
 18032                           ;incstack = 0
 18033                           ; Regs used in _doRelMove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18034  0DAC  0022               	movlb	2	; select bank2
 18035  0DAD  0841               	movf	(_remainingSteps+3)^(0+256),w
 18036  0DAE  0440               	iorwf	(_remainingSteps+2)^(0+256),w
 18037  0DAF  043F               	iorwf	(_remainingSteps+1)^(0+256),w
 18038  0DB0  043E               	iorwf	_remainingSteps^(0+256),w
 18039  0DB1  1D03               	skipz
 18040  0DB2  2DC7               	goto	l9367
 18041                           
 18042                           ;main.c: 355: motionType = NONE;
 18043  0DB3  0020               	movlb	0	; select bank0
 18044  0DB4  01D5               	clrf	_motionType
 18045                           
 18046                           ;main.c: 356: moveVector_ups = 0;
 18047  0DB5  3000               	movlw	0
 18048  0DB6  0021               	movlb	1	; select bank1
 18049  0DB7  00E7               	movwf	(_moveVector_ups+3)^(0+128)
 18050  0DB8  3000               	movlw	0
 18051  0DB9  00E6               	movwf	(_moveVector_ups+2)^(0+128)
 18052  0DBA  3000               	movlw	0
 18053  0DBB  00E5               	movwf	(_moveVector_ups+1)^(0+128)
 18054  0DBC  3000               	movlw	0
 18055  0DBD  00E4               	movwf	_moveVector_ups^(0+128)
 18056                           
 18057                           ;main.c: 357: moveVector_downs = 0;
 18058  0DBE  3000               	movlw	0
 18059  0DBF  00E3               	movwf	(_moveVector_downs+3)^(0+128)
 18060  0DC0  3000               	movlw	0
 18061  0DC1  00E2               	movwf	(_moveVector_downs+2)^(0+128)
 18062  0DC2  3000               	movlw	0
 18063  0DC3  00E1               	movwf	(_moveVector_downs+1)^(0+128)
 18064  0DC4  3000               	movlw	0
 18065  0DC5  00E0               	movwf	_moveVector_downs^(0+128)
 18066                           
 18067                           ;main.c: 359: }
 18068                           
 18069                           ;main.c: 358: return;
 18070  0DC6  0008               	return
 18071  0DC7                     l9367:	
 18072                           
 18073                           ;main.c: 360: else{
 18074                           ;main.c: 361: int j;
 18075                           ;main.c: 362: if (remainingSteps > 0){
 18076  0DC7  0022               	movlb	2	; select bank2
 18077  0DC8  1BC1               	btfsc	(_remainingSteps+3)^(0+256),7
 18078  0DC9  2E52               	goto	l9387
 18079  0DCA  0841               	movf	(_remainingSteps+3)^(0+256),w
 18080  0DCB  1D03               	btfss	3,2
 18081  0DCC  2DD7               	goto	l9369
 18082  0DCD  0840               	movf	(_remainingSteps+2)^(0+256),w
 18083  0DCE  1D03               	btfss	3,2
 18084  0DCF  2DD7               	goto	l9369
 18085  0DD0  083F               	movf	(_remainingSteps+1)^(0+256),w
 18086  0DD1  1D03               	btfss	3,2
 18087  0DD2  2DD7               	goto	l9369
 18088  0DD3  3001               	movlw	1
 18089  0DD4  023E               	subwf	_remainingSteps^(0+256),w
 18090  0DD5  1C03               	btfss	3,0
 18091  0DD6  2E52               	goto	l9387
 18092  0DD7                     l9369:	
 18093                           
 18094                           ;main.c: 363: moveVector_ups = 0;
 18095  0DD7  3000               	movlw	0
 18096  0DD8  0021               	movlb	1	; select bank1
 18097  0DD9  00E7               	movwf	(_moveVector_ups+3)^(0+128)
 18098  0DDA  3000               	movlw	0
 18099  0DDB  00E6               	movwf	(_moveVector_ups+2)^(0+128)
 18100  0DDC  3000               	movlw	0
 18101  0DDD  00E5               	movwf	(_moveVector_ups+1)^(0+128)
 18102  0DDE  3000               	movlw	0
 18103  0DDF  00E4               	movwf	_moveVector_ups^(0+128)
 18104                           
 18105                           ;main.c: 364: moveVector_downs = activeMask;
 18106  0DE0  085F               	movf	(_activeMask+3)^(0+128),w
 18107  0DE1  00E3               	movwf	(_moveVector_downs+3)^(0+128)
 18108  0DE2  085E               	movf	(_activeMask+2)^(0+128),w
 18109  0DE3  00E2               	movwf	(_moveVector_downs+2)^(0+128)
 18110  0DE4  085D               	movf	(_activeMask+1)^(0+128),w
 18111  0DE5  00E1               	movwf	(_moveVector_downs+1)^(0+128)
 18112  0DE6  085C               	movf	_activeMask^(0+128),w
 18113  0DE7  00E0               	movwf	_moveVector_downs^(0+128)
 18114                           
 18115                           ;main.c: 366: doMove();
 18116  0DE8  3187  2761  318D   	fcall	_doMove
 18117                           
 18118                           ;main.c: 367: remainingSteps--;
 18119  0DEB  30FF               	movlw	255
 18120  0DEC  0022               	movlb	2	; select bank2
 18121  0DED  07BE               	addwf	_remainingSteps^(0+256),f
 18122  0DEE  30FF               	movlw	255
 18123  0DEF  3DBF               	addwfc	(_remainingSteps+1)^(0+256),f
 18124  0DF0  30FF               	movlw	255
 18125  0DF1  3DC0               	addwfc	(_remainingSteps+2)^(0+256),f
 18126  0DF2  30FF               	movlw	255
 18127  0DF3  3DC1               	addwfc	(_remainingSteps+3)^(0+256),f
 18128                           
 18129                           ;main.c: 370: for(j = 0; j<24; j++)
 18130  0DF4  0021               	movlb	1	; select bank1
 18131  0DF5  01D3               	clrf	doRelMove@j^(0+128)
 18132  0DF6  01D4               	clrf	(doRelMove@j+1)^(0+128)
 18133  0DF7                     L37:	
 18134  0DF7  0854               	movf	(doRelMove@j+1)^(0+128),w
 18135  0DF8  3A80               	xorlw	128
 18136  0DF9  00C3               	movwf	??_doRelMove^(0+128)
 18137  0DFA  3080               	movlw	128
 18138  0DFB  0243               	subwf	??_doRelMove^(0+128),w
 18139  0DFC  1D03               	skipz
 18140  0DFD  2E00               	goto	u9495
 18141  0DFE  3018               	movlw	24
 18142  0DFF  0253               	subwf	doRelMove@j^(0+128),w
 18143  0E00                     u9495:	
 18144  0E00  1803               	btfsc	3,0
 18145  0E01  0008               	return
 18146                           
 18147                           ;main.c: 371: currentPositions_steps[j] += (activeMask & (1UL<<j) > 0);
 18148  0E02  0021               	movlb	1	; select bank1
 18149  0E03  085C               	movf	_activeMask^(0+128),w
 18150  0E04  00C3               	movwf	??_doRelMove^(0+128)
 18151  0E05  085D               	movf	(_activeMask+1)^(0+128),w
 18152  0E06  00C4               	movwf	(??_doRelMove^(0+128)+1)
 18153  0E07  085E               	movf	(_activeMask+2)^(0+128),w
 18154  0E08  00C5               	movwf	(??_doRelMove^(0+128)+2)
 18155  0E09  085F               	movf	(_activeMask+3)^(0+128),w
 18156  0E0A  00C6               	movwf	(??_doRelMove^(0+128)+3)
 18157  0E0B  3001               	movlw	1
 18158  0E0C  00C7               	movwf	(??_doRelMove+4)^(0+128)
 18159  0E0D  3000               	movlw	0
 18160  0E0E  00C8               	movwf	((??_doRelMove+4)^(0+128)+1)
 18161  0E0F  3000               	movlw	0
 18162  0E10  00C9               	movwf	((??_doRelMove+4)^(0+128)+2)
 18163  0E11  3000               	movlw	0
 18164  0E12  00CA               	movwf	((??_doRelMove+4)^(0+128)+3)
 18165  0E13  0A53               	incf	doRelMove@j^(0+128),w
 18166  0E14  2E19               	goto	u9500
 18167  0E15                     u9505:	
 18168  0E15  35C7               	lslf	(??_doRelMove+4)^(0+128),f
 18169  0E16  0DC8               	rlf	((??_doRelMove+4)^(0+128)+1),f
 18170  0E17  0DC9               	rlf	((??_doRelMove+4)^(0+128)+2),f
 18171  0E18  0DCA               	rlf	((??_doRelMove+4)^(0+128)+3),f
 18172  0E19                     u9500:	
 18173  0E19  0B89               	decfsz	9,f
 18174  0E1A  2E15               	goto	u9505
 18175  0E1B  084A               	movf	(??_doRelMove+7)^(0+128),w
 18176  0E1C  0449               	iorwf	(??_doRelMove+6)^(0+128),w
 18177  0E1D  0448               	iorwf	(??_doRelMove+5)^(0+128),w
 18178  0E1E  0447               	iorwf	(??_doRelMove+4)^(0+128),w
 18179  0E1F  1903               	btfsc	3,2
 18180  0E20  2E23               	goto	u9510
 18181  0E21  3001               	movlw	1
 18182  0E22  2E24               	goto	u9520
 18183  0E23                     u9510:	
 18184  0E23  3000               	movlw	0
 18185  0E24                     u9520:	
 18186  0E24  00CB               	movwf	(??_doRelMove+8)^(0+128)
 18187  0E25  01CC               	clrf	((??_doRelMove+8)^(0+128)+1)
 18188  0E26  01CD               	clrf	((??_doRelMove+8)^(0+128)+2)
 18189  0E27  01CE               	clrf	((??_doRelMove+8)^(0+128)+3)
 18190  0E28  084B               	movf	(??_doRelMove+8)^(0+128),w
 18191  0E29  05C3               	andwf	??_doRelMove^(0+128),f
 18192  0E2A  084C               	movf	(??_doRelMove+9)^(0+128),w
 18193  0E2B  05C4               	andwf	(??_doRelMove^(0+128)+1),f
 18194  0E2C  084D               	movf	(??_doRelMove+10)^(0+128),w
 18195  0E2D  05C5               	andwf	(??_doRelMove^(0+128)+2),f
 18196  0E2E  084E               	movf	(??_doRelMove+11)^(0+128),w
 18197  0E2F  05C6               	andwf	(??_doRelMove^(0+128)+3),f
 18198  0E30  0854               	movf	(doRelMove@j+1)^(0+128),w
 18199  0E31  00D0               	movwf	((??_doRelMove+12)^(0+128)+1)
 18200  0E32  0853               	movf	doRelMove@j^(0+128),w
 18201  0E33  00CF               	movwf	(??_doRelMove+12)^(0+128)
 18202  0E34  35CF               	lslf	(??_doRelMove+12)^(0+128),f
 18203  0E35  0DD0               	rlf	((??_doRelMove+12)^(0+128)+1),f
 18204  0E36  35CF               	lslf	(??_doRelMove+12)^(0+128),f
 18205  0E37  0DD0               	rlf	((??_doRelMove+12)^(0+128)+1),f
 18206  0E38  3090               	movlw	144
 18207  0E39  00D1               	movwf	(??_doRelMove+14)^(0+128)
 18208  0E3A  3027               	movlw	39
 18209  0E3B  00D2               	movwf	((??_doRelMove+14)^(0+128)+1)
 18210  0E3C  084F               	movf	(??_doRelMove+12)^(0+128),w
 18211  0E3D  0751               	addwf	(??_doRelMove+14)^(0+128),w
 18212  0E3E  0086               	movwf	6
 18213  0E3F  0850               	movf	(??_doRelMove+13)^(0+128),w
 18214  0E40  3D52               	addwfc	(??_doRelMove+15)^(0+128),w
 18215  0E41  0087               	movwf	7
 18216  0E42  0843               	movf	??_doRelMove^(0+128),w
 18217  0E43  0781               	addwf	1,f
 18218  0E44  3141               	addfsr 1,1
 18219  0E45  0844               	movf	(??_doRelMove+1)^(0+128),w
 18220  0E46  3D81               	addwfc	1,f
 18221  0E47  3141               	addfsr 1,1
 18222  0E48  0845               	movf	(??_doRelMove+2)^(0+128),w
 18223  0E49  3D81               	addwfc	1,f
 18224  0E4A  3141               	addfsr 1,1
 18225  0E4B  0846               	movf	(??_doRelMove+3)^(0+128),w
 18226  0E4C  3D81               	addwfc	1,f
 18227  0E4D  3001               	movlw	1
 18228  0E4E  07D3               	addwf	doRelMove@j^(0+128),f
 18229  0E4F  3000               	movlw	0
 18230  0E50  3DD4               	addwfc	(doRelMove@j+1)^(0+128),f
 18231  0E51  2DF7               	goto	L37
 18232  0E52                     l9387:	
 18233                           ;main.c: 373: }
 18234                           
 18235                           
 18236                           ;main.c: 374: else{
 18237                           ;main.c: 375: moveVector_ups = activeMask;
 18238  0E52  0021               	movlb	1	; select bank1
 18239  0E53  085F               	movf	(_activeMask+3)^(0+128),w
 18240  0E54  00E7               	movwf	(_moveVector_ups+3)^(0+128)
 18241  0E55  085E               	movf	(_activeMask+2)^(0+128),w
 18242  0E56  00E6               	movwf	(_moveVector_ups+2)^(0+128)
 18243  0E57  085D               	movf	(_activeMask+1)^(0+128),w
 18244  0E58  00E5               	movwf	(_moveVector_ups+1)^(0+128)
 18245  0E59  085C               	movf	_activeMask^(0+128),w
 18246  0E5A  00E4               	movwf	_moveVector_ups^(0+128)
 18247                           
 18248                           ;main.c: 376: moveVector_downs = 0;
 18249  0E5B  3000               	movlw	0
 18250  0E5C  00E3               	movwf	(_moveVector_downs+3)^(0+128)
 18251  0E5D  3000               	movlw	0
 18252  0E5E  00E2               	movwf	(_moveVector_downs+2)^(0+128)
 18253  0E5F  3000               	movlw	0
 18254  0E60  00E1               	movwf	(_moveVector_downs+1)^(0+128)
 18255  0E61  3000               	movlw	0
 18256  0E62  00E0               	movwf	_moveVector_downs^(0+128)
 18257                           
 18258                           ;main.c: 378: doMove();
 18259  0E63  3187  2761  318D   	fcall	_doMove
 18260                           
 18261                           ;main.c: 379: remainingSteps++;
 18262  0E66  3001               	movlw	1
 18263  0E67  0022               	movlb	2	; select bank2
 18264  0E68  07BE               	addwf	_remainingSteps^(0+256),f
 18265  0E69  3000               	movlw	0
 18266  0E6A  3DBF               	addwfc	(_remainingSteps+1)^(0+256),f
 18267  0E6B  3000               	movlw	0
 18268  0E6C  3DC0               	addwfc	(_remainingSteps+2)^(0+256),f
 18269  0E6D  3000               	movlw	0
 18270  0E6E  3DC1               	addwfc	(_remainingSteps+3)^(0+256),f
 18271                           
 18272                           ;main.c: 380: for(j = 0; j<24; j++)
 18273  0E6F  0021               	movlb	1	; select bank1
 18274  0E70  01D3               	clrf	doRelMove@j^(0+128)
 18275  0E71  01D4               	clrf	(doRelMove@j+1)^(0+128)
 18276  0E72                     L38:	
 18277  0E72  0854               	movf	(doRelMove@j+1)^(0+128),w
 18278  0E73  3A80               	xorlw	128
 18279  0E74  00C3               	movwf	??_doRelMove^(0+128)
 18280  0E75  3080               	movlw	128
 18281  0E76  0243               	subwf	??_doRelMove^(0+128),w
 18282  0E77  1D03               	skipz
 18283  0E78  2E7B               	goto	u9545
 18284  0E79  3018               	movlw	24
 18285  0E7A  0253               	subwf	doRelMove@j^(0+128),w
 18286  0E7B                     u9545:	
 18287  0E7B  1803               	btfsc	3,0
 18288  0E7C  0008               	return
 18289                           
 18290                           ;main.c: 381: currentPositions_steps[j] -= (activeMask & (1UL<<j) > 0);
 18291  0E7D  0021               	movlb	1	; select bank1
 18292  0E7E  085C               	movf	_activeMask^(0+128),w
 18293  0E7F  00C3               	movwf	??_doRelMove^(0+128)
 18294  0E80  085D               	movf	(_activeMask+1)^(0+128),w
 18295  0E81  00C4               	movwf	(??_doRelMove^(0+128)+1)
 18296  0E82  085E               	movf	(_activeMask+2)^(0+128),w
 18297  0E83  00C5               	movwf	(??_doRelMove^(0+128)+2)
 18298  0E84  085F               	movf	(_activeMask+3)^(0+128),w
 18299  0E85  00C6               	movwf	(??_doRelMove^(0+128)+3)
 18300  0E86  3001               	movlw	1
 18301  0E87  00C7               	movwf	(??_doRelMove+4)^(0+128)
 18302  0E88  3000               	movlw	0
 18303  0E89  00C8               	movwf	((??_doRelMove+4)^(0+128)+1)
 18304  0E8A  3000               	movlw	0
 18305  0E8B  00C9               	movwf	((??_doRelMove+4)^(0+128)+2)
 18306  0E8C  3000               	movlw	0
 18307  0E8D  00CA               	movwf	((??_doRelMove+4)^(0+128)+3)
 18308  0E8E  0A53               	incf	doRelMove@j^(0+128),w
 18309  0E8F  2E94               	goto	u9550
 18310  0E90                     u9555:	
 18311  0E90  35C7               	lslf	(??_doRelMove+4)^(0+128),f
 18312  0E91  0DC8               	rlf	((??_doRelMove+4)^(0+128)+1),f
 18313  0E92  0DC9               	rlf	((??_doRelMove+4)^(0+128)+2),f
 18314  0E93  0DCA               	rlf	((??_doRelMove+4)^(0+128)+3),f
 18315  0E94                     u9550:	
 18316  0E94  0B89               	decfsz	9,f
 18317  0E95  2E90               	goto	u9555
 18318  0E96  084A               	movf	(??_doRelMove+7)^(0+128),w
 18319  0E97  0449               	iorwf	(??_doRelMove+6)^(0+128),w
 18320  0E98  0448               	iorwf	(??_doRelMove+5)^(0+128),w
 18321  0E99  0447               	iorwf	(??_doRelMove+4)^(0+128),w
 18322  0E9A  1903               	btfsc	3,2
 18323  0E9B  2E9E               	goto	u9560
 18324  0E9C  3001               	movlw	1
 18325  0E9D  2E9F               	goto	u9570
 18326  0E9E                     u9560:	
 18327  0E9E  3000               	movlw	0
 18328  0E9F                     u9570:	
 18329  0E9F  00CB               	movwf	(??_doRelMove+8)^(0+128)
 18330  0EA0  01CC               	clrf	((??_doRelMove+8)^(0+128)+1)
 18331  0EA1  01CD               	clrf	((??_doRelMove+8)^(0+128)+2)
 18332  0EA2  01CE               	clrf	((??_doRelMove+8)^(0+128)+3)
 18333  0EA3  084B               	movf	(??_doRelMove+8)^(0+128),w
 18334  0EA4  05C3               	andwf	??_doRelMove^(0+128),f
 18335  0EA5  084C               	movf	(??_doRelMove+9)^(0+128),w
 18336  0EA6  05C4               	andwf	(??_doRelMove^(0+128)+1),f
 18337  0EA7  084D               	movf	(??_doRelMove+10)^(0+128),w
 18338  0EA8  05C5               	andwf	(??_doRelMove^(0+128)+2),f
 18339  0EA9  084E               	movf	(??_doRelMove+11)^(0+128),w
 18340  0EAA  05C6               	andwf	(??_doRelMove^(0+128)+3),f
 18341  0EAB  0854               	movf	(doRelMove@j+1)^(0+128),w
 18342  0EAC  00D0               	movwf	((??_doRelMove+12)^(0+128)+1)
 18343  0EAD  0853               	movf	doRelMove@j^(0+128),w
 18344  0EAE  00CF               	movwf	(??_doRelMove+12)^(0+128)
 18345  0EAF  35CF               	lslf	(??_doRelMove+12)^(0+128),f
 18346  0EB0  0DD0               	rlf	((??_doRelMove+12)^(0+128)+1),f
 18347  0EB1  35CF               	lslf	(??_doRelMove+12)^(0+128),f
 18348  0EB2  0DD0               	rlf	((??_doRelMove+12)^(0+128)+1),f
 18349  0EB3  3090               	movlw	144
 18350  0EB4  00D1               	movwf	(??_doRelMove+14)^(0+128)
 18351  0EB5  3027               	movlw	39
 18352  0EB6  00D2               	movwf	((??_doRelMove+14)^(0+128)+1)
 18353  0EB7  084F               	movf	(??_doRelMove+12)^(0+128),w
 18354  0EB8  0751               	addwf	(??_doRelMove+14)^(0+128),w
 18355  0EB9  0086               	movwf	6
 18356  0EBA  0850               	movf	(??_doRelMove+13)^(0+128),w
 18357  0EBB  3D52               	addwfc	(??_doRelMove+15)^(0+128),w
 18358  0EBC  0087               	movwf	7
 18359  0EBD  0843               	movf	??_doRelMove^(0+128),w
 18360  0EBE  0281               	subwf	1,f
 18361  0EBF  3141               	addfsr 1,1
 18362  0EC0  0844               	movf	(??_doRelMove+1)^(0+128),w
 18363  0EC1  3B81               	subwfb	1,f
 18364  0EC2  3141               	addfsr 1,1
 18365  0EC3  0845               	movf	(??_doRelMove+2)^(0+128),w
 18366  0EC4  3B81               	subwfb	1,f
 18367  0EC5  3141               	addfsr 1,1
 18368  0EC6  0846               	movf	(??_doRelMove+3)^(0+128),w
 18369  0EC7  3B81               	subwfb	1,f
 18370  0EC8  317D               	addfsr 1,-3
 18371  0EC9  3001               	movlw	1
 18372  0ECA  07D3               	addwf	doRelMove@j^(0+128),f
 18373  0ECB  3000               	movlw	0
 18374  0ECC  3DD4               	addwfc	(doRelMove@j+1)^(0+128),f
 18375  0ECD  2E72               	goto	L38
 18376  0ECE                     __end_of_doRelMove:	
 18377                           
 18378                           	psect	text64
 18379  00EE                     __ptext64:	
 18380 ;; *************** function _doAbsMove *****************
 18381 ;; Defined at:
 18382 ;;		line 321 in file "main.c"
 18383 ;; Parameters:    Size  Location     Type
 18384 ;;		None
 18385 ;; Auto vars:     Size  Location     Type
 18386 ;;  i               2   39[BANK1 ] int 
 18387 ;;  i               2   41[BANK1 ] int 
 18388 ;;  i               2   37[BANK1 ] int 
 18389 ;;  allThere        2   35[BANK1 ] int 
 18390 ;; Return value:  Size  Location     Type
 18391 ;;                  1    wreg      void 
 18392 ;; Registers used:
 18393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18394 ;; Tracked objects:
 18395 ;;		On entry : 0/0
 18396 ;;		On exit  : 0/0
 18397 ;;		Unchanged: 0/0
 18398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18400 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18401 ;;      Temps:          0       0       0       0       0       0      28       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18402 ;;      Totals:         0       0       8       0       0       0      28       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18403 ;;Total ram usage:       36 bytes
 18404 ;; Hardware stack levels used:    1
 18405 ;; Hardware stack levels required when called:   15
 18406 ;; This function calls:
 18407 ;;		_doMove
 18408 ;;		_printf
 18409 ;; This function is called by:
 18410 ;;		_main
 18411 ;; This function uses a non-reentrant model
 18412 ;;
 18413                           
 18414                           
 18415                           ;psect for function _doAbsMove
 18416  00EE                     _doAbsMove:	
 18417                           
 18418                           ;main.c: 324: int allThere=1;
 18419                           
 18420                           ;incstack = 0
 18421                           ; Regs used in _doAbsMove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18422  00EE  3001               	movlw	1
 18423  00EF  0021               	movlb	1	; select bank1
 18424  00F0  00C3               	movwf	doAbsMove@allThere^(0+128)
 18425  00F1  3000               	movlw	0
 18426  00F2  00C4               	movwf	(doAbsMove@allThere^(0+128)+1)
 18427                           
 18428                           ;main.c: 325: for(int i=0;i<24;i++){
 18429  00F3  01C5               	clrf	doAbsMove@i^(0+128)
 18430  00F4  01C6               	clrf	(doAbsMove@i+1)^(0+128)
 18431  00F5  0846               	movf	(doAbsMove@i+1)^(0+128),w
 18432  00F6  3A80               	xorlw	128
 18433  00F7  0025               	movlb	5	; select bank5
 18434  00F8  00C8               	movwf	??_doAbsMove^(0+640)
 18435  00F9  3080               	movlw	128
 18436  00FA  0248               	subwf	??_doAbsMove^(0+640),w
 18437  00FB  1D03               	skipz
 18438  00FC  2900               	goto	u9595
 18439  00FD  3018               	movlw	24
 18440  00FE  0021               	movlb	1	; select bank1
 18441  00FF  0245               	subwf	doAbsMove@i^(0+128),w
 18442  0100                     u9595:	
 18443  0100  1803               	btfsc	3,0
 18444  0101  2986               	goto	l9421
 18445  0102                     l9413:	
 18446                           
 18447                           ;main.c: 326: if((activeMask & (1UL << i)) > 0)
 18448  0102  0021               	movlb	1	; select bank1
 18449  0103  085C               	movf	_activeMask^(0+128),w
 18450  0104  0025               	movlb	5	; select bank5
 18451  0105  00C8               	movwf	??_doAbsMove^(0+640)
 18452  0106  0021               	movlb	1	; select bank1
 18453  0107  085D               	movf	(_activeMask+1)^(0+128),w
 18454  0108  0025               	movlb	5	; select bank5
 18455  0109  00C9               	movwf	(??_doAbsMove^(0+640)+1)
 18456  010A  0021               	movlb	1	; select bank1
 18457  010B  085E               	movf	(_activeMask+2)^(0+128),w
 18458  010C  0025               	movlb	5	; select bank5
 18459  010D  00CA               	movwf	(??_doAbsMove^(0+640)+2)
 18460  010E  0021               	movlb	1	; select bank1
 18461  010F  085F               	movf	(_activeMask+3)^(0+128),w
 18462  0110  0025               	movlb	5	; select bank5
 18463  0111  00CB               	movwf	(??_doAbsMove^(0+640)+3)
 18464  0112  3001               	movlw	1
 18465  0113  00CC               	movwf	(??_doAbsMove+4)^(0+640)
 18466  0114  3000               	movlw	0
 18467  0115  00CD               	movwf	((??_doAbsMove+4)^(0+640)+1)
 18468  0116  3000               	movlw	0
 18469  0117  00CE               	movwf	((??_doAbsMove+4)^(0+640)+2)
 18470  0118  3000               	movlw	0
 18471  0119  00CF               	movwf	((??_doAbsMove+4)^(0+640)+3)
 18472  011A  0021               	movlb	1	; select bank1
 18473  011B  0A45               	incf	doAbsMove@i^(0+128),w
 18474  011C  0025               	movlb	5	; select bank5
 18475  011D  2922               	goto	u9600
 18476  011E                     u9605:	
 18477  011E  35CC               	lslf	(??_doAbsMove+4)^(0+640),f
 18478  011F  0DCD               	rlf	((??_doAbsMove+4)^(0+640)+1),f
 18479  0120  0DCE               	rlf	((??_doAbsMove+4)^(0+640)+2),f
 18480  0121  0DCF               	rlf	((??_doAbsMove+4)^(0+640)+3),f
 18481  0122                     u9600:	
 18482  0122  0B89               	decfsz	9,f
 18483  0123  291E               	goto	u9605
 18484  0124  084C               	movf	(??_doAbsMove+4)^(0+640),w
 18485  0125  05C8               	andwf	??_doAbsMove^(0+640),f
 18486  0126  084D               	movf	(??_doAbsMove+5)^(0+640),w
 18487  0127  05C9               	andwf	(??_doAbsMove^(0+640)+1),f
 18488  0128  084E               	movf	(??_doAbsMove+6)^(0+640),w
 18489  0129  05CA               	andwf	(??_doAbsMove^(0+640)+2),f
 18490  012A  084F               	movf	(??_doAbsMove+7)^(0+640),w
 18491  012B  05CB               	andwf	(??_doAbsMove^(0+640)+3),f
 18492  012C  084B               	movf	(??_doAbsMove+3)^(0+640),w
 18493  012D  044A               	iorwf	(??_doAbsMove+2)^(0+640),w
 18494  012E  0449               	iorwf	(??_doAbsMove+1)^(0+640),w
 18495  012F  0448               	iorwf	??_doAbsMove^(0+640),w
 18496  0130  1903               	skipnz
 18497  0131  2974               	goto	l9417
 18498                           
 18499                           ;main.c: 327: allThere &= (currentPositions_steps[i] == absCommand);
 18500  0132  0021               	movlb	1	; select bank1
 18501  0133  0846               	movf	(doAbsMove@i+1)^(0+128),w
 18502  0134  0025               	movlb	5	; select bank5
 18503  0135  00C9               	movwf	(??_doAbsMove^(0+640)+1)
 18504  0136  0021               	movlb	1	; select bank1
 18505  0137  0845               	movf	doAbsMove@i^(0+128),w
 18506  0138  0025               	movlb	5	; select bank5
 18507  0139  00C8               	movwf	??_doAbsMove^(0+640)
 18508  013A  35C8               	lslf	??_doAbsMove^(0+640),f
 18509  013B  0DC9               	rlf	(??_doAbsMove^(0+640)+1),f
 18510  013C  35C8               	lslf	??_doAbsMove^(0+640),f
 18511  013D  0DC9               	rlf	(??_doAbsMove^(0+640)+1),f
 18512  013E  3090               	movlw	144
 18513  013F  00CA               	movwf	(??_doAbsMove+2)^(0+640)
 18514  0140  3027               	movlw	39
 18515  0141  00CB               	movwf	((??_doAbsMove+2)^(0+640)+1)
 18516  0142  0848               	movf	??_doAbsMove^(0+640),w
 18517  0143  074A               	addwf	(??_doAbsMove+2)^(0+640),w
 18518  0144  0086               	movwf	6
 18519  0145  0849               	movf	(??_doAbsMove+1)^(0+640),w
 18520  0146  3D4B               	addwfc	(??_doAbsMove+3)^(0+640),w
 18521  0147  0087               	movwf	7
 18522  0148  3F40               	moviw [0]fsr1
 18523  0149  00CC               	movwf	(??_doAbsMove+4)^(0+640)
 18524  014A  3F41               	moviw [1]fsr1
 18525  014B  00CD               	movwf	((??_doAbsMove+4)^(0+640)+1)
 18526  014C  3F42               	moviw [2]fsr1
 18527  014D  00CE               	movwf	((??_doAbsMove+4)^(0+640)+2)
 18528  014E  3F43               	moviw [3]fsr1
 18529  014F  00CF               	movwf	((??_doAbsMove+4)^(0+640)+3)
 18530  0150  0020               	movlb	0	; select bank0
 18531  0151  0851               	movf	_absCommand+3,w
 18532  0152  0025               	movlb	5	; select bank5
 18533  0153  064F               	xorwf	(??_doAbsMove+7)^(0+640),w
 18534  0154  1D03               	skipz
 18535  0155  2966               	goto	u9625
 18536  0156  0020               	movlb	0	; select bank0
 18537  0157  0850               	movf	_absCommand+2,w
 18538  0158  0025               	movlb	5	; select bank5
 18539  0159  064E               	xorwf	(??_doAbsMove+6)^(0+640),w
 18540  015A  1D03               	skipz
 18541  015B  2966               	goto	u9625
 18542  015C  0020               	movlb	0	; select bank0
 18543  015D  084F               	movf	_absCommand+1,w
 18544  015E  0025               	movlb	5	; select bank5
 18545  015F  064D               	xorwf	(??_doAbsMove+5)^(0+640),w
 18546  0160  1D03               	skipz
 18547  0161  2966               	goto	u9625
 18548  0162  0020               	movlb	0	; select bank0
 18549  0163  084E               	movf	_absCommand,w
 18550  0164  0025               	movlb	5	; select bank5
 18551  0165  064C               	xorwf	(??_doAbsMove+4)^(0+640),w
 18552  0166                     u9625:	
 18553  0166  1D03               	btfss	3,2
 18554  0167  296A               	goto	u9620
 18555  0168  3001               	movlw	1
 18556  0169  296B               	goto	u9630
 18557  016A                     u9620:	
 18558  016A  3000               	movlw	0
 18559  016B                     u9630:	
 18560  016B  00D0               	movwf	(??_doAbsMove+8)^(0+640)
 18561  016C  01D1               	clrf	((??_doAbsMove+8)^(0+640)+1)
 18562  016D  0850               	movf	(??_doAbsMove+8)^(0+640),w
 18563  016E  0021               	movlb	1	; select bank1
 18564  016F  05C3               	andwf	doAbsMove@allThere^(0+128),f
 18565  0170  0025               	movlb	5	; select bank5
 18566  0171  0851               	movf	(??_doAbsMove+9)^(0+640),w
 18567  0172  0021               	movlb	1	; select bank1
 18568  0173  05C4               	andwf	(doAbsMove@allThere+1)^(0+128),f
 18569  0174                     l9417:	
 18570  0174  3001               	movlw	1
 18571  0175  0021               	movlb	1	; select bank1
 18572  0176  07C5               	addwf	doAbsMove@i^(0+128),f
 18573  0177  3000               	movlw	0
 18574  0178  3DC6               	addwfc	(doAbsMove@i+1)^(0+128),f
 18575  0179  0846               	movf	(doAbsMove@i+1)^(0+128),w
 18576  017A  3A80               	xorlw	128
 18577  017B  0025               	movlb	5	; select bank5
 18578  017C  00C8               	movwf	??_doAbsMove^(0+640)
 18579  017D  3080               	movlw	128
 18580  017E  0248               	subwf	??_doAbsMove^(0+640),w
 18581  017F  1D03               	skipz
 18582  0180  2984               	goto	u9645
 18583  0181  3018               	movlw	24
 18584  0182  0021               	movlb	1	; select bank1
 18585  0183  0245               	subwf	doAbsMove@i^(0+128),w
 18586  0184                     u9645:	
 18587  0184  1C03               	skipc
 18588  0185  2902               	goto	l9413
 18589  0186                     l9421:	
 18590                           
 18591                           ;main.c: 328: }
 18592                           ;main.c: 330: if(allThere){
 18593  0186  0021               	movlb	1	; select bank1
 18594  0187  0843               	movf	doAbsMove@allThere^(0+128),w
 18595  0188  0444               	iorwf	(doAbsMove@allThere+1)^(0+128),w
 18596  0189  1903               	btfsc	3,2
 18597  018A  29A5               	goto	l9435
 18598                           
 18599                           ;main.c: 331: printf("abs: all there\n");
 18600  018B  30FF               	movlw	low (STR_11| (0+32768))
 18601  018C  00A0               	movwf	printf@f^(0+128)
 18602  018D  30A8               	movlw	high (STR_11| (0+32768))
 18603  018E  00A1               	movwf	(printf@f^(0+128)+1)
 18604  018F  318E  26CE         	fcall	_printf
 18605                           
 18606                           ;main.c: 332: motionType = NONE;
 18607  0191  0020               	movlb	0	; select bank0
 18608  0192  01D5               	clrf	_motionType
 18609                           
 18610                           ;main.c: 333: moveVector_ups = 0;
 18611  0193  3000               	movlw	0
 18612  0194  0021               	movlb	1	; select bank1
 18613  0195  00E7               	movwf	(_moveVector_ups+3)^(0+128)
 18614  0196  3000               	movlw	0
 18615  0197  00E6               	movwf	(_moveVector_ups+2)^(0+128)
 18616  0198  3000               	movlw	0
 18617  0199  00E5               	movwf	(_moveVector_ups+1)^(0+128)
 18618  019A  3000               	movlw	0
 18619  019B  00E4               	movwf	_moveVector_ups^(0+128)
 18620                           
 18621                           ;main.c: 334: moveVector_downs = 0;
 18622  019C  3000               	movlw	0
 18623  019D  00E3               	movwf	(_moveVector_downs+3)^(0+128)
 18624  019E  3000               	movlw	0
 18625  019F  00E2               	movwf	(_moveVector_downs+2)^(0+128)
 18626  01A0  3000               	movlw	0
 18627  01A1  00E1               	movwf	(_moveVector_downs+1)^(0+128)
 18628  01A2  3000               	movlw	0
 18629  01A3  00E0               	movwf	_moveVector_downs^(0+128)
 18630                           
 18631                           ;main.c: 336: }
 18632                           
 18633                           ;main.c: 335: return;
 18634  01A4  0008               	return
 18635  01A5                     l9435:	
 18636                           
 18637                           ;main.c: 337: else{
 18638                           ;main.c: 338: for(int i=0;i<24;i++){
 18639  01A5  01C9               	clrf	doAbsMove@i_1676^(0+128)
 18640  01A6  01CA               	clrf	(doAbsMove@i_1676+1)^(0+128)
 18641  01A7  084A               	movf	(doAbsMove@i_1676+1)^(0+128),w
 18642  01A8  3A80               	xorlw	128
 18643  01A9  0025               	movlb	5	; select bank5
 18644  01AA  00C8               	movwf	??_doAbsMove^(0+640)
 18645  01AB  3080               	movlw	128
 18646  01AC  0248               	subwf	??_doAbsMove^(0+640),w
 18647  01AD  1D03               	skipz
 18648  01AE  29B2               	goto	u9665
 18649  01AF  3018               	movlw	24
 18650  01B0  0021               	movlb	1	; select bank1
 18651  01B1  0249               	subwf	doAbsMove@i_1676^(0+128),w
 18652  01B2                     u9665:	
 18653  01B2  1803               	btfsc	3,0
 18654  01B3  2AE8               	goto	l9447
 18655  01B4                     l9441:	
 18656                           
 18657                           ;main.c: 340: moveVector_ups |= (activeMask & (1UL << i)) & ((currentPositions_steps[i] 
      +                          > absCommand)<<i);
 18658  01B4  0021               	movlb	1	; select bank1
 18659  01B5  085C               	movf	_activeMask^(0+128),w
 18660  01B6  0025               	movlb	5	; select bank5
 18661  01B7  00C8               	movwf	??_doAbsMove^(0+640)
 18662  01B8  0021               	movlb	1	; select bank1
 18663  01B9  085D               	movf	(_activeMask+1)^(0+128),w
 18664  01BA  0025               	movlb	5	; select bank5
 18665  01BB  00C9               	movwf	(??_doAbsMove^(0+640)+1)
 18666  01BC  0021               	movlb	1	; select bank1
 18667  01BD  085E               	movf	(_activeMask+2)^(0+128),w
 18668  01BE  0025               	movlb	5	; select bank5
 18669  01BF  00CA               	movwf	(??_doAbsMove^(0+640)+2)
 18670  01C0  0021               	movlb	1	; select bank1
 18671  01C1  085F               	movf	(_activeMask+3)^(0+128),w
 18672  01C2  0025               	movlb	5	; select bank5
 18673  01C3  00CB               	movwf	(??_doAbsMove^(0+640)+3)
 18674  01C4  0021               	movlb	1	; select bank1
 18675  01C5  084A               	movf	(doAbsMove@i_1676+1)^(0+128),w
 18676  01C6  0025               	movlb	5	; select bank5
 18677  01C7  00CD               	movwf	((??_doAbsMove+4)^(0+640)+1)
 18678  01C8  0021               	movlb	1	; select bank1
 18679  01C9  0849               	movf	doAbsMove@i_1676^(0+128),w
 18680  01CA  0025               	movlb	5	; select bank5
 18681  01CB  00CC               	movwf	(??_doAbsMove+4)^(0+640)
 18682  01CC  35CC               	lslf	(??_doAbsMove+4)^(0+640),f
 18683  01CD  0DCD               	rlf	((??_doAbsMove+4)^(0+640)+1),f
 18684  01CE  35CC               	lslf	(??_doAbsMove+4)^(0+640),f
 18685  01CF  0DCD               	rlf	((??_doAbsMove+4)^(0+640)+1),f
 18686  01D0  3090               	movlw	144
 18687  01D1  00CE               	movwf	(??_doAbsMove+6)^(0+640)
 18688  01D2  3027               	movlw	39
 18689  01D3  00CF               	movwf	((??_doAbsMove+6)^(0+640)+1)
 18690  01D4  084C               	movf	(??_doAbsMove+4)^(0+640),w
 18691  01D5  074E               	addwf	(??_doAbsMove+6)^(0+640),w
 18692  01D6  0086               	movwf	6
 18693  01D7  084D               	movf	(??_doAbsMove+5)^(0+640),w
 18694  01D8  3D4F               	addwfc	(??_doAbsMove+7)^(0+640),w
 18695  01D9  0087               	movwf	7
 18696  01DA  3F40               	moviw [0]fsr1
 18697  01DB  00D0               	movwf	(??_doAbsMove+8)^(0+640)
 18698  01DC  3F41               	moviw [1]fsr1
 18699  01DD  00D1               	movwf	((??_doAbsMove+8)^(0+640)+1)
 18700  01DE  3F42               	moviw [2]fsr1
 18701  01DF  00D2               	movwf	((??_doAbsMove+8)^(0+640)+2)
 18702  01E0  3F43               	moviw [3]fsr1
 18703  01E1  00D3               	movwf	((??_doAbsMove+8)^(0+640)+3)
 18704  01E2  0020               	movlb	0	; select bank0
 18705  01E3  0851               	movf	_absCommand+3,w
 18706  01E4  3A80               	xorlw	128
 18707  01E5  0025               	movlb	5	; select bank5
 18708  01E6  00D4               	movwf	(??_doAbsMove+12)^(0+640)
 18709  01E7  0853               	movf	(??_doAbsMove+11)^(0+640),w
 18710  01E8  3A80               	xorlw	128
 18711  01E9  0254               	subwf	(??_doAbsMove+12)^(0+640),w
 18712  01EA  0020               	movlb	0	; select bank0
 18713  01EB  1D03               	skipz
 18714  01EC  29FD               	goto	u9673
 18715  01ED  0025               	movlb	5	; select bank5
 18716  01EE  0852               	movf	(??_doAbsMove+10)^(0+640),w
 18717  01EF  0020               	movlb	0	; select bank0
 18718  01F0  0250               	subwf	_absCommand+2,w
 18719  01F1  1D03               	skipz
 18720  01F2  29FD               	goto	u9673
 18721  01F3  0025               	movlb	5	; select bank5
 18722  01F4  0851               	movf	(??_doAbsMove+9)^(0+640),w
 18723  01F5  0020               	movlb	0	; select bank0
 18724  01F6  024F               	subwf	_absCommand+1,w
 18725  01F7  1D03               	skipz
 18726  01F8  29FD               	goto	u9673
 18727  01F9  0025               	movlb	5	; select bank5
 18728  01FA  0850               	movf	(??_doAbsMove+8)^(0+640),w
 18729  01FB  0020               	movlb	0	; select bank0
 18730  01FC  024E               	subwf	_absCommand,w
 18731  01FD                     u9673:	
 18732  01FD  1803               	btfsc	3,0
 18733  01FE  2A01               	goto	u9670
 18734  01FF  3001               	movlw	1
 18735  0200  2A02               	goto	u9680
 18736  0201                     u9670:	
 18737  0201  3000               	movlw	0
 18738  0202                     u9680:	
 18739  0202  0025               	movlb	5	; select bank5
 18740  0203  00D5               	movwf	(??_doAbsMove+13)^(0+640)
 18741  0204  01D6               	clrf	((??_doAbsMove+13)^(0+640)+1)
 18742  0205  0021               	movlb	1	; select bank1
 18743  0206  0A49               	incf	doAbsMove@i_1676^(0+128),w
 18744  0207  0025               	movlb	5	; select bank5
 18745  0208  2A0B               	goto	u9694
 18746  0209                     u9695:	
 18747  0209  35D5               	lslf	(??_doAbsMove+13)^(0+640),f
 18748  020A  0DD6               	rlf	((??_doAbsMove+13)^(0+640)+1),f
 18749  020B                     u9694:	
 18750  020B  0B89               	decfsz	9,f
 18751  020C  2A09               	goto	u9695
 18752  020D  0855               	movf	(??_doAbsMove+13)^(0+640),w
 18753  020E  00D7               	movwf	(??_doAbsMove+15)^(0+640)
 18754  020F  0856               	movf	(??_doAbsMove+14)^(0+640),w
 18755  0210  00D8               	movwf	((??_doAbsMove+15)^(0+640)+1)
 18756  0211  3000               	movlw	0
 18757  0212  1BD8               	btfsc	((??_doAbsMove+15)^(0+640)+1),7
 18758  0213  30FF               	movlw	255
 18759  0214  00D9               	movwf	((??_doAbsMove+15)^(0+640)+2)
 18760  0215  00DA               	movwf	((??_doAbsMove+15)^(0+640)+3)
 18761  0216  3001               	movlw	1
 18762  0217  00DB               	movwf	(??_doAbsMove+19)^(0+640)
 18763  0218  3000               	movlw	0
 18764  0219  00DC               	movwf	((??_doAbsMove+19)^(0+640)+1)
 18765  021A  3000               	movlw	0
 18766  021B  00DD               	movwf	((??_doAbsMove+19)^(0+640)+2)
 18767  021C  3000               	movlw	0
 18768  021D  00DE               	movwf	((??_doAbsMove+19)^(0+640)+3)
 18769  021E  0021               	movlb	1	; select bank1
 18770  021F  0A49               	incf	doAbsMove@i_1676^(0+128),w
 18771  0220  0025               	movlb	5	; select bank5
 18772  0221  2A26               	goto	u9700
 18773  0222                     u9705:	
 18774  0222  35DB               	lslf	(??_doAbsMove+19)^(0+640),f
 18775  0223  0DDC               	rlf	((??_doAbsMove+19)^(0+640)+1),f
 18776  0224  0DDD               	rlf	((??_doAbsMove+19)^(0+640)+2),f
 18777  0225  0DDE               	rlf	((??_doAbsMove+19)^(0+640)+3),f
 18778  0226                     u9700:	
 18779  0226  0B89               	decfsz	9,f
 18780  0227  2A22               	goto	u9705
 18781  0228  085B               	movf	(??_doAbsMove+19)^(0+640),w
 18782  0229  05D7               	andwf	(??_doAbsMove+15)^(0+640),f
 18783  022A  085C               	movf	(??_doAbsMove+20)^(0+640),w
 18784  022B  05D8               	andwf	((??_doAbsMove+15)^(0+640)+1),f
 18785  022C  085D               	movf	(??_doAbsMove+21)^(0+640),w
 18786  022D  05D9               	andwf	((??_doAbsMove+15)^(0+640)+2),f
 18787  022E  085E               	movf	(??_doAbsMove+22)^(0+640),w
 18788  022F  05DA               	andwf	((??_doAbsMove+15)^(0+640)+3),f
 18789  0230  0857               	movf	(??_doAbsMove+15)^(0+640),w
 18790  0231  05C8               	andwf	??_doAbsMove^(0+640),f
 18791  0232  0858               	movf	(??_doAbsMove+16)^(0+640),w
 18792  0233  05C9               	andwf	(??_doAbsMove^(0+640)+1),f
 18793  0234  0859               	movf	(??_doAbsMove+17)^(0+640),w
 18794  0235  05CA               	andwf	(??_doAbsMove^(0+640)+2),f
 18795  0236  085A               	movf	(??_doAbsMove+18)^(0+640),w
 18796  0237  05CB               	andwf	(??_doAbsMove^(0+640)+3),f
 18797  0238  0848               	movf	??_doAbsMove^(0+640),w
 18798  0239  0021               	movlb	1	; select bank1
 18799  023A  04E4               	iorwf	_moveVector_ups^(0+128),f
 18800  023B  0025               	movlb	5	; select bank5
 18801  023C  0849               	movf	(??_doAbsMove+1)^(0+640),w
 18802  023D  0021               	movlb	1	; select bank1
 18803  023E  04E5               	iorwf	(_moveVector_ups+1)^(0+128),f
 18804  023F  0025               	movlb	5	; select bank5
 18805  0240  084A               	movf	(??_doAbsMove+2)^(0+640),w
 18806  0241  0021               	movlb	1	; select bank1
 18807  0242  04E6               	iorwf	(_moveVector_ups+2)^(0+128),f
 18808  0243  0025               	movlb	5	; select bank5
 18809  0244  084B               	movf	(??_doAbsMove+3)^(0+640),w
 18810  0245  0021               	movlb	1	; select bank1
 18811  0246  04E7               	iorwf	(_moveVector_ups+3)^(0+128),f
 18812                           
 18813                           ;main.c: 341: moveVector_downs |= (activeMask & (1UL << i)) & ((currentPositions_steps[i
      +                          ] < absCommand)<<i);
 18814  0247  085C               	movf	_activeMask^(0+128),w
 18815  0248  0025               	movlb	5	; select bank5
 18816  0249  00C8               	movwf	??_doAbsMove^(0+640)
 18817  024A  0021               	movlb	1	; select bank1
 18818  024B  085D               	movf	(_activeMask+1)^(0+128),w
 18819  024C  0025               	movlb	5	; select bank5
 18820  024D  00C9               	movwf	(??_doAbsMove^(0+640)+1)
 18821  024E  0021               	movlb	1	; select bank1
 18822  024F  085E               	movf	(_activeMask+2)^(0+128),w
 18823  0250  0025               	movlb	5	; select bank5
 18824  0251  00CA               	movwf	(??_doAbsMove^(0+640)+2)
 18825  0252  0021               	movlb	1	; select bank1
 18826  0253  085F               	movf	(_activeMask+3)^(0+128),w
 18827  0254  0025               	movlb	5	; select bank5
 18828  0255  00CB               	movwf	(??_doAbsMove^(0+640)+3)
 18829  0256  0021               	movlb	1	; select bank1
 18830  0257  084A               	movf	(doAbsMove@i_1676+1)^(0+128),w
 18831  0258  0025               	movlb	5	; select bank5
 18832  0259  00CD               	movwf	((??_doAbsMove+4)^(0+640)+1)
 18833  025A  0021               	movlb	1	; select bank1
 18834  025B  0849               	movf	doAbsMove@i_1676^(0+128),w
 18835  025C  0025               	movlb	5	; select bank5
 18836  025D  00CC               	movwf	(??_doAbsMove+4)^(0+640)
 18837  025E  35CC               	lslf	(??_doAbsMove+4)^(0+640),f
 18838  025F  0DCD               	rlf	((??_doAbsMove+4)^(0+640)+1),f
 18839  0260  35CC               	lslf	(??_doAbsMove+4)^(0+640),f
 18840  0261  0DCD               	rlf	((??_doAbsMove+4)^(0+640)+1),f
 18841  0262  3090               	movlw	144
 18842  0263  00CE               	movwf	(??_doAbsMove+6)^(0+640)
 18843  0264  3027               	movlw	39
 18844  0265  00CF               	movwf	((??_doAbsMove+6)^(0+640)+1)
 18845  0266  084C               	movf	(??_doAbsMove+4)^(0+640),w
 18846  0267  074E               	addwf	(??_doAbsMove+6)^(0+640),w
 18847  0268  0086               	movwf	6
 18848  0269  084D               	movf	(??_doAbsMove+5)^(0+640),w
 18849  026A  3D4F               	addwfc	(??_doAbsMove+7)^(0+640),w
 18850  026B  0087               	movwf	7
 18851  026C  3F40               	moviw [0]fsr1
 18852  026D  00D0               	movwf	(??_doAbsMove+8)^(0+640)
 18853  026E  3F41               	moviw [1]fsr1
 18854  026F  00D1               	movwf	((??_doAbsMove+8)^(0+640)+1)
 18855  0270  3F42               	moviw [2]fsr1
 18856  0271  00D2               	movwf	((??_doAbsMove+8)^(0+640)+2)
 18857  0272  3F43               	moviw [3]fsr1
 18858  0273  00D3               	movwf	((??_doAbsMove+8)^(0+640)+3)
 18859  0274  0853               	movf	(??_doAbsMove+11)^(0+640),w
 18860  0275  3A80               	xorlw	128
 18861  0276  00D4               	movwf	(??_doAbsMove+12)^(0+640)
 18862  0277  0020               	movlb	0	; select bank0
 18863  0278  0851               	movf	_absCommand+3,w
 18864  0279  3A80               	xorlw	128
 18865  027A  0025               	movlb	5	; select bank5
 18866  027B  0254               	subwf	(??_doAbsMove+12)^(0+640),w
 18867  027C  1D03               	skipz
 18868  027D  2A8E               	goto	u9713
 18869  027E  0020               	movlb	0	; select bank0
 18870  027F  0850               	movf	_absCommand+2,w
 18871  0280  0025               	movlb	5	; select bank5
 18872  0281  0252               	subwf	(??_doAbsMove+10)^(0+640),w
 18873  0282  1D03               	skipz
 18874  0283  2A8E               	goto	u9713
 18875  0284  0020               	movlb	0	; select bank0
 18876  0285  084F               	movf	_absCommand+1,w
 18877  0286  0025               	movlb	5	; select bank5
 18878  0287  0251               	subwf	(??_doAbsMove+9)^(0+640),w
 18879  0288  1D03               	skipz
 18880  0289  2A8E               	goto	u9713
 18881  028A  0020               	movlb	0	; select bank0
 18882  028B  084E               	movf	_absCommand,w
 18883  028C  0025               	movlb	5	; select bank5
 18884  028D  0250               	subwf	(??_doAbsMove+8)^(0+640),w
 18885  028E                     u9713:	
 18886  028E  1803               	btfsc	3,0
 18887  028F  2A92               	goto	u9710
 18888  0290  3001               	movlw	1
 18889  0291  2A93               	goto	u9720
 18890  0292                     u9710:	
 18891  0292  3000               	movlw	0
 18892  0293                     u9720:	
 18893  0293  00D5               	movwf	(??_doAbsMove+13)^(0+640)
 18894  0294  01D6               	clrf	((??_doAbsMove+13)^(0+640)+1)
 18895  0295  0021               	movlb	1	; select bank1
 18896  0296  0A49               	incf	doAbsMove@i_1676^(0+128),w
 18897  0297  0025               	movlb	5	; select bank5
 18898  0298  2A9B               	goto	u9734
 18899  0299                     u9735:	
 18900  0299  35D5               	lslf	(??_doAbsMove+13)^(0+640),f
 18901  029A  0DD6               	rlf	((??_doAbsMove+13)^(0+640)+1),f
 18902  029B                     u9734:	
 18903  029B  0B89               	decfsz	9,f
 18904  029C  2A99               	goto	u9735
 18905  029D  0855               	movf	(??_doAbsMove+13)^(0+640),w
 18906  029E  00D7               	movwf	(??_doAbsMove+15)^(0+640)
 18907  029F  0856               	movf	(??_doAbsMove+14)^(0+640),w
 18908  02A0  00D8               	movwf	((??_doAbsMove+15)^(0+640)+1)
 18909  02A1  3000               	movlw	0
 18910  02A2  1BD8               	btfsc	((??_doAbsMove+15)^(0+640)+1),7
 18911  02A3  30FF               	movlw	255
 18912  02A4  00D9               	movwf	((??_doAbsMove+15)^(0+640)+2)
 18913  02A5  00DA               	movwf	((??_doAbsMove+15)^(0+640)+3)
 18914  02A6  3001               	movlw	1
 18915  02A7  00DB               	movwf	(??_doAbsMove+19)^(0+640)
 18916  02A8  3000               	movlw	0
 18917  02A9  00DC               	movwf	((??_doAbsMove+19)^(0+640)+1)
 18918  02AA  3000               	movlw	0
 18919  02AB  00DD               	movwf	((??_doAbsMove+19)^(0+640)+2)
 18920  02AC  3000               	movlw	0
 18921  02AD  00DE               	movwf	((??_doAbsMove+19)^(0+640)+3)
 18922  02AE  0021               	movlb	1	; select bank1
 18923  02AF  0A49               	incf	doAbsMove@i_1676^(0+128),w
 18924  02B0  0025               	movlb	5	; select bank5
 18925  02B1  2AB6               	goto	u9740
 18926  02B2                     u9745:	
 18927  02B2  35DB               	lslf	(??_doAbsMove+19)^(0+640),f
 18928  02B3  0DDC               	rlf	((??_doAbsMove+19)^(0+640)+1),f
 18929  02B4  0DDD               	rlf	((??_doAbsMove+19)^(0+640)+2),f
 18930  02B5  0DDE               	rlf	((??_doAbsMove+19)^(0+640)+3),f
 18931  02B6                     u9740:	
 18932  02B6  0B89               	decfsz	9,f
 18933  02B7  2AB2               	goto	u9745
 18934  02B8  085B               	movf	(??_doAbsMove+19)^(0+640),w
 18935  02B9  05D7               	andwf	(??_doAbsMove+15)^(0+640),f
 18936  02BA  085C               	movf	(??_doAbsMove+20)^(0+640),w
 18937  02BB  05D8               	andwf	((??_doAbsMove+15)^(0+640)+1),f
 18938  02BC  085D               	movf	(??_doAbsMove+21)^(0+640),w
 18939  02BD  05D9               	andwf	((??_doAbsMove+15)^(0+640)+2),f
 18940  02BE  085E               	movf	(??_doAbsMove+22)^(0+640),w
 18941  02BF  05DA               	andwf	((??_doAbsMove+15)^(0+640)+3),f
 18942  02C0  0857               	movf	(??_doAbsMove+15)^(0+640),w
 18943  02C1  05C8               	andwf	??_doAbsMove^(0+640),f
 18944  02C2  0858               	movf	(??_doAbsMove+16)^(0+640),w
 18945  02C3  05C9               	andwf	(??_doAbsMove^(0+640)+1),f
 18946  02C4  0859               	movf	(??_doAbsMove+17)^(0+640),w
 18947  02C5  05CA               	andwf	(??_doAbsMove^(0+640)+2),f
 18948  02C6  085A               	movf	(??_doAbsMove+18)^(0+640),w
 18949  02C7  05CB               	andwf	(??_doAbsMove^(0+640)+3),f
 18950  02C8  0848               	movf	??_doAbsMove^(0+640),w
 18951  02C9  0021               	movlb	1	; select bank1
 18952  02CA  04E0               	iorwf	_moveVector_downs^(0+128),f
 18953  02CB  0025               	movlb	5	; select bank5
 18954  02CC  0849               	movf	(??_doAbsMove+1)^(0+640),w
 18955  02CD  0021               	movlb	1	; select bank1
 18956  02CE  04E1               	iorwf	(_moveVector_downs+1)^(0+128),f
 18957  02CF  0025               	movlb	5	; select bank5
 18958  02D0  084A               	movf	(??_doAbsMove+2)^(0+640),w
 18959  02D1  0021               	movlb	1	; select bank1
 18960  02D2  04E2               	iorwf	(_moveVector_downs+2)^(0+128),f
 18961  02D3  0025               	movlb	5	; select bank5
 18962  02D4  084B               	movf	(??_doAbsMove+3)^(0+640),w
 18963  02D5  0021               	movlb	1	; select bank1
 18964  02D6  04E3               	iorwf	(_moveVector_downs+3)^(0+128),f
 18965  02D7  3001               	movlw	1
 18966  02D8  07C9               	addwf	doAbsMove@i_1676^(0+128),f
 18967  02D9  3000               	movlw	0
 18968  02DA  3DCA               	addwfc	(doAbsMove@i_1676+1)^(0+128),f
 18969  02DB  084A               	movf	(doAbsMove@i_1676+1)^(0+128),w
 18970  02DC  3A80               	xorlw	128
 18971  02DD  0025               	movlb	5	; select bank5
 18972  02DE  00C8               	movwf	??_doAbsMove^(0+640)
 18973  02DF  3080               	movlw	128
 18974  02E0  0248               	subwf	??_doAbsMove^(0+640),w
 18975  02E1  1D03               	skipz
 18976  02E2  2AE6               	goto	u9755
 18977  02E3  3018               	movlw	24
 18978  02E4  0021               	movlb	1	; select bank1
 18979  02E5  0249               	subwf	doAbsMove@i_1676^(0+128),w
 18980  02E6                     u9755:	
 18981  02E6  1C03               	skipc
 18982  02E7  29B4               	goto	l9441
 18983  02E8                     l9447:	
 18984                           
 18985                           ;main.c: 343: }
 18986                           ;main.c: 344: doMove();
 18987  02E8  3187  2761  3180   	fcall	_doMove
 18988                           
 18989                           ;main.c: 346: for(int i=0;i<24;i++)
 18990  02EB  0021               	movlb	1	; select bank1
 18991  02EC  01C7               	clrf	doAbsMove@i_1678^(0+128)
 18992  02ED  01C8               	clrf	(doAbsMove@i_1678+1)^(0+128)
 18993  02EE                     L39:	
 18994  02EE  0848               	movf	(doAbsMove@i_1678+1)^(0+128),w
 18995  02EF  3A80               	xorlw	128
 18996  02F0  0025               	movlb	5	; select bank5
 18997  02F1  00C8               	movwf	??_doAbsMove^(0+640)
 18998  02F2  3080               	movlw	128
 18999  02F3  0248               	subwf	??_doAbsMove^(0+640),w
 19000  02F4  1D03               	skipz
 19001  02F5  2AF9               	goto	u9765
 19002  02F6  3018               	movlw	24
 19003  02F7  0021               	movlb	1	; select bank1
 19004  02F8  0247               	subwf	doAbsMove@i_1678^(0+128),w
 19005  02F9                     u9765:	
 19006  02F9  1803               	btfsc	3,0
 19007  02FA  0008               	return
 19008                           
 19009                           ;main.c: 347: currentPositions_steps[i] += ((moveVector_downs & (1UL << i)) > 0) - ((mov
      +                          eVector_ups & (1UL << i)) > 0);
 19010  02FB  0021               	movlb	1	; select bank1
 19011  02FC  0864               	movf	_moveVector_ups^(0+128),w
 19012  02FD  0025               	movlb	5	; select bank5
 19013  02FE  00C8               	movwf	??_doAbsMove^(0+640)
 19014  02FF  0021               	movlb	1	; select bank1
 19015  0300  0865               	movf	(_moveVector_ups+1)^(0+128),w
 19016  0301  0025               	movlb	5	; select bank5
 19017  0302  00C9               	movwf	(??_doAbsMove^(0+640)+1)
 19018  0303  0021               	movlb	1	; select bank1
 19019  0304  0866               	movf	(_moveVector_ups+2)^(0+128),w
 19020  0305  0025               	movlb	5	; select bank5
 19021  0306  00CA               	movwf	(??_doAbsMove^(0+640)+2)
 19022  0307  0021               	movlb	1	; select bank1
 19023  0308  0867               	movf	(_moveVector_ups+3)^(0+128),w
 19024  0309  0025               	movlb	5	; select bank5
 19025  030A  00CB               	movwf	(??_doAbsMove^(0+640)+3)
 19026  030B  3001               	movlw	1
 19027  030C  00CC               	movwf	(??_doAbsMove+4)^(0+640)
 19028  030D  3000               	movlw	0
 19029  030E  00CD               	movwf	((??_doAbsMove+4)^(0+640)+1)
 19030  030F  3000               	movlw	0
 19031  0310  00CE               	movwf	((??_doAbsMove+4)^(0+640)+2)
 19032  0311  3000               	movlw	0
 19033  0312  00CF               	movwf	((??_doAbsMove+4)^(0+640)+3)
 19034  0313  0021               	movlb	1	; select bank1
 19035  0314  0A47               	incf	doAbsMove@i_1678^(0+128),w
 19036  0315  0025               	movlb	5	; select bank5
 19037  0316  2B1B               	goto	u9770
 19038  0317                     u9775:	
 19039  0317  35CC               	lslf	(??_doAbsMove+4)^(0+640),f
 19040  0318  0DCD               	rlf	((??_doAbsMove+4)^(0+640)+1),f
 19041  0319  0DCE               	rlf	((??_doAbsMove+4)^(0+640)+2),f
 19042  031A  0DCF               	rlf	((??_doAbsMove+4)^(0+640)+3),f
 19043  031B                     u9770:	
 19044  031B  0B89               	decfsz	9,f
 19045  031C  2B17               	goto	u9775
 19046  031D  084C               	movf	(??_doAbsMove+4)^(0+640),w
 19047  031E  05C8               	andwf	??_doAbsMove^(0+640),f
 19048  031F  084D               	movf	(??_doAbsMove+5)^(0+640),w
 19049  0320  05C9               	andwf	(??_doAbsMove^(0+640)+1),f
 19050  0321  084E               	movf	(??_doAbsMove+6)^(0+640),w
 19051  0322  05CA               	andwf	(??_doAbsMove^(0+640)+2),f
 19052  0323  084F               	movf	(??_doAbsMove+7)^(0+640),w
 19053  0324  05CB               	andwf	(??_doAbsMove^(0+640)+3),f
 19054  0325  084B               	movf	(??_doAbsMove+3)^(0+640),w
 19055  0326  044A               	iorwf	(??_doAbsMove+2)^(0+640),w
 19056  0327  0449               	iorwf	(??_doAbsMove+1)^(0+640),w
 19057  0328  0448               	iorwf	??_doAbsMove^(0+640),w
 19058  0329  1903               	btfsc	3,2
 19059  032A  2B2D               	goto	u9780
 19060  032B  3001               	movlw	1
 19061  032C  2B2E               	goto	u9790
 19062  032D                     u9780:	
 19063  032D  3000               	movlw	0
 19064  032E                     u9790:	
 19065  032E  00D0               	movwf	(??_doAbsMove+8)^(0+640)
 19066  032F  01D1               	clrf	((??_doAbsMove+8)^(0+640)+1)
 19067  0330  09D0               	comf	(??_doAbsMove+8)^(0+640),f
 19068  0331  09D1               	comf	((??_doAbsMove+8)^(0+640)+1),f
 19069  0332  0AD0               	incf	(??_doAbsMove+8)^(0+640),f
 19070  0333  1903               	skipnz
 19071  0334  0AD1               	incf	((??_doAbsMove+8)^(0+640)+1),f
 19072  0335  0021               	movlb	1	; select bank1
 19073  0336  0860               	movf	_moveVector_downs^(0+128),w
 19074  0337  0025               	movlb	5	; select bank5
 19075  0338  00D2               	movwf	(??_doAbsMove+10)^(0+640)
 19076  0339  0021               	movlb	1	; select bank1
 19077  033A  0861               	movf	(_moveVector_downs+1)^(0+128),w
 19078  033B  0025               	movlb	5	; select bank5
 19079  033C  00D3               	movwf	((??_doAbsMove+10)^(0+640)+1)
 19080  033D  0021               	movlb	1	; select bank1
 19081  033E  0862               	movf	(_moveVector_downs+2)^(0+128),w
 19082  033F  0025               	movlb	5	; select bank5
 19083  0340  00D4               	movwf	((??_doAbsMove+10)^(0+640)+2)
 19084  0341  0021               	movlb	1	; select bank1
 19085  0342  0863               	movf	(_moveVector_downs+3)^(0+128),w
 19086  0343  0025               	movlb	5	; select bank5
 19087  0344  00D5               	movwf	((??_doAbsMove+10)^(0+640)+3)
 19088  0345  3001               	movlw	1
 19089  0346  00D6               	movwf	(??_doAbsMove+14)^(0+640)
 19090  0347  3000               	movlw	0
 19091  0348  00D7               	movwf	((??_doAbsMove+14)^(0+640)+1)
 19092  0349  3000               	movlw	0
 19093  034A  00D8               	movwf	((??_doAbsMove+14)^(0+640)+2)
 19094  034B  3000               	movlw	0
 19095  034C  00D9               	movwf	((??_doAbsMove+14)^(0+640)+3)
 19096  034D  0021               	movlb	1	; select bank1
 19097  034E  0A47               	incf	doAbsMove@i_1678^(0+128),w
 19098  034F  0025               	movlb	5	; select bank5
 19099  0350  2B55               	goto	u9800
 19100  0351                     u9805:	
 19101  0351  35D6               	lslf	(??_doAbsMove+14)^(0+640),f
 19102  0352  0DD7               	rlf	((??_doAbsMove+14)^(0+640)+1),f
 19103  0353  0DD8               	rlf	((??_doAbsMove+14)^(0+640)+2),f
 19104  0354  0DD9               	rlf	((??_doAbsMove+14)^(0+640)+3),f
 19105  0355                     u9800:	
 19106  0355  0B89               	decfsz	9,f
 19107  0356  2B51               	goto	u9805
 19108  0357  0856               	movf	(??_doAbsMove+14)^(0+640),w
 19109  0358  05D2               	andwf	(??_doAbsMove+10)^(0+640),f
 19110  0359  0857               	movf	(??_doAbsMove+15)^(0+640),w
 19111  035A  05D3               	andwf	((??_doAbsMove+10)^(0+640)+1),f
 19112  035B  0858               	movf	(??_doAbsMove+16)^(0+640),w
 19113  035C  05D4               	andwf	((??_doAbsMove+10)^(0+640)+2),f
 19114  035D  0859               	movf	(??_doAbsMove+17)^(0+640),w
 19115  035E  05D5               	andwf	((??_doAbsMove+10)^(0+640)+3),f
 19116  035F  0855               	movf	(??_doAbsMove+13)^(0+640),w
 19117  0360  0454               	iorwf	(??_doAbsMove+12)^(0+640),w
 19118  0361  0453               	iorwf	(??_doAbsMove+11)^(0+640),w
 19119  0362  0452               	iorwf	(??_doAbsMove+10)^(0+640),w
 19120  0363  1903               	btfsc	3,2
 19121  0364  2B67               	goto	u9810
 19122  0365  3001               	movlw	1
 19123  0366  2B68               	goto	u9820
 19124  0367                     u9810:	
 19125  0367  3000               	movlw	0
 19126  0368                     u9820:	
 19127  0368  0750               	addwf	(??_doAbsMove+8)^(0+640),w
 19128  0369  00DA               	movwf	(??_doAbsMove+18)^(0+640)
 19129  036A  0851               	movf	(??_doAbsMove+9)^(0+640),w
 19130  036B  1803               	skipnc
 19131  036C  0A51               	incf	(??_doAbsMove+9)^(0+640),w
 19132  036D  00DB               	movwf	((??_doAbsMove+18)^(0+640)+1)
 19133  036E  085A               	movf	(??_doAbsMove+18)^(0+640),w
 19134  036F  00DC               	movwf	(??_doAbsMove+20)^(0+640)
 19135  0370  085B               	movf	(??_doAbsMove+19)^(0+640),w
 19136  0371  00DD               	movwf	((??_doAbsMove+20)^(0+640)+1)
 19137  0372  3000               	movlw	0
 19138  0373  1BDD               	btfsc	((??_doAbsMove+20)^(0+640)+1),7
 19139  0374  30FF               	movlw	255
 19140  0375  00DE               	movwf	((??_doAbsMove+20)^(0+640)+2)
 19141  0376  00DF               	movwf	((??_doAbsMove+20)^(0+640)+3)
 19142  0377  0021               	movlb	1	; select bank1
 19143  0378  0848               	movf	(doAbsMove@i_1678+1)^(0+128),w
 19144  0379  0025               	movlb	5	; select bank5
 19145  037A  00E1               	movwf	((??_doAbsMove+24)^(0+640)+1)
 19146  037B  0021               	movlb	1	; select bank1
 19147  037C  0847               	movf	doAbsMove@i_1678^(0+128),w
 19148  037D  0025               	movlb	5	; select bank5
 19149  037E  00E0               	movwf	(??_doAbsMove+24)^(0+640)
 19150  037F  35E0               	lslf	(??_doAbsMove+24)^(0+640),f
 19151  0380  0DE1               	rlf	((??_doAbsMove+24)^(0+640)+1),f
 19152  0381  35E0               	lslf	(??_doAbsMove+24)^(0+640),f
 19153  0382  0DE1               	rlf	((??_doAbsMove+24)^(0+640)+1),f
 19154  0383  3090               	movlw	144
 19155  0384  00E2               	movwf	(??_doAbsMove+26)^(0+640)
 19156  0385  3027               	movlw	39
 19157  0386  00E3               	movwf	((??_doAbsMove+26)^(0+640)+1)
 19158  0387  0860               	movf	(??_doAbsMove+24)^(0+640),w
 19159  0388  0762               	addwf	(??_doAbsMove+26)^(0+640),w
 19160  0389  0086               	movwf	6
 19161  038A  0861               	movf	(??_doAbsMove+25)^(0+640),w
 19162  038B  3D63               	addwfc	(??_doAbsMove+27)^(0+640),w
 19163  038C  0087               	movwf	7
 19164  038D  085C               	movf	(??_doAbsMove+20)^(0+640),w
 19165  038E  0781               	addwf	1,f
 19166  038F  3141               	addfsr 1,1
 19167  0390  085D               	movf	(??_doAbsMove+21)^(0+640),w
 19168  0391  3D81               	addwfc	1,f
 19169  0392  3141               	addfsr 1,1
 19170  0393  085E               	movf	(??_doAbsMove+22)^(0+640),w
 19171  0394  3D81               	addwfc	1,f
 19172  0395  3141               	addfsr 1,1
 19173  0396  085F               	movf	(??_doAbsMove+23)^(0+640),w
 19174  0397  3D81               	addwfc	1,f
 19175  0398  3001               	movlw	1
 19176  0399  0021               	movlb	1	; select bank1
 19177  039A  07C7               	addwf	doAbsMove@i_1678^(0+128),f
 19178  039B  3000               	movlw	0
 19179  039C  3DC8               	addwfc	(doAbsMove@i_1678+1)^(0+128),f
 19180  039D  2AEE               	goto	L39
 19181  039E                     __end_of_doAbsMove:	
 19182                           
 19183                           	psect	text65
 19184  0761                     __ptext65:	
 19185 ;; *************** function _doMove *****************
 19186 ;; Defined at:
 19187 ;;		line 244 in file "main.c"
 19188 ;; Parameters:    Size  Location     Type
 19189 ;;		None
 19190 ;; Auto vars:     Size  Location     Type
 19191 ;;  t               2   33[BANK1 ] int 
 19192 ;;  t               2   31[BANK1 ] int 
 19193 ;; Return value:  Size  Location     Type
 19194 ;;                  2   28[BANK1 ] int 
 19195 ;; Registers used:
 19196 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19197 ;; Tracked objects:
 19198 ;;		On entry : 0/0
 19199 ;;		On exit  : 0/0
 19200 ;;		Unchanged: 0/0
 19201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19202 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19203 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19204 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19205 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19206 ;;Total ram usage:        7 bytes
 19207 ;; Hardware stack levels used:    1
 19208 ;; Hardware stack levels required when called:   14
 19209 ;; This function calls:
 19210 ;;		_LEDsOn
 19211 ;;		_TMR0_StartTimer
 19212 ;;		_TMR2_StartTimer
 19213 ;;		_TMR4_StartTimer
 19214 ;;		_calcHeaterPins
 19215 ;;		_drv_write_DC
 19216 ;;		_drv_write_wvfrm
 19217 ;;		_printf
 19218 ;; This function is called by:
 19219 ;;		_doAbsMove
 19220 ;;		_doRelMove
 19221 ;;		_execCmd
 19222 ;; This function uses a non-reentrant model
 19223 ;;
 19224                           
 19225                           
 19226                           ;psect for function _doMove
 19227  0761                     _doMove:	
 19228                           
 19229                           ;main.c: 246: calcHeaterPins();
 19230                           
 19231                           ;incstack = 0
 19232                           ; Regs used in _doMove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19233  0761  3194  248B  3187   	fcall	_calcHeaterPins
 19234                           
 19235                           ;main.c: 248: do { LATCbits.LATC1 = 1; } while(0);
 19236  0764  0022               	movlb	2	; select bank2
 19237  0765  148E               	bsf	14,1	;volatile
 19238                           
 19239                           ;main.c: 249: LEDsOn(first_top, 1);
 19240  0766  0859               	movf	(_first_top+3)^(0+256),w
 19241  0767  0020               	movlb	0	; select bank0
 19242  0768  00C7               	movwf	LEDsOn@LEDpins+3
 19243  0769  0022               	movlb	2	; select bank2
 19244  076A  0858               	movf	(_first_top+2)^(0+256),w
 19245  076B  0020               	movlb	0	; select bank0
 19246  076C  00C6               	movwf	LEDsOn@LEDpins+2
 19247  076D  0022               	movlb	2	; select bank2
 19248  076E  0857               	movf	(_first_top+1)^(0+256),w
 19249  076F  0020               	movlb	0	; select bank0
 19250  0770  00C5               	movwf	LEDsOn@LEDpins+1
 19251  0771  0022               	movlb	2	; select bank2
 19252  0772  0856               	movf	_first_top^(0+256),w
 19253  0773  0020               	movlb	0	; select bank0
 19254  0774  00C4               	movwf	LEDsOn@LEDpins
 19255  0775  3001               	movlw	1
 19256  0776  00C8               	movwf	LEDsOn@topOrBottom
 19257  0777  3000               	movlw	0
 19258  0778  00C9               	movwf	LEDsOn@topOrBottom+1
 19259  0779  31A3  23FA  3187   	fcall	_LEDsOn
 19260                           
 19261                           ;main.c: 250: LEDsOn(first_bottom,2);
 19262  077C  0022               	movlb	2	; select bank2
 19263  077D  085D               	movf	(_first_bottom+3)^(0+256),w
 19264  077E  0020               	movlb	0	; select bank0
 19265  077F  00C7               	movwf	LEDsOn@LEDpins+3
 19266  0780  0022               	movlb	2	; select bank2
 19267  0781  085C               	movf	(_first_bottom+2)^(0+256),w
 19268  0782  0020               	movlb	0	; select bank0
 19269  0783  00C6               	movwf	LEDsOn@LEDpins+2
 19270  0784  0022               	movlb	2	; select bank2
 19271  0785  085B               	movf	(_first_bottom+1)^(0+256),w
 19272  0786  0020               	movlb	0	; select bank0
 19273  0787  00C5               	movwf	LEDsOn@LEDpins+1
 19274  0788  0022               	movlb	2	; select bank2
 19275  0789  085A               	movf	_first_bottom^(0+256),w
 19276  078A  0020               	movlb	0	; select bank0
 19277  078B  00C4               	movwf	LEDsOn@LEDpins
 19278  078C  3002               	movlw	2
 19279  078D  00C8               	movwf	LEDsOn@topOrBottom
 19280  078E  3000               	movlw	0
 19281  078F  00C9               	movwf	LEDsOn@topOrBottom+1
 19282  0790  31A3  23FA  3187   	fcall	_LEDsOn
 19283                           
 19284                           ;main.c: 251: do { LATCbits.LATC1 = 0; } while(0);
 19285  0793  0022               	movlb	2	; select bank2
 19286  0794  108E               	bcf	14,1	;volatile
 19287                           
 19288                           ;main.c: 252: for(int t=0; t<heater_pre_time_ms; t++) _delay((unsigned long)((1)*(100000
      +                          0/4000.0)));
 19289  0795  0021               	movlb	1	; select bank1
 19290  0796  01BF               	clrf	doMove@t^(0+128)
 19291  0797  01C0               	clrf	(doMove@t+1)^(0+128)
 19292  0798                     l1135:	
 19293  0798  0840               	movf	(doMove@t+1)^(0+128),w
 19294  0799  3A80               	xorlw	128
 19295  079A  00BE               	movwf	??_doMove^(0+128)
 19296  079B  086D               	movf	(_heater_pre_time_ms+1)^(0+128),w
 19297  079C  3A80               	xorlw	128
 19298  079D  023E               	subwf	??_doMove^(0+128),w
 19299  079E  1D03               	skipz
 19300  079F  2FA2               	goto	u8735
 19301  07A0  086C               	movf	_heater_pre_time_ms^(0+128),w
 19302  07A1  023F               	subwf	doMove@t^(0+128),w
 19303  07A2                     u8735:	
 19304  07A2  1803               	btfsc	3,0
 19305  07A3  2FAE               	goto	l8653
 19306  07A4  3053               	movlw	83
 19307  07A5                     u10237:	
 19308  07A5  0B89               	decfsz	9,f
 19309  07A6  2FA5               	goto	u10237
 19310  07A7  0000               	nop
 19311  07A8  3001               	movlw	1
 19312  07A9  0021               	movlb	1	; select bank1
 19313  07AA  07BF               	addwf	doMove@t^(0+128),f
 19314  07AB  3000               	movlw	0
 19315  07AC  3DC0               	addwfc	(doMove@t+1)^(0+128),f
 19316  07AD  2F98               	goto	l1135
 19317  07AE                     l8653:	
 19318                           
 19319                           ;main.c: 253: TMR2_StartTimer();
 19320  07AE  31AF  2746  3187   	fcall	_TMR2_StartTimer
 19321                           
 19322                           ;main.c: 254: TMR0_StartTimer();
 19323  07B1  31AF  2743  3187   	fcall	_TMR0_StartTimer
 19324                           
 19325                           ;main.c: 256: drv_write_wvfrm(1);
 19326  07B4  3001               	movlw	1
 19327  07B5  31A2  2243  3187   	fcall	_drv_write_wvfrm
 19328                           
 19329                           ;main.c: 257: drv_write_DC(drv_peak_val, piezo_on_time_ms);
 19330  07B8  0021               	movlb	1	; select bank1
 19331  07B9  086F               	movf	(_drv_peak_val+1)^(0+128),w
 19332  07BA  00B6               	movwf	(drv_write_DC@val+1)^(0+128)
 19333  07BB  086E               	movf	_drv_peak_val^(0+128),w
 19334  07BC  00B5               	movwf	drv_write_DC@val^(0+128)
 19335  07BD  086B               	movf	(_piezo_on_time_ms+1)^(0+128),w
 19336  07BE  00B8               	movwf	(drv_write_DC@duration_ms+1)^(0+128)
 19337  07BF  086A               	movf	_piezo_on_time_ms^(0+128),w
 19338  07C0  00B7               	movwf	drv_write_DC@duration_ms^(0+128)
 19339  07C1  31A7  274D  3187   	fcall	_drv_write_DC
 19340                           
 19341                           ;main.c: 258: drv_write_wvfrm(0);
 19342  07C4  3000               	movlw	0
 19343  07C5  31A2  2243  3187   	fcall	_drv_write_wvfrm
 19344                           
 19345                           ;main.c: 259: for(int t=0; t<heater_post_time_ms; t++) _delay((unsigned long)((1)*(10000
      +                          00/4000.0)));
 19346  07C8  0021               	movlb	1	; select bank1
 19347  07C9  01C1               	clrf	doMove@t_1660^(0+128)
 19348  07CA  01C2               	clrf	(doMove@t_1660+1)^(0+128)
 19349  07CB                     l1138:	
 19350  07CB  0842               	movf	(doMove@t_1660+1)^(0+128),w
 19351  07CC  3A80               	xorlw	128
 19352  07CD  00BE               	movwf	??_doMove^(0+128)
 19353  07CE  0022               	movlb	2	; select bank2
 19354  07CF  086D               	movf	(_heater_post_time_ms+1)^(0+256),w
 19355  07D0  3A80               	xorlw	128
 19356  07D1  0021               	movlb	1	; select bank1
 19357  07D2  023E               	subwf	??_doMove^(0+128),w
 19358  07D3  1D03               	skipz
 19359  07D4  2FD9               	goto	u8745
 19360  07D5  0022               	movlb	2	; select bank2
 19361  07D6  086C               	movf	_heater_post_time_ms^(0+256),w
 19362  07D7  0021               	movlb	1	; select bank1
 19363  07D8  0241               	subwf	doMove@t_1660^(0+128),w
 19364  07D9                     u8745:	
 19365  07D9  1803               	btfsc	3,0
 19366  07DA  2FE5               	goto	l1141
 19367  07DB  3053               	movlw	83
 19368  07DC                     u10247:	
 19369  07DC  0B89               	decfsz	9,f
 19370  07DD  2FDC               	goto	u10247
 19371  07DE  0000               	nop
 19372  07DF  3001               	movlw	1
 19373  07E0  0021               	movlb	1	; select bank1
 19374  07E1  07C1               	addwf	doMove@t_1660^(0+128),f
 19375  07E2  3000               	movlw	0
 19376  07E3  3DC2               	addwfc	(doMove@t_1660+1)^(0+128),f
 19377  07E4  2FCB               	goto	l1138
 19378  07E5                     l1141:	
 19379                           ;main.c: 261: do { LATCbits.LATC1 = 1; } while(0);
 19380                           
 19381  07E5  0022               	movlb	2	; select bank2
 19382  07E6  148E               	bsf	14,1	;volatile
 19383                           
 19384                           ;main.c: 265: TMR4_StartTimer();
 19385  07E7  31AF  2749  3187   	fcall	_TMR4_StartTimer
 19386                           
 19387                           ;main.c: 266: interpulseWait = 1;
 19388  07EA  3001               	movlw	1
 19389  07EB  0022               	movlb	2	; select bank2
 19390  07EC  00E8               	movwf	_interpulseWait^(0+256)
 19391  07ED  3000               	movlw	0
 19392  07EE  00E9               	movwf	(_interpulseWait^(0+256)+1)
 19393                           
 19394                           ;main.c: 267: printf("domove\n");
 19395  07EF  30F6               	movlw	low (STR_7| (0+32768))
 19396  07F0  0021               	movlb	1	; select bank1
 19397  07F1  00A0               	movwf	printf@f^(0+128)
 19398  07F2  30A9               	movlw	high (STR_7| (0+32768))
 19399  07F3  00A1               	movwf	(printf@f^(0+128)+1)
 19400  07F4  318E  26CE         	fcall	_printf
 19401                           
 19402                           ;main.c: 269: return 0;
 19403  07F6  0021               	movlb	1	; select bank1
 19404  07F7  01BC               	clrf	?_doMove^(0+128)
 19405  07F8  01BD               	clrf	(?_doMove+1)^(0+128)
 19406  07F9  0008               	return
 19407  07FA                     __end_of_doMove:	
 19408                           
 19409                           	psect	text66
 19410  2243                     __ptext66:	
 19411 ;; *************** function _drv_write_wvfrm *****************
 19412 ;; Defined at:
 19413 ;;		line 77 in file "drv2665.c"
 19414 ;; Parameters:    Size  Location     Type
 19415 ;;  upOrDown        1    wreg     unsigned char 
 19416 ;; Auto vars:     Size  Location     Type
 19417 ;;  upOrDown        1   26[BANK0 ] unsigned char 
 19418 ;; Return value:  Size  Location     Type
 19419 ;;                  1    wreg      void 
 19420 ;; Registers used:
 19421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19422 ;; Tracked objects:
 19423 ;;		On entry : 0/0
 19424 ;;		On exit  : 0/0
 19425 ;;		Unchanged: 0/0
 19426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19428 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19430 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19431 ;;Total ram usage:        1 bytes
 19432 ;; Hardware stack levels used:    1
 19433 ;; Hardware stack levels required when called:   12
 19434 ;; This function calls:
 19435 ;;		_i2c_masterOperation
 19436 ;;		_i2c_setBuffer
 19437 ;; This function is called by:
 19438 ;;		_doMove
 19439 ;; This function uses a non-reentrant model
 19440 ;;
 19441                           
 19442                           
 19443                           ;psect for function _drv_write_wvfrm
 19444  2243                     _drv_write_wvfrm:	
 19445                           
 19446                           ;incstack = 0
 19447                           ; Regs used in _drv_write_wvfrm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19448                           ;drv_write_wvfrm@upOrDown stored from wreg
 19449  2243  0020               	movlb	0	; select bank0
 19450  2244  00BA               	movwf	drv_write_wvfrm@upOrDown
 19451                           
 19452                           ;drv2665.c: 80: if (upOrDown)
 19453  2245  083A               	movf	drv_write_wvfrm@upOrDown,w
 19454  2246  1903               	btfsc	3,2
 19455  2247  2A4C               	goto	l8433
 19456                           
 19457                           ;drv2665.c: 81: i2c_setBuffer(&drv_fifo_upstroke, (sizeof(drv_fifo_upstroke) / sizeof((d
      +                          rv_fifo_upstroke)[0])));
 19458  2248  3020               	movlw	low _drv_fifo_upstroke
 19459  2249  00B1               	movwf	i2c_setBuffer@buffer
 19460  224A  3002               	movlw	high _drv_fifo_upstroke
 19461  224B  2A50               	goto	L40
 19462  224C                     l8433:	
 19463                           
 19464                           ;drv2665.c: 82: else
 19465                           ;drv2665.c: 83: i2c_setBuffer(&drv_fifo_downstroke, (sizeof(drv_fifo_downstroke) / sizeo
      +                          f((drv_fifo_downstroke)[0])));
 19466  224C  30A0               	movlw	low _drv_fifo_downstroke
 19467  224D  0020               	movlb	0	; select bank0
 19468  224E  00B1               	movwf	i2c_setBuffer@buffer
 19469  224F  3002               	movlw	high _drv_fifo_downstroke
 19470  2250                     L40:	
 19471  2250  00B2               	movwf	i2c_setBuffer@buffer+1
 19472  2251  3028               	movlw	40
 19473  2252  00B3               	movwf	i2c_setBuffer@bufferSize
 19474  2253  3000               	movlw	0
 19475  2254  00B4               	movwf	i2c_setBuffer@bufferSize+1
 19476  2255  31A1  21E6  31A2   	fcall	_i2c_setBuffer
 19477                           
 19478                           ;drv2665.c: 84: i2c_masterOperation(0);
 19479  2258  3000               	movlw	0
 19480  2259  31A4  2484         	fcall	_i2c_masterOperation
 19481  225B  0008               	return
 19482  225C                     __end_of_drv_write_wvfrm:	
 19483                           
 19484                           	psect	text67
 19485  274D                     __ptext67:	
 19486 ;; *************** function _drv_write_DC *****************
 19487 ;; Defined at:
 19488 ;;		line 109 in file "drv2665.c"
 19489 ;; Parameters:    Size  Location     Type
 19490 ;;  val             2   21[BANK1 ] int 
 19491 ;;  duration_ms     2   23[BANK1 ] int 
 19492 ;; Auto vars:     Size  Location     Type
 19493 ;;  i               2   26[BANK1 ] int 
 19494 ;; Return value:  Size  Location     Type
 19495 ;;                  1    wreg      void 
 19496 ;; Registers used:
 19497 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19498 ;; Tracked objects:
 19499 ;;		On entry : 0/0
 19500 ;;		On exit  : 0/0
 19501 ;;		Unchanged: 0/0
 19502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19503 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19504 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19505 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19506 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19507 ;;Total ram usage:        7 bytes
 19508 ;; Hardware stack levels used:    1
 19509 ;; Hardware stack levels required when called:   13
 19510 ;; This function calls:
 19511 ;;		___awdiv
 19512 ;;		_drv_write
 19513 ;; This function is called by:
 19514 ;;		_doMove
 19515 ;; This function uses a non-reentrant model
 19516 ;;
 19517                           
 19518                           
 19519                           ;psect for function _drv_write_DC
 19520  274D                     _drv_write_DC:	
 19521                           
 19522                           ;drv2665.c: 119: for(int i=0;i<duration_ms/5; i++){
 19523                           
 19524                           ;incstack = 0
 19525                           ; Regs used in _drv_write_DC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19526  274D  0021               	movlb	1	; select bank1
 19527  274E  01BA               	clrf	drv_write_DC@i^(0+128)
 19528  274F  01BB               	clrf	(drv_write_DC@i+1)^(0+128)
 19529  2750                     l8445:	
 19530  2750  3005               	movlw	5
 19531  2751  0020               	movlb	0	; select bank0
 19532  2752  00B7               	movwf	___awdiv@divisor
 19533  2753  3000               	movlw	0
 19534  2754  00B8               	movwf	___awdiv@divisor+1
 19535  2755  0021               	movlb	1	; select bank1
 19536  2756  0838               	movf	(drv_write_DC@duration_ms+1)^(0+128),w
 19537  2757  0020               	movlb	0	; select bank0
 19538  2758  00BA               	movwf	___awdiv@dividend+1
 19539  2759  0021               	movlb	1	; select bank1
 19540  275A  0837               	movf	drv_write_DC@duration_ms^(0+128),w
 19541  275B  0020               	movlb	0	; select bank0
 19542  275C  00B9               	movwf	___awdiv@dividend
 19543  275D  319C  24BF  31A7   	fcall	___awdiv
 19544  2760  0021               	movlb	1	; select bank1
 19545  2761  083B               	movf	(drv_write_DC@i+1)^(0+128),w
 19546  2762  3A80               	xorlw	128
 19547  2763  00B9               	movwf	??_drv_write_DC^(0+128)
 19548  2764  0020               	movlb	0	; select bank0
 19549  2765  0838               	movf	?___awdiv+1,w
 19550  2766  3A80               	xorlw	128
 19551  2767  0021               	movlb	1	; select bank1
 19552  2768  0239               	subwf	??_drv_write_DC^(0+128),w
 19553  2769  1D03               	skipz
 19554  276A  2F6F               	goto	u8535
 19555  276B  0020               	movlb	0	; select bank0
 19556  276C  0837               	movf	?___awdiv,w
 19557  276D  0021               	movlb	1	; select bank1
 19558  276E  023A               	subwf	drv_write_DC@i^(0+128),w
 19559  276F                     u8535:	
 19560  276F  1803               	btfsc	3,0
 19561  2770  0008               	return
 19562                           
 19563                           ;drv2665.c: 120: drv_write(0x0b, val);
 19564  2771  0021               	movlb	1	; select bank1
 19565  2772  0835               	movf	drv_write_DC@val^(0+128),w
 19566  2773  00B9               	movwf	??_drv_write_DC^(0+128)
 19567  2774  0839               	movf	??_drv_write_DC^(0+128),w
 19568  2775  0020               	movlb	0	; select bank0
 19569  2776  00C9               	movwf	drv_write@data
 19570  2777  300B               	movlw	11
 19571  2778  31A4  24A8  31A7   	fcall	_drv_write
 19572                           
 19573                           ;drv2665.c: 121: _delay((unsigned long)((20)*(1000000/4000000.0)));
 19574  277B  3200               	nop2	;2 cycle nop
 19575  277C  3200               	nop2	;2 cycle nop
 19576  277D  0000               	nop
 19577  277E  3001               	movlw	1
 19578  277F  0021               	movlb	1	; select bank1
 19579  2780  07BA               	addwf	drv_write_DC@i^(0+128),f
 19580  2781  3000               	movlw	0
 19581  2782  3DBB               	addwfc	(drv_write_DC@i+1)^(0+128),f
 19582  2783  2F50               	goto	l8445
 19583  2784                     __end_of_drv_write_DC:	
 19584                           
 19585                           	psect	text68
 19586  24A8                     __ptext68:	
 19587 ;; *************** function _drv_write *****************
 19588 ;; Defined at:
 19589 ;;		line 59 in file "drv2665.c"
 19590 ;; Parameters:    Size  Location     Type
 19591 ;;  reg             1    wreg     unsigned char 
 19592 ;;  data            1   41[BANK0 ] unsigned char 
 19593 ;; Auto vars:     Size  Location     Type
 19594 ;;  reg             1   43[BANK0 ] unsigned char 
 19595 ;;  buff            2   44[BANK0 ] unsigned char [2]
 19596 ;; Return value:  Size  Location     Type
 19597 ;;                  1    wreg      void 
 19598 ;; Registers used:
 19599 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19600 ;; Tracked objects:
 19601 ;;		On entry : 0/0
 19602 ;;		On exit  : 0/0
 19603 ;;		Unchanged: 0/0
 19604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19605 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19606 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19607 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19608 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19609 ;;Total ram usage:        5 bytes
 19610 ;; Hardware stack levels used:    1
 19611 ;; Hardware stack levels required when called:   12
 19612 ;; This function calls:
 19613 ;;		_i2c_masterOperation
 19614 ;;		_i2c_setBuffer
 19615 ;;		_printf
 19616 ;; This function is called by:
 19617 ;;		_setDrvGain
 19618 ;;		_drv_init
 19619 ;;		_drv_reset
 19620 ;;		_drv_write_DC
 19621 ;;		_drv_outputSine
 19622 ;;		_drv_outputWave
 19623 ;; This function uses a non-reentrant model
 19624 ;;
 19625                           
 19626                           
 19627                           ;psect for function _drv_write
 19628  24A8                     _drv_write:	
 19629                           
 19630                           ;incstack = 0
 19631                           ; Regs used in _drv_write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19632                           ;drv_write@reg stored from wreg
 19633  24A8  0020               	movlb	0	; select bank0
 19634  24A9  00CB               	movwf	drv_write@reg
 19635                           
 19636                           ;drv2665.c: 64: uint8_t buff[2];
 19637                           ;drv2665.c: 66: buff[0] = reg;
 19638  24AA  084B               	movf	drv_write@reg,w
 19639  24AB  00CA               	movwf	??_drv_write
 19640  24AC  084A               	movf	??_drv_write,w
 19641  24AD  00CC               	movwf	drv_write@buff
 19642                           
 19643                           ;drv2665.c: 67: buff[1] = data;
 19644  24AE  0849               	movf	drv_write@data,w
 19645  24AF  00CA               	movwf	??_drv_write
 19646  24B0  084A               	movf	??_drv_write,w
 19647  24B1  00CD               	movwf	drv_write@buff+1
 19648                           
 19649                           ;drv2665.c: 70: i2c_setBuffer(buff, 2);
 19650  24B2  304C               	movlw	low drv_write@buff
 19651  24B3  00B1               	movwf	i2c_setBuffer@buffer
 19652  24B4  3000               	movlw	high drv_write@buff
 19653  24B5  00B2               	movwf	i2c_setBuffer@buffer+1
 19654  24B6  3002               	movlw	2
 19655  24B7  00B3               	movwf	i2c_setBuffer@bufferSize
 19656  24B8  3000               	movlw	0
 19657  24B9  00B4               	movwf	i2c_setBuffer@bufferSize+1
 19658  24BA  31A1  21E6  31A4   	fcall	_i2c_setBuffer
 19659                           
 19660                           ;drv2665.c: 71: if(i2c_masterOperation(0) != I2C_NOERR)
 19661  24BD  3000               	movlw	0
 19662  24BE  31A4  2484  31A4   	fcall	_i2c_masterOperation
 19663  24C1  3A00               	xorlw	0
 19664  24C2  1903               	skipnz
 19665  24C3  0008               	return
 19666                           
 19667                           ;drv2665.c: 72: printf("drv_write error!\n");
 19668  24C4  30CB               	movlw	low (STR_53| (0+32768))
 19669  24C5  0021               	movlb	1	; select bank1
 19670  24C6  00A0               	movwf	printf@f^(0+128)
 19671  24C7  30A8               	movlw	high (STR_53| (0+32768))
 19672  24C8  00A1               	movwf	(printf@f^(0+128)+1)
 19673  24C9  318E  26CE         	fcall	_printf
 19674  24CB  0008               	return
 19675  24CC                     __end_of_drv_write:	
 19676                           
 19677                           	psect	text69
 19678  0ECE                     __ptext69:	
 19679 ;; *************** function _printf *****************
 19680 ;; Defined at:
 19681 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 19682 ;; Parameters:    Size  Location     Type
 19683 ;;  f               2    0[BANK1 ] PTR const unsigned char 
 19684 ;;		 -> STR_84(23), STR_83(3), STR_55(17), STR_54(18), 
 19685 ;;		 -> STR_53(18), STR_52(17), STR_51(28), STR_50(9), 
 19686 ;;		 -> STR_49(9), STR_48(25), STR_47(11), STR_46(8), 
 19687 ;;		 -> STR_45(8), STR_44(8), STR_43(31), STR_42(11), 
 19688 ;;		 -> STR_41(8), STR_40(8), STR_39(8), STR_38(26), 
 19689 ;;		 -> STR_37(30), STR_36(3), STR_35(3), STR_34(3), 
 19690 ;;		 -> STR_33(2), STR_32(4), STR_31(2), STR_30(4), 
 19691 ;;		 -> STR_29(3), STR_28(3), STR_27(3), STR_26(3), 
 19692 ;;		 -> STR_25(3), STR_24(3), STR_23(3), STR_22(3), 
 19693 ;;		 -> STR_21(3), STR_20(3), STR_19(3), STR_18(3), 
 19694 ;;		 -> STR_17(3), STR_16(3), STR_15(3), STR_14(3), 
 19695 ;;		 -> STR_13(4), STR_12(3), STR_11(16), STR_10(3), 
 19696 ;;		 -> STR_9(3), STR_8(3), STR_7(8), STR_6(13), 
 19697 ;;		 -> STR_5(15), STR_4(16), STR_3(2), STR_2(4), 
 19698 ;;		 -> STR_1(4), 
 19699 ;; Auto vars:     Size  Location     Type
 19700 ;;  val             4   14[BANK1 ] unsigned long 
 19701 ;;  tmpval          4    0        struct .
 19702 ;;  prec            2   12[BANK1 ] int 
 19703 ;;  cp              2    0        PTR const unsigned char 
 19704 ;;  len             2    0        unsigned int 
 19705 ;;  c               1   20[BANK1 ] char 
 19706 ;;  ap              1   19[BANK1 ] PTR void [1]
 19707 ;;		 -> ?_printf(2), 
 19708 ;;  flag            1   18[BANK1 ] unsigned char 
 19709 ;; Return value:  Size  Location     Type
 19710 ;;                  2    0[BANK1 ] int 
 19711 ;; Registers used:
 19712 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19713 ;; Tracked objects:
 19714 ;;		On entry : 0/0
 19715 ;;		On exit  : 0/0
 19716 ;;		Unchanged: 0/0
 19717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19718 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19719 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19720 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19721 ;;      Totals:         0       0      21       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19722 ;;Total ram usage:       21 bytes
 19723 ;; Hardware stack levels used:    1
 19724 ;; Hardware stack levels required when called:    8
 19725 ;; This function calls:
 19726 ;;		___lldiv
 19727 ;;		___llmod
 19728 ;;		_putch
 19729 ;; This function is called by:
 19730 ;;		_LED_test_openshort
 19731 ;;		_LED_getData
 19732 ;;		_main
 19733 ;;		_main_initialize
 19734 ;;		_doMove
 19735 ;;		_startRelMove
 19736 ;;		_startAbsMove
 19737 ;;		_stop
 19738 ;;		_doAbsMove
 19739 ;;		_zeroPosition
 19740 ;;		_getPosition
 19741 ;;		_setDrvPeak
 19742 ;;		_setDrvGain
 19743 ;;		_setDrvPiezoOnTime
 19744 ;;		_setHeaterPreTime
 19745 ;;		_setHeaterPostTime
 19746 ;;		_setH1OffTime
 19747 ;;		_setH2OnTime
 19748 ;;		_setLEDBrightnessRange
 19749 ;;		_setLEDPwr
 19750 ;;		_setHeaterToggle
 19751 ;;		_timedActiveHeatOn
 19752 ;;		_setActive
 19753 ;;		_setMoveMask
 19754 ;;		_getActive
 19755 ;;		_getMoveMask
 19756 ;;		_getMotionStatus
 19757 ;;		_commCheck
 19758 ;;		_drv_init
 19759 ;;		_drv_write
 19760 ;;		_drv_read
 19761 ;;		_execCmd
 19762 ;; This function uses a non-reentrant model
 19763 ;;
 19764                           
 19765                           
 19766                           ;psect for function _printf
 19767  0ECE                     _printf:	
 19768                           
 19769                           ;doprnt.c: 466: va_list ap;
 19770                           ;doprnt.c: 499: signed char c;
 19771                           ;doprnt.c: 504: int prec;
 19772                           ;doprnt.c: 508: unsigned char flag;
 19773                           ;doprnt.c: 523: union {
 19774                           ;doprnt.c: 524: unsigned long vd;
 19775                           ;doprnt.c: 525: double integ;
 19776                           ;doprnt.c: 526: } tmpval;
 19777                           ;doprnt.c: 528: unsigned long val;
 19778                           ;doprnt.c: 529: unsigned len;
 19779                           ;doprnt.c: 530: const char * cp;
 19780                           ;doprnt.c: 533: *ap = __va_start();
 19781                           
 19782                           ;incstack = 0
 19783                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19784  0ECE  30A2               	movlw	(low ((?_printf| 0+2)))& (0+255)
 19785  0ECF  0021               	movlb	1	; select bank1
 19786  0ED0  00A6               	movwf	??_printf^(0+128)
 19787  0ED1  0826               	movf	??_printf^(0+128),w
 19788  0ED2  00B3               	movwf	printf@ap^(0+128)
 19789  0ED3                     l7939:	
 19790                           ;doprnt.c: 536: while(c = *f++) {
 19791                           
 19792  0ED3  0021               	movlb	1	; select bank1
 19793  0ED4  0821               	movf	(printf@f+1)^(0+128),w
 19794  0ED5  00A7               	movwf	(??_printf^(0+128)+1)
 19795  0ED6  0820               	movf	printf@f^(0+128),w
 19796  0ED7  00A6               	movwf	??_printf^(0+128)
 19797  0ED8  0AA0               	incf	printf@f^(0+128),f
 19798  0ED9  1903               	skipnz
 19799  0EDA  0AA1               	incf	(printf@f+1)^(0+128),f
 19800  0EDB  0826               	movf	??_printf^(0+128),w
 19801  0EDC  0084               	movwf	4
 19802  0EDD  0827               	movf	(??_printf+1)^(0+128),w
 19803  0EDE  0085               	movwf	5
 19804  0EDF  0800               	movf	0,w	;code access
 19805  0EE0  00A8               	movwf	(??_printf+2)^(0+128)
 19806  0EE1  0828               	movf	(??_printf+2)^(0+128),w
 19807  0EE2  00B4               	movwf	printf@c^(0+128)
 19808  0EE3  0834               	movf	printf@c^(0+128),w
 19809  0EE4  1903               	btfsc	3,2
 19810  0EE5  0008               	return
 19811                           
 19812                           ;doprnt.c: 538: if(c != '%')
 19813  0EE6  3025               	movlw	37
 19814  0EE7  0634               	xorwf	printf@c^(0+128),w
 19815  0EE8  1903               	btfsc	3,2
 19816  0EE9  2EEF               	goto	l7885
 19817                           
 19818                           ;doprnt.c: 540: {
 19819                           ;doprnt.c: 541: (putch(c) );
 19820  0EEA  0834               	movf	printf@c^(0+128),w
 19821  0EEB  31AF  27D4  318E   	fcall	_putch
 19822                           
 19823                           ;doprnt.c: 542: continue;
 19824  0EEE  2ED3               	goto	l7939
 19825  0EEF                     l7885:	
 19826                           
 19827                           ;doprnt.c: 543: }
 19828                           ;doprnt.c: 548: flag = 0;
 19829  0EEF  0021               	movlb	1	; select bank1
 19830  0EF0  01B2               	clrf	printf@flag^(0+128)
 19831                           
 19832                           ;doprnt.c: 635: switch(c = *f++) {
 19833                           
 19834                           ;doprnt.c: 633: loop:
 19835  0EF1  2EF6               	goto	l7889
 19836  0EF2                     l1616:	
 19837                           ;doprnt.c: 641: case 'l':
 19838                           
 19839                           ;doprnt.c: 638: goto alldone;
 19840                           
 19841                           ;doprnt.c: 637: case 0:
 19842                           
 19843                           
 19844                           ;doprnt.c: 643: flag |= 0x10;
 19845  0EF2  1632               	bsf	printf@flag^(0+128),4
 19846                           
 19847                           ;doprnt.c: 644: goto loop;
 19848  0EF3  2EF6               	goto	l7889
 19849  0EF4                     l1621:	
 19850                           ;doprnt.c: 817: case 'u':
 19851                           
 19852                           ;doprnt.c: 813: continue;
 19853                           
 19854                           ;doprnt.c: 802: default:
 19855                           
 19856                           ;doprnt.c: 698: case 'i':
 19857                           ;doprnt.c: 699: break;
 19858                           
 19859                           ;doprnt.c: 697: case 'd':
 19860                           
 19861                           
 19862                           ;doprnt.c: 818: flag |= 0x40;
 19863  0EF4  1732               	bsf	printf@flag^(0+128),6
 19864                           
 19865                           ;doprnt.c: 822: }
 19866                           
 19867                           ;doprnt.c: 819: break;
 19868  0EF5  2F13               	goto	l1619
 19869  0EF6                     l7889:	
 19870  0EF6  0821               	movf	(printf@f+1)^(0+128),w
 19871  0EF7  00A7               	movwf	(??_printf^(0+128)+1)
 19872  0EF8  0820               	movf	printf@f^(0+128),w
 19873  0EF9  00A6               	movwf	??_printf^(0+128)
 19874  0EFA  0AA0               	incf	printf@f^(0+128),f
 19875  0EFB  1903               	skipnz
 19876  0EFC  0AA1               	incf	(printf@f+1)^(0+128),f
 19877  0EFD  0826               	movf	??_printf^(0+128),w
 19878  0EFE  0084               	movwf	4
 19879  0EFF  0827               	movf	(??_printf+1)^(0+128),w
 19880  0F00  0085               	movwf	5
 19881  0F01  0800               	movf	0,w	;code access
 19882  0F02  00B4               	movwf	printf@c^(0+128)
 19883                           
 19884                           ; Switch size 1, requested type "space"
 19885                           ; Number of cases is 5, Range of values is 0 to 117
 19886                           ; switch strategies available:
 19887                           ; Name         Instructions Cycles
 19888                           ; simple_byte           16     9 (average)
 19889                           ; direct_byte          242     6 (fixed)
 19890                           ; jumptable            260     6 (fixed)
 19891                           ;	Chosen strategy is simple_byte
 19892  0F03  3A00               	xorlw	0	; case 0
 19893  0F04  1903               	skipnz
 19894  0F05  2FFF               	goto	l1637
 19895  0F06  3A64               	xorlw	100	; case 100
 19896  0F07  1903               	skipnz
 19897  0F08  2F13               	goto	l1619
 19898  0F09  3A0D               	xorlw	13	; case 105
 19899  0F0A  1903               	skipnz
 19900  0F0B  2F13               	goto	l1619
 19901  0F0C  3A05               	xorlw	5	; case 108
 19902  0F0D  1903               	skipnz
 19903  0F0E  2EF2               	goto	l1616
 19904  0F0F  3A19               	xorlw	25	; case 117
 19905  0F10  1903               	skipnz
 19906  0F11  2EF4               	goto	l1621
 19907  0F12  2ED3               	goto	l7939
 19908  0F13                     l1619:	
 19909                           
 19910                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19911  0F13  1B32               	btfsc	printf@flag^(0+128),6
 19912  0F14  2F4A               	goto	l1622
 19913                           
 19914                           ;doprnt.c: 1253: {
 19915                           ;doprnt.c: 1255: if(flag & 0x10)
 19916  0F15  1E32               	btfss	printf@flag^(0+128),4
 19917  0F16  2F24               	goto	l7897
 19918                           
 19919                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
 19920  0F17  0833               	movf	printf@ap^(0+128),w
 19921  0F18  0086               	movwf	6
 19922  0F19  0187               	clrf	7
 19923  0F1A  3F40               	moviw [0]fsr1
 19924  0F1B  00AE               	movwf	printf@val^(0+128)
 19925  0F1C  3F41               	moviw [1]fsr1
 19926  0F1D  00AF               	movwf	(printf@val+1)^(0+128)
 19927  0F1E  3F42               	moviw [2]fsr1
 19928  0F1F  00B0               	movwf	(printf@val+2)^(0+128)
 19929  0F20  3F43               	moviw [3]fsr1
 19930  0F21  00B1               	movwf	(printf@val+3)^(0+128)
 19931  0F22  3004               	movlw	4
 19932  0F23  2F35               	goto	L41
 19933  0F24                     l7897:	
 19934                           
 19935                           ;doprnt.c: 1257: else
 19936                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 19937  0F24  0833               	movf	printf@ap^(0+128),w
 19938  0F25  0086               	movwf	6
 19939  0F26  0187               	clrf	7
 19940  0F27  3F40               	moviw [0]fsr1
 19941  0F28  00A6               	movwf	??_printf^(0+128)
 19942  0F29  3F41               	moviw [1]fsr1
 19943  0F2A  00A7               	movwf	(??_printf^(0+128)+1)
 19944  0F2B  0826               	movf	??_printf^(0+128),w
 19945  0F2C  00AE               	movwf	printf@val^(0+128)
 19946  0F2D  0827               	movf	(??_printf+1)^(0+128),w
 19947  0F2E  00AF               	movwf	(printf@val+1)^(0+128)
 19948  0F2F  0D89               	rlf	9,f
 19949  0F30  3B89               	subwfb	9,f
 19950  0F31  0989               	comf	9,f
 19951  0F32  00B0               	movwf	(printf@val+2)^(0+128)
 19952  0F33  00B1               	movwf	(printf@val+3)^(0+128)
 19953  0F34  3002               	movlw	2
 19954  0F35                     L41:	
 19955  0F35  00A6               	movwf	??_printf^(0+128)
 19956  0F36  0826               	movf	??_printf^(0+128),w
 19957  0F37  07B3               	addwf	printf@ap^(0+128),f
 19958                           
 19959                           ;doprnt.c: 1261: if((long)val < 0) {
 19960  0F38  1FB1               	btfss	(printf@val+3)^(0+128),7
 19961  0F39  2F6A               	goto	l7915
 19962                           
 19963                           ;doprnt.c: 1262: flag |= 0x03;
 19964  0F3A  3003               	movlw	3
 19965  0F3B  00A6               	movwf	??_printf^(0+128)
 19966  0F3C  0826               	movf	??_printf^(0+128),w
 19967  0F3D  04B2               	iorwf	printf@flag^(0+128),f
 19968                           
 19969                           ;doprnt.c: 1263: val = -val;
 19970  0F3E  09AE               	comf	printf@val^(0+128),f
 19971  0F3F  09AF               	comf	(printf@val+1)^(0+128),f
 19972  0F40  09B0               	comf	(printf@val+2)^(0+128),f
 19973  0F41  09B1               	comf	(printf@val+3)^(0+128),f
 19974  0F42  0AAE               	incf	printf@val^(0+128),f
 19975  0F43  1903               	skipnz
 19976  0F44  0AAF               	incf	(printf@val+1)^(0+128),f
 19977  0F45  1903               	skipnz
 19978  0F46  0AB0               	incf	(printf@val+2)^(0+128),f
 19979  0F47  1903               	skipnz
 19980  0F48  0AB1               	incf	(printf@val+3)^(0+128),f
 19981                           
 19982                           ;doprnt.c: 1264: }
 19983                           ;doprnt.c: 1266: }
 19984  0F49  2F6A               	goto	l7915
 19985  0F4A                     l1622:	
 19986                           
 19987                           ;doprnt.c: 1268: else
 19988                           ;doprnt.c: 1273: {
 19989                           ;doprnt.c: 1281: if(flag & 0x10)
 19990  0F4A  1E32               	btfss	printf@flag^(0+128),4
 19991  0F4B  2F59               	goto	l7911
 19992                           
 19993                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
 19994  0F4C  0833               	movf	printf@ap^(0+128),w
 19995  0F4D  0086               	movwf	6
 19996  0F4E  0187               	clrf	7
 19997  0F4F  3F40               	moviw [0]fsr1
 19998  0F50  00AE               	movwf	printf@val^(0+128)
 19999  0F51  3F41               	moviw [1]fsr1
 20000  0F52  00AF               	movwf	(printf@val+1)^(0+128)
 20001  0F53  3F42               	moviw [2]fsr1
 20002  0F54  00B0               	movwf	(printf@val+2)^(0+128)
 20003  0F55  3F43               	moviw [3]fsr1
 20004  0F56  00B1               	movwf	(printf@val+3)^(0+128)
 20005  0F57  3004               	movlw	4
 20006  0F58  2F67               	goto	L42
 20007  0F59                     l7911:	
 20008                           
 20009                           ;doprnt.c: 1283: else
 20010                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 20011  0F59  0833               	movf	printf@ap^(0+128),w
 20012  0F5A  0086               	movwf	6
 20013  0F5B  0187               	clrf	7
 20014  0F5C  3F40               	moviw [0]fsr1
 20015  0F5D  00A6               	movwf	??_printf^(0+128)
 20016  0F5E  3F41               	moviw [1]fsr1
 20017  0F5F  00A7               	movwf	(??_printf^(0+128)+1)
 20018  0F60  0826               	movf	??_printf^(0+128),w
 20019  0F61  00AE               	movwf	printf@val^(0+128)
 20020  0F62  0827               	movf	(??_printf+1)^(0+128),w
 20021  0F63  00AF               	movwf	(printf@val^(0+128)+1)
 20022  0F64  01B0               	clrf	(printf@val^(0+128)+2)
 20023  0F65  01B1               	clrf	(printf@val^(0+128)+3)
 20024  0F66  3002               	movlw	2
 20025  0F67                     L42:	
 20026  0F67  00A6               	movwf	??_printf^(0+128)
 20027  0F68  0826               	movf	??_printf^(0+128),w
 20028  0F69  07B3               	addwf	printf@ap^(0+128),f
 20029  0F6A                     l7915:	
 20030                           
 20031                           ;doprnt.c: 1287: }
 20032                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 20033  0F6A  01B4               	clrf	printf@c^(0+128)
 20034  0F6B  0AB4               	incf	printf@c^(0+128),f
 20035  0F6C  300A               	movlw	10
 20036  0F6D  0634               	xorwf	printf@c^(0+128),w
 20037  0F6E  1903               	btfsc	3,2
 20038  0F6F  2F9D               	goto	l7927
 20039  0F70                     l7921:	
 20040                           
 20041                           ;doprnt.c: 1306: if(val < dpowers[c])
 20042  0F70  0834               	movf	printf@c^(0+128),w
 20043  0F71  00A6               	movwf	??_printf^(0+128)
 20044  0F72  01A7               	clrf	(??_printf^(0+128)+1)
 20045  0F73  35A6               	lslf	??_printf^(0+128),f
 20046  0F74  0DA7               	rlf	(??_printf^(0+128)+1),f
 20047  0F75  35A6               	lslf	??_printf^(0+128),f
 20048  0F76  0DA7               	rlf	(??_printf^(0+128)+1),f
 20049  0F77  3000               	movlw	low (_dpowers| (0+32768))
 20050  0F78  0726               	addwf	??_printf^(0+128),w
 20051  0F79  0084               	movwf	4
 20052  0F7A  30A8               	movlw	high (_dpowers| (0+32768))
 20053  0F7B  3D27               	addwfc	(??_printf+1)^(0+128),w
 20054  0F7C  0085               	movwf	5
 20055  0F7D  3F00               	moviw [0]fsr0
 20056  0F7E  00A8               	movwf	(??_printf+2)^(0+128)
 20057  0F7F  3F01               	moviw [1]fsr0
 20058  0F80  00A9               	movwf	((??_printf+2)^(0+128)+1)
 20059  0F81  3F02               	moviw [2]fsr0
 20060  0F82  00AA               	movwf	((??_printf+2)^(0+128)+2)
 20061  0F83  3F03               	moviw [3]fsr0
 20062  0F84  00AB               	movwf	((??_printf+2)^(0+128)+3)
 20063  0F85  082B               	movf	(??_printf+5)^(0+128),w
 20064  0F86  0231               	subwf	(printf@val+3)^(0+128),w
 20065  0F87  1D03               	skipz
 20066  0F88  2F93               	goto	u7485
 20067  0F89  082A               	movf	(??_printf+4)^(0+128),w
 20068  0F8A  0230               	subwf	(printf@val+2)^(0+128),w
 20069  0F8B  1D03               	skipz
 20070  0F8C  2F93               	goto	u7485
 20071  0F8D  0829               	movf	(??_printf+3)^(0+128),w
 20072  0F8E  022F               	subwf	(printf@val+1)^(0+128),w
 20073  0F8F  1D03               	skipz
 20074  0F90  2F93               	goto	u7485
 20075  0F91  0828               	movf	(??_printf+2)^(0+128),w
 20076  0F92  022E               	subwf	printf@val^(0+128),w
 20077  0F93                     u7485:	
 20078  0F93  1C03               	btfss	3,0
 20079  0F94  2F9D               	goto	l7927
 20080                           
 20081                           ;doprnt.c: 1307: break;
 20082  0F95  3001               	movlw	1
 20083  0F96  00A6               	movwf	??_printf^(0+128)
 20084  0F97  0826               	movf	??_printf^(0+128),w
 20085  0F98  07B4               	addwf	printf@c^(0+128),f
 20086  0F99  300A               	movlw	10
 20087  0F9A  0634               	xorwf	printf@c^(0+128),w
 20088  0F9B  1D03               	btfss	3,2
 20089  0F9C  2F70               	goto	l7921
 20090  0F9D                     l7927:	
 20091                           
 20092                           ;doprnt.c: 1422: {
 20093                           ;doprnt.c: 1438: if(flag & 0x03)
 20094  0F9D  0832               	movf	printf@flag^(0+128),w
 20095  0F9E  3903               	andlw	3
 20096  0F9F  1903               	btfsc	3,2
 20097  0FA0  2FA5               	goto	l7931
 20098                           
 20099                           ;doprnt.c: 1439: (putch('-') );
 20100  0FA1  302D               	movlw	45
 20101  0FA2  31AF  27D4  318E   	fcall	_putch
 20102  0FA5                     l7931:	
 20103                           
 20104                           ;doprnt.c: 1469: }
 20105                           ;doprnt.c: 1472: prec = c;
 20106  0FA5  0021               	movlb	1	; select bank1
 20107  0FA6  0834               	movf	printf@c^(0+128),w
 20108  0FA7  00AC               	movwf	printf@prec^(0+128)
 20109  0FA8  01AD               	clrf	(printf@prec+1)^(0+128)
 20110  0FA9  1BAC               	btfsc	printf@prec^(0+128),7
 20111  0FAA  03AD               	decf	(printf@prec+1)^(0+128),f
 20112  0FAB                     l7937:	
 20113                           ;doprnt.c: 1474: while(prec--) {
 20114                           
 20115  0FAB  30FF               	movlw	255
 20116  0FAC  0021               	movlb	1	; select bank1
 20117  0FAD  07AC               	addwf	printf@prec^(0+128),f
 20118  0FAE  30FF               	movlw	255
 20119  0FAF  3DAD               	addwfc	(printf@prec+1)^(0+128),f
 20120  0FB0  0A2C               	incf	printf@prec^(0+128),w
 20121  0FB1  1903               	btfsc	3,2
 20122  0FB2  0A2D               	incf	(printf@prec+1)^(0+128),w
 20123  0FB3  1903               	btfsc	3,2
 20124  0FB4  2ED3               	goto	l7939
 20125                           
 20126                           ;doprnt.c: 1478: {
 20127                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 20128  0FB5  3000               	movlw	0
 20129  0FB6  0020               	movlb	0	; select bank0
 20130  0FB7  00C2               	movwf	___llmod@divisor+3
 20131  0FB8  3000               	movlw	0
 20132  0FB9  00C1               	movwf	___llmod@divisor+2
 20133  0FBA  3000               	movlw	0
 20134  0FBB  00C0               	movwf	___llmod@divisor+1
 20135  0FBC  300A               	movlw	10
 20136  0FBD  00BF               	movwf	___llmod@divisor
 20137  0FBE  0021               	movlb	1	; select bank1
 20138  0FBF  082D               	movf	(printf@prec+1)^(0+128),w
 20139  0FC0  0085               	movwf	5
 20140  0FC1  082C               	movf	printf@prec^(0+128),w
 20141  0FC2  0084               	movwf	4
 20142  0FC3  3584               	lslf	4,f
 20143  0FC4  0D85               	rlf	5,f
 20144  0FC5  3584               	lslf	4,f
 20145  0FC6  0D85               	rlf	5,f
 20146  0FC7  3000               	movlw	low (_dpowers| (0+32768))
 20147  0FC8  0784               	addwf	4,f
 20148  0FC9  30A8               	movlw	high (_dpowers| (0+32768))
 20149  0FCA  3D85               	addwfc	5,f
 20150  0FCB  3F00               	moviw [0]fsr0
 20151  0FCC  0020               	movlb	0	; select bank0
 20152  0FCD  00B1               	movwf	___lldiv@divisor
 20153  0FCE  3F01               	moviw [1]fsr0
 20154  0FCF  00B2               	movwf	___lldiv@divisor+1
 20155  0FD0  3F02               	moviw [2]fsr0
 20156  0FD1  00B3               	movwf	___lldiv@divisor+2
 20157  0FD2  3F03               	moviw [3]fsr0
 20158  0FD3  00B4               	movwf	___lldiv@divisor+3
 20159  0FD4  0021               	movlb	1	; select bank1
 20160  0FD5  0831               	movf	(printf@val+3)^(0+128),w
 20161  0FD6  0020               	movlb	0	; select bank0
 20162  0FD7  00B8               	movwf	___lldiv@dividend+3
 20163  0FD8  0021               	movlb	1	; select bank1
 20164  0FD9  0830               	movf	(printf@val+2)^(0+128),w
 20165  0FDA  0020               	movlb	0	; select bank0
 20166  0FDB  00B7               	movwf	___lldiv@dividend+2
 20167  0FDC  0021               	movlb	1	; select bank1
 20168  0FDD  082F               	movf	(printf@val+1)^(0+128),w
 20169  0FDE  0020               	movlb	0	; select bank0
 20170  0FDF  00B6               	movwf	___lldiv@dividend+1
 20171  0FE0  0021               	movlb	1	; select bank1
 20172  0FE1  082E               	movf	printf@val^(0+128),w
 20173  0FE2  0020               	movlb	0	; select bank0
 20174  0FE3  00B5               	movwf	___lldiv@dividend
 20175  0FE4  319D  2563  318E   	fcall	___lldiv
 20176  0FE7  0020               	movlb	0	; select bank0
 20177  0FE8  0834               	movf	?___lldiv+3,w
 20178  0FE9  00C6               	movwf	___llmod@dividend+3
 20179  0FEA  0833               	movf	?___lldiv+2,w
 20180  0FEB  00C5               	movwf	___llmod@dividend+2
 20181  0FEC  0832               	movf	?___lldiv+1,w
 20182  0FED  00C4               	movwf	___llmod@dividend+1
 20183  0FEE  0831               	movf	?___lldiv,w
 20184  0FEF  00C3               	movwf	___llmod@dividend
 20185  0FF0  3199  2146  318E   	fcall	___llmod
 20186  0FF3  0020               	movlb	0	; select bank0
 20187  0FF4  083F               	movf	?___llmod,w
 20188  0FF5  3E30               	addlw	48
 20189  0FF6  0021               	movlb	1	; select bank1
 20190  0FF7  00A6               	movwf	??_printf^(0+128)
 20191  0FF8  0826               	movf	??_printf^(0+128),w
 20192  0FF9  00B4               	movwf	printf@c^(0+128)
 20193                           
 20194                           ;doprnt.c: 1523: }
 20195                           ;doprnt.c: 1524: (putch(c) );
 20196  0FFA  0834               	movf	printf@c^(0+128),w
 20197  0FFB  31AF  27D4  318E   	fcall	_putch
 20198  0FFE  2FAB               	goto	l7937
 20199  0FFF                     l1637:	
 20200                           ;doprnt.c: 1540: return 0;
 20201                           ;	Return value of _printf is never used
 20202                           
 20203                           ;doprnt.c: 1525: }
 20204                           ;doprnt.c: 1533: }
 20205                           ;doprnt.c: 1535: alldone:
 20206                           
 20207  0FFF  0008               	return
 20208  1000                     __end_of_printf:	
 20209                           
 20210                           	psect	text70
 20211  2FD4                     __ptext70:	
 20212 ;; *************** function _putch *****************
 20213 ;; Defined at:
 20214 ;;		line 156 in file "mcc_generated_files/eusart.c"
 20215 ;; Parameters:    Size  Location     Type
 20216 ;;  txData          1    wreg     unsigned char 
 20217 ;; Auto vars:     Size  Location     Type
 20218 ;;  txData          1   19[BANK0 ] unsigned char 
 20219 ;; Return value:  Size  Location     Type
 20220 ;;                  1    wreg      void 
 20221 ;; Registers used:
 20222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20223 ;; Tracked objects:
 20224 ;;		On entry : 0/0
 20225 ;;		On exit  : 0/0
 20226 ;;		Unchanged: 0/0
 20227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20231 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20232 ;;Total ram usage:        1 bytes
 20233 ;; Hardware stack levels used:    1
 20234 ;; Hardware stack levels required when called:    7
 20235 ;; This function calls:
 20236 ;;		_EUSART_Write
 20237 ;; This function is called by:
 20238 ;;		_printf
 20239 ;; This function uses a non-reentrant model
 20240 ;;
 20241                           
 20242                           
 20243                           ;psect for function _putch
 20244  2FD4                     _putch:	
 20245                           
 20246                           ;incstack = 0
 20247                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20248                           ;putch@txData stored from wreg
 20249  2FD4  0020               	movlb	0	; select bank0
 20250  2FD5  00B3               	movwf	putch@txData
 20251                           
 20252                           ;eusart.c: 158: EUSART_Write(txData);
 20253  2FD6  0833               	movf	putch@txData,w
 20254  2FD7  31A4  24CC         	fcall	_EUSART_Write
 20255  2FD9  0008               	return
 20256  2FDA                     __end_of_putch:	
 20257                           
 20258                           	psect	text71
 20259  24CC                     __ptext71:	
 20260 ;; *************** function _EUSART_Write *****************
 20261 ;; Defined at:
 20262 ;;		line 128 in file "mcc_generated_files/eusart.c"
 20263 ;; Parameters:    Size  Location     Type
 20264 ;;  txData          1    wreg     unsigned char 
 20265 ;; Auto vars:     Size  Location     Type
 20266 ;;  txData          1   18[BANK0 ] unsigned char 
 20267 ;; Return value:  Size  Location     Type
 20268 ;;                  1    wreg      void 
 20269 ;; Registers used:
 20270 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20271 ;; Tracked objects:
 20272 ;;		On entry : 0/0
 20273 ;;		On exit  : 0/0
 20274 ;;		Unchanged: 0/0
 20275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20279 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20280 ;;Total ram usage:        2 bytes
 20281 ;; Hardware stack levels used:    1
 20282 ;; Hardware stack levels required when called:    6
 20283 ;; This function calls:
 20284 ;;		Nothing
 20285 ;; This function is called by:
 20286 ;;		_putch
 20287 ;; This function uses a non-reentrant model
 20288 ;;
 20289                           
 20290                           
 20291                           ;psect for function _EUSART_Write
 20292  24CC                     _EUSART_Write:	
 20293                           
 20294                           ;incstack = 0
 20295                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 20296                           ;EUSART_Write@txData stored from wreg
 20297  24CC  0020               	movlb	0	; select bank0
 20298  24CD  00B2               	movwf	EUSART_Write@txData
 20299  24CE                     l7595:	
 20300                           ;eusart.c: 131: {
 20301                           
 20302                           ;eusart.c: 130: while(0 == eusartTxBufferRemaining)
 20303                           
 20304  24CE  085E               	movf	_eusartTxBufferRemaining,w	;volatile
 20305  24CF  1903               	btfsc	3,2
 20306  24D0  2CCE               	goto	l7595
 20307                           
 20308                           ;eusart.c: 132: }
 20309                           ;eusart.c: 134: if(0 == PIE1bits.TXIE)
 20310  24D1  0021               	movlb	1	; select bank1
 20311  24D2  1A11               	btfsc	17,4	;volatile
 20312  24D3  2CD9               	goto	l442
 20313                           
 20314                           ;eusart.c: 135: {
 20315                           ;eusart.c: 136: TX1REG = txData;
 20316  24D4  0020               	movlb	0	; select bank0
 20317  24D5  0832               	movf	EUSART_Write@txData,w
 20318  24D6  0023               	movlb	3	; select bank3
 20319  24D7  009A               	movwf	26	;volatile
 20320                           
 20321                           ;eusart.c: 137: }
 20322  24D8  2CEE               	goto	l7609
 20323  24D9                     l442:	
 20324                           
 20325                           ;eusart.c: 138: else
 20326                           ;eusart.c: 139: {
 20327                           ;eusart.c: 140: PIE1bits.TXIE = 0;
 20328  24D9  1211               	bcf	17,4	;volatile
 20329                           
 20330                           ;eusart.c: 141: eusartTxBuffer[eusartTxHead++] = txData;
 20331  24DA  0020               	movlb	0	; select bank0
 20332  24DB  0832               	movf	EUSART_Write@txData,w
 20333  24DC  00B1               	movwf	??_EUSART_Write
 20334  24DD  087D               	movf	_eusartTxHead,w
 20335  24DE  3EA8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 20336  24DF  0086               	movwf	6
 20337  24E0  3001               	movlw	1	; select bank3/4
 20338  24E1  0087               	movwf	7
 20339  24E2  0831               	movf	??_EUSART_Write,w
 20340  24E3  0081               	movwf	1
 20341  24E4  3001               	movlw	1
 20342  24E5  00B1               	movwf	??_EUSART_Write
 20343  24E6  0831               	movf	??_EUSART_Write,w
 20344  24E7  07FD               	addwf	_eusartTxHead,f	;volatile
 20345                           
 20346                           ;eusart.c: 142: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 20347  24E8  3008               	movlw	8
 20348  24E9  027D               	subwf	_eusartTxHead,w	;volatile
 20349  24EA  1803               	btfsc	3,0
 20350                           
 20351                           ;eusart.c: 143: {
 20352                           ;eusart.c: 144: eusartTxHead = 0;
 20353  24EB  01FD               	clrf	_eusartTxHead	;volatile
 20354                           
 20355                           ;eusart.c: 145: }
 20356                           ;eusart.c: 146: eusartTxBufferRemaining--;
 20357  24EC  3001               	movlw	1
 20358  24ED  02DE               	subwf	_eusartTxBufferRemaining,f	;volatile
 20359  24EE                     l7609:	
 20360                           
 20361                           ;eusart.c: 147: }
 20362                           ;eusart.c: 148: PIE1bits.TXIE = 1;
 20363  24EE  0021               	movlb	1	; select bank1
 20364  24EF  1611               	bsf	17,4	;volatile
 20365  24F0  0008               	return
 20366  24F1                     __end_of_EUSART_Write:	
 20367                           
 20368                           	psect	text72
 20369  1946                     __ptext72:	
 20370 ;; *************** function ___llmod *****************
 20371 ;; Defined at:
 20372 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 20373 ;; Parameters:    Size  Location     Type
 20374 ;;  divisor         4   31[BANK0 ] unsigned long 
 20375 ;;  dividend        4   35[BANK0 ] unsigned long 
 20376 ;; Auto vars:     Size  Location     Type
 20377 ;;  counter         1   40[BANK0 ] unsigned char 
 20378 ;; Return value:  Size  Location     Type
 20379 ;;                  4   31[BANK0 ] unsigned long 
 20380 ;; Registers used:
 20381 ;;		wreg, status,2, status,0
 20382 ;; Tracked objects:
 20383 ;;		On entry : 0/0
 20384 ;;		On exit  : 0/0
 20385 ;;		Unchanged: 0/0
 20386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20387 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20390 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20391 ;;Total ram usage:       10 bytes
 20392 ;; Hardware stack levels used:    1
 20393 ;; Hardware stack levels required when called:    6
 20394 ;; This function calls:
 20395 ;;		Nothing
 20396 ;; This function is called by:
 20397 ;;		_printf
 20398 ;; This function uses a non-reentrant model
 20399 ;;
 20400                           
 20401                           
 20402                           ;psect for function ___llmod
 20403  1946                     ___llmod:	
 20404                           
 20405                           ;incstack = 0
 20406                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 20407  1946  0020               	movlb	0	; select bank0
 20408  1947  0842               	movf	___llmod@divisor+3,w
 20409  1948  0441               	iorwf	___llmod@divisor+2,w
 20410  1949  0440               	iorwf	___llmod@divisor+1,w
 20411  194A  043F               	iorwf	___llmod@divisor,w
 20412  194B  1903               	skipnz
 20413  194C  2980               	goto	l7843
 20414  194D  01C8               	clrf	___llmod@counter
 20415  194E  0AC8               	incf	___llmod@counter,f
 20416  194F                     l7833:	
 20417  194F  1BC2               	btfsc	___llmod@divisor+3,7
 20418  1950  295D               	goto	l7835
 20419  1951  3001               	movlw	1
 20420  1952                     u7255:	
 20421  1952  35BF               	lslf	___llmod@divisor,f
 20422  1953  0DC0               	rlf	___llmod@divisor+1,f
 20423  1954  0DC1               	rlf	___llmod@divisor+2,f
 20424  1955  0DC2               	rlf	___llmod@divisor+3,f
 20425  1956  0B89               	decfsz	9,f
 20426  1957  2952               	goto	u7255
 20427  1958  3001               	movlw	1
 20428  1959  00C7               	movwf	??___llmod
 20429  195A  0847               	movf	??___llmod,w
 20430  195B  07C8               	addwf	___llmod@counter,f
 20431  195C  294F               	goto	l7833
 20432  195D                     l7835:	
 20433  195D  0842               	movf	___llmod@divisor+3,w
 20434  195E  0246               	subwf	___llmod@dividend+3,w
 20435  195F  1D03               	skipz
 20436  1960  296B               	goto	u7275
 20437  1961  0841               	movf	___llmod@divisor+2,w
 20438  1962  0245               	subwf	___llmod@dividend+2,w
 20439  1963  1D03               	skipz
 20440  1964  296B               	goto	u7275
 20441  1965  0840               	movf	___llmod@divisor+1,w
 20442  1966  0244               	subwf	___llmod@dividend+1,w
 20443  1967  1D03               	skipz
 20444  1968  296B               	goto	u7275
 20445  1969  083F               	movf	___llmod@divisor,w
 20446  196A  0243               	subwf	___llmod@dividend,w
 20447  196B                     u7275:	
 20448  196B  1C03               	skipc
 20449  196C  2975               	goto	l7839
 20450  196D  083F               	movf	___llmod@divisor,w
 20451  196E  02C3               	subwf	___llmod@dividend,f
 20452  196F  0840               	movf	___llmod@divisor+1,w
 20453  1970  3BC4               	subwfb	___llmod@dividend+1,f
 20454  1971  0841               	movf	___llmod@divisor+2,w
 20455  1972  3BC5               	subwfb	___llmod@dividend+2,f
 20456  1973  0842               	movf	___llmod@divisor+3,w
 20457  1974  3BC6               	subwfb	___llmod@dividend+3,f
 20458  1975                     l7839:	
 20459  1975  3001               	movlw	1
 20460  1976                     u7285:	
 20461  1976  36C2               	lsrf	___llmod@divisor+3,f
 20462  1977  0CC1               	rrf	___llmod@divisor+2,f
 20463  1978  0CC0               	rrf	___llmod@divisor+1,f
 20464  1979  0CBF               	rrf	___llmod@divisor,f
 20465  197A  0B89               	decfsz	9,f
 20466  197B  2976               	goto	u7285
 20467  197C  3001               	movlw	1
 20468  197D  02C8               	subwf	___llmod@counter,f
 20469  197E  1D03               	btfss	3,2
 20470  197F  295D               	goto	l7835
 20471  1980                     l7843:	
 20472  1980  0846               	movf	___llmod@dividend+3,w
 20473  1981  00C2               	movwf	?___llmod+3
 20474  1982  0845               	movf	___llmod@dividend+2,w
 20475  1983  00C1               	movwf	?___llmod+2
 20476  1984  0844               	movf	___llmod@dividend+1,w
 20477  1985  00C0               	movwf	?___llmod+1
 20478  1986  0843               	movf	___llmod@dividend,w
 20479  1987  00BF               	movwf	?___llmod
 20480  1988  0008               	return
 20481  1989                     __end_of___llmod:	
 20482                           
 20483                           	psect	text73
 20484  1D63                     __ptext73:	
 20485 ;; *************** function ___lldiv *****************
 20486 ;; Defined at:
 20487 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 20488 ;; Parameters:    Size  Location     Type
 20489 ;;  divisor         4   17[BANK0 ] unsigned long 
 20490 ;;  dividend        4   21[BANK0 ] unsigned long 
 20491 ;; Auto vars:     Size  Location     Type
 20492 ;;  quotient        4   26[BANK0 ] unsigned long 
 20493 ;;  counter         1   30[BANK0 ] unsigned char 
 20494 ;; Return value:  Size  Location     Type
 20495 ;;                  4   17[BANK0 ] unsigned long 
 20496 ;; Registers used:
 20497 ;;		wreg, status,2, status,0
 20498 ;; Tracked objects:
 20499 ;;		On entry : 0/0
 20500 ;;		On exit  : 0/0
 20501 ;;		Unchanged: 0/0
 20502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20503 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20504 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20505 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20506 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20507 ;;Total ram usage:       14 bytes
 20508 ;; Hardware stack levels used:    1
 20509 ;; Hardware stack levels required when called:    6
 20510 ;; This function calls:
 20511 ;;		Nothing
 20512 ;; This function is called by:
 20513 ;;		_printf
 20514 ;; This function uses a non-reentrant model
 20515 ;;
 20516                           
 20517                           
 20518                           ;psect for function ___lldiv
 20519  1D63                     ___lldiv:	
 20520                           
 20521                           ;incstack = 0
 20522                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 20523  1D63  3000               	movlw	0
 20524  1D64  0020               	movlb	0	; select bank0
 20525  1D65  00BD               	movwf	___lldiv@quotient+3
 20526  1D66  3000               	movlw	0
 20527  1D67  00BC               	movwf	___lldiv@quotient+2
 20528  1D68  3000               	movlw	0
 20529  1D69  00BB               	movwf	___lldiv@quotient+1
 20530  1D6A  3000               	movlw	0
 20531  1D6B  00BA               	movwf	___lldiv@quotient
 20532  1D6C  0834               	movf	___lldiv@divisor+3,w
 20533  1D6D  0433               	iorwf	___lldiv@divisor+2,w
 20534  1D6E  0432               	iorwf	___lldiv@divisor+1,w
 20535  1D6F  0431               	iorwf	___lldiv@divisor,w
 20536  1D70  1903               	skipnz
 20537  1D71  2DAD               	goto	l7823
 20538  1D72  01BE               	clrf	___lldiv@counter
 20539  1D73  0ABE               	incf	___lldiv@counter,f
 20540  1D74                     l7809:	
 20541  1D74  1BB4               	btfsc	___lldiv@divisor+3,7
 20542  1D75  2D82               	goto	l7811
 20543  1D76  3001               	movlw	1
 20544  1D77                     u7185:	
 20545  1D77  35B1               	lslf	___lldiv@divisor,f
 20546  1D78  0DB2               	rlf	___lldiv@divisor+1,f
 20547  1D79  0DB3               	rlf	___lldiv@divisor+2,f
 20548  1D7A  0DB4               	rlf	___lldiv@divisor+3,f
 20549  1D7B  0B89               	decfsz	9,f
 20550  1D7C  2D77               	goto	u7185
 20551  1D7D  3001               	movlw	1
 20552  1D7E  00B9               	movwf	??___lldiv
 20553  1D7F  0839               	movf	??___lldiv,w
 20554  1D80  07BE               	addwf	___lldiv@counter,f
 20555  1D81  2D74               	goto	l7809
 20556  1D82                     l7811:	
 20557  1D82  3001               	movlw	1
 20558  1D83                     u7205:	
 20559  1D83  35BA               	lslf	___lldiv@quotient,f
 20560  1D84  0DBB               	rlf	___lldiv@quotient+1,f
 20561  1D85  0DBC               	rlf	___lldiv@quotient+2,f
 20562  1D86  0DBD               	rlf	___lldiv@quotient+3,f
 20563  1D87  0B89               	decfsz	9,f
 20564  1D88  2D83               	goto	u7205
 20565  1D89  0834               	movf	___lldiv@divisor+3,w
 20566  1D8A  0238               	subwf	___lldiv@dividend+3,w
 20567  1D8B  1D03               	skipz
 20568  1D8C  2D97               	goto	u7215
 20569  1D8D  0833               	movf	___lldiv@divisor+2,w
 20570  1D8E  0237               	subwf	___lldiv@dividend+2,w
 20571  1D8F  1D03               	skipz
 20572  1D90  2D97               	goto	u7215
 20573  1D91  0832               	movf	___lldiv@divisor+1,w
 20574  1D92  0236               	subwf	___lldiv@dividend+1,w
 20575  1D93  1D03               	skipz
 20576  1D94  2D97               	goto	u7215
 20577  1D95  0831               	movf	___lldiv@divisor,w
 20578  1D96  0235               	subwf	___lldiv@dividend,w
 20579  1D97                     u7215:	
 20580  1D97  1C03               	skipc
 20581  1D98  2DA2               	goto	l7819
 20582  1D99  0831               	movf	___lldiv@divisor,w
 20583  1D9A  02B5               	subwf	___lldiv@dividend,f
 20584  1D9B  0832               	movf	___lldiv@divisor+1,w
 20585  1D9C  3BB6               	subwfb	___lldiv@dividend+1,f
 20586  1D9D  0833               	movf	___lldiv@divisor+2,w
 20587  1D9E  3BB7               	subwfb	___lldiv@dividend+2,f
 20588  1D9F  0834               	movf	___lldiv@divisor+3,w
 20589  1DA0  3BB8               	subwfb	___lldiv@dividend+3,f
 20590  1DA1  143A               	bsf	___lldiv@quotient,0
 20591  1DA2                     l7819:	
 20592  1DA2  3001               	movlw	1
 20593  1DA3                     u7225:	
 20594  1DA3  36B4               	lsrf	___lldiv@divisor+3,f
 20595  1DA4  0CB3               	rrf	___lldiv@divisor+2,f
 20596  1DA5  0CB2               	rrf	___lldiv@divisor+1,f
 20597  1DA6  0CB1               	rrf	___lldiv@divisor,f
 20598  1DA7  0B89               	decfsz	9,f
 20599  1DA8  2DA3               	goto	u7225
 20600  1DA9  3001               	movlw	1
 20601  1DAA  02BE               	subwf	___lldiv@counter,f
 20602  1DAB  1D03               	btfss	3,2
 20603  1DAC  2D82               	goto	l7811
 20604  1DAD                     l7823:	
 20605  1DAD  083D               	movf	___lldiv@quotient+3,w
 20606  1DAE  00B4               	movwf	?___lldiv+3
 20607  1DAF  083C               	movf	___lldiv@quotient+2,w
 20608  1DB0  00B3               	movwf	?___lldiv+2
 20609  1DB1  083B               	movf	___lldiv@quotient+1,w
 20610  1DB2  00B2               	movwf	?___lldiv+1
 20611  1DB3  083A               	movf	___lldiv@quotient,w
 20612  1DB4  00B1               	movwf	?___lldiv
 20613  1DB5  0008               	return
 20614  1DB6                     __end_of___lldiv:	
 20615                           
 20616                           	psect	text74
 20617  21E6                     __ptext74:	
 20618 ;; *************** function _i2c_setBuffer *****************
 20619 ;; Defined at:
 20620 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 20621 ;; Parameters:    Size  Location     Type
 20622 ;;  buffer          2   17[BANK0 ] PTR void 
 20623 ;;		 -> drv_read@reg(1), drv_read@buff(1), drv_fifo_downstroke(40), drv_fifo_upstroke(40), 
 20624 ;;		 -> drv_write@buff(2), 
 20625 ;;  bufferSize      2   19[BANK0 ] unsigned int 
 20626 ;; Auto vars:     Size  Location     Type
 20627 ;;		None
 20628 ;; Return value:  Size  Location     Type
 20629 ;;                  1    wreg      void 
 20630 ;; Registers used:
 20631 ;;		wreg
 20632 ;; Tracked objects:
 20633 ;;		On entry : 0/0
 20634 ;;		On exit  : 0/0
 20635 ;;		Unchanged: 0/0
 20636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20637 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20640 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20641 ;;Total ram usage:        4 bytes
 20642 ;; Hardware stack levels used:    1
 20643 ;; Hardware stack levels required when called:    6
 20644 ;; This function calls:
 20645 ;;		Nothing
 20646 ;; This function is called by:
 20647 ;;		_drv_write
 20648 ;;		_drv_write_wvfrm
 20649 ;;		_drv_read
 20650 ;; This function uses a non-reentrant model
 20651 ;;
 20652                           
 20653                           
 20654                           ;psect for function _i2c_setBuffer
 20655  21E6                     _i2c_setBuffer:	
 20656                           
 20657                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 20658                           
 20659                           ;incstack = 0
 20660                           ; Regs used in _i2c_setBuffer: [wreg]
 20661  21E6  0022               	movlb	2	; select bank2
 20662  21E7  1D20               	btfss	_i2c_status^(0+256),2
 20663  21E8  0008               	return
 20664                           
 20665                           ;i2c_master.c: 187: {
 20666                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 20667  21E9  0020               	movlb	0	; select bank0
 20668  21EA  0832               	movf	i2c_setBuffer@buffer+1,w
 20669  21EB  0022               	movlb	2	; select bank2
 20670  21EC  00A3               	movwf	((low ((_i2c_status| (0+256)+2))+1))^0
 20671  21ED  0020               	movlb	0	; select bank0
 20672  21EE  0831               	movf	i2c_setBuffer@buffer,w
 20673  21EF  0022               	movlb	2	; select bank2
 20674  21F0  00A2               	movwf	(low ((_i2c_status| (0+256)+2)))^0
 20675                           
 20676                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 20677  21F1  0020               	movlb	0	; select bank0
 20678  21F2  0834               	movf	i2c_setBuffer@bufferSize+1,w
 20679  21F3  0022               	movlb	2	; select bank2
 20680  21F4  00A5               	movwf	((_i2c_status+1)^(0+256)+4)
 20681  21F5  0020               	movlb	0	; select bank0
 20682  21F6  0833               	movf	i2c_setBuffer@bufferSize,w
 20683  21F7  0022               	movlb	2	; select bank2
 20684  21F8  00A4               	movwf	(_i2c_status^(0+256)+4)
 20685                           
 20686                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 20687  21F9  1120               	bcf	_i2c_status^(0+256),2
 20688  21FA  0008               	return
 20689  21FB                     __end_of_i2c_setBuffer:	
 20690                           
 20691                           	psect	text75
 20692  2484                     __ptext75:	
 20693 ;; *************** function _i2c_masterOperation *****************
 20694 ;; Defined at:
 20695 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
 20696 ;; Parameters:    Size  Location     Type
 20697 ;;  read            1    wreg     unsigned char 
 20698 ;; Auto vars:     Size  Location     Type
 20699 ;;  read            1   24[BANK0 ] unsigned char 
 20700 ;;  ret             1   25[BANK0 ] enum E8193
 20701 ;; Return value:  Size  Location     Type
 20702 ;;                  1    wreg      enum E8193
 20703 ;; Registers used:
 20704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20705 ;; Tracked objects:
 20706 ;;		On entry : 0/0
 20707 ;;		On exit  : 0/0
 20708 ;;		Unchanged: 0/0
 20709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20711 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20712 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20713 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20714 ;;Total ram usage:        3 bytes
 20715 ;; Hardware stack levels used:    1
 20716 ;; Hardware stack levels required when called:   11
 20717 ;; This function calls:
 20718 ;;		_i2c1_driver_start
 20719 ;;		_i2c_poller
 20720 ;;		_mssp1_IRQisEnabled
 20721 ;; This function is called by:
 20722 ;;		_drv_write
 20723 ;;		_drv_write_wvfrm
 20724 ;;		_drv_read
 20725 ;;		_i2c_masterRead
 20726 ;;		_i2c_masterWrite
 20727 ;; This function uses a non-reentrant model
 20728 ;;
 20729                           
 20730                           
 20731                           ;psect for function _i2c_masterOperation
 20732  2484                     _i2c_masterOperation:	
 20733                           
 20734                           ;incstack = 0
 20735                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20736                           ;i2c_masterOperation@read stored from wreg
 20737  2484  0020               	movlb	0	; select bank0
 20738  2485  00B8               	movwf	i2c_masterOperation@read
 20739                           
 20740                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
 20741  2486  01B9               	clrf	i2c_masterOperation@ret
 20742  2487  0AB9               	incf	i2c_masterOperation@ret,f
 20743                           
 20744                           ;i2c_master.c: 196: if(!i2c_status.busy)
 20745  2488  0022               	movlb	2	; select bank2
 20746  2489  1820               	btfsc	_i2c_status^(0+256),0
 20747  248A  2CA5               	goto	l8083
 20748                           
 20749                           ;i2c_master.c: 197: {
 20750                           ;i2c_master.c: 198: i2c_status.busy = 1;
 20751  248B  1420               	bsf	_i2c_status^(0+256),0
 20752                           
 20753                           ;i2c_master.c: 199: ret = I2C_NOERR;
 20754  248C  0020               	movlb	0	; select bank0
 20755  248D  01B9               	clrf	i2c_masterOperation@ret
 20756                           
 20757                           ;i2c_master.c: 201: if(read)
 20758  248E  0838               	movf	i2c_masterOperation@read,w
 20759  248F  1903               	btfsc	3,2
 20760  2490  2C95               	goto	l8077
 20761                           
 20762                           ;i2c_master.c: 202: {
 20763                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
 20764  2491  0022               	movlb	2	; select bank2
 20765  2492  01AA               	clrf	(_i2c_status^(0+256)+10)
 20766  2493  0AAA               	incf	(_i2c_status^(0+256)+10),f
 20767                           
 20768                           ;i2c_master.c: 204: }
 20769  2494  2C9B               	goto	l8079
 20770  2495                     l8077:	
 20771                           
 20772                           ;i2c_master.c: 205: else
 20773                           ;i2c_master.c: 206: {
 20774                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
 20775  2495  3002               	movlw	2
 20776  2496  0020               	movlb	0	; select bank0
 20777  2497  00B7               	movwf	??_i2c_masterOperation
 20778  2498  0837               	movf	??_i2c_masterOperation,w
 20779  2499  0022               	movlb	2	; select bank2
 20780  249A  00AA               	movwf	(_i2c_status^(0+256)+10)
 20781  249B                     l8079:	
 20782                           
 20783                           ;i2c_master.c: 208: }
 20784                           ;i2c_master.c: 209: i2c1_driver_start();
 20785  249B  31AF  274C  31A4   	fcall	_i2c1_driver_start
 20786                           
 20787                           ;i2c_master.c: 211: if(! mssp1_IRQisEnabled())
 20788  249E  31A0  20D0  31A4   	fcall	_mssp1_IRQisEnabled
 20789  24A1  1803               	btfsc	3,0
 20790  24A2  2CA5               	goto	l8083
 20791                           
 20792                           ;i2c_master.c: 212: i2c_poller();
 20793  24A3  31A1  210F         	fcall	_i2c_poller
 20794  24A5                     l8083:	
 20795                           
 20796                           ;i2c_master.c: 213: }
 20797                           ;i2c_master.c: 214: return ret;
 20798  24A5  0020               	movlb	0	; select bank0
 20799  24A6  0839               	movf	i2c_masterOperation@ret,w
 20800  24A7  0008               	return
 20801  24A8                     __end_of_i2c_masterOperation:	
 20802                           
 20803                           	psect	text76
 20804  20D0                     __ptext76:	
 20805 ;; *************** function _mssp1_IRQisEnabled *****************
 20806 ;; Defined at:
 20807 ;;		line 43 in file "mcc_generated_files/i2c1_driver.c"
 20808 ;; Parameters:    Size  Location     Type
 20809 ;;		None
 20810 ;; Auto vars:     Size  Location     Type
 20811 ;;		None
 20812 ;; Return value:  Size  Location     Type
 20813 ;;		None               void
 20814 ;; Registers used:
 20815 ;;		wreg, status,2, status,0
 20816 ;; Tracked objects:
 20817 ;;		On entry : 0/0
 20818 ;;		On exit  : 0/0
 20819 ;;		Unchanged: 0/0
 20820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20823 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20824 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20825 ;;Total ram usage:        2 bytes
 20826 ;; Hardware stack levels used:    1
 20827 ;; Hardware stack levels required when called:    6
 20828 ;; This function calls:
 20829 ;;		Nothing
 20830 ;; This function is called by:
 20831 ;;		_i2c_masterOperation
 20832 ;; This function uses a non-reentrant model
 20833 ;;
 20834                           
 20835                           
 20836                           ;psect for function _mssp1_IRQisEnabled
 20837  20D0                     _mssp1_IRQisEnabled:	
 20838                           
 20839                           ;i2c1_driver.c: 45: return PIE1bits.SSP1IE;
 20840                           
 20841                           ;incstack = 0
 20842                           ; Regs used in _mssp1_IRQisEnabled: [wreg+status,2+status,0]
 20843  20D0  0021               	movlb	1	; select bank1
 20844  20D1  0C11               	rrf	17,w	;volatile
 20845  20D2  0020               	movlb	0	; select bank0
 20846  20D3  00B1               	movwf	??_mssp1_IRQisEnabled
 20847  20D4  0CB1               	rrf	??_mssp1_IRQisEnabled,f
 20848  20D5  0C31               	rrf	??_mssp1_IRQisEnabled,w
 20849  20D6  3901               	andlw	1
 20850  20D7  00B2               	movwf	??_mssp1_IRQisEnabled+1
 20851  20D8  0C32               	rrf	??_mssp1_IRQisEnabled+1,w
 20852  20D9  0008               	return
 20853  20DA                     __end_of_mssp1_IRQisEnabled:	
 20854                           
 20855                           	psect	text77
 20856  210F                     __ptext77:	
 20857 ;; *************** function _i2c_poller *****************
 20858 ;; Defined at:
 20859 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
 20860 ;; Parameters:    Size  Location     Type
 20861 ;;		None
 20862 ;; Auto vars:     Size  Location     Type
 20863 ;;		None
 20864 ;; Return value:  Size  Location     Type
 20865 ;;                  1    wreg      void 
 20866 ;; Registers used:
 20867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20868 ;; Tracked objects:
 20869 ;;		On entry : 0/0
 20870 ;;		On exit  : 0/0
 20871 ;;		Unchanged: 0/0
 20872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20877 ;;Total ram usage:        0 bytes
 20878 ;; Hardware stack levels used:    1
 20879 ;; Hardware stack levels required when called:   10
 20880 ;; This function calls:
 20881 ;;		_i2c_ISR
 20882 ;;		_mssp1_waitForEvent
 20883 ;; This function is called by:
 20884 ;;		_i2c_masterOperation
 20885 ;; This function uses a non-reentrant model
 20886 ;;
 20887                           
 20888                           
 20889                           ;psect for function _i2c_poller
 20890  210F                     _i2c_poller:	
 20891  210F                     l7953:	
 20892                           ;i2c_master.c: 232: while(i2c_status.busy)
 20893                           
 20894                           ;incstack = 0
 20895                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20896                           
 20897  210F  0022               	movlb	2	; select bank2
 20898  2110  1C20               	btfss	_i2c_status^(0+256),0
 20899  2111  0008               	return
 20900                           
 20901                           ;i2c_master.c: 233: {
 20902                           ;i2c_master.c: 234: mssp1_waitForEvent((0));
 20903  2112  3000               	movlw	0
 20904  2113  31A1  2104  31A1   	fcall	_mssp1_waitForEvent
 20905                           
 20906                           ;i2c_master.c: 235: i2c_ISR();
 20907  2116  31A4  24F1  31A1   	fcall	_i2c_ISR
 20908  2119  290F               	goto	l7953
 20909  211A                     __end_of_i2c_poller:	
 20910                           
 20911                           	psect	text78
 20912  2104                     __ptext78:	
 20913 ;; *************** function _mssp1_waitForEvent *****************
 20914 ;; Defined at:
 20915 ;;		line 68 in file "mcc_generated_files/i2c1_driver.c"
 20916 ;; Parameters:    Size  Location     Type
 20917 ;;  timeout         1    wreg     PTR unsigned int 
 20918 ;;		 -> NULL(0), 
 20919 ;; Auto vars:     Size  Location     Type
 20920 ;;  timeout         1   17[BANK0 ] PTR unsigned int 
 20921 ;;		 -> NULL(0), 
 20922 ;; Return value:  Size  Location     Type
 20923 ;;                  1    wreg      void 
 20924 ;; Registers used:
 20925 ;;		wreg
 20926 ;; Tracked objects:
 20927 ;;		On entry : 0/0
 20928 ;;		On exit  : 0/0
 20929 ;;		Unchanged: 0/0
 20930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20934 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20935 ;;Total ram usage:        1 bytes
 20936 ;; Hardware stack levels used:    1
 20937 ;; Hardware stack levels required when called:    6
 20938 ;; This function calls:
 20939 ;;		Nothing
 20940 ;; This function is called by:
 20941 ;;		_i2c_poller
 20942 ;; This function uses a non-reentrant model
 20943 ;;
 20944                           
 20945                           
 20946                           ;psect for function _mssp1_waitForEvent
 20947  2104                     _mssp1_waitForEvent:	
 20948                           
 20949                           ;i2c1_driver.c: 73: if(PIR1bits.SSP1IF == 0)
 20950                           
 20951                           ;incstack = 0
 20952                           ; Regs used in _mssp1_waitForEvent: [wreg]
 20953  2104  0020               	movlb	0	; select bank0
 20954  2105  1991               	btfsc	17,3	;volatile
 20955  2106  0008               	return
 20956  2107                     l529:	
 20957                           ;i2c1_driver.c: 74: {
 20958                           ;i2c1_driver.c: 75: while(1)
 20959                           
 20960                           
 20961                           ;i2c1_driver.c: 76: {
 20962                           ;i2c1_driver.c: 77: if(PIR1bits.SSP1IF) break;
 20963  2107  0020               	movlb	0	; select bank0
 20964  2108  1991               	btfsc	17,3	;volatile
 20965  2109  0008               	return
 20966                           
 20967                           ;i2c1_driver.c: 78: _delay((unsigned long)((100)*(1000000/4000000.0)));
 20968  210A  3008               	movlw	8
 20969  210B                     u10257:	
 20970  210B  0B89               	decfsz	9,f
 20971  210C  290B               	goto	u10257
 20972  210D  0000               	nop
 20973  210E  2907               	goto	l529
 20974  210F                     __end_of_mssp1_waitForEvent:	
 20975                           
 20976                           	psect	text79
 20977  24F1                     __ptext79:	
 20978 ;; *************** function _i2c_ISR *****************
 20979 ;; Defined at:
 20980 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 20981 ;; Parameters:    Size  Location     Type
 20982 ;;		None
 20983 ;; Auto vars:     Size  Location     Type
 20984 ;;		None
 20985 ;; Return value:  Size  Location     Type
 20986 ;;                  1    wreg      void 
 20987 ;; Registers used:
 20988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20989 ;; Tracked objects:
 20990 ;;		On entry : 0/0
 20991 ;;		On exit  : 0/0
 20992 ;;		Unchanged: 0/0
 20993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20997 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20998 ;;Total ram usage:        1 bytes
 20999 ;; Hardware stack levels used:    1
 21000 ;; Hardware stack levels required when called:    9
 21001 ;; This function calls:
 21002 ;;		_do_I2C_DO_ACK
 21003 ;;		_do_I2C_DO_ADDRESS_NACK
 21004 ;;		_do_I2C_DO_NACK_RESTART
 21005 ;;		_do_I2C_DO_NACK_STOP
 21006 ;;		_do_I2C_IDLE
 21007 ;;		_do_I2C_RCEN
 21008 ;;		_do_I2C_RESET
 21009 ;;		_do_I2C_RX
 21010 ;;		_do_I2C_SEND_ADR_READ
 21011 ;;		_do_I2C_SEND_ADR_WRITE
 21012 ;;		_do_I2C_SEND_RESTART
 21013 ;;		_do_I2C_SEND_RESTART_READ
 21014 ;;		_do_I2C_SEND_RESTART_WRITE
 21015 ;;		_do_I2C_SEND_STOP
 21016 ;;		_do_I2C_TX
 21017 ;;		_do_I2C_TX_EMPTY
 21018 ;;		_i2c1_driver_isNACK
 21019 ;;		_mssp1_clearIRQ
 21020 ;; This function is called by:
 21021 ;;		_i2c_open
 21022 ;;		_i2c_poller
 21023 ;;		_INTERRUPT_InterruptManager
 21024 ;; This function uses a non-reentrant model
 21025 ;;
 21026                           
 21027                           
 21028                           ;psect for function _i2c_ISR
 21029  24F1                     _i2c_ISR:	
 21030                           
 21031                           ;Skip over the trampoline to the duplicate function for level 1
 21032  24F1  1C7E               	btfss	126,0
 21033  24F2  2CF5               	goto	l7761
 21034  24F3  31A3  2B79         	ljmp	i1l9461
 21035  24F5                     _i2c_ISR$intlevel0:	
 21036  24F5                     l7761:	
 21037                           ;incstack = 0
 21038                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21039                           
 21040                           
 21041                           ;i2c_master.c: 421: mssp1_clearIRQ();
 21042  24F5  31AF  275E  31A4   	fcall	_mssp1_clearIRQ
 21043                           
 21044                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
 21045  24F8  0022               	movlb	2	; select bank2
 21046  24F9  1DA0               	btfss	_i2c_status^(0+256),3
 21047  24FA  2D06               	goto	l7769
 21048  24FB  31A1  2171  31A4   	fcall	_i2c1_driver_isNACK
 21049  24FE  1C03               	btfss	3,0
 21050  24FF  2D06               	goto	l7769
 21051                           
 21052                           ;i2c_master.c: 428: {
 21053                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
 21054  2500  300F               	movlw	15
 21055  2501  0020               	movlb	0	; select bank0
 21056  2502  00B6               	movwf	??_i2c_ISR
 21057  2503  0836               	movf	??_i2c_ISR,w
 21058  2504  0022               	movlb	2	; select bank2
 21059  2505  00AA               	movwf	(_i2c_status^(0+256)+10)
 21060  2506                     l7769:	
 21061                           
 21062                           ;i2c_master.c: 430: }
 21063                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
 21064  2506  0022               	movlb	2	; select bank2
 21065  2507  352A               	lslf	(_i2c_status^(0+256)+10),w
 21066  2508  3E48               	addlw	(low (_fsmStateTable| (0+512)))& (0+255)
 21067  2509  0086               	movwf	6
 21068  250A  3002               	movlw	2	; select bank4/5
 21069  250B  0087               	movwf	7
 21070  250C  3F41               	moviw [1]fsr1
 21071  250D  008A               	movwf	10
 21072  250E  3F40               	moviw [0]fsr1
 21073  250F  000A               	callw
 21074  2510  31A4               	pagesel	$
 21075  2511  0020               	movlb	0	; select bank0
 21076  2512  00B6               	movwf	??_i2c_ISR
 21077  2513  0836               	movf	??_i2c_ISR,w
 21078  2514  0022               	movlb	2	; select bank2
 21079  2515  00AA               	movwf	(_i2c_status^(0+256)+10)
 21080  2516  0008               	return
 21081  2517                     __end_of_i2c_ISR:	
 21082                           
 21083                           	psect	text80
 21084  2F5E                     __ptext80:	
 21085 ;; *************** function _mssp1_clearIRQ *****************
 21086 ;; Defined at:
 21087 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 21088 ;; Parameters:    Size  Location     Type
 21089 ;;		None
 21090 ;; Auto vars:     Size  Location     Type
 21091 ;;		None
 21092 ;; Return value:  Size  Location     Type
 21093 ;;                  1    wreg      void 
 21094 ;; Registers used:
 21095 ;;		None
 21096 ;; Tracked objects:
 21097 ;;		On entry : 0/0
 21098 ;;		On exit  : 0/0
 21099 ;;		Unchanged: 0/0
 21100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21105 ;;Total ram usage:        0 bytes
 21106 ;; Hardware stack levels used:    1
 21107 ;; Hardware stack levels required when called:    6
 21108 ;; This function calls:
 21109 ;;		Nothing
 21110 ;; This function is called by:
 21111 ;;		_i2c_open
 21112 ;;		_i2c_ISR
 21113 ;;		_i2c_close
 21114 ;; This function uses a non-reentrant model
 21115 ;;
 21116                           
 21117                           
 21118                           ;psect for function _mssp1_clearIRQ
 21119  2F5E                     _mssp1_clearIRQ:	
 21120                           
 21121                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
 21122                           
 21123                           ;incstack = 0
 21124                           ; Regs used in _mssp1_clearIRQ: []
 21125  2F5E  0020               	movlb	0	; select bank0
 21126  2F5F  1191               	bcf	17,3	;volatile
 21127  2F60  0008               	return
 21128  2F61                     __end_of_mssp1_clearIRQ:	
 21129                           
 21130                           	psect	text81
 21131  1A13                     __ptext81:	
 21132 ;; *************** function _do_I2C_RX *****************
 21133 ;; Defined at:
 21134 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 21135 ;; Parameters:    Size  Location     Type
 21136 ;;		None
 21137 ;; Auto vars:     Size  Location     Type
 21138 ;;		None
 21139 ;; Return value:  Size  Location     Type
 21140 ;;                  1    wreg      enum E8364
 21141 ;; Registers used:
 21142 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21143 ;; Tracked objects:
 21144 ;;		On entry : 0/0
 21145 ;;		On exit  : 0/0
 21146 ;;		Unchanged: 0/0
 21147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21151 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21152 ;;Total ram usage:        1 bytes
 21153 ;; Hardware stack levels used:    1
 21154 ;; Hardware stack levels required when called:    8
 21155 ;; This function calls:
 21156 ;;		_do_I2C_DO_NACK_RESTART
 21157 ;;		_do_I2C_DO_NACK_STOP
 21158 ;;		_i2c1_driver_getRXData
 21159 ;;		_i2c1_driver_sendACK
 21160 ;;		_returnReset
 21161 ;;		_returnStop
 21162 ;; This function is called by:
 21163 ;;		_i2c_ISR
 21164 ;;		i1_i2c_ISR
 21165 ;; This function uses a non-reentrant model
 21166 ;;
 21167                           
 21168                           
 21169                           ;psect for function _do_I2C_RX
 21170  1A13                     _do_I2C_RX:	
 21171                           
 21172                           ;Skip over the trampoline to the duplicate function for level 1
 21173  1A13  1C7E               	btfss	126,0
 21174  1A14  2A17               	goto	l7707
 21175  1A15  3199  2906         	ljmp	i1l9091
 21176  1A17                     _do_I2C_RX$intlevel0:	
 21177  1A17                     l7707:	
 21178                           ;incstack = 0
 21179                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21180                           
 21181                           
 21182                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
 21183  1A17  31AF  2758  319A   	fcall	_i2c1_driver_getRXData
 21184  1A1A  0020               	movlb	0	; select bank0
 21185  1A1B  00B1               	movwf	??_do_I2C_RX
 21186  1A1C  0022               	movlb	2	; select bank2
 21187  1A1D  0822               	movf	(low ((_i2c_status| (0+256)+2)))^0,w
 21188  1A1E  0086               	movwf	6
 21189  1A1F  0823               	movf	((low ((_i2c_status| (0+256)+2))+1))^0,w
 21190  1A20  0087               	movwf	7
 21191  1A21  0020               	movlb	0	; select bank0
 21192  1A22  0831               	movf	??_do_I2C_RX,w
 21193  1A23  0081               	movwf	1
 21194  1A24  3001               	movlw	1
 21195  1A25  0022               	movlb	2	; select bank2
 21196  1A26  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^0,f
 21197  1A27  3000               	movlw	0
 21198  1A28  3DA3               	addwfc	((low ((_i2c_status| (0+256)+2))+1))^0,f
 21199                           
 21200                           ;i2c_master.c: 360: if(--i2c_status.data_length)
 21201  1A29  3001               	movlw	1
 21202  1A2A  02A4               	subwf	(_i2c_status^(0+256)+4),f
 21203  1A2B  3000               	movlw	0
 21204  1A2C  3BA5               	subwfb	((_i2c_status+1)^(0+256)+4),f
 21205  1A2D  0824               	movf	(_i2c_status^(0+256)+4),w
 21206  1A2E  0425               	iorwf	((_i2c_status+1)^(0+256)+4),w
 21207  1A2F  1903               	btfsc	3,2
 21208  1A30  2A35               	goto	l790
 21209                           
 21210                           ;i2c_master.c: 361: {
 21211                           ;i2c_master.c: 362: i2c1_driver_sendACK();
 21212  1A31  31AF  2789         	fcall	_i2c1_driver_sendACK
 21213                           
 21214                           ;i2c_master.c: 363: return I2C_RCEN;
 21215  1A33  3005               	movlw	5
 21216                           
 21217                           ;i2c_master.c: 364: }
 21218  1A34  0008               	return
 21219  1A35                     l790:	
 21220                           
 21221                           ;i2c_master.c: 365: else
 21222                           ;i2c_master.c: 366: {
 21223                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
 21224  1A35  1520               	bsf	_i2c_status^(0+256),2
 21225                           
 21226                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 21227  1A36  2A3D               	goto	l7731
 21228  1A37                     l7721:	
 21229                           ;i2c_master.c: 369: {
 21230                           ;i2c_master.c: 370: case i2c_restart_write:
 21231                           
 21232                           
 21233                           ;i2c_master.c: 371: case i2c_restart_read:
 21234                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
 21235  1A37  31A0  205A         	fcall	_do_I2C_DO_NACK_RESTART
 21236  1A39  0008               	return
 21237  1A3A                     l7725:	
 21238                           ;i2c_master.c: 374: case i2c_continue:
 21239                           
 21240                           ;i2c_master.c: 373: default:
 21241                           
 21242                           
 21243                           ;i2c_master.c: 375: case i2c_stop:
 21244                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
 21245  1A3A  31A0  2052         	fcall	_do_I2C_DO_NACK_STOP
 21246                           
 21247                           ;i2c_master.c: 377: }
 21248  1A3C  0008               	return
 21249  1A3D                     l7731:	
 21250  1A3D  0022               	movlb	2	; select bank2
 21251  1A3E  0838               	movf	(low ((_i2c_status| (0+256)+24)))^0,w
 21252  1A3F  0020               	movlb	0	; select bank0
 21253  1A40  00B1               	movwf	??_do_I2C_RX
 21254  1A41  0831               	movf	??_do_I2C_RX,w
 21255  1A42  00B1               	movwf	returnReset@p
 21256  1A43  300C               	movlw	12
 21257  1A44  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 21258  1A45  0086               	movwf	6
 21259  1A46  3001               	movlw	1	; select bank2/3
 21260  1A47  0087               	movwf	7
 21261  1A48  3F41               	moviw [1]fsr1
 21262  1A49  008A               	movwf	10
 21263  1A4A  3F40               	moviw [0]fsr1
 21264  1A4B  000A               	callw
 21265  1A4C  319A               	pagesel	$
 21266                           
 21267                           ; Switch size 1, requested type "space"
 21268                           ; Number of cases is 4, Range of values is 1 to 4
 21269                           ; switch strategies available:
 21270                           ; Name         Instructions Cycles
 21271                           ; simple_byte           13     7 (average)
 21272                           ; direct_byte           17     9 (fixed)
 21273                           ; jumptable            263     9 (fixed)
 21274                           ;	Chosen strategy is simple_byte
 21275  1A4D  3A01               	xorlw	1	; case 1
 21276  1A4E  1903               	skipnz
 21277  1A4F  2A3A               	goto	l7725
 21278  1A50  3A03               	xorlw	3	; case 2
 21279  1A51  1903               	skipnz
 21280  1A52  2A37               	goto	l7721
 21281  1A53  3A01               	xorlw	1	; case 3
 21282  1A54  1903               	skipnz
 21283  1A55  2A37               	goto	l7721
 21284  1A56  3A07               	xorlw	7	; case 4
 21285  1A57  1903               	skipnz
 21286  1A58  2A3A               	goto	l7725
 21287  1A59  2A3A               	goto	l7725
 21288  1A5A  0008               	return
 21289  1A5B                     __end_of_do_I2C_RX:	
 21290                           
 21291                           	psect	text82
 21292  1E0E                     __ptext82:	
 21293 ;; *************** function _do_I2C_TX *****************
 21294 ;; Defined at:
 21295 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 21296 ;; Parameters:    Size  Location     Type
 21297 ;;		None
 21298 ;; Auto vars:     Size  Location     Type
 21299 ;;		None
 21300 ;; Return value:  Size  Location     Type
 21301 ;;                  1    wreg      enum E8364
 21302 ;; Registers used:
 21303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21304 ;; Tracked objects:
 21305 ;;		On entry : 0/0
 21306 ;;		On exit  : 0/0
 21307 ;;		Unchanged: 0/0
 21308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21310 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21311 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21312 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21313 ;;Total ram usage:        4 bytes
 21314 ;; Hardware stack levels used:    1
 21315 ;; Hardware stack levels required when called:    8
 21316 ;; This function calls:
 21317 ;;		_do_I2C_SEND_RESTART_READ
 21318 ;;		_do_I2C_SEND_RESTART_WRITE
 21319 ;;		_do_I2C_SEND_STOP
 21320 ;;		_i2c1_driver_TXData
 21321 ;;		_i2c1_driver_isNACK
 21322 ;;		_returnReset
 21323 ;;		_returnStop
 21324 ;; This function is called by:
 21325 ;;		_i2c_ISR
 21326 ;;		i1_i2c_ISR
 21327 ;; This function uses a non-reentrant model
 21328 ;;
 21329                           
 21330                           
 21331                           ;psect for function _do_I2C_TX
 21332  1E0E                     _do_I2C_TX:	
 21333                           
 21334                           ;Skip over the trampoline to the duplicate function for level 1
 21335  1E0E  1C7E               	btfss	126,0
 21336  1E0F  2E12               	goto	l7677
 21337  1E10  319B  2BD5         	ljmp	i1l9061
 21338  1E12                     _do_I2C_TX$intlevel0:	
 21339  1E12                     l7677:	
 21340                           ;incstack = 0
 21341                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21342                           
 21343                           
 21344                           ;i2c_master.c: 335: if(i2c1_driver_isNACK())
 21345  1E12  31A1  2171  319E   	fcall	_i2c1_driver_isNACK
 21346  1E15  1803               	btfsc	3,0
 21347  1E16  2E21               	goto	l7695
 21348  1E17  2E3F               	goto	l774
 21349  1E18                     l7681:	
 21350                           ;i2c_master.c: 338: {
 21351                           ;i2c_master.c: 339: case i2c_restart_read:
 21352                           
 21353                           ;i2c_master.c: 336: {
 21354                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
 21355                           
 21356                           
 21357                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
 21358  1E18  31AF  27F8         	fcall	_do_I2C_SEND_RESTART_READ
 21359  1E1A  0008               	return
 21360  1E1B                     l7685:	
 21361                           ;i2c_master.c: 341: case i2c_restart_write:
 21362                           
 21363                           
 21364                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
 21365  1E1B  31A0  2032         	fcall	_do_I2C_SEND_RESTART_WRITE
 21366  1E1D  0008               	return
 21367  1E1E                     l7689:	
 21368                           ;i2c_master.c: 344: case i2c_continue:
 21369                           
 21370                           ;i2c_master.c: 343: default:
 21371                           
 21372                           
 21373                           ;i2c_master.c: 345: case i2c_stop:
 21374                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
 21375  1E1E  31A0  2042         	fcall	_do_I2C_SEND_STOP
 21376                           
 21377                           ;i2c_master.c: 347: }
 21378  1E20  0008               	return
 21379  1E21                     l7695:	
 21380  1E21  0022               	movlb	2	; select bank2
 21381  1E22  083B               	movf	(low ((_i2c_status| (0+256)+27)))^0,w
 21382  1E23  0020               	movlb	0	; select bank0
 21383  1E24  00B2               	movwf	??_do_I2C_TX
 21384  1E25  0832               	movf	??_do_I2C_TX,w
 21385  1E26  00B1               	movwf	returnReset@p
 21386  1E27  3012               	movlw	18
 21387  1E28  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 21388  1E29  0086               	movwf	6
 21389  1E2A  3001               	movlw	1	; select bank2/3
 21390  1E2B  0087               	movwf	7
 21391  1E2C  3F41               	moviw [1]fsr1
 21392  1E2D  008A               	movwf	10
 21393  1E2E  3F40               	moviw [0]fsr1
 21394  1E2F  000A               	callw
 21395  1E30  319E               	pagesel	$
 21396                           
 21397                           ; Switch size 1, requested type "space"
 21398                           ; Number of cases is 4, Range of values is 1 to 4
 21399                           ; switch strategies available:
 21400                           ; Name         Instructions Cycles
 21401                           ; simple_byte           13     7 (average)
 21402                           ; direct_byte           17     9 (fixed)
 21403                           ; jumptable            263     9 (fixed)
 21404                           ;	Chosen strategy is simple_byte
 21405  1E31  3A01               	xorlw	1	; case 1
 21406  1E32  1903               	skipnz
 21407  1E33  2E1E               	goto	l7689
 21408  1E34  3A03               	xorlw	3	; case 2
 21409  1E35  1903               	skipnz
 21410  1E36  2E18               	goto	l7681
 21411  1E37  3A01               	xorlw	1	; case 3
 21412  1E38  1903               	skipnz
 21413  1E39  2E1B               	goto	l7685
 21414  1E3A  3A07               	xorlw	7	; case 4
 21415  1E3B  1903               	skipnz
 21416  1E3C  2E1E               	goto	l7689
 21417  1E3D  2E1E               	goto	l7689
 21418                           
 21419                           ;i2c_master.c: 348: }
 21420  1E3E  0008               	return
 21421  1E3F                     l774:	
 21422                           
 21423                           ;i2c_master.c: 349: else
 21424                           ;i2c_master.c: 350: {
 21425                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
 21426  1E3F  0022               	movlb	2	; select bank2
 21427  1E40  11A0               	bcf	_i2c_status^(0+256),3
 21428                           
 21429                           ;i2c_master.c: 352: i2c1_driver_TXData(*i2c_status.data_ptr++);
 21430  1E41  0823               	movf	((low ((_i2c_status| (0+256)+2))+1))^0,w
 21431  1E42  0020               	movlb	0	; select bank0
 21432  1E43  00B3               	movwf	??_do_I2C_TX+1
 21433  1E44  0022               	movlb	2	; select bank2
 21434  1E45  0822               	movf	(low ((_i2c_status| (0+256)+2)))^0,w
 21435  1E46  0020               	movlb	0	; select bank0
 21436  1E47  00B2               	movwf	??_do_I2C_TX
 21437  1E48  0022               	movlb	2	; select bank2
 21438  1E49  0AA2               	incf	(low ((_i2c_status| (0+256)+2)))^0,f
 21439  1E4A  1903               	skipnz
 21440  1E4B  0AA3               	incf	((low ((_i2c_status| (0+256)+2))+1))^0,f
 21441  1E4C  0020               	movlb	0	; select bank0
 21442  1E4D  0832               	movf	??_do_I2C_TX,w
 21443  1E4E  0086               	movwf	6
 21444  1E4F  0833               	movf	??_do_I2C_TX+1,w
 21445  1E50  0087               	movwf	7
 21446  1E51  0801               	movf	1,w
 21447  1E52  31AF  27CE  319E   	fcall	_i2c1_driver_TXData
 21448                           
 21449                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
 21450  1E55  3001               	movlw	1
 21451  1E56  0022               	movlb	2	; select bank2
 21452  1E57  02A4               	subwf	(_i2c_status^(0+256)+4),f
 21453  1E58  3000               	movlw	0
 21454  1E59  3BA5               	subwfb	((_i2c_status+1)^(0+256)+4),f
 21455  1E5A  0824               	movf	(_i2c_status^(0+256)+4),w
 21456  1E5B  0425               	iorwf	((_i2c_status+1)^(0+256)+4),w
 21457  1E5C  1D03               	btfss	3,2
 21458  1E5D  2E60               	goto	l7703
 21459  1E5E  3006               	movlw	6
 21460  1E5F  2E61               	goto	L43
 21461  1E60                     l7703:	
 21462  1E60  3003               	movlw	3
 21463  1E61                     L43:	
 21464  1E61  0020               	movlb	0	; select bank0
 21465  1E62  00B4               	movwf	_do_I2C_TX$1204
 21466  1E63  3000               	movlw	0
 21467  1E64  00B5               	movwf	_do_I2C_TX$1204+1
 21468  1E65  0834               	movf	_do_I2C_TX$1204,w
 21469  1E66  0008               	return
 21470  1E67                     __end_of_do_I2C_TX:	
 21471                           
 21472                           	psect	text83
 21473  0800                     __ptext83:	
 21474 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 21475 ;; Defined at:
 21476 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 21477 ;; Parameters:    Size  Location     Type
 21478 ;;		None
 21479 ;; Auto vars:     Size  Location     Type
 21480 ;;		None
 21481 ;; Return value:  Size  Location     Type
 21482 ;;                  1    wreg      enum E8364
 21483 ;; Registers used:
 21484 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21485 ;; Tracked objects:
 21486 ;;		On entry : 0/0
 21487 ;;		On exit  : 0/0
 21488 ;;		Unchanged: 0/0
 21489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21492 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21493 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21494 ;;Total ram usage:        1 bytes
 21495 ;; Hardware stack levels used:    1
 21496 ;; Hardware stack levels required when called:    8
 21497 ;; This function calls:
 21498 ;;		_do_I2C_SEND_RESTART
 21499 ;;		_do_I2C_SEND_STOP
 21500 ;;		_returnReset
 21501 ;;		_returnStop
 21502 ;; This function is called by:
 21503 ;;		_i2c_ISR
 21504 ;;		i1_i2c_ISR
 21505 ;; This function uses a non-reentrant model
 21506 ;;
 21507                           
 21508                           
 21509                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 21510  0800                     _do_I2C_DO_ADDRESS_NACK:	
 21511                           
 21512                           ;Skip over the trampoline to the duplicate function for level 1
 21513  0800  1C7E               	btfss	126,0
 21514  0801  2804               	goto	l7661
 21515  0802  31A4  2C60         	ljmp	i1l9045
 21516  0804                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
 21517  0804                     l7661:	
 21518                           ;incstack = 0
 21519                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21520                           
 21521                           
 21522                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
 21523  0804  0022               	movlb	2	; select bank2
 21524  0805  11A0               	bcf	_i2c_status^(0+256),3
 21525                           
 21526                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
 21527  0806  3002               	movlw	2
 21528  0807  0020               	movlb	0	; select bank0
 21529  0808  00B1               	movwf	??_do_I2C_DO_ADDRESS_NACK
 21530  0809  0831               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 21531  080A  0022               	movlb	2	; select bank2
 21532  080B  00AB               	movwf	(_i2c_status^(0+256)+11)
 21533                           
 21534                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
 21535  080C  2813               	goto	l7675
 21536  080D                     l7665:	
 21537                           ;i2c_master.c: 324: {
 21538                           ;i2c_master.c: 325: case i2c_restart_read:
 21539                           
 21540                           
 21541                           ;i2c_master.c: 326: case i2c_restart_write:
 21542                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
 21543  080D  31A0  203A         	fcall	_do_I2C_SEND_RESTART
 21544  080F  0008               	return
 21545  0810                     l7669:	
 21546                           ;i2c_master.c: 328: default:
 21547                           
 21548                           
 21549                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
 21550  0810  31A0  2042         	fcall	_do_I2C_SEND_STOP
 21551                           
 21552                           ;i2c_master.c: 330: }
 21553  0812  0008               	return
 21554  0813                     l7675:	
 21555  0813  0022               	movlb	2	; select bank2
 21556  0814  083A               	movf	(low ((_i2c_status| (0+256)+26)))^0,w
 21557  0815  0020               	movlb	0	; select bank0
 21558  0816  00B1               	movwf	??_do_I2C_DO_ADDRESS_NACK
 21559  0817  0831               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 21560  0818  00B1               	movwf	returnReset@p
 21561  0819  3010               	movlw	16
 21562  081A  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 21563  081B  0086               	movwf	6
 21564  081C  3001               	movlw	1	; select bank2/3
 21565  081D  0087               	movwf	7
 21566  081E  3F41               	moviw [1]fsr1
 21567  081F  008A               	movwf	10
 21568  0820  3F40               	moviw [0]fsr1
 21569  0821  000A               	callw
 21570  0822  3188               	pagesel	$
 21571                           
 21572                           ; Switch size 1, requested type "space"
 21573                           ; Number of cases is 2, Range of values is 2 to 3
 21574                           ; switch strategies available:
 21575                           ; Name         Instructions Cycles
 21576                           ; simple_byte            7     4 (average)
 21577                           ; direct_byte           13     9 (fixed)
 21578                           ; jumptable            263     9 (fixed)
 21579                           ;	Chosen strategy is simple_byte
 21580  0823  3A02               	xorlw	2	; case 2
 21581  0824  1903               	skipnz
 21582  0825  280D               	goto	l7665
 21583  0826  3A01               	xorlw	1	; case 3
 21584  0827  1903               	skipnz
 21585  0828  280D               	goto	l7665
 21586  0829  2810               	goto	l7669
 21587  082A  0008               	return
 21588  082B                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 21589                           
 21590                           	psect	text84
 21591  205A                     __ptext84:	
 21592 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 21593 ;; Defined at:
 21594 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 21595 ;; Parameters:    Size  Location     Type
 21596 ;;		None
 21597 ;; Auto vars:     Size  Location     Type
 21598 ;;		None
 21599 ;; Return value:  Size  Location     Type
 21600 ;;                  1    wreg      enum E8364
 21601 ;; Registers used:
 21602 ;;		wreg, status,2, status,0, pclath, cstack
 21603 ;; Tracked objects:
 21604 ;;		On entry : 0/0
 21605 ;;		On exit  : 0/0
 21606 ;;		Unchanged: 0/0
 21607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21612 ;;Total ram usage:        0 bytes
 21613 ;; Hardware stack levels used:    1
 21614 ;; Hardware stack levels required when called:    7
 21615 ;; This function calls:
 21616 ;;		_i2c1_driver_sendNACK
 21617 ;; This function is called by:
 21618 ;;		_do_I2C_RX
 21619 ;;		_i2c_ISR
 21620 ;;		i1_i2c_ISR
 21621 ;; This function uses a non-reentrant model
 21622 ;;
 21623                           
 21624                           
 21625                           ;psect for function _do_I2C_DO_NACK_RESTART
 21626  205A                     _do_I2C_DO_NACK_RESTART:	
 21627                           
 21628                           ;Skip over the trampoline to the duplicate function for level 1
 21629  205A  1C7E               	btfss	126,0
 21630  205B  285E               	goto	l7579
 21631  205C  31AF  2F81         	ljmp	i1l8583
 21632  205E                     _do_I2C_DO_NACK_RESTART$intlevel0:	
 21633  205E                     l7579:	
 21634                           ;incstack = 0
 21635                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 21636                           
 21637                           
 21638                           ;i2c_master.c: 313: i2c1_driver_sendNACK();
 21639  205E  31AF  278D         	fcall	_i2c1_driver_sendNACK
 21640                           
 21641                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
 21642  2060  3009               	movlw	9
 21643  2061  0008               	return
 21644  2062                     __end_of_do_I2C_DO_NACK_RESTART:	
 21645                           
 21646                           	psect	text85
 21647  2052                     __ptext85:	
 21648 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 21649 ;; Defined at:
 21650 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 21651 ;; Parameters:    Size  Location     Type
 21652 ;;		None
 21653 ;; Auto vars:     Size  Location     Type
 21654 ;;		None
 21655 ;; Return value:  Size  Location     Type
 21656 ;;                  1    wreg      enum E8364
 21657 ;; Registers used:
 21658 ;;		wreg, status,2, status,0, pclath, cstack
 21659 ;; Tracked objects:
 21660 ;;		On entry : 0/0
 21661 ;;		On exit  : 0/0
 21662 ;;		Unchanged: 0/0
 21663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21668 ;;Total ram usage:        0 bytes
 21669 ;; Hardware stack levels used:    1
 21670 ;; Hardware stack levels required when called:    7
 21671 ;; This function calls:
 21672 ;;		_i2c1_driver_sendNACK
 21673 ;; This function is called by:
 21674 ;;		_do_I2C_RX
 21675 ;;		_i2c_ISR
 21676 ;;		i1_i2c_ISR
 21677 ;; This function uses a non-reentrant model
 21678 ;;
 21679                           
 21680                           
 21681                           ;psect for function _do_I2C_DO_NACK_STOP
 21682  2052                     _do_I2C_DO_NACK_STOP:	
 21683                           
 21684                           ;Skip over the trampoline to the duplicate function for level 1
 21685  2052  1C7E               	btfss	126,0
 21686  2053  2856               	goto	l7573
 21687  2054  31AF  2F7D         	ljmp	i1l8577
 21688  2056                     _do_I2C_DO_NACK_STOP$intlevel0:	
 21689  2056                     l7573:	
 21690                           ;incstack = 0
 21691                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 21692                           
 21693                           
 21694                           ;i2c_master.c: 307: i2c1_driver_sendNACK();
 21695  2056  31AF  278D         	fcall	_i2c1_driver_sendNACK
 21696                           
 21697                           ;i2c_master.c: 308: return I2C_SEND_STOP;
 21698  2058  300A               	movlw	10
 21699  2059  0008               	return
 21700  205A                     __end_of_do_I2C_DO_NACK_STOP:	
 21701                           
 21702                           	psect	text86
 21703  204A                     __ptext86:	
 21704 ;; *************** function _do_I2C_DO_ACK *****************
 21705 ;; Defined at:
 21706 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 21707 ;; Parameters:    Size  Location     Type
 21708 ;;		None
 21709 ;; Auto vars:     Size  Location     Type
 21710 ;;		None
 21711 ;; Return value:  Size  Location     Type
 21712 ;;                  1    wreg      enum E8364
 21713 ;; Registers used:
 21714 ;;		wreg, status,2, status,0, pclath, cstack
 21715 ;; Tracked objects:
 21716 ;;		On entry : 0/0
 21717 ;;		On exit  : 0/0
 21718 ;;		Unchanged: 0/0
 21719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21724 ;;Total ram usage:        0 bytes
 21725 ;; Hardware stack levels used:    1
 21726 ;; Hardware stack levels required when called:    7
 21727 ;; This function calls:
 21728 ;;		_i2c1_driver_sendACK
 21729 ;; This function is called by:
 21730 ;;		_i2c_ISR
 21731 ;;		i1_i2c_ISR
 21732 ;; This function uses a non-reentrant model
 21733 ;;
 21734                           
 21735                           
 21736                           ;psect for function _do_I2C_DO_ACK
 21737  204A                     _do_I2C_DO_ACK:	
 21738                           
 21739                           ;Skip over the trampoline to the duplicate function for level 1
 21740  204A  1C7E               	btfss	126,0
 21741  204B  284E               	goto	l7655
 21742  204C  31AF  2F79         	ljmp	i1l9039
 21743  204E                     _do_I2C_DO_ACK$intlevel0:	
 21744  204E                     l7655:	
 21745                           ;incstack = 0
 21746                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 21747                           
 21748                           
 21749                           ;i2c_master.c: 301: i2c1_driver_sendACK();
 21750  204E  31AF  2789         	fcall	_i2c1_driver_sendACK
 21751                           
 21752                           ;i2c_master.c: 302: return I2C_RCEN;
 21753  2050  3005               	movlw	5
 21754  2051  0008               	return
 21755  2052                     __end_of_do_I2C_DO_ACK:	
 21756                           
 21757                           	psect	text87
 21758  20C6                     __ptext87:	
 21759 ;; *************** function _do_I2C_RCEN *****************
 21760 ;; Defined at:
 21761 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 21762 ;; Parameters:    Size  Location     Type
 21763 ;;		None
 21764 ;; Auto vars:     Size  Location     Type
 21765 ;;		None
 21766 ;; Return value:  Size  Location     Type
 21767 ;;                  1    wreg      enum E8364
 21768 ;; Registers used:
 21769 ;;		wreg, status,2, status,0, pclath, cstack
 21770 ;; Tracked objects:
 21771 ;;		On entry : 0/0
 21772 ;;		On exit  : 0/0
 21773 ;;		Unchanged: 0/0
 21774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21779 ;;Total ram usage:        0 bytes
 21780 ;; Hardware stack levels used:    1
 21781 ;; Hardware stack levels required when called:    7
 21782 ;; This function calls:
 21783 ;;		_i2c1_driver_startRX
 21784 ;; This function is called by:
 21785 ;;		_i2c_ISR
 21786 ;;		i1_i2c_ISR
 21787 ;; This function uses a non-reentrant model
 21788 ;;
 21789                           
 21790                           
 21791                           ;psect for function _do_I2C_RCEN
 21792  20C6                     _do_I2C_RCEN:	
 21793                           
 21794                           ;Skip over the trampoline to the duplicate function for level 1
 21795  20C6  1C7E               	btfss	126,0
 21796  20C7  28CA               	goto	l7647
 21797  20C8  31AF  2FBC         	ljmp	i1l6803
 21798  20CA                     _do_I2C_RCEN$intlevel0:	
 21799  20CA                     l7647:	
 21800                           ;incstack = 0
 21801                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 21802                           
 21803                           
 21804                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
 21805  20CA  0022               	movlb	2	; select bank2
 21806  20CB  11A0               	bcf	_i2c_status^(0+256),3
 21807                           
 21808                           ;i2c_master.c: 295: i2c1_driver_startRX();
 21809  20CC  31AF  2755         	fcall	_i2c1_driver_startRX
 21810                           
 21811                           ;i2c_master.c: 296: return I2C_RX;
 21812  20CE  3004               	movlw	4
 21813  20CF  0008               	return
 21814  20D0                     __end_of_do_I2C_RCEN:	
 21815                           
 21816                           	psect	text88
 21817  20F9                     __ptext88:	
 21818 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 21819 ;; Defined at:
 21820 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 21821 ;; Parameters:    Size  Location     Type
 21822 ;;		None
 21823 ;; Auto vars:     Size  Location     Type
 21824 ;;		None
 21825 ;; Return value:  Size  Location     Type
 21826 ;;                  1    wreg      enum E8364
 21827 ;; Registers used:
 21828 ;;		wreg, status,2, status,0, pclath, cstack
 21829 ;; Tracked objects:
 21830 ;;		On entry : 0/0
 21831 ;;		On exit  : 0/0
 21832 ;;		Unchanged: 0/0
 21833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21838 ;;Total ram usage:        0 bytes
 21839 ;; Hardware stack levels used:    1
 21840 ;; Hardware stack levels required when called:    7
 21841 ;; This function calls:
 21842 ;;		_i2c1_driver_TXData
 21843 ;; This function is called by:
 21844 ;;		_i2c_ISR
 21845 ;;		i1_i2c_ISR
 21846 ;; This function uses a non-reentrant model
 21847 ;;
 21848                           
 21849                           
 21850                           ;psect for function _do_I2C_SEND_ADR_WRITE
 21851  20F9                     _do_I2C_SEND_ADR_WRITE:	
 21852                           
 21853                           ;Skip over the trampoline to the duplicate function for level 1
 21854  20F9  1C7E               	btfss	126,0
 21855  20FA  28FD               	goto	l7639
 21856  20FB  31AF  2FE1         	ljmp	i1l9031
 21857  20FD                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
 21858  20FD                     l7639:	
 21859                           ;incstack = 0
 21860                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 21861                           
 21862                           
 21863                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
 21864  20FD  0022               	movlb	2	; select bank2
 21865  20FE  15A0               	bsf	_i2c_status^(0+256),3
 21866                           
 21867                           ;i2c_master.c: 288: i2c1_driver_TXData(i2c_status.address << 1);
 21868  20FF  3521               	lslf	(_i2c_status^(0+256)+1),w
 21869  2100  31AF  27CE         	fcall	_i2c1_driver_TXData
 21870                           
 21871                           ;i2c_master.c: 289: return I2C_TX;
 21872  2102  3003               	movlw	3
 21873  2103  0008               	return
 21874  2104                     __end_of_do_I2C_SEND_ADR_WRITE:	
 21875                           
 21876                           	psect	text89
 21877  2126                     __ptext89:	
 21878 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 21879 ;; Defined at:
 21880 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 21881 ;; Parameters:    Size  Location     Type
 21882 ;;		None
 21883 ;; Auto vars:     Size  Location     Type
 21884 ;;		None
 21885 ;; Return value:  Size  Location     Type
 21886 ;;                  1    wreg      enum E8364
 21887 ;; Registers used:
 21888 ;;		wreg, status,2, status,0, pclath, cstack
 21889 ;; Tracked objects:
 21890 ;;		On entry : 0/0
 21891 ;;		On exit  : 0/0
 21892 ;;		Unchanged: 0/0
 21893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21898 ;;Total ram usage:        0 bytes
 21899 ;; Hardware stack levels used:    1
 21900 ;; Hardware stack levels required when called:    7
 21901 ;; This function calls:
 21902 ;;		_i2c1_driver_TXData
 21903 ;; This function is called by:
 21904 ;;		_i2c_ISR
 21905 ;;		i1_i2c_ISR
 21906 ;; This function uses a non-reentrant model
 21907 ;;
 21908                           
 21909                           
 21910                           ;psect for function _do_I2C_SEND_ADR_READ
 21911  2126                     _do_I2C_SEND_ADR_READ:	
 21912                           
 21913                           ;Skip over the trampoline to the duplicate function for level 1
 21914  2126  1C7E               	btfss	126,0
 21915  2127  292A               	goto	l7631
 21916  2128  31AF  2FE8         	ljmp	i1l9023
 21917  212A                     _do_I2C_SEND_ADR_READ$intlevel0:	
 21918  212A                     l7631:	
 21919                           ;incstack = 0
 21920                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 21921                           
 21922                           
 21923                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
 21924  212A  0022               	movlb	2	; select bank2
 21925  212B  15A0               	bsf	_i2c_status^(0+256),3
 21926                           
 21927                           ;i2c_master.c: 281: i2c1_driver_TXData(i2c_status.address << 1 | 1);
 21928  212C  1403               	setc
 21929  212D  0D21               	rlf	(_i2c_status^(0+256)+1),w
 21930  212E  31AF  27CE         	fcall	_i2c1_driver_TXData
 21931                           
 21932                           ;i2c_master.c: 282: return I2C_RCEN;
 21933  2130  3005               	movlw	5
 21934  2131  0008               	return
 21935  2132                     __end_of_do_I2C_SEND_ADR_READ:	
 21936                           
 21937                           	psect	text90
 21938  2042                     __ptext90:	
 21939 ;; *************** function _do_I2C_SEND_STOP *****************
 21940 ;; Defined at:
 21941 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 21942 ;; Parameters:    Size  Location     Type
 21943 ;;		None
 21944 ;; Auto vars:     Size  Location     Type
 21945 ;;		None
 21946 ;; Return value:  Size  Location     Type
 21947 ;;                  1    wreg      enum E8364
 21948 ;; Registers used:
 21949 ;;		wreg, status,2, status,0, pclath, cstack
 21950 ;; Tracked objects:
 21951 ;;		On entry : 0/0
 21952 ;;		On exit  : 0/0
 21953 ;;		Unchanged: 0/0
 21954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21959 ;;Total ram usage:        0 bytes
 21960 ;; Hardware stack levels used:    1
 21961 ;; Hardware stack levels required when called:    7
 21962 ;; This function calls:
 21963 ;;		_i2c1_driver_stop
 21964 ;; This function is called by:
 21965 ;;		_do_I2C_DO_ADDRESS_NACK
 21966 ;;		_do_I2C_TX
 21967 ;;		_do_I2C_TX_EMPTY
 21968 ;;		_i2c_ISR
 21969 ;;		i1_i2c_ISR
 21970 ;; This function uses a non-reentrant model
 21971 ;;
 21972                           
 21973                           
 21974                           ;psect for function _do_I2C_SEND_STOP
 21975  2042                     _do_I2C_SEND_STOP:	
 21976                           
 21977                           ;Skip over the trampoline to the duplicate function for level 1
 21978  2042  1C7E               	btfss	126,0
 21979  2043  2846               	goto	l7567
 21980  2044  31AF  2F75         	ljmp	i1l8571
 21981  2046                     _do_I2C_SEND_STOP$intlevel0:	
 21982  2046                     l7567:	
 21983                           ;incstack = 0
 21984                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 21985                           
 21986                           
 21987                           ;i2c_master.c: 274: i2c1_driver_stop();
 21988  2046  31AF  2752         	fcall	_i2c1_driver_stop
 21989                           
 21990                           ;i2c_master.c: 275: return I2C_IDLE;
 21991  2048  3000               	movlw	0
 21992  2049  0008               	return
 21993  204A                     __end_of_do_I2C_SEND_STOP:	
 21994                           
 21995                           	psect	text91
 21996  203A                     __ptext91:	
 21997 ;; *************** function _do_I2C_SEND_RESTART *****************
 21998 ;; Defined at:
 21999 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 22000 ;; Parameters:    Size  Location     Type
 22001 ;;		None
 22002 ;; Auto vars:     Size  Location     Type
 22003 ;;		None
 22004 ;; Return value:  Size  Location     Type
 22005 ;;                  1    wreg      enum E8364
 22006 ;; Registers used:
 22007 ;;		wreg, status,2, status,0, pclath, cstack
 22008 ;; Tracked objects:
 22009 ;;		On entry : 0/0
 22010 ;;		On exit  : 0/0
 22011 ;;		Unchanged: 0/0
 22012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22017 ;;Total ram usage:        0 bytes
 22018 ;; Hardware stack levels used:    1
 22019 ;; Hardware stack levels required when called:    7
 22020 ;; This function calls:
 22021 ;;		_i2c1_driver_restart
 22022 ;; This function is called by:
 22023 ;;		_do_I2C_DO_ADDRESS_NACK
 22024 ;;		_do_I2C_TX_EMPTY
 22025 ;;		_i2c_ISR
 22026 ;;		i1_i2c_ISR
 22027 ;; This function uses a non-reentrant model
 22028 ;;
 22029                           
 22030                           
 22031                           ;psect for function _do_I2C_SEND_RESTART
 22032  203A                     _do_I2C_SEND_RESTART:	
 22033                           
 22034                           ;Skip over the trampoline to the duplicate function for level 1
 22035  203A  1C7E               	btfss	126,0
 22036  203B  283E               	goto	l7561
 22037  203C  31AF  2F71         	ljmp	i1l8565
 22038  203E                     _do_I2C_SEND_RESTART$intlevel0:	
 22039  203E                     l7561:	
 22040                           ;incstack = 0
 22041                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 22042                           
 22043                           
 22044                           ;i2c_master.c: 268: i2c1_driver_restart();
 22045  203E  31AF  274F         	fcall	_i2c1_driver_restart
 22046                           
 22047                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
 22048  2040  3001               	movlw	1
 22049  2041  0008               	return
 22050  2042                     __end_of_do_I2C_SEND_RESTART:	
 22051                           
 22052                           	psect	text92
 22053  2032                     __ptext92:	
 22054 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 22055 ;; Defined at:
 22056 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 22057 ;; Parameters:    Size  Location     Type
 22058 ;;		None
 22059 ;; Auto vars:     Size  Location     Type
 22060 ;;		None
 22061 ;; Return value:  Size  Location     Type
 22062 ;;                  1    wreg      enum E8364
 22063 ;; Registers used:
 22064 ;;		wreg, status,2, status,0, pclath, cstack
 22065 ;; Tracked objects:
 22066 ;;		On entry : 0/0
 22067 ;;		On exit  : 0/0
 22068 ;;		Unchanged: 0/0
 22069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22074 ;;Total ram usage:        0 bytes
 22075 ;; Hardware stack levels used:    1
 22076 ;; Hardware stack levels required when called:    7
 22077 ;; This function calls:
 22078 ;;		_i2c1_driver_restart
 22079 ;; This function is called by:
 22080 ;;		_do_I2C_TX
 22081 ;;		_i2c_ISR
 22082 ;;		i1_i2c_ISR
 22083 ;; This function uses a non-reentrant model
 22084 ;;
 22085                           
 22086                           
 22087                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 22088  2032                     _do_I2C_SEND_RESTART_WRITE:	
 22089                           
 22090                           ;Skip over the trampoline to the duplicate function for level 1
 22091  2032  1C7E               	btfss	126,0
 22092  2033  2836               	goto	l7555
 22093  2034  31AF  2F6D         	ljmp	i1l8559
 22094  2036                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
 22095  2036                     l7555:	
 22096                           ;incstack = 0
 22097                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 22098                           
 22099                           
 22100                           ;i2c_master.c: 262: i2c1_driver_restart();
 22101  2036  31AF  274F         	fcall	_i2c1_driver_restart
 22102                           
 22103                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
 22104  2038  3002               	movlw	2
 22105  2039  0008               	return
 22106  203A                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 22107                           
 22108                           	psect	text93
 22109  2FF8                     __ptext93:	
 22110 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 22111 ;; Defined at:
 22112 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 22113 ;; Parameters:    Size  Location     Type
 22114 ;;		None
 22115 ;; Auto vars:     Size  Location     Type
 22116 ;;		None
 22117 ;; Return value:  Size  Location     Type
 22118 ;;                  1    wreg      enum E8364
 22119 ;; Registers used:
 22120 ;;		wreg, status,2, status,0, pclath, cstack
 22121 ;; Tracked objects:
 22122 ;;		On entry : 0/0
 22123 ;;		On exit  : 0/0
 22124 ;;		Unchanged: 0/0
 22125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22130 ;;Total ram usage:        0 bytes
 22131 ;; Hardware stack levels used:    1
 22132 ;; Hardware stack levels required when called:    7
 22133 ;; This function calls:
 22134 ;;		_i2c1_driver_restart
 22135 ;; This function is called by:
 22136 ;;		_do_I2C_TX
 22137 ;;		_i2c_ISR
 22138 ;;		i1_i2c_ISR
 22139 ;; This function uses a non-reentrant model
 22140 ;;
 22141                           
 22142                           
 22143                           ;psect for function _do_I2C_SEND_RESTART_READ
 22144  2FF8                     _do_I2C_SEND_RESTART_READ:	
 22145                           
 22146                           ;Skip over the trampoline to the duplicate function for level 1
 22147  2FF8  1C7E               	btfss	126,0
 22148  2FF9  2FFC               	goto	l7549
 22149  2FFA  31AF  2F69         	ljmp	i1l8553
 22150  2FFC                     _do_I2C_SEND_RESTART_READ$intlevel0:	
 22151  2FFC                     l7549:	
 22152                           ;incstack = 0
 22153                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 22154                           
 22155                           
 22156                           ;i2c_master.c: 256: i2c1_driver_restart();
 22157  2FFC  31AF  274F         	fcall	_i2c1_driver_restart
 22158                           
 22159                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
 22160  2FFE  3001               	movlw	1
 22161  2FFF  0008               	return
 22162  3000                     __end_of_do_I2C_SEND_RESTART_READ:	
 22163                           
 22164                           	psect	text94
 22165  208E                     __ptext94:	
 22166 ;; *************** function _do_I2C_IDLE *****************
 22167 ;; Defined at:
 22168 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 22169 ;; Parameters:    Size  Location     Type
 22170 ;;		None
 22171 ;; Auto vars:     Size  Location     Type
 22172 ;;		None
 22173 ;; Return value:  Size  Location     Type
 22174 ;;                  1    wreg      enum E8364
 22175 ;; Registers used:
 22176 ;;		wreg, status,2
 22177 ;; Tracked objects:
 22178 ;;		On entry : 0/0
 22179 ;;		On exit  : 0/0
 22180 ;;		Unchanged: 0/0
 22181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22186 ;;Total ram usage:        0 bytes
 22187 ;; Hardware stack levels used:    1
 22188 ;; Hardware stack levels required when called:    6
 22189 ;; This function calls:
 22190 ;;		Nothing
 22191 ;; This function is called by:
 22192 ;;		_i2c_ISR
 22193 ;;		i1_i2c_ISR
 22194 ;; This function uses a non-reentrant model
 22195 ;;
 22196                           
 22197                           
 22198                           ;psect for function _do_I2C_IDLE
 22199  208E                     _do_I2C_IDLE:	
 22200                           
 22201                           ;Skip over the trampoline to the duplicate function for level 1
 22202  208E  1C7E               	btfss	126,0
 22203  208F  2892               	goto	l7623
 22204  2090  31AF  2FAD         	ljmp	i1l6779
 22205  2092                     _do_I2C_IDLE$intlevel0:	
 22206  2092                     l7623:	
 22207                           ;incstack = 0
 22208                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 22209                           
 22210                           
 22211                           ;i2c_master.c: 249: i2c_status.busy = 0;
 22212  2092  0022               	movlb	2	; select bank2
 22213  2093  1020               	bcf	_i2c_status^(0+256),0
 22214                           
 22215                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 22216  2094  01AB               	clrf	(_i2c_status^(0+256)+11)
 22217                           
 22218                           ;i2c_master.c: 251: return I2C_RESET;
 22219  2095  300E               	movlw	14
 22220  2096  0008               	return
 22221  2097                     __end_of_do_I2C_IDLE:	
 22222                           
 22223                           	psect	text95
 22224  20EE                     __ptext95:	
 22225 ;; *************** function _do_I2C_RESET *****************
 22226 ;; Defined at:
 22227 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 22228 ;; Parameters:    Size  Location     Type
 22229 ;;		None
 22230 ;; Auto vars:     Size  Location     Type
 22231 ;;		None
 22232 ;; Return value:  Size  Location     Type
 22233 ;;                  1    wreg      enum E8364
 22234 ;; Registers used:
 22235 ;;		wreg, status,2, status,0, pclath, cstack
 22236 ;; Tracked objects:
 22237 ;;		On entry : 0/0
 22238 ;;		On exit  : 0/0
 22239 ;;		Unchanged: 0/0
 22240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22245 ;;Total ram usage:        0 bytes
 22246 ;; Hardware stack levels used:    1
 22247 ;; Hardware stack levels required when called:    7
 22248 ;; This function calls:
 22249 ;;		_i2c1_driver_resetBus
 22250 ;; This function is called by:
 22251 ;;		_i2c_ISR
 22252 ;;		i1_i2c_ISR
 22253 ;; This function uses a non-reentrant model
 22254 ;;
 22255                           
 22256                           
 22257                           ;psect for function _do_I2C_RESET
 22258  20EE                     _do_I2C_RESET:	
 22259                           
 22260                           ;Skip over the trampoline to the duplicate function for level 1
 22261  20EE  1C7E               	btfss	126,0
 22262  20EF  28F2               	goto	l7613
 22263  20F0  31AF  2FDA         	ljmp	i1l6769
 22264  20F2                     _do_I2C_RESET$intlevel0:	
 22265  20F2                     l7613:	
 22266                           ;incstack = 0
 22267                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 22268                           
 22269                           
 22270                           ;i2c_master.c: 241: i2c1_driver_resetBus();
 22271  20F2  31AF  271F         	fcall	_i2c1_driver_resetBus
 22272                           
 22273                           ;i2c_master.c: 242: i2c_status.busy = 0;
 22274  20F4  0022               	movlb	2	; select bank2
 22275  20F5  1020               	bcf	_i2c_status^(0+256),0
 22276                           
 22277                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 22278  20F6  01AB               	clrf	(_i2c_status^(0+256)+11)
 22279                           
 22280                           ;i2c_master.c: 244: return I2C_RESET;
 22281  20F7  300E               	movlw	14
 22282  20F8  0008               	return
 22283  20F9                     __end_of_do_I2C_RESET:	
 22284                           
 22285                           	psect	text96
 22286  25BA                     __ptext96:	
 22287 ;; *************** function _do_I2C_TX_EMPTY *****************
 22288 ;; Defined at:
 22289 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 22290 ;; Parameters:    Size  Location     Type
 22291 ;;		None
 22292 ;; Auto vars:     Size  Location     Type
 22293 ;;		None
 22294 ;; Return value:  Size  Location     Type
 22295 ;;                  1    wreg      enum E8364
 22296 ;; Registers used:
 22297 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22298 ;; Tracked objects:
 22299 ;;		On entry : 0/0
 22300 ;;		On exit  : 0/0
 22301 ;;		Unchanged: 0/0
 22302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22306 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22307 ;;Total ram usage:        1 bytes
 22308 ;; Hardware stack levels used:    1
 22309 ;; Hardware stack levels required when called:    8
 22310 ;; This function calls:
 22311 ;;		_do_I2C_SEND_RESTART
 22312 ;;		_do_I2C_SEND_STOP
 22313 ;;		_mssp1_setIRQ
 22314 ;;		_returnReset
 22315 ;;		_returnStop
 22316 ;; This function is called by:
 22317 ;;		_i2c_ISR
 22318 ;;		i1_i2c_ISR
 22319 ;; This function uses a non-reentrant model
 22320 ;;
 22321                           
 22322                           
 22323                           ;psect for function _do_I2C_TX_EMPTY
 22324  25BA                     _do_I2C_TX_EMPTY:	
 22325                           
 22326                           ;Skip over the trampoline to the duplicate function for level 1
 22327  25BA  1C7E               	btfss	126,0
 22328  25BB  2DBE               	goto	l7733
 22329  25BC  31A5  2D90         	ljmp	i1l9117
 22330  25BE                     _do_I2C_TX_EMPTY$intlevel0:	
 22331  25BE                     l7733:	
 22332                           ;incstack = 0
 22333                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22334                           
 22335                           
 22336                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 22337  25BE  0022               	movlb	2	; select bank2
 22338  25BF  1520               	bsf	_i2c_status^(0+256),2
 22339                           
 22340                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 22341  25C0  2DCB               	goto	l7751
 22342  25C1                     l7735:	
 22343                           ;i2c_master.c: 386: {
 22344                           ;i2c_master.c: 387: case i2c_restart_read:
 22345                           
 22346                           
 22347                           ;i2c_master.c: 388: case i2c_restart_write:
 22348                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 22349  25C1  31A0  203A         	fcall	_do_I2C_SEND_RESTART
 22350  25C3  0008               	return
 22351  25C4                     l7739:	
 22352                           ;i2c_master.c: 390: case i2c_continue:
 22353                           
 22354                           
 22355                           ;i2c_master.c: 391: mssp1_setIRQ();
 22356  25C4  31AF  275B         	fcall	_mssp1_setIRQ
 22357                           
 22358                           ;i2c_master.c: 392: return I2C_TX;
 22359  25C6  3003               	movlw	3
 22360  25C7  0008               	return
 22361  25C8                     l7745:	
 22362                           ;i2c_master.c: 394: case i2c_stop:
 22363                           
 22364                           ;i2c_master.c: 393: default:
 22365                           
 22366                           
 22367                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 22368  25C8  31A0  2042         	fcall	_do_I2C_SEND_STOP
 22369                           
 22370                           ;i2c_master.c: 396: }
 22371  25CA  0008               	return
 22372  25CB                     l7751:	
 22373  25CB  0022               	movlb	2	; select bank2
 22374  25CC  0838               	movf	(low ((_i2c_status| (0+256)+24)))^0,w
 22375  25CD  0020               	movlb	0	; select bank0
 22376  25CE  00B1               	movwf	??_do_I2C_TX_EMPTY
 22377  25CF  0831               	movf	??_do_I2C_TX_EMPTY,w
 22378  25D0  00B1               	movwf	returnReset@p
 22379  25D1  300C               	movlw	12
 22380  25D2  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 22381  25D3  0086               	movwf	6
 22382  25D4  3001               	movlw	1	; select bank2/3
 22383  25D5  0087               	movwf	7
 22384  25D6  3F41               	moviw [1]fsr1
 22385  25D7  008A               	movwf	10
 22386  25D8  3F40               	moviw [0]fsr1
 22387  25D9  000A               	callw
 22388  25DA  31A5               	pagesel	$
 22389                           
 22390                           ; Switch size 1, requested type "space"
 22391                           ; Number of cases is 4, Range of values is 1 to 4
 22392                           ; switch strategies available:
 22393                           ; Name         Instructions Cycles
 22394                           ; simple_byte           13     7 (average)
 22395                           ; direct_byte           17     9 (fixed)
 22396                           ; jumptable            263     9 (fixed)
 22397                           ;	Chosen strategy is simple_byte
 22398  25DB  3A01               	xorlw	1	; case 1
 22399  25DC  1903               	skipnz
 22400  25DD  2DC8               	goto	l7745
 22401  25DE  3A03               	xorlw	3	; case 2
 22402  25DF  1903               	skipnz
 22403  25E0  2DC1               	goto	l7735
 22404  25E1  3A01               	xorlw	1	; case 3
 22405  25E2  1903               	skipnz
 22406  25E3  2DC1               	goto	l7735
 22407  25E4  3A07               	xorlw	7	; case 4
 22408  25E5  1903               	skipnz
 22409  25E6  2DC4               	goto	l7739
 22410  25E7  2DC8               	goto	l7745
 22411  25E8  0008               	return
 22412  25E9                     __end_of_do_I2C_TX_EMPTY:	
 22413                           
 22414                           	psect	text97
 22415  2F5B                     __ptext97:	
 22416 ;; *************** function _mssp1_setIRQ *****************
 22417 ;; Defined at:
 22418 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 22419 ;; Parameters:    Size  Location     Type
 22420 ;;		None
 22421 ;; Auto vars:     Size  Location     Type
 22422 ;;		None
 22423 ;; Return value:  Size  Location     Type
 22424 ;;                  1    wreg      void 
 22425 ;; Registers used:
 22426 ;;		None
 22427 ;; Tracked objects:
 22428 ;;		On entry : 0/0
 22429 ;;		On exit  : 0/0
 22430 ;;		Unchanged: 0/0
 22431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22436 ;;Total ram usage:        0 bytes
 22437 ;; Hardware stack levels used:    1
 22438 ;; Hardware stack levels required when called:    6
 22439 ;; This function calls:
 22440 ;;		Nothing
 22441 ;; This function is called by:
 22442 ;;		_do_I2C_TX_EMPTY
 22443 ;; This function uses a non-reentrant model
 22444 ;;
 22445                           
 22446                           
 22447                           ;psect for function _mssp1_setIRQ
 22448  2F5B                     _mssp1_setIRQ:	
 22449                           
 22450                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
 22451                           
 22452                           ;incstack = 0
 22453                           ; Regs used in _mssp1_setIRQ: []
 22454  2F5B  0020               	movlb	0	; select bank0
 22455  2F5C  1591               	bsf	17,3	;volatile
 22456  2F5D  0008               	return
 22457  2F5E                     __end_of_mssp1_setIRQ:	
 22458                           
 22459                           	psect	text98
 22460  2171                     __ptext98:	
 22461 ;; *************** function _i2c1_driver_isNACK *****************
 22462 ;; Defined at:
 22463 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 22464 ;; Parameters:    Size  Location     Type
 22465 ;;		None
 22466 ;; Auto vars:     Size  Location     Type
 22467 ;;		None
 22468 ;; Return value:  Size  Location     Type
 22469 ;;		None               void
 22470 ;; Registers used:
 22471 ;;		wreg, status,2, status,0
 22472 ;; Tracked objects:
 22473 ;;		On entry : 0/0
 22474 ;;		On exit  : 0/0
 22475 ;;		Unchanged: 0/0
 22476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22480 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22481 ;;Total ram usage:        1 bytes
 22482 ;; Hardware stack levels used:    1
 22483 ;; Hardware stack levels required when called:    6
 22484 ;; This function calls:
 22485 ;;		Nothing
 22486 ;; This function is called by:
 22487 ;;		_do_I2C_TX
 22488 ;;		_i2c_ISR
 22489 ;; This function uses a non-reentrant model
 22490 ;;
 22491                           
 22492                           
 22493                           ;psect for function _i2c1_driver_isNACK
 22494  2171                     _i2c1_driver_isNACK:	
 22495                           
 22496                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 22497                           
 22498                           ;incstack = 0
 22499                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 22500  2171  0024               	movlb	4	; select bank4
 22501  2172  0816               	movf	22,w	;volatile
 22502  2173  39BF               	andlw	-65
 22503  2174  3840               	iorlw	64
 22504  2175  0096               	movwf	22	;volatile
 22505  2176  0E16               	swapf	22,w	;volatile
 22506  2177  0C89               	rrf	9,f
 22507  2178  0C89               	rrf	9,f
 22508  2179  3901               	andlw	1
 22509  217A  0020               	movlb	0	; select bank0
 22510  217B  00B1               	movwf	??_i2c1_driver_isNACK
 22511  217C  0C31               	rrf	??_i2c1_driver_isNACK,w
 22512  217D  0008               	return
 22513  217E                     __end_of_i2c1_driver_isNACK:	
 22514                           
 22515                           	psect	text99
 22516  2FCE                     __ptext99:	
 22517 ;; *************** function _i2c1_driver_TXData *****************
 22518 ;; Defined at:
 22519 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 22520 ;; Parameters:    Size  Location     Type
 22521 ;;  d               1    wreg     unsigned char 
 22522 ;; Auto vars:     Size  Location     Type
 22523 ;;  d               1   17[BANK0 ] unsigned char 
 22524 ;; Return value:  Size  Location     Type
 22525 ;;                  1    wreg      void 
 22526 ;; Registers used:
 22527 ;;		wreg
 22528 ;; Tracked objects:
 22529 ;;		On entry : 0/0
 22530 ;;		On exit  : 0/0
 22531 ;;		Unchanged: 0/0
 22532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22534 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22536 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22537 ;;Total ram usage:        1 bytes
 22538 ;; Hardware stack levels used:    1
 22539 ;; Hardware stack levels required when called:    6
 22540 ;; This function calls:
 22541 ;;		Nothing
 22542 ;; This function is called by:
 22543 ;;		_do_I2C_SEND_ADR_READ
 22544 ;;		_do_I2C_SEND_ADR_WRITE
 22545 ;;		_do_I2C_TX
 22546 ;; This function uses a non-reentrant model
 22547 ;;
 22548                           
 22549                           
 22550                           ;psect for function _i2c1_driver_TXData
 22551  2FCE                     _i2c1_driver_TXData:	
 22552                           
 22553                           ;incstack = 0
 22554                           ; Regs used in _i2c1_driver_TXData: [wreg]
 22555                           ;i2c1_driver_TXData@d stored from wreg
 22556  2FCE  0020               	movlb	0	; select bank0
 22557  2FCF  00B1               	movwf	i2c1_driver_TXData@d
 22558                           
 22559                           ;i2c1_driver.c: 188: SSP1BUF = d;
 22560  2FD0  0831               	movf	i2c1_driver_TXData@d,w
 22561  2FD1  0024               	movlb	4	; select bank4
 22562  2FD2  0091               	movwf	17	;volatile
 22563  2FD3  0008               	return
 22564  2FD4                     __end_of_i2c1_driver_TXData:	
 22565                           
 22566                           	psect	text100
 22567  2F58                     __ptext100:	
 22568 ;; *************** function _i2c1_driver_getRXData *****************
 22569 ;; Defined at:
 22570 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 22571 ;; Parameters:    Size  Location     Type
 22572 ;;		None
 22573 ;; Auto vars:     Size  Location     Type
 22574 ;;		None
 22575 ;; Return value:  Size  Location     Type
 22576 ;;                  1    wreg      unsigned char 
 22577 ;; Registers used:
 22578 ;;		wreg
 22579 ;; Tracked objects:
 22580 ;;		On entry : 0/0
 22581 ;;		On exit  : 0/0
 22582 ;;		Unchanged: 0/0
 22583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22588 ;;Total ram usage:        0 bytes
 22589 ;; Hardware stack levels used:    1
 22590 ;; Hardware stack levels required when called:    6
 22591 ;; This function calls:
 22592 ;;		Nothing
 22593 ;; This function is called by:
 22594 ;;		_do_I2C_RX
 22595 ;; This function uses a non-reentrant model
 22596 ;;
 22597                           
 22598                           
 22599                           ;psect for function _i2c1_driver_getRXData
 22600  2F58                     _i2c1_driver_getRXData:	
 22601                           
 22602                           ;i2c1_driver.c: 173: return SSP1BUF;
 22603                           
 22604                           ;incstack = 0
 22605                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 22606  2F58  0024               	movlb	4	; select bank4
 22607  2F59  0811               	movf	17,w	;volatile
 22608  2F5A  0008               	return
 22609  2F5B                     __end_of_i2c1_driver_getRXData:	
 22610                           
 22611                           	psect	text101
 22612  2F8D                     __ptext101:	
 22613 ;; *************** function _i2c1_driver_sendNACK *****************
 22614 ;; Defined at:
 22615 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 22616 ;; Parameters:    Size  Location     Type
 22617 ;;		None
 22618 ;; Auto vars:     Size  Location     Type
 22619 ;;		None
 22620 ;; Return value:  Size  Location     Type
 22621 ;;                  1    wreg      void 
 22622 ;; Registers used:
 22623 ;;		None
 22624 ;; Tracked objects:
 22625 ;;		On entry : 0/0
 22626 ;;		On exit  : 0/0
 22627 ;;		Unchanged: 0/0
 22628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22633 ;;Total ram usage:        0 bytes
 22634 ;; Hardware stack levels used:    1
 22635 ;; Hardware stack levels required when called:    6
 22636 ;; This function calls:
 22637 ;;		Nothing
 22638 ;; This function is called by:
 22639 ;;		_do_I2C_DO_NACK_STOP
 22640 ;;		_do_I2C_DO_NACK_RESTART
 22641 ;; This function uses a non-reentrant model
 22642 ;;
 22643                           
 22644                           
 22645                           ;psect for function _i2c1_driver_sendNACK
 22646  2F8D                     _i2c1_driver_sendNACK:	
 22647                           
 22648                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 22649                           
 22650                           ;incstack = 0
 22651                           ; Regs used in _i2c1_driver_sendNACK: []
 22652  2F8D  0024               	movlb	4	; select bank4
 22653  2F8E  1696               	bsf	22,5	;volatile
 22654                           
 22655                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 22656  2F8F  1616               	bsf	22,4	;volatile
 22657  2F90  0008               	return
 22658  2F91                     __end_of_i2c1_driver_sendNACK:	
 22659                           
 22660                           	psect	text102
 22661  2F1F                     __ptext102:	
 22662 ;; *************** function _i2c1_driver_resetBus *****************
 22663 ;; Defined at:
 22664 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 22665 ;; Parameters:    Size  Location     Type
 22666 ;;		None
 22667 ;; Auto vars:     Size  Location     Type
 22668 ;;		None
 22669 ;; Return value:  Size  Location     Type
 22670 ;;                  1    wreg      void 
 22671 ;; Registers used:
 22672 ;;		None
 22673 ;; Tracked objects:
 22674 ;;		On entry : 0/0
 22675 ;;		On exit  : 0/0
 22676 ;;		Unchanged: 0/0
 22677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22682 ;;Total ram usage:        0 bytes
 22683 ;; Hardware stack levels used:    1
 22684 ;; Hardware stack levels required when called:    6
 22685 ;; This function calls:
 22686 ;;		Nothing
 22687 ;; This function is called by:
 22688 ;;		_do_I2C_RESET
 22689 ;; This function uses a non-reentrant model
 22690 ;;
 22691                           
 22692                           
 22693                           ;psect for function _i2c1_driver_resetBus
 22694  2F1F                     _i2c1_driver_resetBus:	
 22695                           
 22696                           ;incstack = 0
 22697                           ; Regs used in _i2c1_driver_resetBus: []
 22698  2F1F  0008               	return
 22699  2F20                     __end_of_i2c1_driver_resetBus:	
 22700                           
 22701                           	psect	text103
 22702  2F55                     __ptext103:	
 22703 ;; *************** function _i2c1_driver_startRX *****************
 22704 ;; Defined at:
 22705 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 22706 ;; Parameters:    Size  Location     Type
 22707 ;;		None
 22708 ;; Auto vars:     Size  Location     Type
 22709 ;;		None
 22710 ;; Return value:  Size  Location     Type
 22711 ;;                  1    wreg      void 
 22712 ;; Registers used:
 22713 ;;		None
 22714 ;; Tracked objects:
 22715 ;;		On entry : 0/0
 22716 ;;		On exit  : 0/0
 22717 ;;		Unchanged: 0/0
 22718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22723 ;;Total ram usage:        0 bytes
 22724 ;; Hardware stack levels used:    1
 22725 ;; Hardware stack levels required when called:    6
 22726 ;; This function calls:
 22727 ;;		Nothing
 22728 ;; This function is called by:
 22729 ;;		_do_I2C_RCEN
 22730 ;; This function uses a non-reentrant model
 22731 ;;
 22732                           
 22733                           
 22734                           ;psect for function _i2c1_driver_startRX
 22735  2F55                     _i2c1_driver_startRX:	
 22736                           
 22737                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
 22738                           
 22739                           ;incstack = 0
 22740                           ; Regs used in _i2c1_driver_startRX: []
 22741  2F55  0024               	movlb	4	; select bank4
 22742  2F56  1596               	bsf	22,3	;volatile
 22743  2F57  0008               	return
 22744  2F58                     __end_of_i2c1_driver_startRX:	
 22745                           
 22746                           	psect	text104
 22747  2FC8                     __ptext104:	
 22748 ;; *************** function _returnReset *****************
 22749 ;; Defined at:
 22750 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 22751 ;; Parameters:    Size  Location     Type
 22752 ;;  p               1   17[BANK0 ] PTR void 
 22753 ;;		 -> NULL(0), 
 22754 ;; Auto vars:     Size  Location     Type
 22755 ;;		None
 22756 ;; Return value:  Size  Location     Type
 22757 ;;                  1    wreg      enum E8198
 22758 ;; Registers used:
 22759 ;;		wreg
 22760 ;; Tracked objects:
 22761 ;;		On entry : 0/0
 22762 ;;		On exit  : 0/0
 22763 ;;		Unchanged: 0/0
 22764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22765 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22769 ;;Total ram usage:        1 bytes
 22770 ;; Hardware stack levels used:    1
 22771 ;; Hardware stack levels required when called:    6
 22772 ;; This function calls:
 22773 ;;		Nothing
 22774 ;; This function is called by:
 22775 ;;		_i2c_open
 22776 ;;		_do_I2C_DO_ADDRESS_NACK
 22777 ;;		_do_I2C_TX
 22778 ;;		_do_I2C_RX
 22779 ;;		_do_I2C_TX_EMPTY
 22780 ;;		i1_do_I2C_DO_ADDRESS_NACK
 22781 ;;		i1_do_I2C_TX
 22782 ;;		i1_do_I2C_RX
 22783 ;;		i1_do_I2C_TX_EMPTY
 22784 ;; This function uses a non-reentrant model
 22785 ;;
 22786                           
 22787                           
 22788                           ;psect for function _returnReset
 22789  2FC8                     _returnReset:	
 22790                           
 22791                           ;Skip over the trampoline to the duplicate function for level 1
 22792  2FC8  1C7E               	btfss	126,0
 22793  2FC9  2FCC               	goto	l7589
 22794  2FCA  3191  29E4         	ljmp	i1l8593
 22795  2FCC                     _returnReset$intlevel0:	
 22796  2FCC                     l7589:	
 22797                           ;incstack = 0
 22798                           ; Regs used in _returnReset: [wreg]
 22799                           
 22800                           
 22801                           ;i2c_master.c: 450: return i2c_reset_link;
 22802  2FCC  3005               	movlw	5
 22803  2FCD  0008               	return
 22804  2FCE                     __end_of_returnReset:	
 22805                           
 22806                           	psect	text105
 22807  2FC2                     __ptext105:	
 22808 ;; *************** function _returnStop *****************
 22809 ;; Defined at:
 22810 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 22811 ;; Parameters:    Size  Location     Type
 22812 ;;  p               1   17[BANK0 ] PTR void 
 22813 ;;		 -> NULL(0), 
 22814 ;; Auto vars:     Size  Location     Type
 22815 ;;		None
 22816 ;; Return value:  Size  Location     Type
 22817 ;;                  1    wreg      enum E8198
 22818 ;; Registers used:
 22819 ;;		wreg
 22820 ;; Tracked objects:
 22821 ;;		On entry : 0/0
 22822 ;;		On exit  : 0/0
 22823 ;;		Unchanged: 0/0
 22824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22825 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22828 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22829 ;;Total ram usage:        1 bytes
 22830 ;; Hardware stack levels used:    1
 22831 ;; Hardware stack levels required when called:    6
 22832 ;; This function calls:
 22833 ;;		Nothing
 22834 ;; This function is called by:
 22835 ;;		_i2c_open
 22836 ;;		_setCallBack
 22837 ;;		_do_I2C_DO_ADDRESS_NACK
 22838 ;;		_do_I2C_TX
 22839 ;;		_do_I2C_RX
 22840 ;;		_do_I2C_TX_EMPTY
 22841 ;;		i1_do_I2C_DO_ADDRESS_NACK
 22842 ;;		i1_do_I2C_TX
 22843 ;;		i1_do_I2C_RX
 22844 ;;		i1_do_I2C_TX_EMPTY
 22845 ;; This function uses a non-reentrant model
 22846 ;;
 22847                           
 22848                           
 22849                           ;psect for function _returnStop
 22850  2FC2                     _returnStop:	
 22851                           
 22852                           ;Skip over the trampoline to the duplicate function for level 1
 22853  2FC2  1C7E               	btfss	126,0
 22854  2FC3  2FC6               	goto	l7585
 22855  2FC4  31AF  2F20         	ljmp	i1l8589
 22856  2FC6                     _returnStop$intlevel0:	
 22857  2FC6                     l7585:	
 22858                           ;incstack = 0
 22859                           ; Regs used in _returnStop: [wreg]
 22860                           
 22861                           
 22862                           ;i2c_master.c: 445: return i2c_stop;
 22863  2FC6  3001               	movlw	1
 22864  2FC7  0008               	return
 22865  2FC8                     __end_of_returnStop:	
 22866                           
 22867                           	psect	text106
 22868  2F52                     __ptext106:	
 22869 ;; *************** function _i2c1_driver_stop *****************
 22870 ;; Defined at:
 22871 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 22872 ;; Parameters:    Size  Location     Type
 22873 ;;		None
 22874 ;; Auto vars:     Size  Location     Type
 22875 ;;		None
 22876 ;; Return value:  Size  Location     Type
 22877 ;;                  1    wreg      void 
 22878 ;; Registers used:
 22879 ;;		None
 22880 ;; Tracked objects:
 22881 ;;		On entry : 0/0
 22882 ;;		On exit  : 0/0
 22883 ;;		Unchanged: 0/0
 22884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22889 ;;Total ram usage:        0 bytes
 22890 ;; Hardware stack levels used:    1
 22891 ;; Hardware stack levels required when called:    6
 22892 ;; This function calls:
 22893 ;;		Nothing
 22894 ;; This function is called by:
 22895 ;;		_do_I2C_SEND_STOP
 22896 ;; This function uses a non-reentrant model
 22897 ;;
 22898                           
 22899                           
 22900                           ;psect for function _i2c1_driver_stop
 22901  2F52                     _i2c1_driver_stop:	
 22902                           
 22903                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
 22904                           
 22905                           ;incstack = 0
 22906                           ; Regs used in _i2c1_driver_stop: []
 22907  2F52  0024               	movlb	4	; select bank4
 22908  2F53  1516               	bsf	22,2	;volatile
 22909  2F54  0008               	return
 22910  2F55                     __end_of_i2c1_driver_stop:	
 22911                           
 22912                           	psect	text107
 22913  2F4F                     __ptext107:	
 22914 ;; *************** function _i2c1_driver_restart *****************
 22915 ;; Defined at:
 22916 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 22917 ;; Parameters:    Size  Location     Type
 22918 ;;		None
 22919 ;; Auto vars:     Size  Location     Type
 22920 ;;		None
 22921 ;; Return value:  Size  Location     Type
 22922 ;;                  1    wreg      void 
 22923 ;; Registers used:
 22924 ;;		None
 22925 ;; Tracked objects:
 22926 ;;		On entry : 0/0
 22927 ;;		On exit  : 0/0
 22928 ;;		Unchanged: 0/0
 22929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22934 ;;Total ram usage:        0 bytes
 22935 ;; Hardware stack levels used:    1
 22936 ;; Hardware stack levels required when called:    6
 22937 ;; This function calls:
 22938 ;;		Nothing
 22939 ;; This function is called by:
 22940 ;;		_do_I2C_SEND_RESTART_READ
 22941 ;;		_do_I2C_SEND_RESTART_WRITE
 22942 ;;		_do_I2C_SEND_RESTART
 22943 ;; This function uses a non-reentrant model
 22944 ;;
 22945                           
 22946                           
 22947                           ;psect for function _i2c1_driver_restart
 22948  2F4F                     _i2c1_driver_restart:	
 22949                           
 22950                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
 22951                           
 22952                           ;incstack = 0
 22953                           ; Regs used in _i2c1_driver_restart: []
 22954  2F4F  0024               	movlb	4	; select bank4
 22955  2F50  1496               	bsf	22,1	;volatile
 22956  2F51  0008               	return
 22957  2F52                     __end_of_i2c1_driver_restart:	
 22958                           
 22959                           	psect	text108
 22960  2F89                     __ptext108:	
 22961 ;; *************** function _i2c1_driver_sendACK *****************
 22962 ;; Defined at:
 22963 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 22964 ;; Parameters:    Size  Location     Type
 22965 ;;		None
 22966 ;; Auto vars:     Size  Location     Type
 22967 ;;		None
 22968 ;; Return value:  Size  Location     Type
 22969 ;;                  1    wreg      void 
 22970 ;; Registers used:
 22971 ;;		None
 22972 ;; Tracked objects:
 22973 ;;		On entry : 0/0
 22974 ;;		On exit  : 0/0
 22975 ;;		Unchanged: 0/0
 22976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22981 ;;Total ram usage:        0 bytes
 22982 ;; Hardware stack levels used:    1
 22983 ;; Hardware stack levels required when called:    6
 22984 ;; This function calls:
 22985 ;;		Nothing
 22986 ;; This function is called by:
 22987 ;;		_do_I2C_DO_ACK
 22988 ;;		_do_I2C_RX
 22989 ;; This function uses a non-reentrant model
 22990 ;;
 22991                           
 22992                           
 22993                           ;psect for function _i2c1_driver_sendACK
 22994  2F89                     _i2c1_driver_sendACK:	
 22995                           
 22996                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 22997                           
 22998                           ;incstack = 0
 22999                           ; Regs used in _i2c1_driver_sendACK: []
 23000  2F89  0024               	movlb	4	; select bank4
 23001  2F8A  1296               	bcf	22,5	;volatile
 23002                           
 23003                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 23004  2F8B  1616               	bsf	22,4	;volatile
 23005  2F8C  0008               	return
 23006  2F8D                     __end_of_i2c1_driver_sendACK:	
 23007                           
 23008                           	psect	text109
 23009  2F4C                     __ptext109:	
 23010 ;; *************** function _i2c1_driver_start *****************
 23011 ;; Defined at:
 23012 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 23013 ;; Parameters:    Size  Location     Type
 23014 ;;		None
 23015 ;; Auto vars:     Size  Location     Type
 23016 ;;		None
 23017 ;; Return value:  Size  Location     Type
 23018 ;;                  1    wreg      void 
 23019 ;; Registers used:
 23020 ;;		None
 23021 ;; Tracked objects:
 23022 ;;		On entry : 0/0
 23023 ;;		On exit  : 0/0
 23024 ;;		Unchanged: 0/0
 23025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23030 ;;Total ram usage:        0 bytes
 23031 ;; Hardware stack levels used:    1
 23032 ;; Hardware stack levels required when called:    6
 23033 ;; This function calls:
 23034 ;;		Nothing
 23035 ;; This function is called by:
 23036 ;;		_i2c_masterOperation
 23037 ;; This function uses a non-reentrant model
 23038 ;;
 23039                           
 23040                           
 23041                           ;psect for function _i2c1_driver_start
 23042  2F4C                     _i2c1_driver_start:	
 23043                           
 23044                           ;i2c1_driver.c: 148: SSP1CON2bits.SEN = 1;
 23045                           
 23046                           ;incstack = 0
 23047                           ; Regs used in _i2c1_driver_start: []
 23048  2F4C  0024               	movlb	4	; select bank4
 23049  2F4D  1416               	bsf	22,0	;volatile
 23050  2F4E  0008               	return
 23051  2F4F                     __end_of_i2c1_driver_start:	
 23052                           
 23053                           	psect	text110
 23054  1CBF                     __ptext110:	
 23055 ;; *************** function ___awdiv *****************
 23056 ;; Defined at:
 23057 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 23058 ;; Parameters:    Size  Location     Type
 23059 ;;  divisor         2   23[BANK0 ] int 
 23060 ;;  dividend        2   25[BANK0 ] int 
 23061 ;; Auto vars:     Size  Location     Type
 23062 ;;  quotient        2   30[BANK0 ] int 
 23063 ;;  sign            1   29[BANK0 ] unsigned char 
 23064 ;;  counter         1   28[BANK0 ] unsigned char 
 23065 ;; Return value:  Size  Location     Type
 23066 ;;                  2   23[BANK0 ] int 
 23067 ;; Registers used:
 23068 ;;		wreg, status,2, status,0
 23069 ;; Tracked objects:
 23070 ;;		On entry : 0/0
 23071 ;;		On exit  : 0/0
 23072 ;;		Unchanged: 0/0
 23073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23074 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23075 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23077 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23078 ;;Total ram usage:        9 bytes
 23079 ;; Hardware stack levels used:    1
 23080 ;; Hardware stack levels required when called:    6
 23081 ;; This function calls:
 23082 ;;		Nothing
 23083 ;; This function is called by:
 23084 ;;		_drv_write_DC
 23085 ;;		_calcUpstroke
 23086 ;;		_calcDownstroke
 23087 ;;		_drv_outputSine
 23088 ;; This function uses a non-reentrant model
 23089 ;;
 23090                           
 23091                           
 23092                           ;psect for function ___awdiv
 23093  1CBF                     ___awdiv:	
 23094                           
 23095                           ;incstack = 0
 23096                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 23097  1CBF  0020               	movlb	0	; select bank0
 23098  1CC0  01BD               	clrf	___awdiv@sign
 23099  1CC1  1FB8               	btfss	___awdiv@divisor+1,7
 23100  1CC2  2CCA               	goto	l8279
 23101  1CC3  09B7               	comf	___awdiv@divisor,f
 23102  1CC4  09B8               	comf	___awdiv@divisor+1,f
 23103  1CC5  0AB7               	incf	___awdiv@divisor,f
 23104  1CC6  1903               	skipnz
 23105  1CC7  0AB8               	incf	___awdiv@divisor+1,f
 23106  1CC8  01BD               	clrf	___awdiv@sign
 23107  1CC9  0ABD               	incf	___awdiv@sign,f
 23108  1CCA                     l8279:	
 23109  1CCA  1FBA               	btfss	___awdiv@dividend+1,7
 23110  1CCB  2CD5               	goto	l8285
 23111  1CCC  09B9               	comf	___awdiv@dividend,f
 23112  1CCD  09BA               	comf	___awdiv@dividend+1,f
 23113  1CCE  0AB9               	incf	___awdiv@dividend,f
 23114  1CCF  1903               	skipnz
 23115  1CD0  0ABA               	incf	___awdiv@dividend+1,f
 23116  1CD1  3001               	movlw	1
 23117  1CD2  00BB               	movwf	??___awdiv
 23118  1CD3  083B               	movf	??___awdiv,w
 23119  1CD4  06BD               	xorwf	___awdiv@sign,f
 23120  1CD5                     l8285:	
 23121  1CD5  01BE               	clrf	___awdiv@quotient
 23122  1CD6  01BF               	clrf	___awdiv@quotient+1
 23123  1CD7  0837               	movf	___awdiv@divisor,w
 23124  1CD8  0438               	iorwf	___awdiv@divisor+1,w
 23125  1CD9  1903               	btfsc	3,2
 23126  1CDA  2D04               	goto	l8307
 23127  1CDB  01BC               	clrf	___awdiv@counter
 23128  1CDC  0ABC               	incf	___awdiv@counter,f
 23129  1CDD                     l8295:	
 23130  1CDD  1BB8               	btfsc	___awdiv@divisor+1,7
 23131  1CDE  2CE9               	goto	l8297
 23132  1CDF  3001               	movlw	1
 23133  1CE0                     u8295:	
 23134  1CE0  35B7               	lslf	___awdiv@divisor,f
 23135  1CE1  0DB8               	rlf	___awdiv@divisor+1,f
 23136  1CE2  0B89               	decfsz	9,f
 23137  1CE3  2CE0               	goto	u8295
 23138  1CE4  3001               	movlw	1
 23139  1CE5  00BB               	movwf	??___awdiv
 23140  1CE6  083B               	movf	??___awdiv,w
 23141  1CE7  07BC               	addwf	___awdiv@counter,f
 23142  1CE8  2CDD               	goto	l8295
 23143  1CE9                     l8297:	
 23144  1CE9  3001               	movlw	1
 23145  1CEA                     u8315:	
 23146  1CEA  35BE               	lslf	___awdiv@quotient,f
 23147  1CEB  0DBF               	rlf	___awdiv@quotient+1,f
 23148  1CEC  0B89               	decfsz	9,f
 23149  1CED  2CEA               	goto	u8315
 23150  1CEE  0838               	movf	___awdiv@divisor+1,w
 23151  1CEF  023A               	subwf	___awdiv@dividend+1,w
 23152  1CF0  1D03               	skipz
 23153  1CF1  2CF4               	goto	u8325
 23154  1CF2  0837               	movf	___awdiv@divisor,w
 23155  1CF3  0239               	subwf	___awdiv@dividend,w
 23156  1CF4                     u8325:	
 23157  1CF4  1C03               	skipc
 23158  1CF5  2CFB               	goto	l8303
 23159  1CF6  0837               	movf	___awdiv@divisor,w
 23160  1CF7  02B9               	subwf	___awdiv@dividend,f
 23161  1CF8  0838               	movf	___awdiv@divisor+1,w
 23162  1CF9  3BBA               	subwfb	___awdiv@dividend+1,f
 23163  1CFA  143E               	bsf	___awdiv@quotient,0
 23164  1CFB                     l8303:	
 23165  1CFB  3001               	movlw	1
 23166  1CFC                     u8335:	
 23167  1CFC  36B8               	lsrf	___awdiv@divisor+1,f
 23168  1CFD  0CB7               	rrf	___awdiv@divisor,f
 23169  1CFE  0B89               	decfsz	9,f
 23170  1CFF  2CFC               	goto	u8335
 23171  1D00  3001               	movlw	1
 23172  1D01  02BC               	subwf	___awdiv@counter,f
 23173  1D02  1D03               	btfss	3,2
 23174  1D03  2CE9               	goto	l8297
 23175  1D04                     l8307:	
 23176  1D04  083D               	movf	___awdiv@sign,w
 23177  1D05  1903               	btfsc	3,2
 23178  1D06  2D0C               	goto	l8311
 23179  1D07  09BE               	comf	___awdiv@quotient,f
 23180  1D08  09BF               	comf	___awdiv@quotient+1,f
 23181  1D09  0ABE               	incf	___awdiv@quotient,f
 23182  1D0A  1903               	skipnz
 23183  1D0B  0ABF               	incf	___awdiv@quotient+1,f
 23184  1D0C                     l8311:	
 23185  1D0C  083F               	movf	___awdiv@quotient+1,w
 23186  1D0D  00B8               	movwf	?___awdiv+1
 23187  1D0E  083E               	movf	___awdiv@quotient,w
 23188  1D0F  00B7               	movwf	?___awdiv
 23189  1D10  0008               	return
 23190  1D11                     __end_of___awdiv:	
 23191                           
 23192                           	psect	text111
 23193  148B                     __ptext111:	
 23194 ;; *************** function _calcHeaterPins *****************
 23195 ;; Defined at:
 23196 ;;		line 275 in file "main.c"
 23197 ;; Parameters:    Size  Location     Type
 23198 ;;		None
 23199 ;; Auto vars:     Size  Location     Type
 23200 ;;		None
 23201 ;; Return value:  Size  Location     Type
 23202 ;;                  1    wreg      void 
 23203 ;; Registers used:
 23204 ;;		wreg, status,2, status,0
 23205 ;; Tracked objects:
 23206 ;;		On entry : 0/0
 23207 ;;		On exit  : 0/0
 23208 ;;		Unchanged: 0/0
 23209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23212 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23213 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23214 ;;Total ram usage:        4 bytes
 23215 ;; Hardware stack levels used:    1
 23216 ;; Hardware stack levels required when called:    6
 23217 ;; This function calls:
 23218 ;;		Nothing
 23219 ;; This function is called by:
 23220 ;;		_doMove
 23221 ;; This function uses a non-reentrant model
 23222 ;;
 23223                           
 23224                           
 23225                           ;psect for function _calcHeaterPins
 23226  148B                     _calcHeaterPins:	
 23227                           
 23228                           ;main.c: 276: first_top = moveVector_downs & moveMask;
 23229                           
 23230                           ;incstack = 0
 23231                           ; Regs used in _calcHeaterPins: [wreg+status,2+status,0]
 23232  148B  0021               	movlb	1	; select bank1
 23233  148C  0858               	movf	_moveMask^(0+128),w
 23234  148D  0560               	andwf	_moveVector_downs^(0+128),w
 23235  148E  0022               	movlb	2	; select bank2
 23236  148F  00D6               	movwf	_first_top^(0+256)
 23237  1490  0021               	movlb	1	; select bank1
 23238  1491  0859               	movf	(_moveMask+1)^(0+128),w
 23239  1492  0561               	andwf	(_moveVector_downs+1)^(0+128),w
 23240  1493  0022               	movlb	2	; select bank2
 23241  1494  00D7               	movwf	(_first_top+1)^(0+256)
 23242  1495  0021               	movlb	1	; select bank1
 23243  1496  085A               	movf	(_moveMask+2)^(0+128),w
 23244  1497  0562               	andwf	(_moveVector_downs+2)^(0+128),w
 23245  1498  0022               	movlb	2	; select bank2
 23246  1499  00D8               	movwf	(_first_top+2)^(0+256)
 23247  149A  0021               	movlb	1	; select bank1
 23248  149B  085B               	movf	(_moveMask+3)^(0+128),w
 23249  149C  0563               	andwf	(_moveVector_downs+3)^(0+128),w
 23250  149D  0022               	movlb	2	; select bank2
 23251  149E  00D9               	movwf	(_first_top+3)^(0+256)
 23252                           
 23253                           ;main.c: 277: first_bottom = (~moveVector_downs) & moveMask;
 23254  149F  0021               	movlb	1	; select bank1
 23255  14A0  0960               	comf	_moveVector_downs^(0+128),w
 23256  14A1  0020               	movlb	0	; select bank0
 23257  14A2  00B1               	movwf	??_calcHeaterPins
 23258  14A3  0021               	movlb	1	; select bank1
 23259  14A4  0961               	comf	(_moveVector_downs+1)^(0+128),w
 23260  14A5  0020               	movlb	0	; select bank0
 23261  14A6  00B2               	movwf	??_calcHeaterPins+1
 23262  14A7  0021               	movlb	1	; select bank1
 23263  14A8  0962               	comf	(_moveVector_downs+2)^(0+128),w
 23264  14A9  0020               	movlb	0	; select bank0
 23265  14AA  00B3               	movwf	??_calcHeaterPins+2
 23266  14AB  0021               	movlb	1	; select bank1
 23267  14AC  0963               	comf	(_moveVector_downs+3)^(0+128),w
 23268  14AD  0020               	movlb	0	; select bank0
 23269  14AE  00B4               	movwf	??_calcHeaterPins+3
 23270  14AF  0021               	movlb	1	; select bank1
 23271  14B0  0858               	movf	_moveMask^(0+128),w
 23272  14B1  0020               	movlb	0	; select bank0
 23273  14B2  0531               	andwf	??_calcHeaterPins,w
 23274  14B3  0022               	movlb	2	; select bank2
 23275  14B4  00DA               	movwf	_first_bottom^(0+256)
 23276  14B5  0021               	movlb	1	; select bank1
 23277  14B6  0859               	movf	(_moveMask+1)^(0+128),w
 23278  14B7  0020               	movlb	0	; select bank0
 23279  14B8  0532               	andwf	??_calcHeaterPins+1,w
 23280  14B9  0022               	movlb	2	; select bank2
 23281  14BA  00DB               	movwf	(_first_bottom+1)^(0+256)
 23282  14BB  0021               	movlb	1	; select bank1
 23283  14BC  085A               	movf	(_moveMask+2)^(0+128),w
 23284  14BD  0020               	movlb	0	; select bank0
 23285  14BE  0533               	andwf	??_calcHeaterPins+2,w
 23286  14BF  0022               	movlb	2	; select bank2
 23287  14C0  00DC               	movwf	(_first_bottom+2)^(0+256)
 23288  14C1  0021               	movlb	1	; select bank1
 23289  14C2  085B               	movf	(_moveMask+3)^(0+128),w
 23290  14C3  0020               	movlb	0	; select bank0
 23291  14C4  0534               	andwf	??_calcHeaterPins+3,w
 23292  14C5  0022               	movlb	2	; select bank2
 23293  14C6  00DD               	movwf	(_first_bottom+3)^(0+256)
 23294                           
 23295                           ;main.c: 278: second_top = moveVector_ups & moveMask;
 23296  14C7  0021               	movlb	1	; select bank1
 23297  14C8  0858               	movf	_moveMask^(0+128),w
 23298  14C9  0564               	andwf	_moveVector_ups^(0+128),w
 23299  14CA  0022               	movlb	2	; select bank2
 23300  14CB  00DE               	movwf	_second_top^(0+256)
 23301  14CC  0021               	movlb	1	; select bank1
 23302  14CD  0859               	movf	(_moveMask+1)^(0+128),w
 23303  14CE  0565               	andwf	(_moveVector_ups+1)^(0+128),w
 23304  14CF  0022               	movlb	2	; select bank2
 23305  14D0  00DF               	movwf	(_second_top+1)^(0+256)
 23306  14D1  0021               	movlb	1	; select bank1
 23307  14D2  085A               	movf	(_moveMask+2)^(0+128),w
 23308  14D3  0566               	andwf	(_moveVector_ups+2)^(0+128),w
 23309  14D4  0022               	movlb	2	; select bank2
 23310  14D5  00E0               	movwf	(_second_top+2)^(0+256)
 23311  14D6  0021               	movlb	1	; select bank1
 23312  14D7  085B               	movf	(_moveMask+3)^(0+128),w
 23313  14D8  0567               	andwf	(_moveVector_ups+3)^(0+128),w
 23314  14D9  0022               	movlb	2	; select bank2
 23315  14DA  00E1               	movwf	(_second_top+3)^(0+256)
 23316                           
 23317                           ;main.c: 279: second_bottom = (~moveVector_ups) & moveMask;
 23318  14DB  0021               	movlb	1	; select bank1
 23319  14DC  0964               	comf	_moveVector_ups^(0+128),w
 23320  14DD  0020               	movlb	0	; select bank0
 23321  14DE  00B1               	movwf	??_calcHeaterPins
 23322  14DF  0021               	movlb	1	; select bank1
 23323  14E0  0965               	comf	(_moveVector_ups+1)^(0+128),w
 23324  14E1  0020               	movlb	0	; select bank0
 23325  14E2  00B2               	movwf	??_calcHeaterPins+1
 23326  14E3  0021               	movlb	1	; select bank1
 23327  14E4  0966               	comf	(_moveVector_ups+2)^(0+128),w
 23328  14E5  0020               	movlb	0	; select bank0
 23329  14E6  00B3               	movwf	??_calcHeaterPins+2
 23330  14E7  0021               	movlb	1	; select bank1
 23331  14E8  0967               	comf	(_moveVector_ups+3)^(0+128),w
 23332  14E9  0020               	movlb	0	; select bank0
 23333  14EA  00B4               	movwf	??_calcHeaterPins+3
 23334  14EB  0021               	movlb	1	; select bank1
 23335  14EC  0858               	movf	_moveMask^(0+128),w
 23336  14ED  0020               	movlb	0	; select bank0
 23337  14EE  0531               	andwf	??_calcHeaterPins,w
 23338  14EF  0022               	movlb	2	; select bank2
 23339  14F0  00D2               	movwf	_second_bottom^(0+256)
 23340  14F1  0021               	movlb	1	; select bank1
 23341  14F2  0859               	movf	(_moveMask+1)^(0+128),w
 23342  14F3  0020               	movlb	0	; select bank0
 23343  14F4  0532               	andwf	??_calcHeaterPins+1,w
 23344  14F5  0022               	movlb	2	; select bank2
 23345  14F6  00D3               	movwf	(_second_bottom+1)^(0+256)
 23346  14F7  0021               	movlb	1	; select bank1
 23347  14F8  085A               	movf	(_moveMask+2)^(0+128),w
 23348  14F9  0020               	movlb	0	; select bank0
 23349  14FA  0533               	andwf	??_calcHeaterPins+2,w
 23350  14FB  0022               	movlb	2	; select bank2
 23351  14FC  00D4               	movwf	(_second_bottom+2)^(0+256)
 23352  14FD  0021               	movlb	1	; select bank1
 23353  14FE  085B               	movf	(_moveMask+3)^(0+128),w
 23354  14FF  0020               	movlb	0	; select bank0
 23355  1500  0534               	andwf	??_calcHeaterPins+3,w
 23356  1501  0022               	movlb	2	; select bank2
 23357  1502  00D5               	movwf	(_second_bottom+3)^(0+256)
 23358  1503  0008               	return
 23359  1504                     __end_of_calcHeaterPins:	
 23360                           
 23361                           	psect	text112
 23362  2F49                     __ptext112:	
 23363 ;; *************** function _TMR4_StartTimer *****************
 23364 ;; Defined at:
 23365 ;;		line 86 in file "mcc_generated_files/tmr4.c"
 23366 ;; Parameters:    Size  Location     Type
 23367 ;;		None
 23368 ;; Auto vars:     Size  Location     Type
 23369 ;;		None
 23370 ;; Return value:  Size  Location     Type
 23371 ;;                  1    wreg      void 
 23372 ;; Registers used:
 23373 ;;		None
 23374 ;; Tracked objects:
 23375 ;;		On entry : 0/0
 23376 ;;		On exit  : 0/0
 23377 ;;		Unchanged: 0/0
 23378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23383 ;;Total ram usage:        0 bytes
 23384 ;; Hardware stack levels used:    1
 23385 ;; Hardware stack levels required when called:    6
 23386 ;; This function calls:
 23387 ;;		Nothing
 23388 ;; This function is called by:
 23389 ;;		_doMove
 23390 ;; This function uses a non-reentrant model
 23391 ;;
 23392                           
 23393                           
 23394                           ;psect for function _TMR4_StartTimer
 23395  2F49                     _TMR4_StartTimer:	
 23396                           
 23397                           ;tmr4.c: 89: T4CONbits.TMR4ON = 1;
 23398                           
 23399                           ;incstack = 0
 23400                           ; Regs used in _TMR4_StartTimer: []
 23401  2F49  0028               	movlb	8	; select bank8
 23402  2F4A  1517               	bsf	23,2	;volatile
 23403  2F4B  0008               	return
 23404  2F4C                     __end_of_TMR4_StartTimer:	
 23405                           
 23406                           	psect	text113
 23407  2F46                     __ptext113:	
 23408 ;; *************** function _TMR2_StartTimer *****************
 23409 ;; Defined at:
 23410 ;;		line 85 in file "mcc_generated_files/tmr2.c"
 23411 ;; Parameters:    Size  Location     Type
 23412 ;;		None
 23413 ;; Auto vars:     Size  Location     Type
 23414 ;;		None
 23415 ;; Return value:  Size  Location     Type
 23416 ;;                  1    wreg      void 
 23417 ;; Registers used:
 23418 ;;		None
 23419 ;; Tracked objects:
 23420 ;;		On entry : 0/0
 23421 ;;		On exit  : 0/0
 23422 ;;		Unchanged: 0/0
 23423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23428 ;;Total ram usage:        0 bytes
 23429 ;; Hardware stack levels used:    1
 23430 ;; Hardware stack levels required when called:    6
 23431 ;; This function calls:
 23432 ;;		Nothing
 23433 ;; This function is called by:
 23434 ;;		_doMove
 23435 ;; This function uses a non-reentrant model
 23436 ;;
 23437                           
 23438                           
 23439                           ;psect for function _TMR2_StartTimer
 23440  2F46                     _TMR2_StartTimer:	
 23441                           
 23442                           ;tmr2.c: 88: T2CONbits.TMR2ON = 1;
 23443                           
 23444                           ;incstack = 0
 23445                           ; Regs used in _TMR2_StartTimer: []
 23446  2F46  0020               	movlb	0	; select bank0
 23447  2F47  151F               	bsf	31,2	;volatile
 23448  2F48  0008               	return
 23449  2F49                     __end_of_TMR2_StartTimer:	
 23450                           
 23451                           	psect	text114
 23452  2F43                     __ptext114:	
 23453 ;; *************** function _TMR0_StartTimer *****************
 23454 ;; Defined at:
 23455 ;;		line 85 in file "mcc_generated_files/tmr0.c"
 23456 ;; Parameters:    Size  Location     Type
 23457 ;;		None
 23458 ;; Auto vars:     Size  Location     Type
 23459 ;;		None
 23460 ;; Return value:  Size  Location     Type
 23461 ;;                  1    wreg      void 
 23462 ;; Registers used:
 23463 ;;		None
 23464 ;; Tracked objects:
 23465 ;;		On entry : 0/0
 23466 ;;		On exit  : 0/0
 23467 ;;		Unchanged: 0/0
 23468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23473 ;;Total ram usage:        0 bytes
 23474 ;; Hardware stack levels used:    1
 23475 ;; Hardware stack levels required when called:    6
 23476 ;; This function calls:
 23477 ;;		Nothing
 23478 ;; This function is called by:
 23479 ;;		_doMove
 23480 ;; This function uses a non-reentrant model
 23481 ;;
 23482                           
 23483                           
 23484                           ;psect for function _TMR0_StartTimer
 23485  2F43                     _TMR0_StartTimer:	
 23486                           
 23487                           ;tmr0.c: 88: T0CON0bits.T0EN = 1;
 23488                           
 23489                           ;incstack = 0
 23490                           ; Regs used in _TMR0_StartTimer: []
 23491  2F43  0020               	movlb	0	; select bank0
 23492  2F44  1797               	bsf	23,7	;volatile
 23493  2F45  0008               	return
 23494  2F46                     __end_of_TMR0_StartTimer:	
 23495                           
 23496                           	psect	text115
 23497  23FA                     __ptext115:	
 23498 ;; *************** function _LEDsOn *****************
 23499 ;; Defined at:
 23500 ;;		line 6 in file "LEDcomm.c"
 23501 ;; Parameters:    Size  Location     Type
 23502 ;;  LEDpins         4   36[BANK0 ] unsigned long 
 23503 ;;  topOrBottom     2   40[BANK0 ] int 
 23504 ;; Auto vars:     Size  Location     Type
 23505 ;;		None
 23506 ;; Return value:  Size  Location     Type
 23507 ;;                  1    wreg      void 
 23508 ;; Registers used:
 23509 ;;		wreg, status,2, status,0, pclath, cstack
 23510 ;; Tracked objects:
 23511 ;;		On entry : 0/0
 23512 ;;		On exit  : 0/0
 23513 ;;		Unchanged: 0/0
 23514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23515 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23517 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23518 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23519 ;;Total ram usage:       10 bytes
 23520 ;; Hardware stack levels used:    1
 23521 ;; Hardware stack levels required when called:    8
 23522 ;; This function calls:
 23523 ;;		_send_2length_2bytes_IK
 23524 ;; This function is called by:
 23525 ;;		_LED_test_openshort
 23526 ;;		_doMove
 23527 ;;		_setHeaterToggle
 23528 ;;		_timedActiveHeatOn
 23529 ;;		_demoSequence
 23530 ;; This function uses a non-reentrant model
 23531 ;;
 23532                           
 23533                           
 23534                           ;psect for function _LEDsOn
 23535  23FA                     _LEDsOn:	
 23536                           
 23537                           ;LEDcomm.c: 7: send_2length_2bytes_IK((unsigned int)((LEDpins>>16) & 0xFFFF),(unsigned i
      +                          nt)LEDpins, 1, topOrBottom);
 23538                           
 23539                           ;incstack = 0
 23540                           ; Regs used in _LEDsOn: [wreg+status,2+status,0+pclath+cstack]
 23541  23FA  0020               	movlb	0	; select bank0
 23542  23FB  0844               	movf	LEDsOn@LEDpins,w
 23543  23FC  00CA               	movwf	??_LEDsOn
 23544  23FD  0845               	movf	LEDsOn@LEDpins+1,w
 23545  23FE  00CB               	movwf	??_LEDsOn+1
 23546  23FF  0846               	movf	LEDsOn@LEDpins+2,w
 23547  2400  00CC               	movwf	??_LEDsOn+2
 23548  2401  0847               	movf	LEDsOn@LEDpins+3,w
 23549  2402  00CD               	movwf	??_LEDsOn+3
 23550  2403  3010               	movlw	16
 23551  2404                     u8165:	
 23552  2404  36CD               	lsrf	??_LEDsOn+3,f
 23553  2405  0CCC               	rrf	??_LEDsOn+2,f
 23554  2406  0CCB               	rrf	??_LEDsOn+1,f
 23555  2407  0CCA               	rrf	??_LEDsOn,f
 23556  2408  0B89               	decfsz	9,f
 23557  2409  2C04               	goto	u8165
 23558  240A  084B               	movf	??_LEDsOn+1,w
 23559  240B  00BD               	movwf	send_2length_2bytes_IK@data1+1
 23560  240C  084A               	movf	??_LEDsOn,w
 23561  240D  00BC               	movwf	send_2length_2bytes_IK@data1
 23562  240E  0845               	movf	LEDsOn@LEDpins+1,w
 23563  240F  00BF               	movwf	send_2length_2bytes_IK@data2+1
 23564  2410  0844               	movf	LEDsOn@LEDpins,w
 23565  2411  00BE               	movwf	send_2length_2bytes_IK@data2
 23566  2412  01C0               	clrf	send_2length_2bytes_IK@latch_start
 23567  2413  0AC0               	incf	send_2length_2bytes_IK@latch_start,f
 23568  2414  0849               	movf	LEDsOn@topOrBottom+1,w
 23569  2415  00C2               	movwf	send_2length_2bytes_IK@topOrBottom+1
 23570  2416  0848               	movf	LEDsOn@topOrBottom,w
 23571  2417  00C1               	movwf	send_2length_2bytes_IK@topOrBottom
 23572  2418  31A2  222B         	fcall	_send_2length_2bytes_IK
 23573  241A  0008               	return
 23574  241B                     __end_of_LEDsOn:	
 23575                           
 23576                           	psect	text116
 23577  222B                     __ptext116:	
 23578 ;; *************** function _send_2length_2bytes_IK *****************
 23579 ;; Defined at:
 23580 ;;		line 70 in file "LEDcomm.c"
 23581 ;; Parameters:    Size  Location     Type
 23582 ;;  data1           2   28[BANK0 ] unsigned int 
 23583 ;;  data2           2   30[BANK0 ] unsigned int 
 23584 ;;  latch_start     1   32[BANK0 ] unsigned char 
 23585 ;;  topOrBottom     2   33[BANK0 ] int 
 23586 ;; Auto vars:     Size  Location     Type
 23587 ;;		None
 23588 ;; Return value:  Size  Location     Type
 23589 ;;                  1    wreg      void 
 23590 ;; Registers used:
 23591 ;;		wreg, status,2, status,0, pclath, cstack
 23592 ;; Tracked objects:
 23593 ;;		On entry : 0/0
 23594 ;;		On exit  : 0/0
 23595 ;;		Unchanged: 0/0
 23596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23597 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23600 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23601 ;;Total ram usage:        8 bytes
 23602 ;; Hardware stack levels used:    1
 23603 ;; Hardware stack levels required when called:    7
 23604 ;; This function calls:
 23605 ;;		_send_2bytes_latchless_IK
 23606 ;;		_send_last_2bytes_IK
 23607 ;; This function is called by:
 23608 ;;		_LEDsOn
 23609 ;;		_LEDsPwr
 23610 ;;		_LED_setBrightnessRange
 23611 ;;		_LED_test_openshort
 23612 ;;		_LED_readConfig
 23613 ;; This function uses a non-reentrant model
 23614 ;;
 23615                           
 23616                           
 23617                           ;psect for function _send_2length_2bytes_IK
 23618  222B                     _send_2length_2bytes_IK:	
 23619                           
 23620                           ;LEDcomm.c: 71: send_2bytes_latchless_IK( data1);
 23621                           
 23622                           ;incstack = 0
 23623                           ; Regs used in _send_2length_2bytes_IK: [wreg+status,2+status,0+pclath+cstack]
 23624  222B  0020               	movlb	0	; select bank0
 23625  222C  083D               	movf	send_2length_2bytes_IK@data1+1,w
 23626  222D  00B2               	movwf	send_2bytes_latchless_IK@data+1
 23627  222E  083C               	movf	send_2length_2bytes_IK@data1,w
 23628  222F  00B1               	movwf	send_2bytes_latchless_IK@data
 23629  2230  31A5  25E9  31A2   	fcall	_send_2bytes_latchless_IK
 23630                           
 23631                           ;LEDcomm.c: 72: send_last_2bytes_IK( data2, latch_start, topOrBottom);
 23632  2233  0020               	movlb	0	; select bank0
 23633  2234  083F               	movf	send_2length_2bytes_IK@data2+1,w
 23634  2235  00B2               	movwf	send_last_2bytes_IK@data+1
 23635  2236  083E               	movf	send_2length_2bytes_IK@data2,w
 23636  2237  00B1               	movwf	send_last_2bytes_IK@data
 23637  2238  0840               	movf	send_2length_2bytes_IK@latch_start,w
 23638  2239  00C3               	movwf	??_send_2length_2bytes_IK
 23639  223A  0843               	movf	??_send_2length_2bytes_IK,w
 23640  223B  00B3               	movwf	send_last_2bytes_IK@latch_start
 23641  223C  0842               	movf	send_2length_2bytes_IK@topOrBottom+1,w
 23642  223D  00B5               	movwf	send_last_2bytes_IK@topOrBottom+1
 23643  223E  0841               	movf	send_2length_2bytes_IK@topOrBottom,w
 23644  223F  00B4               	movwf	send_last_2bytes_IK@topOrBottom
 23645  2240  319D  25B6         	fcall	_send_last_2bytes_IK
 23646  2242  0008               	return
 23647  2243                     __end_of_send_2length_2bytes_IK:	
 23648                           
 23649                           	psect	text117
 23650  1DB6                     __ptext117:	
 23651 ;; *************** function _send_last_2bytes_IK *****************
 23652 ;; Defined at:
 23653 ;;		line 19 in file "LEDcomm.c"
 23654 ;; Parameters:    Size  Location     Type
 23655 ;;  data            2   17[BANK0 ] unsigned int 
 23656 ;;  latch_start     1   19[BANK0 ] unsigned char 
 23657 ;;  topOrBottom     2   20[BANK0 ] int 
 23658 ;; Auto vars:     Size  Location     Type
 23659 ;;  j               2   26[BANK0 ] int 
 23660 ;; Return value:  Size  Location     Type
 23661 ;;                  1    wreg      void 
 23662 ;; Registers used:
 23663 ;;		wreg, status,2, status,0
 23664 ;; Tracked objects:
 23665 ;;		On entry : 0/0
 23666 ;;		On exit  : 0/0
 23667 ;;		Unchanged: 0/0
 23668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23669 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23670 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23671 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23672 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23673 ;;Total ram usage:       11 bytes
 23674 ;; Hardware stack levels used:    1
 23675 ;; Hardware stack levels required when called:    6
 23676 ;; This function calls:
 23677 ;;		Nothing
 23678 ;; This function is called by:
 23679 ;;		_send_2length_2bytes_IK
 23680 ;; This function uses a non-reentrant model
 23681 ;;
 23682                           
 23683                           
 23684                           ;psect for function _send_last_2bytes_IK
 23685  1DB6                     _send_last_2bytes_IK:	
 23686                           
 23687                           ;LEDcomm.c: 22: if (topOrBottom == 1){do { LATBbits.LATB4 = 0; } while(0);} else do { LA
      +                          TCbits.LATC0 = 0; } while(0);
 23688                           
 23689                           ;incstack = 0
 23690                           ; Regs used in _send_last_2bytes_IK: [wreg+status,2+status,0]
 23691  1DB6  0020               	movlb	0	; select bank0
 23692  1DB7  0334               	decf	send_last_2bytes_IK@topOrBottom,w
 23693  1DB8  0435               	iorwf	send_last_2bytes_IK@topOrBottom+1,w
 23694  1DB9  1D03               	btfss	3,2
 23695  1DBA  2DBE               	goto	l216
 23696  1DBB  0022               	movlb	2	; select bank2
 23697  1DBC  120D               	bcf	13,4	;volatile
 23698  1DBD  2DC0               	goto	l7849
 23699  1DBE                     l216:	
 23700  1DBE  0022               	movlb	2	; select bank2
 23701  1DBF  100E               	bcf	14,0	;volatile
 23702  1DC0                     l7849:	
 23703                           
 23704                           ;LEDcomm.c: 24: for(int j = 15; j>=0; j--){
 23705  1DC0  300F               	movlw	15
 23706  1DC1  0020               	movlb	0	; select bank0
 23707  1DC2  00BA               	movwf	send_last_2bytes_IK@j
 23708  1DC3  3000               	movlw	0
 23709  1DC4  00BB               	movwf	send_last_2bytes_IK@j+1
 23710  1DC5  1BBB               	btfsc	send_last_2bytes_IK@j+1,7
 23711  1DC6  2E01               	goto	l237
 23712  1DC7                     l220:	
 23713                           ;LEDcomm.c: 26: do { LATAbits.LATA2 = 0; } while(0);
 23714                           
 23715  1DC7  0022               	movlb	2	; select bank2
 23716  1DC8  110C               	bcf	12,2	;volatile
 23717                           
 23718                           ;LEDcomm.c: 28: if (data & 1 << j){
 23719  1DC9  3001               	movlw	1
 23720  1DCA  0020               	movlb	0	; select bank0
 23721  1DCB  00B6               	movwf	??_send_last_2bytes_IK
 23722  1DCC  3000               	movlw	0
 23723  1DCD  00B7               	movwf	??_send_last_2bytes_IK+1
 23724  1DCE  0A3A               	incf	send_last_2bytes_IK@j,w
 23725  1DCF  2DD2               	goto	u7324
 23726  1DD0                     u7325:	
 23727  1DD0  35B6               	lslf	??_send_last_2bytes_IK,f
 23728  1DD1  0DB7               	rlf	??_send_last_2bytes_IK+1,f
 23729  1DD2                     u7324:	
 23730  1DD2  0B89               	decfsz	9,f
 23731  1DD3  2DD0               	goto	u7325
 23732  1DD4  0831               	movf	send_last_2bytes_IK@data,w
 23733  1DD5  0536               	andwf	??_send_last_2bytes_IK,w
 23734  1DD6  00B8               	movwf	??_send_last_2bytes_IK+2
 23735  1DD7  0832               	movf	send_last_2bytes_IK@data+1,w
 23736  1DD8  0537               	andwf	??_send_last_2bytes_IK+1,w
 23737  1DD9  00B9               	movwf	??_send_last_2bytes_IK+3
 23738  1DDA  0838               	movf	??_send_last_2bytes_IK+2,w
 23739  1DDB  0439               	iorwf	??_send_last_2bytes_IK+3,w
 23740  1DDC  1903               	btfsc	3,2
 23741  1DDD  2DE1               	goto	l226
 23742                           
 23743                           ;LEDcomm.c: 29: do { LATCbits.LATC2 = 1; } while(0);
 23744  1DDE  0022               	movlb	2	; select bank2
 23745  1DDF  150E               	bsf	14,2	;volatile
 23746                           
 23747                           ;LEDcomm.c: 30: }
 23748  1DE0  2DE3               	goto	l7857
 23749  1DE1                     l226:	
 23750                           ;LEDcomm.c: 31: else do { LATCbits.LATC2 = 0; } while(0);
 23751                           
 23752  1DE1  0022               	movlb	2	; select bank2
 23753  1DE2  110E               	bcf	14,2	;volatile
 23754  1DE3                     l7857:	
 23755                           
 23756                           ;LEDcomm.c: 33: if( j == latch_start) {
 23757  1DE3  0020               	movlb	0	; select bank0
 23758  1DE4  0833               	movf	send_last_2bytes_IK@latch_start,w
 23759  1DE5  00B6               	movwf	??_send_last_2bytes_IK
 23760  1DE6  01B7               	clrf	??_send_last_2bytes_IK+1
 23761  1DE7  083B               	movf	send_last_2bytes_IK@j+1,w
 23762  1DE8  0637               	xorwf	??_send_last_2bytes_IK+1,w
 23763  1DE9  1D03               	skipz
 23764  1DEA  2DED               	goto	u7345
 23765  1DEB  083A               	movf	send_last_2bytes_IK@j,w
 23766  1DEC  0636               	xorwf	??_send_last_2bytes_IK,w
 23767  1DED                     u7345:	
 23768  1DED  1D03               	skipz
 23769  1DEE  2DF8               	goto	l235
 23770                           
 23771                           ;LEDcomm.c: 35: if (topOrBottom == 1){do { LATBbits.LATB4 = 1; } while(0);} else do { LA
      +                          TCbits.LATC0 = 1; } while(0);
 23772  1DEF  0334               	decf	send_last_2bytes_IK@topOrBottom,w
 23773  1DF0  0435               	iorwf	send_last_2bytes_IK@topOrBottom+1,w
 23774  1DF1  1D03               	btfss	3,2
 23775  1DF2  2DF6               	goto	l233
 23776  1DF3  0022               	movlb	2	; select bank2
 23777  1DF4  160D               	bsf	13,4	;volatile
 23778  1DF5  2DF8               	goto	l235
 23779  1DF6                     l233:	
 23780  1DF6  0022               	movlb	2	; select bank2
 23781  1DF7  140E               	bsf	14,0	;volatile
 23782  1DF8                     l235:	
 23783                           ;LEDcomm.c: 37: }
 23784                           ;LEDcomm.c: 39: do { LATAbits.LATA2 = 1; } while(0);
 23785                           
 23786  1DF8  0022               	movlb	2	; select bank2
 23787  1DF9  150C               	bsf	12,2	;volatile
 23788  1DFA  30FF               	movlw	255
 23789  1DFB  0020               	movlb	0	; select bank0
 23790  1DFC  07BA               	addwf	send_last_2bytes_IK@j,f
 23791  1DFD  30FF               	movlw	255
 23792  1DFE  3DBB               	addwfc	send_last_2bytes_IK@j+1,f
 23793  1DFF  1FBB               	btfss	send_last_2bytes_IK@j+1,7
 23794  1E00  2DC7               	goto	l220
 23795  1E01                     l237:	
 23796                           ;LEDcomm.c: 41: }
 23797                           ;LEDcomm.c: 43: do { LATAbits.LATA2 = 0; } while(0);
 23798                           
 23799  1E01  0022               	movlb	2	; select bank2
 23800  1E02  110C               	bcf	12,2	;volatile
 23801                           
 23802                           ;LEDcomm.c: 44: if (topOrBottom == 1){do { LATBbits.LATB4 = 0; } while(0);} else do { LA
      +                          TCbits.LATC0 = 0; } while(0);
 23803  1E03  0020               	movlb	0	; select bank0
 23804  1E04  0334               	decf	send_last_2bytes_IK@topOrBottom,w
 23805  1E05  0435               	iorwf	send_last_2bytes_IK@topOrBottom+1,w
 23806  1E06  1D03               	btfss	3,2
 23807  1E07  2E0B               	goto	l243
 23808  1E08  0022               	movlb	2	; select bank2
 23809  1E09  120D               	bcf	13,4	;volatile
 23810  1E0A  0008               	return
 23811  1E0B                     l243:	
 23812  1E0B  0022               	movlb	2	; select bank2
 23813  1E0C  100E               	bcf	14,0	;volatile
 23814  1E0D  0008               	return
 23815  1E0E                     __end_of_send_last_2bytes_IK:	
 23816                           
 23817                           	psect	text118
 23818  25E9                     __ptext118:	
 23819 ;; *************** function _send_2bytes_latchless_IK *****************
 23820 ;; Defined at:
 23821 ;;		line 49 in file "LEDcomm.c"
 23822 ;; Parameters:    Size  Location     Type
 23823 ;;  data            2   17[BANK0 ] unsigned int 
 23824 ;; Auto vars:     Size  Location     Type
 23825 ;;  j               2   23[BANK0 ] int 
 23826 ;; Return value:  Size  Location     Type
 23827 ;;                  1    wreg      void 
 23828 ;; Registers used:
 23829 ;;		wreg, status,2, status,0
 23830 ;; Tracked objects:
 23831 ;;		On entry : 0/0
 23832 ;;		On exit  : 0/0
 23833 ;;		Unchanged: 0/0
 23834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23835 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23836 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23837 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23838 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23839 ;;Total ram usage:        8 bytes
 23840 ;; Hardware stack levels used:    1
 23841 ;; Hardware stack levels required when called:    6
 23842 ;; This function calls:
 23843 ;;		Nothing
 23844 ;; This function is called by:
 23845 ;;		_send_2length_2bytes_IK
 23846 ;; This function uses a non-reentrant model
 23847 ;;
 23848                           
 23849                           
 23850                           ;psect for function _send_2bytes_latchless_IK
 23851  25E9                     _send_2bytes_latchless_IK:	
 23852                           
 23853                           ;incstack = 0
 23854                           ; Regs used in _send_2bytes_latchless_IK: [wreg+status,2+status,0]
 23855                           ;LEDcomm.c: 51: do { LATBbits.LATB4 = 0; } while(0);
 23856  25E9  0022               	movlb	2	; select bank2
 23857  25EA  120D               	bcf	13,4	;volatile
 23858                           
 23859                           ;LEDcomm.c: 53: for(int j = 15; j>=0; j--){
 23860  25EB  300F               	movlw	15
 23861  25EC  0020               	movlb	0	; select bank0
 23862  25ED  00B7               	movwf	send_2bytes_latchless_IK@j
 23863  25EE  3000               	movlw	0
 23864  25EF  00B8               	movwf	send_2bytes_latchless_IK@j+1
 23865  25F0  1BB8               	btfsc	send_2bytes_latchless_IK@j+1,7
 23866  25F1  2E16               	goto	l262
 23867  25F2                     l252:	
 23868                           ;LEDcomm.c: 54: do { LATAbits.LATA2 = 0; } while(0);
 23869                           
 23870  25F2  0022               	movlb	2	; select bank2
 23871  25F3  110C               	bcf	12,2	;volatile
 23872                           
 23873                           ;LEDcomm.c: 56: if (data & 1 << j){
 23874  25F4  3001               	movlw	1
 23875  25F5  0020               	movlb	0	; select bank0
 23876  25F6  00B3               	movwf	??_send_2bytes_latchless_IK
 23877  25F7  3000               	movlw	0
 23878  25F8  00B4               	movwf	??_send_2bytes_latchless_IK+1
 23879  25F9  0A37               	incf	send_2bytes_latchless_IK@j,w
 23880  25FA  2DFD               	goto	u7394
 23881  25FB                     u7395:	
 23882  25FB  35B3               	lslf	??_send_2bytes_latchless_IK,f
 23883  25FC  0DB4               	rlf	??_send_2bytes_latchless_IK+1,f
 23884  25FD                     u7394:	
 23885  25FD  0B89               	decfsz	9,f
 23886  25FE  2DFB               	goto	u7395
 23887  25FF  0831               	movf	send_2bytes_latchless_IK@data,w
 23888  2600  0533               	andwf	??_send_2bytes_latchless_IK,w
 23889  2601  00B5               	movwf	??_send_2bytes_latchless_IK+2
 23890  2602  0832               	movf	send_2bytes_latchless_IK@data+1,w
 23891  2603  0534               	andwf	??_send_2bytes_latchless_IK+1,w
 23892  2604  00B6               	movwf	??_send_2bytes_latchless_IK+3
 23893  2605  0835               	movf	??_send_2bytes_latchless_IK+2,w
 23894  2606  0436               	iorwf	??_send_2bytes_latchless_IK+3,w
 23895  2607  1903               	btfsc	3,2
 23896  2608  2E0C               	goto	l258
 23897                           
 23898                           ;LEDcomm.c: 57: do { LATCbits.LATC2 = 1; } while(0);
 23899  2609  0022               	movlb	2	; select bank2
 23900  260A  150E               	bsf	14,2	;volatile
 23901                           
 23902                           ;LEDcomm.c: 58: }
 23903  260B  2E0E               	goto	l260
 23904  260C                     l258:	
 23905                           ;LEDcomm.c: 59: else do { LATCbits.LATC2 = 0; } while(0);
 23906                           
 23907  260C  0022               	movlb	2	; select bank2
 23908  260D  110E               	bcf	14,2	;volatile
 23909  260E                     l260:	
 23910                           ;LEDcomm.c: 62: do { LATAbits.LATA2 = 1; } while(0);
 23911                           
 23912  260E  150C               	bsf	12,2	;volatile
 23913  260F  30FF               	movlw	255
 23914  2610  0020               	movlb	0	; select bank0
 23915  2611  07B7               	addwf	send_2bytes_latchless_IK@j,f
 23916  2612  30FF               	movlw	255
 23917  2613  3DB8               	addwfc	send_2bytes_latchless_IK@j+1,f
 23918  2614  1FB8               	btfss	send_2bytes_latchless_IK@j+1,7
 23919  2615  2DF2               	goto	l252
 23920  2616                     l262:	
 23921                           ;LEDcomm.c: 64: }
 23922                           ;LEDcomm.c: 66: do { LATAbits.LATA2 = 0; } while(0);
 23923                           
 23924  2616  0022               	movlb	2	; select bank2
 23925  2617  110C               	bcf	12,2	;volatile
 23926  2618  0008               	return
 23927  2619                     __end_of_send_2bytes_latchless_IK:	
 23928                           
 23929                           	psect	text119
 23930  2213                     __ptext119:	
 23931 ;; *************** function _SYSTEM_Initialize *****************
 23932 ;; Defined at:
 23933 ;;		line 77 in file "mcc_generated_files/mcc.c"
 23934 ;; Parameters:    Size  Location     Type
 23935 ;;		None
 23936 ;; Auto vars:     Size  Location     Type
 23937 ;;		None
 23938 ;; Return value:  Size  Location     Type
 23939 ;;                  1    wreg      void 
 23940 ;; Registers used:
 23941 ;;		wreg, status,2, status,0, pclath, cstack
 23942 ;; Tracked objects:
 23943 ;;		On entry : 0/0
 23944 ;;		On exit  : 0/0
 23945 ;;		Unchanged: 0/0
 23946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23951 ;;Total ram usage:        0 bytes
 23952 ;; Hardware stack levels used:    1
 23953 ;; Hardware stack levels required when called:    8
 23954 ;; This function calls:
 23955 ;;		_EUSART_Initialize
 23956 ;;		_OSCILLATOR_Initialize
 23957 ;;		_PIN_MANAGER_Initialize
 23958 ;;		_PMD_Initialize
 23959 ;;		_TMR0_Initialize
 23960 ;;		_TMR2_Initialize
 23961 ;;		_TMR4_Initialize
 23962 ;;		_WDT_Initialize
 23963 ;; This function is called by:
 23964 ;;		_main
 23965 ;; This function uses a non-reentrant model
 23966 ;;
 23967                           
 23968                           
 23969                           ;psect for function _SYSTEM_Initialize
 23970  2213                     _SYSTEM_Initialize:	
 23971                           
 23972                           ;mcc.c: 80: PMD_Initialize();
 23973                           
 23974                           ;incstack = 0
 23975                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 23976  2213  31AF  27F0  31A2   	fcall	_PMD_Initialize
 23977                           
 23978                           ;mcc.c: 81: PIN_MANAGER_Initialize();
 23979  2216  31A6  2679  31A2   	fcall	_PIN_MANAGER_Initialize
 23980                           
 23981                           ;mcc.c: 82: OSCILLATOR_Initialize();
 23982  2219  31A0  20BC  31A2   	fcall	_OSCILLATOR_Initialize
 23983                           
 23984                           ;mcc.c: 83: WDT_Initialize();
 23985  221C  31AF  2785  31A2   	fcall	_WDT_Initialize
 23986                           
 23987                           ;mcc.c: 84: TMR4_Initialize();
 23988  221F  31A1  21AC  31A2   	fcall	_TMR4_Initialize
 23989                           
 23990                           ;mcc.c: 85: TMR2_Initialize();
 23991  2222  3198  20F4  31A2   	fcall	_TMR2_Initialize
 23992                           
 23993                           ;mcc.c: 86: TMR0_Initialize();
 23994  2225  31A1  21D2  31A2   	fcall	_TMR0_Initialize
 23995                           
 23996                           ;mcc.c: 87: EUSART_Initialize();
 23997  2228  31A2  225C         	fcall	_EUSART_Initialize
 23998  222A  0008               	return
 23999  222B                     __end_of_SYSTEM_Initialize:	
 24000                           
 24001                           	psect	text120
 24002  2F85                     __ptext120:	
 24003 ;; *************** function _WDT_Initialize *****************
 24004 ;; Defined at:
 24005 ;;		line 104 in file "mcc_generated_files/mcc.c"
 24006 ;; Parameters:    Size  Location     Type
 24007 ;;		None
 24008 ;; Auto vars:     Size  Location     Type
 24009 ;;		None
 24010 ;; Return value:  Size  Location     Type
 24011 ;;                  1    wreg      void 
 24012 ;; Registers used:
 24013 ;;		wreg
 24014 ;; Tracked objects:
 24015 ;;		On entry : 0/0
 24016 ;;		On exit  : 0/0
 24017 ;;		Unchanged: 0/0
 24018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24023 ;;Total ram usage:        0 bytes
 24024 ;; Hardware stack levels used:    1
 24025 ;; Hardware stack levels required when called:    6
 24026 ;; This function calls:
 24027 ;;		Nothing
 24028 ;; This function is called by:
 24029 ;;		_SYSTEM_Initialize
 24030 ;; This function uses a non-reentrant model
 24031 ;;
 24032                           
 24033                           
 24034                           ;psect for function _WDT_Initialize
 24035  2F85                     _WDT_Initialize:	
 24036                           
 24037                           ;mcc.c: 107: WDTCON = 0x16;
 24038                           
 24039                           ;incstack = 0
 24040                           ; Regs used in _WDT_Initialize: [wreg]
 24041  2F85  3016               	movlw	22
 24042  2F86  0021               	movlb	1	; select bank1
 24043  2F87  0097               	movwf	23	;volatile
 24044  2F88  0008               	return
 24045  2F89                     __end_of_WDT_Initialize:	
 24046                           
 24047                           	psect	text121
 24048  21AC                     __ptext121:	
 24049 ;; *************** function _TMR4_Initialize *****************
 24050 ;; Defined at:
 24051 ;;		line 63 in file "mcc_generated_files/tmr4.c"
 24052 ;; Parameters:    Size  Location     Type
 24053 ;;		None
 24054 ;; Auto vars:     Size  Location     Type
 24055 ;;		None
 24056 ;; Return value:  Size  Location     Type
 24057 ;;                  1    wreg      void 
 24058 ;; Registers used:
 24059 ;;		wreg, status,2, status,0, pclath, cstack
 24060 ;; Tracked objects:
 24061 ;;		On entry : 0/0
 24062 ;;		On exit  : 0/0
 24063 ;;		Unchanged: 0/0
 24064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24069 ;;Total ram usage:        0 bytes
 24070 ;; Hardware stack levels used:    1
 24071 ;; Hardware stack levels required when called:    7
 24072 ;; This function calls:
 24073 ;;		_TMR4_SetInterruptHandler
 24074 ;; This function is called by:
 24075 ;;		_SYSTEM_Initialize
 24076 ;; This function uses a non-reentrant model
 24077 ;;
 24078                           
 24079                           
 24080                           ;psect for function _TMR4_Initialize
 24081  21AC                     _TMR4_Initialize:	
 24082                           
 24083                           ;tmr4.c: 68: PR4 = 0xF3;
 24084                           
 24085                           ;incstack = 0
 24086                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
 24087  21AC  30F3               	movlw	243
 24088  21AD  0028               	movlb	8	; select bank8
 24089  21AE  0096               	movwf	22	;volatile
 24090                           
 24091                           ;tmr4.c: 71: TMR4 = 0x00;
 24092  21AF  0195               	clrf	21	;volatile
 24093                           
 24094                           ;tmr4.c: 74: PIR2bits.TMR4IF = 0;
 24095  21B0  0020               	movlb	0	; select bank0
 24096  21B1  1092               	bcf	18,1	;volatile
 24097                           
 24098                           ;tmr4.c: 77: PIE2bits.TMR4IE = 1;
 24099  21B2  0021               	movlb	1	; select bank1
 24100  21B3  1492               	bsf	18,1	;volatile
 24101                           
 24102                           ;tmr4.c: 80: TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandler);
 24103  21B4  30B2               	movlw	low _TMR4_DefaultInterruptHandler
 24104  21B5  0020               	movlb	0	; select bank0
 24105  21B6  00B1               	movwf	TMR4_SetInterruptHandler@InterruptHandler
 24106  21B7  3020               	movlw	high _TMR4_DefaultInterruptHandler
 24107  21B8  00B2               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
 24108  21B9  31A0  2085         	fcall	_TMR4_SetInterruptHandler
 24109                           
 24110                           ;tmr4.c: 83: T4CON = 0x7F;
 24111  21BB  307F               	movlw	127
 24112  21BC  0028               	movlb	8	; select bank8
 24113  21BD  0097               	movwf	23	;volatile
 24114  21BE  0008               	return
 24115  21BF                     __end_of_TMR4_Initialize:	
 24116                           
 24117                           	psect	text122
 24118  2085                     __ptext122:	
 24119 ;; *************** function _TMR4_SetInterruptHandler *****************
 24120 ;; Defined at:
 24121 ;;		line 131 in file "mcc_generated_files/tmr4.c"
 24122 ;; Parameters:    Size  Location     Type
 24123 ;;  InterruptHan    2   17[BANK0 ] PTR FTN()void 
 24124 ;;		 -> TMR4_DefaultInterruptHandler(1), 
 24125 ;; Auto vars:     Size  Location     Type
 24126 ;;		None
 24127 ;; Return value:  Size  Location     Type
 24128 ;;                  1    wreg      void 
 24129 ;; Registers used:
 24130 ;;		wreg
 24131 ;; Tracked objects:
 24132 ;;		On entry : 0/0
 24133 ;;		On exit  : 0/0
 24134 ;;		Unchanged: 0/0
 24135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24136 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24139 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24140 ;;Total ram usage:        2 bytes
 24141 ;; Hardware stack levels used:    1
 24142 ;; Hardware stack levels required when called:    6
 24143 ;; This function calls:
 24144 ;;		Nothing
 24145 ;; This function is called by:
 24146 ;;		_TMR4_Initialize
 24147 ;; This function uses a non-reentrant model
 24148 ;;
 24149                           
 24150                           
 24151                           ;psect for function _TMR4_SetInterruptHandler
 24152  2085                     _TMR4_SetInterruptHandler:	
 24153                           
 24154                           ;tmr4.c: 132: TMR4_InterruptHandler = InterruptHandler;
 24155                           
 24156                           ;incstack = 0
 24157                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
 24158  2085  0020               	movlb	0	; select bank0
 24159  2086  0832               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
 24160  2087  0023               	movlb	3	; select bank3
 24161  2088  00E3               	movwf	(_TMR4_InterruptHandler+1)^(0+384)
 24162  2089  0020               	movlb	0	; select bank0
 24163  208A  0831               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
 24164  208B  0023               	movlb	3	; select bank3
 24165  208C  00E2               	movwf	_TMR4_InterruptHandler^(0+384)
 24166  208D  0008               	return
 24167  208E                     __end_of_TMR4_SetInterruptHandler:	
 24168                           
 24169                           	psect	text123
 24170  18F4                     __ptext123:	
 24171 ;; *************** function _TMR2_Initialize *****************
 24172 ;; Defined at:
 24173 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 24174 ;; Parameters:    Size  Location     Type
 24175 ;;		None
 24176 ;; Auto vars:     Size  Location     Type
 24177 ;;		None
 24178 ;; Return value:  Size  Location     Type
 24179 ;;                  1    wreg      void 
 24180 ;; Registers used:
 24181 ;;		wreg, status,2, status,0, pclath, cstack
 24182 ;; Tracked objects:
 24183 ;;		On entry : 0/0
 24184 ;;		On exit  : 0/0
 24185 ;;		Unchanged: 0/0
 24186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24191 ;;Total ram usage:        0 bytes
 24192 ;; Hardware stack levels used:    1
 24193 ;; Hardware stack levels required when called:    7
 24194 ;; This function calls:
 24195 ;;		_TMR2_SetInterruptHandler
 24196 ;; This function is called by:
 24197 ;;		_SYSTEM_Initialize
 24198 ;; This function uses a non-reentrant model
 24199 ;;
 24200                           
 24201                           
 24202                           ;psect for function _TMR2_Initialize
 24203  18F4                     _TMR2_Initialize:	
 24204                           
 24205                           ;tmr2.c: 67: PR2 = 0x0F;
 24206                           
 24207                           ;incstack = 0
 24208                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 24209  18F4  300F               	movlw	15
 24210  18F5  0020               	movlb	0	; select bank0
 24211  18F6  009E               	movwf	30	;volatile
 24212                           
 24213                           ;tmr2.c: 70: TMR2 = 0x00;
 24214  18F7  019D               	clrf	29	;volatile
 24215                           
 24216                           ;tmr2.c: 73: PIR1bits.TMR2IF = 0;
 24217  18F8  1091               	bcf	17,1	;volatile
 24218                           
 24219                           ;tmr2.c: 76: PIE1bits.TMR2IE = 1;
 24220  18F9  0021               	movlb	1	; select bank1
 24221  18FA  1491               	bsf	17,1	;volatile
 24222                           
 24223                           ;tmr2.c: 79: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 24224  18FB  306A               	movlw	low _TMR2_DefaultInterruptHandler
 24225  18FC  0020               	movlb	0	; select bank0
 24226  18FD  00B1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 24227  18FE  3020               	movlw	high _TMR2_DefaultInterruptHandler
 24228  18FF  00B2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 24229  1900  31A0  207C         	fcall	_TMR2_SetInterruptHandler
 24230                           
 24231                           ;tmr2.c: 82: T2CON = 0x4E;
 24232  1902  304E               	movlw	78
 24233  1903  0020               	movlb	0	; select bank0
 24234  1904  009F               	movwf	31	;volatile
 24235  1905  0008               	return
 24236  1906                     __end_of_TMR2_Initialize:	
 24237                           
 24238                           	psect	text124
 24239  207C                     __ptext124:	
 24240 ;; *************** function _TMR2_SetInterruptHandler *****************
 24241 ;; Defined at:
 24242 ;;		line 130 in file "mcc_generated_files/tmr2.c"
 24243 ;; Parameters:    Size  Location     Type
 24244 ;;  InterruptHan    2   17[BANK0 ] PTR FTN()void 
 24245 ;;		 -> TMR2_DefaultInterruptHandler(1), 
 24246 ;; Auto vars:     Size  Location     Type
 24247 ;;		None
 24248 ;; Return value:  Size  Location     Type
 24249 ;;                  1    wreg      void 
 24250 ;; Registers used:
 24251 ;;		wreg
 24252 ;; Tracked objects:
 24253 ;;		On entry : 0/0
 24254 ;;		On exit  : 0/0
 24255 ;;		Unchanged: 0/0
 24256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24257 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24260 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24261 ;;Total ram usage:        2 bytes
 24262 ;; Hardware stack levels used:    1
 24263 ;; Hardware stack levels required when called:    6
 24264 ;; This function calls:
 24265 ;;		Nothing
 24266 ;; This function is called by:
 24267 ;;		_TMR2_Initialize
 24268 ;; This function uses a non-reentrant model
 24269 ;;
 24270                           
 24271                           
 24272                           ;psect for function _TMR2_SetInterruptHandler
 24273  207C                     _TMR2_SetInterruptHandler:	
 24274                           
 24275                           ;tmr2.c: 131: TMR2_InterruptHandler = InterruptHandler;
 24276                           
 24277                           ;incstack = 0
 24278                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
 24279  207C  0020               	movlb	0	; select bank0
 24280  207D  0832               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
 24281  207E  0023               	movlb	3	; select bank3
 24282  207F  00E5               	movwf	(_TMR2_InterruptHandler+1)^(0+384)
 24283  2080  0020               	movlb	0	; select bank0
 24284  2081  0831               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
 24285  2082  0023               	movlb	3	; select bank3
 24286  2083  00E4               	movwf	_TMR2_InterruptHandler^(0+384)
 24287  2084  0008               	return
 24288  2085                     __end_of_TMR2_SetInterruptHandler:	
 24289                           
 24290                           	psect	text125
 24291  21D2                     __ptext125:	
 24292 ;; *************** function _TMR0_Initialize *****************
 24293 ;; Defined at:
 24294 ;;		line 59 in file "mcc_generated_files/tmr0.c"
 24295 ;; Parameters:    Size  Location     Type
 24296 ;;		None
 24297 ;; Auto vars:     Size  Location     Type
 24298 ;;		None
 24299 ;; Return value:  Size  Location     Type
 24300 ;;                  1    wreg      void 
 24301 ;; Registers used:
 24302 ;;		wreg, status,2, status,0, pclath, cstack
 24303 ;; Tracked objects:
 24304 ;;		On entry : 0/0
 24305 ;;		On exit  : 0/0
 24306 ;;		Unchanged: 0/0
 24307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24312 ;;Total ram usage:        0 bytes
 24313 ;; Hardware stack levels used:    1
 24314 ;; Hardware stack levels required when called:    7
 24315 ;; This function calls:
 24316 ;;		_TMR0_SetInterruptHandler
 24317 ;; This function is called by:
 24318 ;;		_SYSTEM_Initialize
 24319 ;; This function uses a non-reentrant model
 24320 ;;
 24321                           
 24322                           
 24323                           ;psect for function _TMR0_Initialize
 24324  21D2                     _TMR0_Initialize:	
 24325                           
 24326                           ;tmr0.c: 64: T0CON1 = 0x58;
 24327                           
 24328                           ;incstack = 0
 24329                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 24330  21D2  3058               	movlw	88
 24331  21D3  0020               	movlb	0	; select bank0
 24332  21D4  0098               	movwf	24	;volatile
 24333                           
 24334                           ;tmr0.c: 67: TMR0H = 0x61;
 24335  21D5  3061               	movlw	97
 24336  21D6  0096               	movwf	22	;volatile
 24337                           
 24338                           ;tmr0.c: 70: TMR0L = 0x00;
 24339  21D7  0195               	clrf	21	;volatile
 24340                           
 24341                           ;tmr0.c: 73: PIR0bits.TMR0IF = 0;
 24342  21D8  1290               	bcf	16,5	;volatile
 24343                           
 24344                           ;tmr0.c: 76: PIE0bits.TMR0IE = 1;
 24345  21D9  0021               	movlb	1	; select bank1
 24346  21DA  1690               	bsf	16,5	;volatile
 24347                           
 24348                           ;tmr0.c: 79: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 24349  21DB  3016               	movlw	low _TMR0_DefaultInterruptHandler
 24350  21DC  0020               	movlb	0	; select bank0
 24351  21DD  00B1               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 24352  21DE  3027               	movlw	high _TMR0_DefaultInterruptHandler
 24353  21DF  00B2               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 24354  21E0  31A0  2073         	fcall	_TMR0_SetInterruptHandler
 24355                           
 24356                           ;tmr0.c: 82: T0CON0 = 0x89;
 24357  21E2  3089               	movlw	137
 24358  21E3  0020               	movlb	0	; select bank0
 24359  21E4  0097               	movwf	23	;volatile
 24360  21E5  0008               	return
 24361  21E6                     __end_of_TMR0_Initialize:	
 24362                           
 24363                           	psect	text126
 24364  2073                     __ptext126:	
 24365 ;; *************** function _TMR0_SetInterruptHandler *****************
 24366 ;; Defined at:
 24367 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 24368 ;; Parameters:    Size  Location     Type
 24369 ;;  InterruptHan    2   17[BANK0 ] PTR FTN()void 
 24370 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 24371 ;; Auto vars:     Size  Location     Type
 24372 ;;		None
 24373 ;; Return value:  Size  Location     Type
 24374 ;;                  1    wreg      void 
 24375 ;; Registers used:
 24376 ;;		wreg
 24377 ;; Tracked objects:
 24378 ;;		On entry : 0/0
 24379 ;;		On exit  : 0/0
 24380 ;;		Unchanged: 0/0
 24381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24382 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24385 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24386 ;;Total ram usage:        2 bytes
 24387 ;; Hardware stack levels used:    1
 24388 ;; Hardware stack levels required when called:    6
 24389 ;; This function calls:
 24390 ;;		Nothing
 24391 ;; This function is called by:
 24392 ;;		_TMR0_Initialize
 24393 ;; This function uses a non-reentrant model
 24394 ;;
 24395                           
 24396                           
 24397                           ;psect for function _TMR0_SetInterruptHandler
 24398  2073                     _TMR0_SetInterruptHandler:	
 24399                           
 24400                           ;tmr0.c: 133: TMR0_InterruptHandler = InterruptHandler;
 24401                           
 24402                           ;incstack = 0
 24403                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 24404  2073  0020               	movlb	0	; select bank0
 24405  2074  0832               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 24406  2075  0023               	movlb	3	; select bank3
 24407  2076  00E7               	movwf	(_TMR0_InterruptHandler+1)^(0+384)
 24408  2077  0020               	movlb	0	; select bank0
 24409  2078  0831               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 24410  2079  0023               	movlb	3	; select bank3
 24411  207A  00E6               	movwf	_TMR0_InterruptHandler^(0+384)
 24412  207B  0008               	return
 24413  207C                     __end_of_TMR0_SetInterruptHandler:	
 24414                           
 24415                           	psect	text127
 24416  2FF0                     __ptext127:	
 24417 ;; *************** function _PMD_Initialize *****************
 24418 ;; Defined at:
 24419 ;;		line 110 in file "mcc_generated_files/mcc.c"
 24420 ;; Parameters:    Size  Location     Type
 24421 ;;		None
 24422 ;; Auto vars:     Size  Location     Type
 24423 ;;		None
 24424 ;; Return value:  Size  Location     Type
 24425 ;;                  1    wreg      void 
 24426 ;; Registers used:
 24427 ;;		status,2
 24428 ;; Tracked objects:
 24429 ;;		On entry : 0/0
 24430 ;;		On exit  : 0/0
 24431 ;;		Unchanged: 0/0
 24432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24437 ;;Total ram usage:        0 bytes
 24438 ;; Hardware stack levels used:    1
 24439 ;; Hardware stack levels required when called:    6
 24440 ;; This function calls:
 24441 ;;		Nothing
 24442 ;; This function is called by:
 24443 ;;		_SYSTEM_Initialize
 24444 ;; This function uses a non-reentrant model
 24445 ;;
 24446                           
 24447                           
 24448                           ;psect for function _PMD_Initialize
 24449  2FF0                     _PMD_Initialize:	
 24450                           
 24451                           ;mcc.c: 113: PMD0 = 0x00;
 24452                           
 24453                           ;incstack = 0
 24454                           ; Regs used in _PMD_Initialize: [status,2]
 24455  2FF0  0032               	movlb	18	; select bank18
 24456  2FF1  0191               	clrf	17	;volatile
 24457                           
 24458                           ;mcc.c: 115: PMD1 = 0x00;
 24459  2FF2  0192               	clrf	18	;volatile
 24460                           
 24461                           ;mcc.c: 117: PMD2 = 0x00;
 24462  2FF3  0193               	clrf	19	;volatile
 24463                           
 24464                           ;mcc.c: 119: PMD3 = 0x00;
 24465  2FF4  0194               	clrf	20	;volatile
 24466                           
 24467                           ;mcc.c: 121: PMD4 = 0x00;
 24468  2FF5  0195               	clrf	21	;volatile
 24469                           
 24470                           ;mcc.c: 123: PMD5 = 0x00;
 24471  2FF6  0196               	clrf	22	;volatile
 24472  2FF7  0008               	return
 24473  2FF8                     __end_of_PMD_Initialize:	
 24474                           
 24475                           	psect	text128
 24476  2679                     __ptext128:	
 24477 ;; *************** function _PIN_MANAGER_Initialize *****************
 24478 ;; Defined at:
 24479 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 24480 ;; Parameters:    Size  Location     Type
 24481 ;;		None
 24482 ;; Auto vars:     Size  Location     Type
 24483 ;;		None
 24484 ;; Return value:  Size  Location     Type
 24485 ;;                  1    wreg      void 
 24486 ;; Registers used:
 24487 ;;		wreg, status,2, status,0
 24488 ;; Tracked objects:
 24489 ;;		On entry : 0/0
 24490 ;;		On exit  : 0/0
 24491 ;;		Unchanged: 0/0
 24492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24497 ;;Total ram usage:        0 bytes
 24498 ;; Hardware stack levels used:    1
 24499 ;; Hardware stack levels required when called:    6
 24500 ;; This function calls:
 24501 ;;		Nothing
 24502 ;; This function is called by:
 24503 ;;		_SYSTEM_Initialize
 24504 ;; This function uses a non-reentrant model
 24505 ;;
 24506                           
 24507                           
 24508                           ;psect for function _PIN_MANAGER_Initialize
 24509  2679                     _PIN_MANAGER_Initialize:	
 24510                           
 24511                           ;pin_manager.c: 57: LATA = 0x00;
 24512                           
 24513                           ;incstack = 0
 24514                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 24515  2679  0022               	movlb	2	; select bank2
 24516  267A  018C               	clrf	12	;volatile
 24517                           
 24518                           ;pin_manager.c: 58: LATB = 0x00;
 24519  267B  018D               	clrf	13	;volatile
 24520                           
 24521                           ;pin_manager.c: 59: LATC = 0x00;
 24522  267C  018E               	clrf	14	;volatile
 24523                           
 24524                           ;pin_manager.c: 64: TRISA = 0x33;
 24525  267D  3033               	movlw	51
 24526  267E  0021               	movlb	1	; select bank1
 24527  267F  008C               	movwf	12	;volatile
 24528                           
 24529                           ;pin_manager.c: 65: TRISB = 0x60;
 24530  2680  3060               	movlw	96
 24531  2681  008D               	movwf	13	;volatile
 24532                           
 24533                           ;pin_manager.c: 66: TRISC = 0xF8;
 24534  2682  30F8               	movlw	248
 24535  2683  008E               	movwf	14	;volatile
 24536                           
 24537                           ;pin_manager.c: 71: ANSELC = 0x00;
 24538  2684  0023               	movlb	3	; select bank3
 24539  2685  018E               	clrf	14	;volatile
 24540                           
 24541                           ;pin_manager.c: 72: ANSELB = 0x00;
 24542  2686  018D               	clrf	13	;volatile
 24543                           
 24544                           ;pin_manager.c: 73: ANSELA = 0x00;
 24545  2687  018C               	clrf	12	;volatile
 24546                           
 24547                           ;pin_manager.c: 78: WPUB = 0x00;
 24548  2688  0024               	movlb	4	; select bank4
 24549  2689  018D               	clrf	13	;volatile
 24550                           
 24551                           ;pin_manager.c: 79: WPUA = 0x00;
 24552  268A  018C               	clrf	12	;volatile
 24553                           
 24554                           ;pin_manager.c: 80: WPUC = 0xC8;
 24555  268B  30C8               	movlw	200
 24556  268C  008E               	movwf	14	;volatile
 24557                           
 24558                           ;pin_manager.c: 85: ODCONA = 0x00;
 24559  268D  0025               	movlb	5	; select bank5
 24560  268E  018C               	clrf	12	;volatile
 24561                           
 24562                           ;pin_manager.c: 86: ODCONB = 0x00;
 24563  268F  018D               	clrf	13	;volatile
 24564                           
 24565                           ;pin_manager.c: 87: ODCONC = 0x00;
 24566  2690  018E               	clrf	14	;volatile
 24567                           
 24568                           ;pin_manager.c: 94: SSP1DATPPSbits.SSP1DATPPS = 0x0D;
 24569  2691  003C               	movlb	28	; select bank28
 24570  2692  0821               	movf	33,w	;volatile
 24571  2693  39E0               	andlw	-32
 24572  2694  380D               	iorlw	13
 24573  2695  00A1               	movwf	33	;volatile
 24574                           
 24575                           ;pin_manager.c: 95: SSP1CLKPPSbits.SSP1CLKPPS = 0x0E;
 24576  2696  0820               	movf	32,w	;volatile
 24577  2697  39E0               	andlw	-32
 24578  2698  380E               	iorlw	14
 24579  2699  00A0               	movwf	32	;volatile
 24580                           
 24581                           ;pin_manager.c: 96: RXPPSbits.RXPPS = 0x17;
 24582  269A  0824               	movf	36,w	;volatile
 24583  269B  39E0               	andlw	-32
 24584  269C  3817               	iorlw	23
 24585  269D  00A4               	movwf	36	;volatile
 24586                           
 24587                           ;pin_manager.c: 97: RB7PPSbits.RB7PPS = 0x14;
 24588  269E  003D               	movlb	29	; select bank29
 24589  269F  081F               	movf	31,w	;volatile
 24590  26A0  39E0               	andlw	-32
 24591  26A1  3814               	iorlw	20
 24592  26A2  009F               	movwf	31	;volatile
 24593                           
 24594                           ;pin_manager.c: 98: RB6PPSbits.RB6PPS = 0x18;
 24595  26A3  081E               	movf	30,w	;volatile
 24596  26A4  39E0               	andlw	-32
 24597  26A5  3818               	iorlw	24
 24598  26A6  009E               	movwf	30	;volatile
 24599                           
 24600                           ;pin_manager.c: 99: RB5PPSbits.RB5PPS = 0x19;
 24601  26A7  081D               	movf	29,w	;volatile
 24602  26A8  39E0               	andlw	-32
 24603  26A9  3819               	iorlw	25
 24604  26AA  009D               	movwf	29	;volatile
 24605  26AB  0008               	return
 24606  26AC                     __end_of_PIN_MANAGER_Initialize:	
 24607                           
 24608                           	psect	text129
 24609  20BC                     __ptext129:	
 24610 ;; *************** function _OSCILLATOR_Initialize *****************
 24611 ;; Defined at:
 24612 ;;		line 90 in file "mcc_generated_files/mcc.c"
 24613 ;; Parameters:    Size  Location     Type
 24614 ;;		None
 24615 ;; Auto vars:     Size  Location     Type
 24616 ;;		None
 24617 ;; Return value:  Size  Location     Type
 24618 ;;                  1    wreg      void 
 24619 ;; Registers used:
 24620 ;;		wreg, status,2
 24621 ;; Tracked objects:
 24622 ;;		On entry : 0/0
 24623 ;;		On exit  : 0/0
 24624 ;;		Unchanged: 0/0
 24625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24630 ;;Total ram usage:        0 bytes
 24631 ;; Hardware stack levels used:    1
 24632 ;; Hardware stack levels required when called:    6
 24633 ;; This function calls:
 24634 ;;		Nothing
 24635 ;; This function is called by:
 24636 ;;		_SYSTEM_Initialize
 24637 ;; This function uses a non-reentrant model
 24638 ;;
 24639                           
 24640                           
 24641                           ;psect for function _OSCILLATOR_Initialize
 24642  20BC                     _OSCILLATOR_Initialize:	
 24643                           
 24644                           ;mcc.c: 93: OSCCON1 = 0x62;
 24645                           
 24646                           ;incstack = 0
 24647                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 24648  20BC  3062               	movlw	98
 24649  20BD  0032               	movlb	18	; select bank18
 24650  20BE  0099               	movwf	25	;volatile
 24651                           
 24652                           ;mcc.c: 95: OSCCON3 = 0x00;
 24653  20BF  019B               	clrf	27	;volatile
 24654                           
 24655                           ;mcc.c: 97: OSCEN = 0x00;
 24656  20C0  019D               	clrf	29	;volatile
 24657                           
 24658                           ;mcc.c: 99: OSCFRQ = 0x03;
 24659  20C1  3003               	movlw	3
 24660  20C2  009F               	movwf	31	;volatile
 24661                           
 24662                           ;mcc.c: 101: OSCTUNE = 0x20;
 24663  20C3  3020               	movlw	32
 24664  20C4  009E               	movwf	30	;volatile
 24665  20C5  0008               	return
 24666  20C6                     __end_of_OSCILLATOR_Initialize:	
 24667                           
 24668                           	psect	text130
 24669  225C                     __ptext130:	
 24670 ;; *************** function _EUSART_Initialize *****************
 24671 ;; Defined at:
 24672 ;;		line 72 in file "mcc_generated_files/eusart.c"
 24673 ;; Parameters:    Size  Location     Type
 24674 ;;		None
 24675 ;; Auto vars:     Size  Location     Type
 24676 ;;		None
 24677 ;; Return value:  Size  Location     Type
 24678 ;;                  1    wreg      void 
 24679 ;; Registers used:
 24680 ;;		wreg, status,2
 24681 ;; Tracked objects:
 24682 ;;		On entry : 0/0
 24683 ;;		On exit  : 0/0
 24684 ;;		Unchanged: 0/0
 24685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24689 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24690 ;;Total ram usage:        1 bytes
 24691 ;; Hardware stack levels used:    1
 24692 ;; Hardware stack levels required when called:    6
 24693 ;; This function calls:
 24694 ;;		Nothing
 24695 ;; This function is called by:
 24696 ;;		_SYSTEM_Initialize
 24697 ;; This function uses a non-reentrant model
 24698 ;;
 24699                           
 24700                           
 24701                           ;psect for function _EUSART_Initialize
 24702  225C                     _EUSART_Initialize:	
 24703                           
 24704                           ;eusart.c: 75: PIE1bits.RCIE = 0;
 24705                           
 24706                           ;incstack = 0
 24707                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
 24708  225C  0021               	movlb	1	; select bank1
 24709  225D  1291               	bcf	17,5	;volatile
 24710                           
 24711                           ;eusart.c: 76: PIE1bits.TXIE = 0;
 24712  225E  1211               	bcf	17,4	;volatile
 24713                           
 24714                           ;eusart.c: 80: BAUD1CON = 0x08;
 24715  225F  3008               	movlw	8
 24716  2260  0023               	movlb	3	; select bank3
 24717  2261  009F               	movwf	31	;volatile
 24718                           
 24719                           ;eusart.c: 83: RC1STA = 0x90;
 24720  2262  3090               	movlw	144
 24721  2263  009D               	movwf	29	;volatile
 24722                           
 24723                           ;eusart.c: 86: TX1STA = 0x24;
 24724  2264  3024               	movlw	36
 24725  2265  009E               	movwf	30	;volatile
 24726                           
 24727                           ;eusart.c: 89: SP1BRGL = 0x19;
 24728  2266  3019               	movlw	25
 24729  2267  009B               	movwf	27	;volatile
 24730                           
 24731                           ;eusart.c: 92: SP1BRGH = 0x00;
 24732  2268  019C               	clrf	28	;volatile
 24733                           
 24734                           ;eusart.c: 96: eusartTxHead = 0;
 24735  2269  01FD               	clrf	_eusartTxHead	;volatile
 24736                           
 24737                           ;eusart.c: 97: eusartTxTail = 0;
 24738  226A  0020               	movlb	0	; select bank0
 24739  226B  01D9               	clrf	_eusartTxTail	;volatile
 24740                           
 24741                           ;eusart.c: 98: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 24742  226C  3008               	movlw	8
 24743  226D  00B1               	movwf	??_EUSART_Initialize
 24744  226E  0831               	movf	??_EUSART_Initialize,w
 24745  226F  00DE               	movwf	_eusartTxBufferRemaining	;volatile
 24746                           
 24747                           ;eusart.c: 100: eusartRxHead = 0;
 24748  2270  01D8               	clrf	_eusartRxHead	;volatile
 24749                           
 24750                           ;eusart.c: 101: eusartRxTail = 0;
 24751  2271  01D7               	clrf	_eusartRxTail	;volatile
 24752                           
 24753                           ;eusart.c: 102: eusartRxCount = 0;
 24754  2272  01D6               	clrf	_eusartRxCount	;volatile
 24755                           
 24756                           ;eusart.c: 105: PIE1bits.RCIE = 1;
 24757  2273  0021               	movlb	1	; select bank1
 24758  2274  1691               	bsf	17,5	;volatile
 24759  2275  0008               	return
 24760  2276                     __end_of_EUSART_Initialize:	
 24761                           
 24762                           	psect	text131
 24763  2399                     __ptext131:	
 24764 ;; *************** function _EUSART_Read *****************
 24765 ;; Defined at:
 24766 ;;		line 108 in file "mcc_generated_files/eusart.c"
 24767 ;; Parameters:    Size  Location     Type
 24768 ;;		None
 24769 ;; Auto vars:     Size  Location     Type
 24770 ;;  readValue       1   18[BANK0 ] unsigned char 
 24771 ;; Return value:  Size  Location     Type
 24772 ;;                  1    wreg      unsigned char 
 24773 ;; Registers used:
 24774 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 24775 ;; Tracked objects:
 24776 ;;		On entry : 0/0
 24777 ;;		On exit  : 0/0
 24778 ;;		Unchanged: 0/0
 24779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24783 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24784 ;;Total ram usage:        2 bytes
 24785 ;; Hardware stack levels used:    1
 24786 ;; Hardware stack levels required when called:    6
 24787 ;; This function calls:
 24788 ;;		Nothing
 24789 ;; This function is called by:
 24790 ;;		_main
 24791 ;;		_getch
 24792 ;; This function uses a non-reentrant model
 24793 ;;
 24794                           
 24795                           
 24796                           ;psect for function _EUSART_Read
 24797  2399                     _EUSART_Read:	
 24798                           
 24799                           ;eusart.c: 110: uint8_t readValue = 0;
 24800                           
 24801                           ;incstack = 0
 24802                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 24803  2399  0020               	movlb	0	; select bank0
 24804  239A  01B2               	clrf	EUSART_Read@readValue
 24805  239B                     l6971:	
 24806                           ;eusart.c: 113: {
 24807                           
 24808                           ;eusart.c: 112: while(0 == eusartRxCount)
 24809                           
 24810  239B  0856               	movf	_eusartRxCount,w	;volatile
 24811  239C  1903               	btfsc	3,2
 24812  239D  2B9B               	goto	l6971
 24813                           
 24814                           ;eusart.c: 114: }
 24815                           ;eusart.c: 116: readValue = eusartRxBuffer[eusartRxTail++];
 24816  239E  0857               	movf	_eusartRxTail,w
 24817  239F  3EA0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 24818  23A0  0086               	movwf	6
 24819  23A1  3001               	movlw	1	; select bank3/4
 24820  23A2  0087               	movwf	7
 24821  23A3  0801               	movf	1,w
 24822  23A4  00B1               	movwf	??_EUSART_Read
 24823  23A5  0831               	movf	??_EUSART_Read,w
 24824  23A6  00B2               	movwf	EUSART_Read@readValue
 24825  23A7  3001               	movlw	1
 24826  23A8  00B1               	movwf	??_EUSART_Read
 24827  23A9  0831               	movf	??_EUSART_Read,w
 24828  23AA  07D7               	addwf	_eusartRxTail,f	;volatile
 24829                           
 24830                           ;eusart.c: 117: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 24831  23AB  3008               	movlw	8
 24832  23AC  0257               	subwf	_eusartRxTail,w	;volatile
 24833  23AD  1803               	btfsc	3,0
 24834                           
 24835                           ;eusart.c: 118: {
 24836                           ;eusart.c: 119: eusartRxTail = 0;
 24837  23AE  01D7               	clrf	_eusartRxTail	;volatile
 24838                           
 24839                           ;eusart.c: 120: }
 24840                           ;eusart.c: 121: PIE1bits.RCIE = 0;
 24841  23AF  0021               	movlb	1	; select bank1
 24842  23B0  1291               	bcf	17,5	;volatile
 24843                           
 24844                           ;eusart.c: 122: eusartRxCount--;
 24845  23B1  3001               	movlw	1
 24846  23B2  0020               	movlb	0	; select bank0
 24847  23B3  02D6               	subwf	_eusartRxCount,f	;volatile
 24848                           
 24849                           ;eusart.c: 123: PIE1bits.RCIE = 1;
 24850  23B4  0021               	movlb	1	; select bank1
 24851  23B5  1691               	bsf	17,5	;volatile
 24852                           
 24853                           ;eusart.c: 125: return readValue;
 24854  23B6  0020               	movlb	0	; select bank0
 24855  23B7  0832               	movf	EUSART_Read@readValue,w
 24856  23B8  0008               	return
 24857  23B9                     __end_of_EUSART_Read:	
 24858                           
 24859                           	psect	intentry
 24860  0004                     __pintentry:	
 24861 ;; *************** function _INTERRUPT_InterruptManager *****************
 24862 ;; Defined at:
 24863 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 24864 ;; Parameters:    Size  Location     Type
 24865 ;;		None
 24866 ;; Auto vars:     Size  Location     Type
 24867 ;;		None
 24868 ;; Return value:  Size  Location     Type
 24869 ;;                  1    wreg      void 
 24870 ;; Registers used:
 24871 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24872 ;; Tracked objects:
 24873 ;;		On entry : 0/0
 24874 ;;		On exit  : 0/0
 24875 ;;		Unchanged: 0/0
 24876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24879 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24880 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24881 ;;Total ram usage:        1 bytes
 24882 ;; Hardware stack levels used:    1
 24883 ;; Hardware stack levels required when called:    5
 24884 ;; This function calls:
 24885 ;;		Absolute function
 24886 ;;		_EUSART_Receive_ISR
 24887 ;;		_EUSART_Transmit_ISR
 24888 ;;		_TMR0_ISR
 24889 ;;		_TMR2_ISR
 24890 ;;		_TMR4_ISR
 24891 ;;		_i2c_busCollisionISR
 24892 ;;		i1_i2c_ISR
 24893 ;; This function is called by:
 24894 ;;		Interrupt level 1
 24895 ;; This function uses a non-reentrant model
 24896 ;;
 24897                           
 24898  0004                     _INTERRUPT_InterruptManager:	
 24899                           
 24900                           ;incstack = 0
 24901  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 24902                           
 24903                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24904  0005  3180               	pagesel	$
 24905  0006  0020               	movlb	0	; select bank0
 24906  0007  087F               	movf	127,w
 24907  0008  00FC               	movwf	??_INTERRUPT_InterruptManager
 24908                           
 24909                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 24910  0009  0021               	movlb	1	; select bank1
 24911  000A  1E90               	btfss	16,5	;volatile
 24912  000B  2813               	goto	i1l376
 24913  000C  0020               	movlb	0	; select bank0
 24914  000D  1E90               	btfss	16,5	;volatile
 24915  000E  2813               	goto	i1l376
 24916                           
 24917                           ;interrupt_manager.c: 55: {
 24918                           ;interrupt_manager.c: 56: TMR0_ISR();
 24919  000F  31A1  214A  3180   	fcall	_TMR0_ISR
 24920                           
 24921                           ;interrupt_manager.c: 57: }
 24922  0012  2855               	goto	i1l392
 24923  0013                     i1l376:	
 24924                           
 24925                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1)
 24926  0013  1F0B               	btfss	11,6	;volatile
 24927  0014  2855               	goto	i1l392
 24928                           
 24929                           ;interrupt_manager.c: 59: {
 24930                           ;interrupt_manager.c: 60: if(PIE1bits.BCL1IE == 1 && PIR1bits.BCL1IF == 1)
 24931  0015  0021               	movlb	1	; select bank1
 24932  0016  1D11               	btfss	17,2	;volatile
 24933  0017  2822               	goto	i1l379
 24934  0018  0020               	movlb	0	; select bank0
 24935  0019  1D11               	btfss	17,2	;volatile
 24936  001A  2822               	goto	i1l379
 24937                           
 24938                           ;interrupt_manager.c: 61: {
 24939                           ;interrupt_manager.c: 62: i2c1_driver_busCollisionISR();
 24940  001B  0021               	movlb	1	; select bank1
 24941  001C  0869               	movf	(_i2c1_driver_busCollisionISR+1)^(0+128),w
 24942  001D  008A               	movwf	10
 24943  001E  0868               	movf	_i2c1_driver_busCollisionISR^(0+128),w
 24944  001F  000A               	callw
 24945  0020  3180               	pagesel	$
 24946                           
 24947                           ;interrupt_manager.c: 63: }
 24948  0021  2855               	goto	i1l392
 24949  0022                     i1l379:	
 24950                           
 24951                           ;interrupt_manager.c: 64: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
 24952  0022  0021               	movlb	1	; select bank1
 24953  0023  1D91               	btfss	17,3	;volatile
 24954  0024  282F               	goto	i1l381
 24955  0025  0020               	movlb	0	; select bank0
 24956  0026  1D91               	btfss	17,3	;volatile
 24957  0027  282F               	goto	i1l381
 24958                           
 24959                           ;interrupt_manager.c: 65: {
 24960                           ;interrupt_manager.c: 66: i2c1_driver_i2cISR();
 24961  0028  0022               	movlb	2	; select bank2
 24962  0029  086B               	movf	(_i2c1_driver_i2cISR+1)^(0+256),w
 24963  002A  008A               	movwf	10
 24964  002B  086A               	movf	_i2c1_driver_i2cISR^(0+256),w
 24965  002C  000A               	callw
 24966  002D  3180               	pagesel	$
 24967                           
 24968                           ;interrupt_manager.c: 67: }
 24969  002E  2855               	goto	i1l392
 24970  002F                     i1l381:	
 24971                           
 24972                           ;interrupt_manager.c: 68: else if(PIE2bits.TMR4IE == 1 && PIR2bits.TMR4IF == 1)
 24973  002F  0021               	movlb	1	; select bank1
 24974  0030  1C92               	btfss	18,1	;volatile
 24975  0031  2839               	goto	i1l383
 24976  0032  0020               	movlb	0	; select bank0
 24977  0033  1C92               	btfss	18,1	;volatile
 24978  0034  2839               	goto	i1l383
 24979                           
 24980                           ;interrupt_manager.c: 69: {
 24981                           ;interrupt_manager.c: 70: TMR4_ISR();
 24982  0035  31A1  2164  3180   	fcall	_TMR4_ISR
 24983                           
 24984                           ;interrupt_manager.c: 71: }
 24985  0038  2855               	goto	i1l392
 24986  0039                     i1l383:	
 24987                           
 24988                           ;interrupt_manager.c: 72: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 24989  0039  0021               	movlb	1	; select bank1
 24990  003A  1C91               	btfss	17,1	;volatile
 24991  003B  2843               	goto	i1l385
 24992  003C  0020               	movlb	0	; select bank0
 24993  003D  1C91               	btfss	17,1	;volatile
 24994  003E  2843               	goto	i1l385
 24995                           
 24996                           ;interrupt_manager.c: 73: {
 24997                           ;interrupt_manager.c: 74: TMR2_ISR();
 24998  003F  31A1  2157  3180   	fcall	_TMR2_ISR
 24999                           
 25000                           ;interrupt_manager.c: 75: }
 25001  0042  2855               	goto	i1l392
 25002  0043                     i1l385:	
 25003                           
 25004                           ;interrupt_manager.c: 76: else if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 25005  0043  0021               	movlb	1	; select bank1
 25006  0044  1E91               	btfss	17,5	;volatile
 25007  0045  284D               	goto	i1l387
 25008  0046  0020               	movlb	0	; select bank0
 25009  0047  1E91               	btfss	17,5	;volatile
 25010  0048  284D               	goto	i1l387
 25011                           
 25012                           ;interrupt_manager.c: 77: {
 25013                           ;interrupt_manager.c: 78: EUSART_Receive_ISR();
 25014  0049  31A2  22AB  3180   	fcall	_EUSART_Receive_ISR
 25015                           
 25016                           ;interrupt_manager.c: 79: }
 25017  004C  2855               	goto	i1l392
 25018  004D                     i1l387:	
 25019                           
 25020                           ;interrupt_manager.c: 80: else if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 25021  004D  0021               	movlb	1	; select bank1
 25022  004E  1E11               	btfss	17,4	;volatile
 25023  004F  2855               	goto	i1l392
 25024  0050  0020               	movlb	0	; select bank0
 25025  0051  1E11               	btfss	17,4	;volatile
 25026  0052  2855               	goto	i1l392
 25027                           
 25028                           ;interrupt_manager.c: 81: {
 25029                           ;interrupt_manager.c: 82: EUSART_Transmit_ISR();
 25030  0053  31A3  2300         	fcall	_EUSART_Transmit_ISR
 25031  0055                     i1l392:	
 25032                           ;interrupt_manager.c: 89: else
 25033                           ;interrupt_manager.c: 90: {
 25034                           
 25035                           ;interrupt_manager.c: 87: }
 25036                           ;interrupt_manager.c: 88: }
 25037                           
 25038                           ;interrupt_manager.c: 84: else
 25039                           ;interrupt_manager.c: 85: {
 25040                           
 25041                           ;interrupt_manager.c: 83: }
 25042                           
 25043  0055  087C               	movf	??_INTERRUPT_InterruptManager,w
 25044  0056  0020               	movlb	0	; select bank0
 25045  0057  00FF               	movwf	127
 25046  0058  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 25047  0059  0009               	retfie
 25048  005A                     __end_of_INTERRUPT_InterruptManager:	
 25049                           
 25050                           	psect	text133
 25051  2379                     __ptext133:	
 25052 ;; *************** function i1_i2c_ISR *****************
 25053 ;; Defined at:
 25054 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 25055 ;; Parameters:    Size  Location     Type
 25056 ;;		None
 25057 ;; Auto vars:     Size  Location     Type
 25058 ;;		None
 25059 ;; Return value:  Size  Location     Type
 25060 ;;                  1    wreg      void 
 25061 ;; Registers used:
 25062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25063 ;; Tracked objects:
 25064 ;;		On entry : 0/0
 25065 ;;		On exit  : 0/0
 25066 ;;		Unchanged: 0/0
 25067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25070 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25071 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25072 ;;Total ram usage:        1 bytes
 25073 ;; Hardware stack levels used:    1
 25074 ;; Hardware stack levels required when called:    3
 25075 ;; This function calls:
 25076 ;;		i1_do_I2C_DO_ACK
 25077 ;;		i1_do_I2C_DO_ADDRESS_NACK
 25078 ;;		i1_do_I2C_DO_NACK_RESTART
 25079 ;;		i1_do_I2C_DO_NACK_STOP
 25080 ;;		i1_do_I2C_IDLE
 25081 ;;		i1_do_I2C_RCEN
 25082 ;;		i1_do_I2C_RESET
 25083 ;;		i1_do_I2C_RX
 25084 ;;		i1_do_I2C_SEND_ADR_READ
 25085 ;;		i1_do_I2C_SEND_ADR_WRITE
 25086 ;;		i1_do_I2C_SEND_RESTART
 25087 ;;		i1_do_I2C_SEND_RESTART_READ
 25088 ;;		i1_do_I2C_SEND_RESTART_WRITE
 25089 ;;		i1_do_I2C_SEND_STOP
 25090 ;;		i1_do_I2C_TX
 25091 ;;		i1_do_I2C_TX_EMPTY
 25092 ;;		i1_i2c1_driver_isNACK
 25093 ;;		i1_mssp1_clearIRQ
 25094 ;; This function is called by:
 25095 ;; This function uses a non-reentrant model
 25096 ;;
 25097                           
 25098                           
 25099                           ;psect for function i1_i2c_ISR
 25100  2379                     i1_i2c_ISR:	
 25101  2379                     i1l9461:	
 25102                           ;incstack = 0
 25103                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25104                           
 25105                           
 25106                           ;i2c_master.c: 421: mssp1_clearIRQ();
 25107  2379  31AF  2740  31A3   	fcall	i1_mssp1_clearIRQ
 25108                           
 25109                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
 25110  237C  0022               	movlb	2	; select bank2
 25111  237D  1DA0               	btfss	_i2c_status^(0+256),3
 25112  237E  2B89               	goto	i1l9469
 25113  237F  31A1  211A  31A3   	fcall	i1_i2c1_driver_isNACK
 25114  2382  1C03               	btfss	3,0
 25115  2383  2B89               	goto	i1l9469
 25116                           
 25117                           ;i2c_master.c: 428: {
 25118                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
 25119  2384  300F               	movlw	15
 25120  2385  00F5               	movwf	??i1_i2c_ISR
 25121  2386  0875               	movf	??i1_i2c_ISR,w
 25122  2387  0022               	movlb	2	; select bank2
 25123  2388  00AA               	movwf	(_i2c_status^(0+256)+10)
 25124  2389                     i1l9469:	
 25125                           
 25126                           ;i2c_master.c: 430: }
 25127                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
 25128  2389  0022               	movlb	2	; select bank2
 25129  238A  352A               	lslf	(_i2c_status^(0+256)+10),w
 25130  238B  3E48               	addlw	(low (_fsmStateTable| (0+512)))& (0+255)
 25131  238C  0086               	movwf	6
 25132  238D  3002               	movlw	2	; select bank4/5
 25133  238E  0087               	movwf	7
 25134  238F  3F41               	moviw [1]fsr1
 25135  2390  008A               	movwf	10
 25136  2391  3F40               	moviw [0]fsr1
 25137  2392  000A               	callw
 25138  2393  31A3               	pagesel	$
 25139  2394  00F5               	movwf	??i1_i2c_ISR
 25140  2395  0875               	movf	??i1_i2c_ISR,w
 25141  2396  0022               	movlb	2	; select bank2
 25142  2397  00AA               	movwf	(_i2c_status^(0+256)+10)
 25143  2398  0008               	return
 25144  2399                     __end_ofi1_i2c_ISR:	
 25145                           
 25146                           	psect	text134
 25147  2F40                     __ptext134:	
 25148 ;; *************** function i1_mssp1_clearIRQ *****************
 25149 ;; Defined at:
 25150 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 25151 ;; Parameters:    Size  Location     Type
 25152 ;;		None
 25153 ;; Auto vars:     Size  Location     Type
 25154 ;;		None
 25155 ;; Return value:  Size  Location     Type
 25156 ;;                  1    wreg      void 
 25157 ;; Registers used:
 25158 ;;		None
 25159 ;; Tracked objects:
 25160 ;;		On entry : 0/0
 25161 ;;		On exit  : 0/0
 25162 ;;		Unchanged: 0/0
 25163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25168 ;;Total ram usage:        0 bytes
 25169 ;; Hardware stack levels used:    1
 25170 ;; This function calls:
 25171 ;;		Nothing
 25172 ;; This function is called by:
 25173 ;;		i1_i2c_ISR
 25174 ;; This function uses a non-reentrant model
 25175 ;;
 25176                           
 25177                           
 25178                           ;psect for function i1_mssp1_clearIRQ
 25179  2F40                     i1_mssp1_clearIRQ:	
 25180                           
 25181                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
 25182                           
 25183                           ;incstack = 0
 25184                           ; Regs used in i1_mssp1_clearIRQ: []
 25185  2F40  0020               	movlb	0	; select bank0
 25186  2F41  1191               	bcf	17,3	;volatile
 25187  2F42  0008               	return
 25188  2F43                     __end_ofi1_mssp1_clearIRQ:	
 25189                           
 25190                           	psect	text135
 25191  1906                     __ptext135:	
 25192 ;; *************** function i1_do_I2C_RX *****************
 25193 ;; Defined at:
 25194 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 25195 ;; Parameters:    Size  Location     Type
 25196 ;;		None
 25197 ;; Auto vars:     Size  Location     Type
 25198 ;;		None
 25199 ;; Return value:  Size  Location     Type
 25200 ;;                  1    wreg      enum E8364
 25201 ;; Registers used:
 25202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25203 ;; Tracked objects:
 25204 ;;		On entry : 0/0
 25205 ;;		On exit  : 0/0
 25206 ;;		Unchanged: 0/0
 25207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25210 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25211 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25212 ;;Total ram usage:        1 bytes
 25213 ;; Hardware stack levels used:    1
 25214 ;; Hardware stack levels required when called:    2
 25215 ;; This function calls:
 25216 ;;		i1_do_I2C_DO_NACK_RESTART
 25217 ;;		i1_do_I2C_DO_NACK_STOP
 25218 ;;		i1_i2c1_driver_getRXData
 25219 ;;		i1_i2c1_driver_sendACK
 25220 ;;		i1_returnReset
 25221 ;;		i1_returnStop
 25222 ;; This function is called by:
 25223 ;; This function uses a non-reentrant model
 25224 ;;
 25225                           
 25226                           
 25227                           ;psect for function i1_do_I2C_RX
 25228  1906                     i1_do_I2C_RX:	
 25229  1906                     i1l9091:	
 25230                           ;incstack = 0
 25231                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25232                           
 25233                           
 25234                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
 25235  1906  31AF  273A  3199   	fcall	i1_i2c1_driver_getRXData
 25236  1909  00F0               	movwf	??i1_do_I2C_RX
 25237  190A  0022               	movlb	2	; select bank2
 25238  190B  0822               	movf	(low ((_i2c_status| (0+256)+2)))^0,w
 25239  190C  0086               	movwf	6
 25240  190D  0823               	movf	((low ((_i2c_status| (0+256)+2))+1))^0,w
 25241  190E  0087               	movwf	7
 25242  190F  0870               	movf	??i1_do_I2C_RX,w
 25243  1910  0081               	movwf	1
 25244  1911  3001               	movlw	1
 25245  1912  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^0,f
 25246  1913  3000               	movlw	0
 25247  1914  3DA3               	addwfc	((low ((_i2c_status| (0+256)+2))+1))^0,f
 25248                           
 25249                           ;i2c_master.c: 360: if(--i2c_status.data_length)
 25250  1915  3001               	movlw	1
 25251  1916  02A4               	subwf	(_i2c_status^(0+256)+4),f
 25252  1917  3000               	movlw	0
 25253  1918  3BA5               	subwfb	((_i2c_status+1)^(0+256)+4),f
 25254  1919  0824               	movf	(_i2c_status^(0+256)+4),w
 25255  191A  0425               	iorwf	((_i2c_status+1)^(0+256)+4),w
 25256  191B  1903               	btfsc	3,2
 25257  191C  2921               	goto	i1l790
 25258                           
 25259                           ;i2c_master.c: 361: {
 25260                           ;i2c_master.c: 362: i2c1_driver_sendACK();
 25261  191D  31AF  2761         	fcall	i1_i2c1_driver_sendACK
 25262                           
 25263                           ;i2c_master.c: 363: return I2C_RCEN;
 25264  191F  3005               	movlw	5
 25265                           
 25266                           ;i2c_master.c: 364: }
 25267  1920  0008               	return
 25268  1921                     i1l790:	
 25269                           
 25270                           ;i2c_master.c: 365: else
 25271                           ;i2c_master.c: 366: {
 25272                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
 25273  1921  1520               	bsf	_i2c_status^(0+256),2
 25274                           
 25275                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 25276  1922  2929               	goto	i1l9115
 25277  1923                     i1l9105:	
 25278                           ;i2c_master.c: 369: {
 25279                           ;i2c_master.c: 370: case i2c_restart_write:
 25280                           
 25281                           
 25282                           ;i2c_master.c: 371: case i2c_restart_read:
 25283                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
 25284  1923  31AF  2781         	fcall	i1_do_I2C_DO_NACK_RESTART
 25285  1925  0008               	return
 25286  1926                     i1l9109:	
 25287                           ;i2c_master.c: 374: case i2c_continue:
 25288                           
 25289                           ;i2c_master.c: 373: default:
 25290                           
 25291                           
 25292                           ;i2c_master.c: 375: case i2c_stop:
 25293                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
 25294  1926  31AF  277D         	fcall	i1_do_I2C_DO_NACK_STOP
 25295                           
 25296                           ;i2c_master.c: 377: }
 25297  1928  0008               	return
 25298  1929                     i1l9115:	
 25299  1929  0022               	movlb	2	; select bank2
 25300  192A  0838               	movf	(low ((_i2c_status| (0+256)+24)))^0,w
 25301  192B  00F0               	movwf	??i1_do_I2C_RX
 25302  192C  0870               	movf	??i1_do_I2C_RX,w
 25303  192D  00F0               	movwf	i1returnReset@p
 25304  192E  300C               	movlw	12
 25305  192F  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 25306  1930  0086               	movwf	6
 25307  1931  3001               	movlw	1	; select bank2/3
 25308  1932  0087               	movwf	7
 25309  1933  3F41               	moviw [1]fsr1
 25310  1934  008A               	movwf	10
 25311  1935  3F40               	moviw [0]fsr1
 25312  1936  000A               	callw
 25313  1937  3199               	pagesel	$
 25314                           
 25315                           ; Switch size 1, requested type "space"
 25316                           ; Number of cases is 4, Range of values is 1 to 4
 25317                           ; switch strategies available:
 25318                           ; Name         Instructions Cycles
 25319                           ; simple_byte           13     7 (average)
 25320                           ; direct_byte           17     9 (fixed)
 25321                           ; jumptable            263     9 (fixed)
 25322                           ;	Chosen strategy is simple_byte
 25323  1938  3A01               	xorlw	1	; case 1
 25324  1939  1903               	skipnz
 25325  193A  2926               	goto	i1l9109
 25326  193B  3A03               	xorlw	3	; case 2
 25327  193C  1903               	skipnz
 25328  193D  2923               	goto	i1l9105
 25329  193E  3A01               	xorlw	1	; case 3
 25330  193F  1903               	skipnz
 25331  1940  2923               	goto	i1l9105
 25332  1941  3A07               	xorlw	7	; case 4
 25333  1942  1903               	skipnz
 25334  1943  2926               	goto	i1l9109
 25335  1944  2926               	goto	i1l9109
 25336  1945  0008               	return
 25337  1946                     __end_ofi1_do_I2C_RX:	
 25338                           
 25339                           	psect	text136
 25340  1BD5                     __ptext136:	
 25341 ;; *************** function i1_do_I2C_TX *****************
 25342 ;; Defined at:
 25343 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 25344 ;; Parameters:    Size  Location     Type
 25345 ;;		None
 25346 ;; Auto vars:     Size  Location     Type
 25347 ;;		None
 25348 ;; Return value:  Size  Location     Type
 25349 ;;                  1    wreg      enum E8364
 25350 ;; Registers used:
 25351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25352 ;; Tracked objects:
 25353 ;;		On entry : 0/0
 25354 ;;		On exit  : 0/0
 25355 ;;		Unchanged: 0/0
 25356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25358 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25359 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25360 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25361 ;;Total ram usage:        4 bytes
 25362 ;; Hardware stack levels used:    1
 25363 ;; Hardware stack levels required when called:    2
 25364 ;; This function calls:
 25365 ;;		i1_do_I2C_SEND_RESTART_READ
 25366 ;;		i1_do_I2C_SEND_RESTART_WRITE
 25367 ;;		i1_do_I2C_SEND_STOP
 25368 ;;		i1_i2c1_driver_TXData
 25369 ;;		i1_i2c1_driver_isNACK
 25370 ;;		i1_returnReset
 25371 ;;		i1_returnStop
 25372 ;; This function is called by:
 25373 ;; This function uses a non-reentrant model
 25374 ;;
 25375                           
 25376                           
 25377                           ;psect for function i1_do_I2C_TX
 25378  1BD5                     i1_do_I2C_TX:	
 25379  1BD5                     i1l9061:	
 25380                           ;incstack = 0
 25381                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25382                           
 25383                           
 25384                           ;i2c_master.c: 335: if(i2c1_driver_isNACK())
 25385  1BD5  31A1  211A  319B   	fcall	i1_i2c1_driver_isNACK
 25386  1BD8  1803               	btfsc	3,0
 25387  1BD9  2BE4               	goto	i1l9079
 25388  1BDA  2C01               	goto	i1l774
 25389  1BDB                     i1l9065:	
 25390                           ;i2c_master.c: 338: {
 25391                           ;i2c_master.c: 339: case i2c_restart_read:
 25392                           
 25393                           ;i2c_master.c: 336: {
 25394                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
 25395                           
 25396                           
 25397                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
 25398  1BDB  31AF  2769         	fcall	i1_do_I2C_SEND_RESTART_READ
 25399  1BDD  0008               	return
 25400  1BDE                     i1l9069:	
 25401                           ;i2c_master.c: 341: case i2c_restart_write:
 25402                           
 25403                           
 25404                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
 25405  1BDE  31AF  276D         	fcall	i1_do_I2C_SEND_RESTART_WRITE
 25406  1BE0  0008               	return
 25407  1BE1                     i1l9073:	
 25408                           ;i2c_master.c: 344: case i2c_continue:
 25409                           
 25410                           ;i2c_master.c: 343: default:
 25411                           
 25412                           
 25413                           ;i2c_master.c: 345: case i2c_stop:
 25414                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
 25415  1BE1  31AF  2775         	fcall	i1_do_I2C_SEND_STOP
 25416                           
 25417                           ;i2c_master.c: 347: }
 25418  1BE3  0008               	return
 25419  1BE4                     i1l9079:	
 25420  1BE4  0022               	movlb	2	; select bank2
 25421  1BE5  083B               	movf	(low ((_i2c_status| (0+256)+27)))^0,w
 25422  1BE6  00F1               	movwf	??i1_do_I2C_TX
 25423  1BE7  0871               	movf	??i1_do_I2C_TX,w
 25424  1BE8  00F0               	movwf	i1returnReset@p
 25425  1BE9  3012               	movlw	18
 25426  1BEA  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 25427  1BEB  0086               	movwf	6
 25428  1BEC  3001               	movlw	1	; select bank2/3
 25429  1BED  0087               	movwf	7
 25430  1BEE  3F41               	moviw [1]fsr1
 25431  1BEF  008A               	movwf	10
 25432  1BF0  3F40               	moviw [0]fsr1
 25433  1BF1  000A               	callw
 25434  1BF2  319B               	pagesel	$
 25435                           
 25436                           ; Switch size 1, requested type "space"
 25437                           ; Number of cases is 4, Range of values is 1 to 4
 25438                           ; switch strategies available:
 25439                           ; Name         Instructions Cycles
 25440                           ; simple_byte           13     7 (average)
 25441                           ; direct_byte           17     9 (fixed)
 25442                           ; jumptable            263     9 (fixed)
 25443                           ;	Chosen strategy is simple_byte
 25444  1BF3  3A01               	xorlw	1	; case 1
 25445  1BF4  1903               	skipnz
 25446  1BF5  2BE1               	goto	i1l9073
 25447  1BF6  3A03               	xorlw	3	; case 2
 25448  1BF7  1903               	skipnz
 25449  1BF8  2BDB               	goto	i1l9065
 25450  1BF9  3A01               	xorlw	1	; case 3
 25451  1BFA  1903               	skipnz
 25452  1BFB  2BDE               	goto	i1l9069
 25453  1BFC  3A07               	xorlw	7	; case 4
 25454  1BFD  1903               	skipnz
 25455  1BFE  2BE1               	goto	i1l9073
 25456  1BFF  2BE1               	goto	i1l9073
 25457                           
 25458                           ;i2c_master.c: 348: }
 25459  1C00  0008               	return
 25460  1C01                     i1l774:	
 25461                           
 25462                           ;i2c_master.c: 349: else
 25463                           ;i2c_master.c: 350: {
 25464                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
 25465  1C01  0022               	movlb	2	; select bank2
 25466  1C02  11A0               	bcf	_i2c_status^(0+256),3
 25467                           
 25468                           ;i2c_master.c: 352: i2c1_driver_TXData(*i2c_status.data_ptr++);
 25469  1C03  0823               	movf	((low ((_i2c_status| (0+256)+2))+1))^0,w
 25470  1C04  00F2               	movwf	??i1_do_I2C_TX+1
 25471  1C05  0822               	movf	(low ((_i2c_status| (0+256)+2)))^0,w
 25472  1C06  00F1               	movwf	??i1_do_I2C_TX
 25473  1C07  0AA2               	incf	(low ((_i2c_status| (0+256)+2)))^0,f
 25474  1C08  1903               	skipnz
 25475  1C09  0AA3               	incf	((low ((_i2c_status| (0+256)+2))+1))^0,f
 25476  1C0A  0871               	movf	??i1_do_I2C_TX,w
 25477  1C0B  0086               	movwf	6
 25478  1C0C  0872               	movf	??i1_do_I2C_TX+1,w
 25479  1C0D  0087               	movwf	7
 25480  1C0E  0801               	movf	1,w
 25481  1C0F  31AF  27A8  319B   	fcall	i1_i2c1_driver_TXData
 25482                           
 25483                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
 25484  1C12  3001               	movlw	1
 25485  1C13  0022               	movlb	2	; select bank2
 25486  1C14  02A4               	subwf	(_i2c_status^(0+256)+4),f
 25487  1C15  3000               	movlw	0
 25488  1C16  3BA5               	subwfb	((_i2c_status+1)^(0+256)+4),f
 25489  1C17  0824               	movf	(_i2c_status^(0+256)+4),w
 25490  1C18  0425               	iorwf	((_i2c_status+1)^(0+256)+4),w
 25491  1C19  1D03               	btfss	3,2
 25492  1C1A  2C1D               	goto	i1l9087
 25493  1C1B  3006               	movlw	6
 25494  1C1C  2C1E               	goto	L44
 25495  1C1D                     i1l9087:	
 25496  1C1D  3003               	movlw	3
 25497  1C1E                     L44:	
 25498  1C1E  00F3               	movwf	i1_do_I2C_TX$1204
 25499  1C1F  3000               	movlw	0
 25500  1C20  00F4               	movwf	i1_do_I2C_TX$1204+1
 25501  1C21  0873               	movf	i1_do_I2C_TX$1204,w
 25502  1C22  0008               	return
 25503  1C23                     __end_ofi1_do_I2C_TX:	
 25504                           
 25505                           	psect	text137
 25506  2460                     __ptext137:	
 25507 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
 25508 ;; Defined at:
 25509 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 25510 ;; Parameters:    Size  Location     Type
 25511 ;;		None
 25512 ;; Auto vars:     Size  Location     Type
 25513 ;;		None
 25514 ;; Return value:  Size  Location     Type
 25515 ;;                  1    wreg      enum E8364
 25516 ;; Registers used:
 25517 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25518 ;; Tracked objects:
 25519 ;;		On entry : 0/0
 25520 ;;		On exit  : 0/0
 25521 ;;		Unchanged: 0/0
 25522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25525 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25526 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25527 ;;Total ram usage:        1 bytes
 25528 ;; Hardware stack levels used:    1
 25529 ;; Hardware stack levels required when called:    2
 25530 ;; This function calls:
 25531 ;;		i1_do_I2C_SEND_RESTART
 25532 ;;		i1_do_I2C_SEND_STOP
 25533 ;;		i1_returnReset
 25534 ;;		i1_returnStop
 25535 ;; This function is called by:
 25536 ;; This function uses a non-reentrant model
 25537 ;;
 25538                           
 25539                           
 25540                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
 25541  2460                     i1_do_I2C_DO_ADDRESS_NACK:	
 25542  2460                     i1l9045:	
 25543                           ;incstack = 0
 25544                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25545                           
 25546                           
 25547                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
 25548  2460  0022               	movlb	2	; select bank2
 25549  2461  11A0               	bcf	_i2c_status^(0+256),3
 25550                           
 25551                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
 25552  2462  3002               	movlw	2
 25553  2463  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 25554  2464  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 25555  2465  00AB               	movwf	(_i2c_status^(0+256)+11)
 25556                           
 25557                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
 25558  2466  2C6D               	goto	i1l9059
 25559  2467                     i1l9049:	
 25560                           ;i2c_master.c: 324: {
 25561                           ;i2c_master.c: 325: case i2c_restart_read:
 25562                           
 25563                           
 25564                           ;i2c_master.c: 326: case i2c_restart_write:
 25565                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
 25566  2467  31AF  2771         	fcall	i1_do_I2C_SEND_RESTART
 25567  2469  0008               	return
 25568  246A                     i1l9053:	
 25569                           ;i2c_master.c: 328: default:
 25570                           
 25571                           
 25572                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
 25573  246A  31AF  2775         	fcall	i1_do_I2C_SEND_STOP
 25574                           
 25575                           ;i2c_master.c: 330: }
 25576  246C  0008               	return
 25577  246D                     i1l9059:	
 25578  246D  0022               	movlb	2	; select bank2
 25579  246E  083A               	movf	(low ((_i2c_status| (0+256)+26)))^0,w
 25580  246F  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 25581  2470  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 25582  2471  00F0               	movwf	i1returnReset@p
 25583  2472  3010               	movlw	16
 25584  2473  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 25585  2474  0086               	movwf	6
 25586  2475  3001               	movlw	1	; select bank2/3
 25587  2476  0087               	movwf	7
 25588  2477  3F41               	moviw [1]fsr1
 25589  2478  008A               	movwf	10
 25590  2479  3F40               	moviw [0]fsr1
 25591  247A  000A               	callw
 25592  247B  31A4               	pagesel	$
 25593                           
 25594                           ; Switch size 1, requested type "space"
 25595                           ; Number of cases is 2, Range of values is 2 to 3
 25596                           ; switch strategies available:
 25597                           ; Name         Instructions Cycles
 25598                           ; simple_byte            7     4 (average)
 25599                           ; direct_byte           13     9 (fixed)
 25600                           ; jumptable            263     9 (fixed)
 25601                           ;	Chosen strategy is simple_byte
 25602  247C  3A02               	xorlw	2	; case 2
 25603  247D  1903               	skipnz
 25604  247E  2C67               	goto	i1l9049
 25605  247F  3A01               	xorlw	1	; case 3
 25606  2480  1903               	skipnz
 25607  2481  2C67               	goto	i1l9049
 25608  2482  2C6A               	goto	i1l9053
 25609  2483  0008               	return
 25610  2484                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
 25611                           
 25612                           	psect	text138
 25613  2F81                     __ptext138:	
 25614 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
 25615 ;; Defined at:
 25616 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 25617 ;; Parameters:    Size  Location     Type
 25618 ;;		None
 25619 ;; Auto vars:     Size  Location     Type
 25620 ;;		None
 25621 ;; Return value:  Size  Location     Type
 25622 ;;                  1    wreg      enum E8364
 25623 ;; Registers used:
 25624 ;;		wreg, status,2, status,0, pclath, cstack
 25625 ;; Tracked objects:
 25626 ;;		On entry : 0/0
 25627 ;;		On exit  : 0/0
 25628 ;;		Unchanged: 0/0
 25629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25634 ;;Total ram usage:        0 bytes
 25635 ;; Hardware stack levels used:    1
 25636 ;; Hardware stack levels required when called:    1
 25637 ;; This function calls:
 25638 ;;		i1_i2c1_driver_sendNACK
 25639 ;; This function is called by:
 25640 ;;		i1_do_I2C_RX
 25641 ;; This function uses a non-reentrant model
 25642 ;;
 25643                           
 25644                           
 25645                           ;psect for function i1_do_I2C_DO_NACK_RESTART
 25646  2F81                     i1_do_I2C_DO_NACK_RESTART:	
 25647  2F81                     i1l8583:	
 25648                           ;incstack = 0
 25649                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 25650                           
 25651                           
 25652                           ;i2c_master.c: 313: i2c1_driver_sendNACK();
 25653  2F81  31AF  2765         	fcall	i1_i2c1_driver_sendNACK
 25654                           
 25655                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
 25656  2F83  3009               	movlw	9
 25657  2F84  0008               	return
 25658  2F85                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
 25659                           
 25660                           	psect	text139
 25661  2F7D                     __ptext139:	
 25662 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
 25663 ;; Defined at:
 25664 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 25665 ;; Parameters:    Size  Location     Type
 25666 ;;		None
 25667 ;; Auto vars:     Size  Location     Type
 25668 ;;		None
 25669 ;; Return value:  Size  Location     Type
 25670 ;;                  1    wreg      enum E8364
 25671 ;; Registers used:
 25672 ;;		wreg, status,2, status,0, pclath, cstack
 25673 ;; Tracked objects:
 25674 ;;		On entry : 0/0
 25675 ;;		On exit  : 0/0
 25676 ;;		Unchanged: 0/0
 25677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25682 ;;Total ram usage:        0 bytes
 25683 ;; Hardware stack levels used:    1
 25684 ;; Hardware stack levels required when called:    1
 25685 ;; This function calls:
 25686 ;;		i1_i2c1_driver_sendNACK
 25687 ;; This function is called by:
 25688 ;;		i1_do_I2C_RX
 25689 ;; This function uses a non-reentrant model
 25690 ;;
 25691                           
 25692                           
 25693                           ;psect for function i1_do_I2C_DO_NACK_STOP
 25694  2F7D                     i1_do_I2C_DO_NACK_STOP:	
 25695  2F7D                     i1l8577:	
 25696                           ;incstack = 0
 25697                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 25698                           
 25699                           
 25700                           ;i2c_master.c: 307: i2c1_driver_sendNACK();
 25701  2F7D  31AF  2765         	fcall	i1_i2c1_driver_sendNACK
 25702                           
 25703                           ;i2c_master.c: 308: return I2C_SEND_STOP;
 25704  2F7F  300A               	movlw	10
 25705  2F80  0008               	return
 25706  2F81                     __end_ofi1_do_I2C_DO_NACK_STOP:	
 25707                           
 25708                           	psect	text140
 25709  2F79                     __ptext140:	
 25710 ;; *************** function i1_do_I2C_DO_ACK *****************
 25711 ;; Defined at:
 25712 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 25713 ;; Parameters:    Size  Location     Type
 25714 ;;		None
 25715 ;; Auto vars:     Size  Location     Type
 25716 ;;		None
 25717 ;; Return value:  Size  Location     Type
 25718 ;;                  1    wreg      enum E8364
 25719 ;; Registers used:
 25720 ;;		wreg, status,2, status,0, pclath, cstack
 25721 ;; Tracked objects:
 25722 ;;		On entry : 0/0
 25723 ;;		On exit  : 0/0
 25724 ;;		Unchanged: 0/0
 25725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25730 ;;Total ram usage:        0 bytes
 25731 ;; Hardware stack levels used:    1
 25732 ;; Hardware stack levels required when called:    1
 25733 ;; This function calls:
 25734 ;;		i1_i2c1_driver_sendACK
 25735 ;; This function is called by:
 25736 ;; This function uses a non-reentrant model
 25737 ;;
 25738                           
 25739                           
 25740                           ;psect for function i1_do_I2C_DO_ACK
 25741  2F79                     i1_do_I2C_DO_ACK:	
 25742  2F79                     i1l9039:	
 25743                           ;incstack = 0
 25744                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 25745                           
 25746                           
 25747                           ;i2c_master.c: 301: i2c1_driver_sendACK();
 25748  2F79  31AF  2761         	fcall	i1_i2c1_driver_sendACK
 25749                           
 25750                           ;i2c_master.c: 302: return I2C_RCEN;
 25751  2F7B  3005               	movlw	5
 25752  2F7C  0008               	return
 25753  2F7D                     __end_ofi1_do_I2C_DO_ACK:	
 25754                           
 25755                           	psect	text141
 25756  2FBC                     __ptext141:	
 25757 ;; *************** function i1_do_I2C_RCEN *****************
 25758 ;; Defined at:
 25759 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 25760 ;; Parameters:    Size  Location     Type
 25761 ;;		None
 25762 ;; Auto vars:     Size  Location     Type
 25763 ;;		None
 25764 ;; Return value:  Size  Location     Type
 25765 ;;                  1    wreg      enum E8364
 25766 ;; Registers used:
 25767 ;;		wreg, status,2, status,0, pclath, cstack
 25768 ;; Tracked objects:
 25769 ;;		On entry : 0/0
 25770 ;;		On exit  : 0/0
 25771 ;;		Unchanged: 0/0
 25772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25777 ;;Total ram usage:        0 bytes
 25778 ;; Hardware stack levels used:    1
 25779 ;; Hardware stack levels required when called:    1
 25780 ;; This function calls:
 25781 ;;		i1_i2c1_driver_startRX
 25782 ;; This function is called by:
 25783 ;; This function uses a non-reentrant model
 25784 ;;
 25785                           
 25786                           
 25787                           ;psect for function i1_do_I2C_RCEN
 25788  2FBC                     i1_do_I2C_RCEN:	
 25789  2FBC                     i1l6803:	
 25790                           ;incstack = 0
 25791                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 25792                           
 25793                           
 25794                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
 25795  2FBC  0022               	movlb	2	; select bank2
 25796  2FBD  11A0               	bcf	_i2c_status^(0+256),3
 25797                           
 25798                           ;i2c_master.c: 295: i2c1_driver_startRX();
 25799  2FBE  31AF  2737         	fcall	i1_i2c1_driver_startRX
 25800                           
 25801                           ;i2c_master.c: 296: return I2C_RX;
 25802  2FC0  3004               	movlw	4
 25803  2FC1  0008               	return
 25804  2FC2                     __end_ofi1_do_I2C_RCEN:	
 25805                           
 25806                           	psect	text142
 25807  2FE1                     __ptext142:	
 25808 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
 25809 ;; Defined at:
 25810 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 25811 ;; Parameters:    Size  Location     Type
 25812 ;;		None
 25813 ;; Auto vars:     Size  Location     Type
 25814 ;;		None
 25815 ;; Return value:  Size  Location     Type
 25816 ;;                  1    wreg      enum E8364
 25817 ;; Registers used:
 25818 ;;		wreg, status,2, status,0, pclath, cstack
 25819 ;; Tracked objects:
 25820 ;;		On entry : 0/0
 25821 ;;		On exit  : 0/0
 25822 ;;		Unchanged: 0/0
 25823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25828 ;;Total ram usage:        0 bytes
 25829 ;; Hardware stack levels used:    1
 25830 ;; Hardware stack levels required when called:    1
 25831 ;; This function calls:
 25832 ;;		i1_i2c1_driver_TXData
 25833 ;; This function is called by:
 25834 ;; This function uses a non-reentrant model
 25835 ;;
 25836                           
 25837                           
 25838                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
 25839  2FE1                     i1_do_I2C_SEND_ADR_WRITE:	
 25840  2FE1                     i1l9031:	
 25841                           ;incstack = 0
 25842                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 25843                           
 25844                           
 25845                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
 25846  2FE1  0022               	movlb	2	; select bank2
 25847  2FE2  15A0               	bsf	_i2c_status^(0+256),3
 25848                           
 25849                           ;i2c_master.c: 288: i2c1_driver_TXData(i2c_status.address << 1);
 25850  2FE3  3521               	lslf	(_i2c_status^(0+256)+1),w
 25851  2FE4  31AF  27A8         	fcall	i1_i2c1_driver_TXData
 25852                           
 25853                           ;i2c_master.c: 289: return I2C_TX;
 25854  2FE6  3003               	movlw	3
 25855  2FE7  0008               	return
 25856  2FE8                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
 25857                           
 25858                           	psect	text143
 25859  2FE8                     __ptext143:	
 25860 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
 25861 ;; Defined at:
 25862 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 25863 ;; Parameters:    Size  Location     Type
 25864 ;;		None
 25865 ;; Auto vars:     Size  Location     Type
 25866 ;;		None
 25867 ;; Return value:  Size  Location     Type
 25868 ;;                  1    wreg      enum E8364
 25869 ;; Registers used:
 25870 ;;		wreg, status,2, status,0, pclath, cstack
 25871 ;; Tracked objects:
 25872 ;;		On entry : 0/0
 25873 ;;		On exit  : 0/0
 25874 ;;		Unchanged: 0/0
 25875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25880 ;;Total ram usage:        0 bytes
 25881 ;; Hardware stack levels used:    1
 25882 ;; Hardware stack levels required when called:    1
 25883 ;; This function calls:
 25884 ;;		i1_i2c1_driver_TXData
 25885 ;; This function is called by:
 25886 ;; This function uses a non-reentrant model
 25887 ;;
 25888                           
 25889                           
 25890                           ;psect for function i1_do_I2C_SEND_ADR_READ
 25891  2FE8                     i1_do_I2C_SEND_ADR_READ:	
 25892  2FE8                     i1l9023:	
 25893                           ;incstack = 0
 25894                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 25895                           
 25896                           
 25897                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
 25898  2FE8  0022               	movlb	2	; select bank2
 25899  2FE9  15A0               	bsf	_i2c_status^(0+256),3
 25900                           
 25901                           ;i2c_master.c: 281: i2c1_driver_TXData(i2c_status.address << 1 | 1);
 25902  2FEA  1403               	setc
 25903  2FEB  0D21               	rlf	(_i2c_status^(0+256)+1),w
 25904  2FEC  31AF  27A8         	fcall	i1_i2c1_driver_TXData
 25905                           
 25906                           ;i2c_master.c: 282: return I2C_RCEN;
 25907  2FEE  3005               	movlw	5
 25908  2FEF  0008               	return
 25909  2FF0                     __end_ofi1_do_I2C_SEND_ADR_READ:	
 25910                           
 25911                           	psect	text144
 25912  2F75                     __ptext144:	
 25913 ;; *************** function i1_do_I2C_SEND_STOP *****************
 25914 ;; Defined at:
 25915 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 25916 ;; Parameters:    Size  Location     Type
 25917 ;;		None
 25918 ;; Auto vars:     Size  Location     Type
 25919 ;;		None
 25920 ;; Return value:  Size  Location     Type
 25921 ;;                  1    wreg      enum E8364
 25922 ;; Registers used:
 25923 ;;		wreg, status,2, status,0, pclath, cstack
 25924 ;; Tracked objects:
 25925 ;;		On entry : 0/0
 25926 ;;		On exit  : 0/0
 25927 ;;		Unchanged: 0/0
 25928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25933 ;;Total ram usage:        0 bytes
 25934 ;; Hardware stack levels used:    1
 25935 ;; Hardware stack levels required when called:    1
 25936 ;; This function calls:
 25937 ;;		i1_i2c1_driver_stop
 25938 ;; This function is called by:
 25939 ;;		i1_do_I2C_DO_ADDRESS_NACK
 25940 ;;		i1_do_I2C_TX
 25941 ;;		i1_do_I2C_TX_EMPTY
 25942 ;; This function uses a non-reentrant model
 25943 ;;
 25944                           
 25945                           
 25946                           ;psect for function i1_do_I2C_SEND_STOP
 25947  2F75                     i1_do_I2C_SEND_STOP:	
 25948  2F75                     i1l8571:	
 25949                           ;incstack = 0
 25950                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 25951                           
 25952                           
 25953                           ;i2c_master.c: 274: i2c1_driver_stop();
 25954  2F75  31AF  2734         	fcall	i1_i2c1_driver_stop
 25955                           
 25956                           ;i2c_master.c: 275: return I2C_IDLE;
 25957  2F77  3000               	movlw	0
 25958  2F78  0008               	return
 25959  2F79                     __end_ofi1_do_I2C_SEND_STOP:	
 25960                           
 25961                           	psect	text145
 25962  2F71                     __ptext145:	
 25963 ;; *************** function i1_do_I2C_SEND_RESTART *****************
 25964 ;; Defined at:
 25965 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 25966 ;; Parameters:    Size  Location     Type
 25967 ;;		None
 25968 ;; Auto vars:     Size  Location     Type
 25969 ;;		None
 25970 ;; Return value:  Size  Location     Type
 25971 ;;                  1    wreg      enum E8364
 25972 ;; Registers used:
 25973 ;;		wreg, status,2, status,0, pclath, cstack
 25974 ;; Tracked objects:
 25975 ;;		On entry : 0/0
 25976 ;;		On exit  : 0/0
 25977 ;;		Unchanged: 0/0
 25978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25983 ;;Total ram usage:        0 bytes
 25984 ;; Hardware stack levels used:    1
 25985 ;; Hardware stack levels required when called:    1
 25986 ;; This function calls:
 25987 ;;		i1_i2c1_driver_restart
 25988 ;; This function is called by:
 25989 ;;		i1_do_I2C_DO_ADDRESS_NACK
 25990 ;;		i1_do_I2C_TX_EMPTY
 25991 ;; This function uses a non-reentrant model
 25992 ;;
 25993                           
 25994                           
 25995                           ;psect for function i1_do_I2C_SEND_RESTART
 25996  2F71                     i1_do_I2C_SEND_RESTART:	
 25997  2F71                     i1l8565:	
 25998                           ;incstack = 0
 25999                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 26000                           
 26001                           
 26002                           ;i2c_master.c: 268: i2c1_driver_restart();
 26003  2F71  31AF  2731         	fcall	i1_i2c1_driver_restart
 26004                           
 26005                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
 26006  2F73  3001               	movlw	1
 26007  2F74  0008               	return
 26008  2F75                     __end_ofi1_do_I2C_SEND_RESTART:	
 26009                           
 26010                           	psect	text146
 26011  2F6D                     __ptext146:	
 26012 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
 26013 ;; Defined at:
 26014 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 26015 ;; Parameters:    Size  Location     Type
 26016 ;;		None
 26017 ;; Auto vars:     Size  Location     Type
 26018 ;;		None
 26019 ;; Return value:  Size  Location     Type
 26020 ;;                  1    wreg      enum E8364
 26021 ;; Registers used:
 26022 ;;		wreg, status,2, status,0, pclath, cstack
 26023 ;; Tracked objects:
 26024 ;;		On entry : 0/0
 26025 ;;		On exit  : 0/0
 26026 ;;		Unchanged: 0/0
 26027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26032 ;;Total ram usage:        0 bytes
 26033 ;; Hardware stack levels used:    1
 26034 ;; Hardware stack levels required when called:    1
 26035 ;; This function calls:
 26036 ;;		i1_i2c1_driver_restart
 26037 ;; This function is called by:
 26038 ;;		i1_do_I2C_TX
 26039 ;; This function uses a non-reentrant model
 26040 ;;
 26041                           
 26042                           
 26043                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
 26044  2F6D                     i1_do_I2C_SEND_RESTART_WRITE:	
 26045  2F6D                     i1l8559:	
 26046                           ;incstack = 0
 26047                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 26048                           
 26049                           
 26050                           ;i2c_master.c: 262: i2c1_driver_restart();
 26051  2F6D  31AF  2731         	fcall	i1_i2c1_driver_restart
 26052                           
 26053                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
 26054  2F6F  3002               	movlw	2
 26055  2F70  0008               	return
 26056  2F71                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
 26057                           
 26058                           	psect	text147
 26059  2F69                     __ptext147:	
 26060 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
 26061 ;; Defined at:
 26062 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 26063 ;; Parameters:    Size  Location     Type
 26064 ;;		None
 26065 ;; Auto vars:     Size  Location     Type
 26066 ;;		None
 26067 ;; Return value:  Size  Location     Type
 26068 ;;                  1    wreg      enum E8364
 26069 ;; Registers used:
 26070 ;;		wreg, status,2, status,0, pclath, cstack
 26071 ;; Tracked objects:
 26072 ;;		On entry : 0/0
 26073 ;;		On exit  : 0/0
 26074 ;;		Unchanged: 0/0
 26075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26080 ;;Total ram usage:        0 bytes
 26081 ;; Hardware stack levels used:    1
 26082 ;; Hardware stack levels required when called:    1
 26083 ;; This function calls:
 26084 ;;		i1_i2c1_driver_restart
 26085 ;; This function is called by:
 26086 ;;		i1_do_I2C_TX
 26087 ;; This function uses a non-reentrant model
 26088 ;;
 26089                           
 26090                           
 26091                           ;psect for function i1_do_I2C_SEND_RESTART_READ
 26092  2F69                     i1_do_I2C_SEND_RESTART_READ:	
 26093  2F69                     i1l8553:	
 26094                           ;incstack = 0
 26095                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 26096                           
 26097                           
 26098                           ;i2c_master.c: 256: i2c1_driver_restart();
 26099  2F69  31AF  2731         	fcall	i1_i2c1_driver_restart
 26100                           
 26101                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
 26102  2F6B  3001               	movlw	1
 26103  2F6C  0008               	return
 26104  2F6D                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
 26105                           
 26106                           	psect	text148
 26107  2FAD                     __ptext148:	
 26108 ;; *************** function i1_do_I2C_IDLE *****************
 26109 ;; Defined at:
 26110 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 26111 ;; Parameters:    Size  Location     Type
 26112 ;;		None
 26113 ;; Auto vars:     Size  Location     Type
 26114 ;;		None
 26115 ;; Return value:  Size  Location     Type
 26116 ;;                  1    wreg      enum E8364
 26117 ;; Registers used:
 26118 ;;		wreg, status,2
 26119 ;; Tracked objects:
 26120 ;;		On entry : 0/0
 26121 ;;		On exit  : 0/0
 26122 ;;		Unchanged: 0/0
 26123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26128 ;;Total ram usage:        0 bytes
 26129 ;; Hardware stack levels used:    1
 26130 ;; This function calls:
 26131 ;;		Nothing
 26132 ;; This function is called by:
 26133 ;; This function uses a non-reentrant model
 26134 ;;
 26135                           
 26136                           
 26137                           ;psect for function i1_do_I2C_IDLE
 26138  2FAD                     i1_do_I2C_IDLE:	
 26139  2FAD                     i1l6779:	
 26140                           ;incstack = 0
 26141                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
 26142                           
 26143                           
 26144                           ;i2c_master.c: 249: i2c_status.busy = 0;
 26145  2FAD  0022               	movlb	2	; select bank2
 26146  2FAE  1020               	bcf	_i2c_status^(0+256),0
 26147                           
 26148                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 26149  2FAF  01AB               	clrf	(_i2c_status^(0+256)+11)
 26150                           
 26151                           ;i2c_master.c: 251: return I2C_RESET;
 26152  2FB0  300E               	movlw	14
 26153  2FB1  0008               	return
 26154  2FB2                     __end_ofi1_do_I2C_IDLE:	
 26155                           
 26156                           	psect	text149
 26157  2FDA                     __ptext149:	
 26158 ;; *************** function i1_do_I2C_RESET *****************
 26159 ;; Defined at:
 26160 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 26161 ;; Parameters:    Size  Location     Type
 26162 ;;		None
 26163 ;; Auto vars:     Size  Location     Type
 26164 ;;		None
 26165 ;; Return value:  Size  Location     Type
 26166 ;;                  1    wreg      enum E8364
 26167 ;; Registers used:
 26168 ;;		wreg, status,2, status,0, pclath, cstack
 26169 ;; Tracked objects:
 26170 ;;		On entry : 0/0
 26171 ;;		On exit  : 0/0
 26172 ;;		Unchanged: 0/0
 26173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26178 ;;Total ram usage:        0 bytes
 26179 ;; Hardware stack levels used:    1
 26180 ;; Hardware stack levels required when called:    1
 26181 ;; This function calls:
 26182 ;;		i1_i2c1_driver_resetBus
 26183 ;; This function is called by:
 26184 ;; This function uses a non-reentrant model
 26185 ;;
 26186                           
 26187                           
 26188                           ;psect for function i1_do_I2C_RESET
 26189  2FDA                     i1_do_I2C_RESET:	
 26190  2FDA                     i1l6769:	
 26191                           ;incstack = 0
 26192                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 26193                           
 26194                           
 26195                           ;i2c_master.c: 241: i2c1_driver_resetBus();
 26196  2FDA  31AF  271E         	fcall	i1_i2c1_driver_resetBus
 26197                           
 26198                           ;i2c_master.c: 242: i2c_status.busy = 0;
 26199  2FDC  0022               	movlb	2	; select bank2
 26200  2FDD  1020               	bcf	_i2c_status^(0+256),0
 26201                           
 26202                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 26203  2FDE  01AB               	clrf	(_i2c_status^(0+256)+11)
 26204                           
 26205                           ;i2c_master.c: 244: return I2C_RESET;
 26206  2FDF  300E               	movlw	14
 26207  2FE0  0008               	return
 26208  2FE1                     __end_ofi1_do_I2C_RESET:	
 26209                           
 26210                           	psect	text150
 26211  2590                     __ptext150:	
 26212 ;; *************** function i1_do_I2C_TX_EMPTY *****************
 26213 ;; Defined at:
 26214 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 26215 ;; Parameters:    Size  Location     Type
 26216 ;;		None
 26217 ;; Auto vars:     Size  Location     Type
 26218 ;;		None
 26219 ;; Return value:  Size  Location     Type
 26220 ;;                  1    wreg      enum E8364
 26221 ;; Registers used:
 26222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26223 ;; Tracked objects:
 26224 ;;		On entry : 0/0
 26225 ;;		On exit  : 0/0
 26226 ;;		Unchanged: 0/0
 26227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26230 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26231 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26232 ;;Total ram usage:        1 bytes
 26233 ;; Hardware stack levels used:    1
 26234 ;; Hardware stack levels required when called:    2
 26235 ;; This function calls:
 26236 ;;		i1_do_I2C_SEND_RESTART
 26237 ;;		i1_do_I2C_SEND_STOP
 26238 ;;		i1_mssp1_setIRQ
 26239 ;;		i1_returnReset
 26240 ;;		i1_returnStop
 26241 ;; This function is called by:
 26242 ;; This function uses a non-reentrant model
 26243 ;;
 26244                           
 26245                           
 26246                           ;psect for function i1_do_I2C_TX_EMPTY
 26247  2590                     i1_do_I2C_TX_EMPTY:	
 26248  2590                     i1l9117:	
 26249                           ;incstack = 0
 26250                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26251                           
 26252                           
 26253                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 26254  2590  0022               	movlb	2	; select bank2
 26255  2591  1520               	bsf	_i2c_status^(0+256),2
 26256                           
 26257                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 26258  2592  2D9D               	goto	i1l9135
 26259  2593                     i1l9119:	
 26260                           ;i2c_master.c: 386: {
 26261                           ;i2c_master.c: 387: case i2c_restart_read:
 26262                           
 26263                           
 26264                           ;i2c_master.c: 388: case i2c_restart_write:
 26265                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 26266  2593  31AF  2771         	fcall	i1_do_I2C_SEND_RESTART
 26267  2595  0008               	return
 26268  2596                     i1l9123:	
 26269                           ;i2c_master.c: 390: case i2c_continue:
 26270                           
 26271                           
 26272                           ;i2c_master.c: 391: mssp1_setIRQ();
 26273  2596  31AF  273D         	fcall	i1_mssp1_setIRQ
 26274                           
 26275                           ;i2c_master.c: 392: return I2C_TX;
 26276  2598  3003               	movlw	3
 26277  2599  0008               	return
 26278  259A                     i1l9129:	
 26279                           ;i2c_master.c: 394: case i2c_stop:
 26280                           
 26281                           ;i2c_master.c: 393: default:
 26282                           
 26283                           
 26284                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 26285  259A  31AF  2775         	fcall	i1_do_I2C_SEND_STOP
 26286                           
 26287                           ;i2c_master.c: 396: }
 26288  259C  0008               	return
 26289  259D                     i1l9135:	
 26290  259D  0022               	movlb	2	; select bank2
 26291  259E  0838               	movf	(low ((_i2c_status| (0+256)+24)))^0,w
 26292  259F  00F0               	movwf	??i1_do_I2C_TX_EMPTY
 26293  25A0  0870               	movf	??i1_do_I2C_TX_EMPTY,w
 26294  25A1  00F0               	movwf	i1returnReset@p
 26295  25A2  300C               	movlw	12
 26296  25A3  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 26297  25A4  0086               	movwf	6
 26298  25A5  3001               	movlw	1	; select bank2/3
 26299  25A6  0087               	movwf	7
 26300  25A7  3F41               	moviw [1]fsr1
 26301  25A8  008A               	movwf	10
 26302  25A9  3F40               	moviw [0]fsr1
 26303  25AA  000A               	callw
 26304  25AB  31A5               	pagesel	$
 26305                           
 26306                           ; Switch size 1, requested type "space"
 26307                           ; Number of cases is 4, Range of values is 1 to 4
 26308                           ; switch strategies available:
 26309                           ; Name         Instructions Cycles
 26310                           ; simple_byte           13     7 (average)
 26311                           ; direct_byte           17     9 (fixed)
 26312                           ; jumptable            263     9 (fixed)
 26313                           ;	Chosen strategy is simple_byte
 26314  25AC  3A01               	xorlw	1	; case 1
 26315  25AD  1903               	skipnz
 26316  25AE  2D9A               	goto	i1l9129
 26317  25AF  3A03               	xorlw	3	; case 2
 26318  25B0  1903               	skipnz
 26319  25B1  2D93               	goto	i1l9119
 26320  25B2  3A01               	xorlw	1	; case 3
 26321  25B3  1903               	skipnz
 26322  25B4  2D93               	goto	i1l9119
 26323  25B5  3A07               	xorlw	7	; case 4
 26324  25B6  1903               	skipnz
 26325  25B7  2D96               	goto	i1l9123
 26326  25B8  2D9A               	goto	i1l9129
 26327  25B9  0008               	return
 26328  25BA                     __end_ofi1_do_I2C_TX_EMPTY:	
 26329                           
 26330                           	psect	text151
 26331  2F3D                     __ptext151:	
 26332 ;; *************** function i1_mssp1_setIRQ *****************
 26333 ;; Defined at:
 26334 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 26335 ;; Parameters:    Size  Location     Type
 26336 ;;		None
 26337 ;; Auto vars:     Size  Location     Type
 26338 ;;		None
 26339 ;; Return value:  Size  Location     Type
 26340 ;;                  1    wreg      void 
 26341 ;; Registers used:
 26342 ;;		None
 26343 ;; Tracked objects:
 26344 ;;		On entry : 0/0
 26345 ;;		On exit  : 0/0
 26346 ;;		Unchanged: 0/0
 26347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26352 ;;Total ram usage:        0 bytes
 26353 ;; Hardware stack levels used:    1
 26354 ;; This function calls:
 26355 ;;		Nothing
 26356 ;; This function is called by:
 26357 ;;		i1_do_I2C_TX_EMPTY
 26358 ;; This function uses a non-reentrant model
 26359 ;;
 26360                           
 26361                           
 26362                           ;psect for function i1_mssp1_setIRQ
 26363  2F3D                     i1_mssp1_setIRQ:	
 26364                           
 26365                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
 26366                           
 26367                           ;incstack = 0
 26368                           ; Regs used in i1_mssp1_setIRQ: []
 26369  2F3D  0020               	movlb	0	; select bank0
 26370  2F3E  1591               	bsf	17,3	;volatile
 26371  2F3F  0008               	return
 26372  2F40                     __end_ofi1_mssp1_setIRQ:	
 26373                           
 26374                           	psect	text152
 26375  211A                     __ptext152:	
 26376 ;; *************** function i1_i2c1_driver_isNACK *****************
 26377 ;; Defined at:
 26378 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 26379 ;; Parameters:    Size  Location     Type
 26380 ;;		None
 26381 ;; Auto vars:     Size  Location     Type
 26382 ;;		None
 26383 ;; Return value:  Size  Location     Type
 26384 ;;		None               void
 26385 ;; Registers used:
 26386 ;;		wreg, status,2, status,0
 26387 ;; Tracked objects:
 26388 ;;		On entry : 0/0
 26389 ;;		On exit  : 0/0
 26390 ;;		Unchanged: 0/0
 26391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26394 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26396 ;;Total ram usage:        1 bytes
 26397 ;; Hardware stack levels used:    1
 26398 ;; This function calls:
 26399 ;;		Nothing
 26400 ;; This function is called by:
 26401 ;;		i1_do_I2C_TX
 26402 ;;		i1_i2c_ISR
 26403 ;; This function uses a non-reentrant model
 26404 ;;
 26405                           
 26406                           
 26407                           ;psect for function i1_i2c1_driver_isNACK
 26408  211A                     i1_i2c1_driver_isNACK:	
 26409                           
 26410                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 26411                           
 26412                           ;incstack = 0
 26413                           ; Regs used in i1_i2c1_driver_isNACK: [wreg+status,2+status,0]
 26414  211A  0024               	movlb	4	; select bank4
 26415  211B  0816               	movf	22,w	;volatile
 26416  211C  39BF               	andlw	-65
 26417  211D  3840               	iorlw	64
 26418  211E  0096               	movwf	22	;volatile
 26419  211F  0E16               	swapf	22,w	;volatile
 26420  2120  0C89               	rrf	9,f
 26421  2121  0C89               	rrf	9,f
 26422  2122  3901               	andlw	1
 26423  2123  00F0               	movwf	??i1_i2c1_driver_isNACK
 26424  2124  0C70               	rrf	??i1_i2c1_driver_isNACK,w
 26425  2125  0008               	return
 26426  2126                     __end_ofi1_i2c1_driver_isNACK:	
 26427                           
 26428                           	psect	text153
 26429  2FA8                     __ptext153:	
 26430 ;; *************** function i1_i2c1_driver_TXData *****************
 26431 ;; Defined at:
 26432 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 26433 ;; Parameters:    Size  Location     Type
 26434 ;;  d               1    wreg     unsigned char 
 26435 ;; Auto vars:     Size  Location     Type
 26436 ;;  d               1    0[COMMON] unsigned char 
 26437 ;; Return value:  Size  Location     Type
 26438 ;;                  1    wreg      void 
 26439 ;; Registers used:
 26440 ;;		wreg
 26441 ;; Tracked objects:
 26442 ;;		On entry : 0/0
 26443 ;;		On exit  : 0/0
 26444 ;;		Unchanged: 0/0
 26445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26447 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26449 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26450 ;;Total ram usage:        1 bytes
 26451 ;; Hardware stack levels used:    1
 26452 ;; This function calls:
 26453 ;;		Nothing
 26454 ;; This function is called by:
 26455 ;;		i1_do_I2C_SEND_ADR_READ
 26456 ;;		i1_do_I2C_SEND_ADR_WRITE
 26457 ;;		i1_do_I2C_TX
 26458 ;; This function uses a non-reentrant model
 26459 ;;
 26460                           
 26461                           
 26462                           ;psect for function i1_i2c1_driver_TXData
 26463  2FA8                     i1_i2c1_driver_TXData:	
 26464                           
 26465                           ;incstack = 0
 26466                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 26467                           ;i1i2c1_driver_TXData@d stored from wreg
 26468  2FA8  00F0               	movwf	i1i2c1_driver_TXData@d
 26469                           
 26470                           ;i2c1_driver.c: 188: SSP1BUF = d;
 26471  2FA9  0870               	movf	i1i2c1_driver_TXData@d,w
 26472  2FAA  0024               	movlb	4	; select bank4
 26473  2FAB  0091               	movwf	17	;volatile
 26474  2FAC  0008               	return
 26475  2FAD                     __end_ofi1_i2c1_driver_TXData:	
 26476                           
 26477                           	psect	text154
 26478  2F3A                     __ptext154:	
 26479 ;; *************** function i1_i2c1_driver_getRXData *****************
 26480 ;; Defined at:
 26481 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 26482 ;; Parameters:    Size  Location     Type
 26483 ;;		None
 26484 ;; Auto vars:     Size  Location     Type
 26485 ;;		None
 26486 ;; Return value:  Size  Location     Type
 26487 ;;                  1    wreg      unsigned char 
 26488 ;; Registers used:
 26489 ;;		wreg
 26490 ;; Tracked objects:
 26491 ;;		On entry : 0/0
 26492 ;;		On exit  : 0/0
 26493 ;;		Unchanged: 0/0
 26494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26499 ;;Total ram usage:        0 bytes
 26500 ;; Hardware stack levels used:    1
 26501 ;; This function calls:
 26502 ;;		Nothing
 26503 ;; This function is called by:
 26504 ;;		i1_do_I2C_RX
 26505 ;; This function uses a non-reentrant model
 26506 ;;
 26507                           
 26508                           
 26509                           ;psect for function i1_i2c1_driver_getRXData
 26510  2F3A                     i1_i2c1_driver_getRXData:	
 26511                           
 26512                           ;i2c1_driver.c: 173: return SSP1BUF;
 26513                           
 26514                           ;incstack = 0
 26515                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 26516  2F3A  0024               	movlb	4	; select bank4
 26517  2F3B  0811               	movf	17,w	;volatile
 26518  2F3C  0008               	return
 26519  2F3D                     __end_ofi1_i2c1_driver_getRXData:	
 26520                           
 26521                           	psect	text155
 26522  2F65                     __ptext155:	
 26523 ;; *************** function i1_i2c1_driver_sendNACK *****************
 26524 ;; Defined at:
 26525 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 26526 ;; Parameters:    Size  Location     Type
 26527 ;;		None
 26528 ;; Auto vars:     Size  Location     Type
 26529 ;;		None
 26530 ;; Return value:  Size  Location     Type
 26531 ;;                  1    wreg      void 
 26532 ;; Registers used:
 26533 ;;		None
 26534 ;; Tracked objects:
 26535 ;;		On entry : 0/0
 26536 ;;		On exit  : 0/0
 26537 ;;		Unchanged: 0/0
 26538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26543 ;;Total ram usage:        0 bytes
 26544 ;; Hardware stack levels used:    1
 26545 ;; This function calls:
 26546 ;;		Nothing
 26547 ;; This function is called by:
 26548 ;;		i1_do_I2C_DO_NACK_STOP
 26549 ;;		i1_do_I2C_DO_NACK_RESTART
 26550 ;; This function uses a non-reentrant model
 26551 ;;
 26552                           
 26553                           
 26554                           ;psect for function i1_i2c1_driver_sendNACK
 26555  2F65                     i1_i2c1_driver_sendNACK:	
 26556                           
 26557                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 26558                           
 26559                           ;incstack = 0
 26560                           ; Regs used in i1_i2c1_driver_sendNACK: []
 26561  2F65  0024               	movlb	4	; select bank4
 26562  2F66  1696               	bsf	22,5	;volatile
 26563                           
 26564                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 26565  2F67  1616               	bsf	22,4	;volatile
 26566  2F68  0008               	return
 26567  2F69                     __end_ofi1_i2c1_driver_sendNACK:	
 26568                           
 26569                           	psect	text156
 26570  2F1E                     __ptext156:	
 26571 ;; *************** function i1_i2c1_driver_resetBus *****************
 26572 ;; Defined at:
 26573 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 26574 ;; Parameters:    Size  Location     Type
 26575 ;;		None
 26576 ;; Auto vars:     Size  Location     Type
 26577 ;;		None
 26578 ;; Return value:  Size  Location     Type
 26579 ;;                  1    wreg      void 
 26580 ;; Registers used:
 26581 ;;		None
 26582 ;; Tracked objects:
 26583 ;;		On entry : 0/0
 26584 ;;		On exit  : 0/0
 26585 ;;		Unchanged: 0/0
 26586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26591 ;;Total ram usage:        0 bytes
 26592 ;; Hardware stack levels used:    1
 26593 ;; This function calls:
 26594 ;;		Nothing
 26595 ;; This function is called by:
 26596 ;;		i1_do_I2C_RESET
 26597 ;; This function uses a non-reentrant model
 26598 ;;
 26599                           
 26600                           
 26601                           ;psect for function i1_i2c1_driver_resetBus
 26602  2F1E                     i1_i2c1_driver_resetBus:	
 26603                           
 26604                           ;incstack = 0
 26605                           ; Regs used in i1_i2c1_driver_resetBus: []
 26606  2F1E  0008               	return
 26607  2F1F                     __end_ofi1_i2c1_driver_resetBus:	
 26608                           
 26609                           	psect	text157
 26610  2F37                     __ptext157:	
 26611 ;; *************** function i1_i2c1_driver_startRX *****************
 26612 ;; Defined at:
 26613 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 26614 ;; Parameters:    Size  Location     Type
 26615 ;;		None
 26616 ;; Auto vars:     Size  Location     Type
 26617 ;;		None
 26618 ;; Return value:  Size  Location     Type
 26619 ;;                  1    wreg      void 
 26620 ;; Registers used:
 26621 ;;		None
 26622 ;; Tracked objects:
 26623 ;;		On entry : 0/0
 26624 ;;		On exit  : 0/0
 26625 ;;		Unchanged: 0/0
 26626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26631 ;;Total ram usage:        0 bytes
 26632 ;; Hardware stack levels used:    1
 26633 ;; This function calls:
 26634 ;;		Nothing
 26635 ;; This function is called by:
 26636 ;;		i1_do_I2C_RCEN
 26637 ;; This function uses a non-reentrant model
 26638 ;;
 26639                           
 26640                           
 26641                           ;psect for function i1_i2c1_driver_startRX
 26642  2F37                     i1_i2c1_driver_startRX:	
 26643                           
 26644                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
 26645                           
 26646                           ;incstack = 0
 26647                           ; Regs used in i1_i2c1_driver_startRX: []
 26648  2F37  0024               	movlb	4	; select bank4
 26649  2F38  1596               	bsf	22,3	;volatile
 26650  2F39  0008               	return
 26651  2F3A                     __end_ofi1_i2c1_driver_startRX:	
 26652                           
 26653                           	psect	text158
 26654  11E4                     __ptext158:	
 26655 ;; *************** function i1_returnReset *****************
 26656 ;; Defined at:
 26657 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 26658 ;; Parameters:    Size  Location     Type
 26659 ;;  p               1    0[COMMON] PTR void 
 26660 ;;		 -> NULL(0), 
 26661 ;; Auto vars:     Size  Location     Type
 26662 ;;		None
 26663 ;; Return value:  Size  Location     Type
 26664 ;;                  1    wreg      enum E8198
 26665 ;; Registers used:
 26666 ;;		wreg
 26667 ;; Tracked objects:
 26668 ;;		On entry : 0/0
 26669 ;;		On exit  : 0/0
 26670 ;;		Unchanged: 0/0
 26671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26672 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26675 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26676 ;;Total ram usage:        1 bytes
 26677 ;; Hardware stack levels used:    1
 26678 ;; This function calls:
 26679 ;;		Nothing
 26680 ;; This function is called by:
 26681 ;; This function uses a non-reentrant model
 26682 ;;
 26683                           
 26684                           
 26685                           ;psect for function i1_returnReset
 26686  11E4                     i1_returnReset:	
 26687  11E4                     i1l8593:	
 26688                           ;incstack = 0
 26689                           ; Regs used in i1_returnReset: [wreg]
 26690                           
 26691                           
 26692                           ;i2c_master.c: 450: return i2c_reset_link;
 26693  11E4  3005               	movlw	5
 26694  11E5  0008               	return
 26695  11E6                     __end_ofi1_returnReset:	
 26696                           
 26697                           	psect	text159
 26698  2F20                     __ptext159:	
 26699 ;; *************** function i1_returnStop *****************
 26700 ;; Defined at:
 26701 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 26702 ;; Parameters:    Size  Location     Type
 26703 ;;  p               1    0[COMMON] PTR void 
 26704 ;;		 -> NULL(0), 
 26705 ;; Auto vars:     Size  Location     Type
 26706 ;;		None
 26707 ;; Return value:  Size  Location     Type
 26708 ;;                  1    wreg      enum E8198
 26709 ;; Registers used:
 26710 ;;		wreg
 26711 ;; Tracked objects:
 26712 ;;		On entry : 0/0
 26713 ;;		On exit  : 0/0
 26714 ;;		Unchanged: 0/0
 26715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26716 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26719 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26720 ;;Total ram usage:        1 bytes
 26721 ;; Hardware stack levels used:    1
 26722 ;; This function calls:
 26723 ;;		Nothing
 26724 ;; This function is called by:
 26725 ;; This function uses a non-reentrant model
 26726 ;;
 26727                           
 26728                           
 26729                           ;psect for function i1_returnStop
 26730  2F20                     i1_returnStop:	
 26731  2F20                     i1l8589:	
 26732                           ;incstack = 0
 26733                           ; Regs used in i1_returnStop: [wreg]
 26734                           
 26735                           
 26736                           ;i2c_master.c: 445: return i2c_stop;
 26737  2F20  3001               	movlw	1
 26738  2F21  0008               	return
 26739  2F22                     __end_ofi1_returnStop:	
 26740                           
 26741                           	psect	text160
 26742  2F34                     __ptext160:	
 26743 ;; *************** function i1_i2c1_driver_stop *****************
 26744 ;; Defined at:
 26745 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 26746 ;; Parameters:    Size  Location     Type
 26747 ;;		None
 26748 ;; Auto vars:     Size  Location     Type
 26749 ;;		None
 26750 ;; Return value:  Size  Location     Type
 26751 ;;                  1    wreg      void 
 26752 ;; Registers used:
 26753 ;;		None
 26754 ;; Tracked objects:
 26755 ;;		On entry : 0/0
 26756 ;;		On exit  : 0/0
 26757 ;;		Unchanged: 0/0
 26758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26763 ;;Total ram usage:        0 bytes
 26764 ;; Hardware stack levels used:    1
 26765 ;; This function calls:
 26766 ;;		Nothing
 26767 ;; This function is called by:
 26768 ;;		i1_do_I2C_SEND_STOP
 26769 ;; This function uses a non-reentrant model
 26770 ;;
 26771                           
 26772                           
 26773                           ;psect for function i1_i2c1_driver_stop
 26774  2F34                     i1_i2c1_driver_stop:	
 26775                           
 26776                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
 26777                           
 26778                           ;incstack = 0
 26779                           ; Regs used in i1_i2c1_driver_stop: []
 26780  2F34  0024               	movlb	4	; select bank4
 26781  2F35  1516               	bsf	22,2	;volatile
 26782  2F36  0008               	return
 26783  2F37                     __end_ofi1_i2c1_driver_stop:	
 26784                           
 26785                           	psect	text161
 26786  2F31                     __ptext161:	
 26787 ;; *************** function i1_i2c1_driver_restart *****************
 26788 ;; Defined at:
 26789 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 26790 ;; Parameters:    Size  Location     Type
 26791 ;;		None
 26792 ;; Auto vars:     Size  Location     Type
 26793 ;;		None
 26794 ;; Return value:  Size  Location     Type
 26795 ;;                  1    wreg      void 
 26796 ;; Registers used:
 26797 ;;		None
 26798 ;; Tracked objects:
 26799 ;;		On entry : 0/0
 26800 ;;		On exit  : 0/0
 26801 ;;		Unchanged: 0/0
 26802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26807 ;;Total ram usage:        0 bytes
 26808 ;; Hardware stack levels used:    1
 26809 ;; This function calls:
 26810 ;;		Nothing
 26811 ;; This function is called by:
 26812 ;;		i1_do_I2C_SEND_RESTART_READ
 26813 ;;		i1_do_I2C_SEND_RESTART_WRITE
 26814 ;;		i1_do_I2C_SEND_RESTART
 26815 ;; This function uses a non-reentrant model
 26816 ;;
 26817                           
 26818                           
 26819                           ;psect for function i1_i2c1_driver_restart
 26820  2F31                     i1_i2c1_driver_restart:	
 26821                           
 26822                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
 26823                           
 26824                           ;incstack = 0
 26825                           ; Regs used in i1_i2c1_driver_restart: []
 26826  2F31  0024               	movlb	4	; select bank4
 26827  2F32  1496               	bsf	22,1	;volatile
 26828  2F33  0008               	return
 26829  2F34                     __end_ofi1_i2c1_driver_restart:	
 26830                           
 26831                           	psect	text162
 26832  2F61                     __ptext162:	
 26833 ;; *************** function i1_i2c1_driver_sendACK *****************
 26834 ;; Defined at:
 26835 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 26836 ;; Parameters:    Size  Location     Type
 26837 ;;		None
 26838 ;; Auto vars:     Size  Location     Type
 26839 ;;		None
 26840 ;; Return value:  Size  Location     Type
 26841 ;;                  1    wreg      void 
 26842 ;; Registers used:
 26843 ;;		None
 26844 ;; Tracked objects:
 26845 ;;		On entry : 0/0
 26846 ;;		On exit  : 0/0
 26847 ;;		Unchanged: 0/0
 26848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26853 ;;Total ram usage:        0 bytes
 26854 ;; Hardware stack levels used:    1
 26855 ;; This function calls:
 26856 ;;		Nothing
 26857 ;; This function is called by:
 26858 ;;		i1_do_I2C_DO_ACK
 26859 ;;		i1_do_I2C_RX
 26860 ;; This function uses a non-reentrant model
 26861 ;;
 26862                           
 26863                           
 26864                           ;psect for function i1_i2c1_driver_sendACK
 26865  2F61                     i1_i2c1_driver_sendACK:	
 26866                           
 26867                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 26868                           
 26869                           ;incstack = 0
 26870                           ; Regs used in i1_i2c1_driver_sendACK: []
 26871  2F61  0024               	movlb	4	; select bank4
 26872  2F62  1296               	bcf	22,5	;volatile
 26873                           
 26874                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 26875  2F63  1616               	bsf	22,4	;volatile
 26876  2F64  0008               	return
 26877  2F65                     __end_ofi1_i2c1_driver_sendACK:	
 26878                           
 26879                           	psect	text163
 26880  2F2E                     __ptext163:	
 26881 ;; *************** function _i2c_busCollisionISR *****************
 26882 ;; Defined at:
 26883 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 26884 ;; Parameters:    Size  Location     Type
 26885 ;;		None
 26886 ;; Auto vars:     Size  Location     Type
 26887 ;;		None
 26888 ;; Return value:  Size  Location     Type
 26889 ;;                  1    wreg      void 
 26890 ;; Registers used:
 26891 ;;		status,2, status,0, pclath, cstack
 26892 ;; Tracked objects:
 26893 ;;		On entry : 0/0
 26894 ;;		On exit  : 0/0
 26895 ;;		Unchanged: 0/0
 26896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26901 ;;Total ram usage:        0 bytes
 26902 ;; Hardware stack levels used:    1
 26903 ;; Hardware stack levels required when called:    1
 26904 ;; This function calls:
 26905 ;;		_i2c1_driver_clearBusCollision
 26906 ;; This function is called by:
 26907 ;;		_i2c_open
 26908 ;;		_INTERRUPT_InterruptManager
 26909 ;; This function uses a non-reentrant model
 26910 ;;
 26911                           
 26912                           
 26913                           ;psect for function _i2c_busCollisionISR
 26914  2F2E                     _i2c_busCollisionISR:	
 26915                           
 26916                           ;i2c_master.c: 437: i2c1_driver_clearBusCollision();
 26917                           
 26918                           ;incstack = 0
 26919                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 26920  2F2E  31AF  272B         	fcall	_i2c1_driver_clearBusCollision
 26921  2F30  0008               	return
 26922  2F31                     __end_of_i2c_busCollisionISR:	
 26923                           
 26924                           	psect	text164
 26925  2F2B                     __ptext164:	
 26926 ;; *************** function _i2c1_driver_clearBusCollision *****************
 26927 ;; Defined at:
 26928 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 26929 ;; Parameters:    Size  Location     Type
 26930 ;;		None
 26931 ;; Auto vars:     Size  Location     Type
 26932 ;;		None
 26933 ;; Return value:  Size  Location     Type
 26934 ;;                  1    wreg      void 
 26935 ;; Registers used:
 26936 ;;		None
 26937 ;; Tracked objects:
 26938 ;;		On entry : 0/0
 26939 ;;		On exit  : 0/0
 26940 ;;		Unchanged: 0/0
 26941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26946 ;;Total ram usage:        0 bytes
 26947 ;; Hardware stack levels used:    1
 26948 ;; This function calls:
 26949 ;;		Nothing
 26950 ;; This function is called by:
 26951 ;;		_i2c_busCollisionISR
 26952 ;; This function uses a non-reentrant model
 26953 ;;
 26954                           
 26955                           
 26956                           ;psect for function _i2c1_driver_clearBusCollision
 26957  2F2B                     _i2c1_driver_clearBusCollision:	
 26958                           
 26959                           ;i2c1_driver.c: 255: PIR1bits.BCL1IF = 0;
 26960                           
 26961                           ;incstack = 0
 26962                           ; Regs used in _i2c1_driver_clearBusCollision: []
 26963  2F2B  0020               	movlb	0	; select bank0
 26964  2F2C  1111               	bcf	17,2	;volatile
 26965  2F2D  0008               	return
 26966  2F2E                     __end_of_i2c1_driver_clearBusCollision:	
 26967                           
 26968                           	psect	text165
 26969  2164                     __ptext165:	
 26970 ;; *************** function _TMR4_ISR *****************
 26971 ;; Defined at:
 26972 ;;		line 118 in file "mcc_generated_files/tmr4.c"
 26973 ;; Parameters:    Size  Location     Type
 26974 ;;		None
 26975 ;; Auto vars:     Size  Location     Type
 26976 ;;		None
 26977 ;; Return value:  Size  Location     Type
 26978 ;;                  1    wreg      void 
 26979 ;; Registers used:
 26980 ;;		wreg, status,2, status,0, pclath, cstack
 26981 ;; Tracked objects:
 26982 ;;		On entry : 0/0
 26983 ;;		On exit  : 0/0
 26984 ;;		Unchanged: 0/0
 26985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26990 ;;Total ram usage:        0 bytes
 26991 ;; Hardware stack levels used:    1
 26992 ;; Hardware stack levels required when called:    2
 26993 ;; This function calls:
 26994 ;;		Absolute function
 26995 ;;		_TMR4_DefaultInterruptHandler
 26996 ;; This function is called by:
 26997 ;;		_INTERRUPT_InterruptManager
 26998 ;; This function uses a non-reentrant model
 26999 ;;
 27000                           
 27001                           
 27002                           ;psect for function _TMR4_ISR
 27003  2164                     _TMR4_ISR:	
 27004                           
 27005                           ;tmr4.c: 122: PIR2bits.TMR4IF = 0;
 27006                           
 27007                           ;incstack = 0
 27008                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 27009  2164  0020               	movlb	0	; select bank0
 27010  2165  1092               	bcf	18,1	;volatile
 27011                           
 27012                           ;tmr4.c: 124: if(TMR4_InterruptHandler)
 27013  2166  0023               	movlb	3	; select bank3
 27014  2167  0862               	movf	_TMR4_InterruptHandler^(0+384),w
 27015  2168  0463               	iorwf	(_TMR4_InterruptHandler+1)^(0+384),w
 27016  2169  1903               	btfsc	3,2
 27017  216A  0008               	return
 27018                           
 27019                           ;tmr4.c: 125: {
 27020                           ;tmr4.c: 126: TMR4_InterruptHandler();
 27021  216B  0863               	movf	(_TMR4_InterruptHandler+1)^(0+384),w
 27022  216C  008A               	movwf	10
 27023  216D  0862               	movf	_TMR4_InterruptHandler^(0+384),w
 27024  216E  000A               	callw
 27025  216F  31A1               	pagesel	$
 27026  2170  0008               	return
 27027  2171                     __end_of_TMR4_ISR:	
 27028                           
 27029                           	psect	text166
 27030  20B2                     __ptext166:	
 27031 ;; *************** function _TMR4_DefaultInterruptHandler *****************
 27032 ;; Defined at:
 27033 ;;		line 135 in file "mcc_generated_files/tmr4.c"
 27034 ;; Parameters:    Size  Location     Type
 27035 ;;		None
 27036 ;; Auto vars:     Size  Location     Type
 27037 ;;		None
 27038 ;; Return value:  Size  Location     Type
 27039 ;;                  1    wreg      void 
 27040 ;; Registers used:
 27041 ;;		wreg, status,2, status,0, pclath, cstack
 27042 ;; Tracked objects:
 27043 ;;		On entry : 0/0
 27044 ;;		On exit  : 0/0
 27045 ;;		Unchanged: 0/0
 27046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27051 ;;Total ram usage:        0 bytes
 27052 ;; Hardware stack levels used:    1
 27053 ;; Hardware stack levels required when called:    1
 27054 ;; This function calls:
 27055 ;;		_TMR4_StopTimer
 27056 ;;		_TMR4_WriteTimer
 27057 ;; This function is called by:
 27058 ;;		_TMR4_Initialize
 27059 ;;		_TMR4_ISR
 27060 ;; This function uses a non-reentrant model
 27061 ;;
 27062                           
 27063                           
 27064                           ;psect for function _TMR4_DefaultInterruptHandler
 27065  20B2                     _TMR4_DefaultInterruptHandler:	
 27066                           
 27067                           ;tmr4.c: 138: interpulseWait = 0;
 27068                           
 27069                           ;incstack = 0
 27070                           ; Regs used in _TMR4_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 27071  20B2  0022               	movlb	2	; select bank2
 27072  20B3  01E8               	clrf	_interpulseWait^(0+256)
 27073  20B4  01E9               	clrf	(_interpulseWait+1)^(0+256)
 27074                           
 27075                           ;tmr4.c: 139: TMR4_StopTimer();
 27076  20B5  31AF  2728  31A0   	fcall	_TMR4_StopTimer
 27077                           
 27078                           ;tmr4.c: 140: TMR4_WriteTimer(0);
 27079  20B8  3000               	movlw	0
 27080  20B9  31AF  27A3         	fcall	_TMR4_WriteTimer
 27081  20BB  0008               	return
 27082  20BC                     __end_of_TMR4_DefaultInterruptHandler:	
 27083                           
 27084                           	psect	text167
 27085  2FA3                     __ptext167:	
 27086 ;; *************** function _TMR4_WriteTimer *****************
 27087 ;; Defined at:
 27088 ;;		line 107 in file "mcc_generated_files/tmr4.c"
 27089 ;; Parameters:    Size  Location     Type
 27090 ;;  timerVal        1    wreg     unsigned char 
 27091 ;; Auto vars:     Size  Location     Type
 27092 ;;  timerVal        1    0[COMMON] unsigned char 
 27093 ;; Return value:  Size  Location     Type
 27094 ;;                  1    wreg      void 
 27095 ;; Registers used:
 27096 ;;		wreg
 27097 ;; Tracked objects:
 27098 ;;		On entry : 0/0
 27099 ;;		On exit  : 0/0
 27100 ;;		Unchanged: 0/0
 27101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27103 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27105 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27106 ;;Total ram usage:        1 bytes
 27107 ;; Hardware stack levels used:    1
 27108 ;; This function calls:
 27109 ;;		Nothing
 27110 ;; This function is called by:
 27111 ;;		_TMR4_DefaultInterruptHandler
 27112 ;; This function uses a non-reentrant model
 27113 ;;
 27114                           
 27115                           
 27116                           ;psect for function _TMR4_WriteTimer
 27117  2FA3                     _TMR4_WriteTimer:	
 27118                           
 27119                           ;incstack = 0
 27120                           ; Regs used in _TMR4_WriteTimer: [wreg]
 27121                           ;TMR4_WriteTimer@timerVal stored from wreg
 27122  2FA3  00F0               	movwf	TMR4_WriteTimer@timerVal
 27123                           
 27124                           ;tmr4.c: 110: TMR4 = timerVal;
 27125  2FA4  0870               	movf	TMR4_WriteTimer@timerVal,w
 27126  2FA5  0028               	movlb	8	; select bank8
 27127  2FA6  0095               	movwf	21	;volatile
 27128  2FA7  0008               	return
 27129  2FA8                     __end_of_TMR4_WriteTimer:	
 27130                           
 27131                           	psect	text168
 27132  2F28                     __ptext168:	
 27133 ;; *************** function _TMR4_StopTimer *****************
 27134 ;; Defined at:
 27135 ;;		line 92 in file "mcc_generated_files/tmr4.c"
 27136 ;; Parameters:    Size  Location     Type
 27137 ;;		None
 27138 ;; Auto vars:     Size  Location     Type
 27139 ;;		None
 27140 ;; Return value:  Size  Location     Type
 27141 ;;                  1    wreg      void 
 27142 ;; Registers used:
 27143 ;;		None
 27144 ;; Tracked objects:
 27145 ;;		On entry : 0/0
 27146 ;;		On exit  : 0/0
 27147 ;;		Unchanged: 0/0
 27148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27153 ;;Total ram usage:        0 bytes
 27154 ;; Hardware stack levels used:    1
 27155 ;; This function calls:
 27156 ;;		Nothing
 27157 ;; This function is called by:
 27158 ;;		_TMR4_DefaultInterruptHandler
 27159 ;; This function uses a non-reentrant model
 27160 ;;
 27161                           
 27162                           
 27163                           ;psect for function _TMR4_StopTimer
 27164  2F28                     _TMR4_StopTimer:	
 27165                           
 27166                           ;tmr4.c: 95: T4CONbits.TMR4ON = 0;
 27167                           
 27168                           ;incstack = 0
 27169                           ; Regs used in _TMR4_StopTimer: []
 27170  2F28  0028               	movlb	8	; select bank8
 27171  2F29  1117               	bcf	23,2	;volatile
 27172  2F2A  0008               	return
 27173  2F2B                     __end_of_TMR4_StopTimer:	
 27174                           
 27175                           	psect	text169
 27176  2157                     __ptext169:	
 27177 ;; *************** function _TMR2_ISR *****************
 27178 ;; Defined at:
 27179 ;;		line 117 in file "mcc_generated_files/tmr2.c"
 27180 ;; Parameters:    Size  Location     Type
 27181 ;;		None
 27182 ;; Auto vars:     Size  Location     Type
 27183 ;;		None
 27184 ;; Return value:  Size  Location     Type
 27185 ;;                  1    wreg      void 
 27186 ;; Registers used:
 27187 ;;		wreg, status,2, status,0, pclath, cstack
 27188 ;; Tracked objects:
 27189 ;;		On entry : 0/0
 27190 ;;		On exit  : 0/0
 27191 ;;		Unchanged: 0/0
 27192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27197 ;;Total ram usage:        0 bytes
 27198 ;; Hardware stack levels used:    1
 27199 ;; Hardware stack levels required when called:    2
 27200 ;; This function calls:
 27201 ;;		Absolute function
 27202 ;;		_TMR2_DefaultInterruptHandler
 27203 ;; This function is called by:
 27204 ;;		_INTERRUPT_InterruptManager
 27205 ;; This function uses a non-reentrant model
 27206 ;;
 27207                           
 27208                           
 27209                           ;psect for function _TMR2_ISR
 27210  2157                     _TMR2_ISR:	
 27211                           
 27212                           ;tmr2.c: 121: PIR1bits.TMR2IF = 0;
 27213                           
 27214                           ;incstack = 0
 27215                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 27216  2157  0020               	movlb	0	; select bank0
 27217  2158  1091               	bcf	17,1	;volatile
 27218                           
 27219                           ;tmr2.c: 123: if(TMR2_InterruptHandler)
 27220  2159  0023               	movlb	3	; select bank3
 27221  215A  0864               	movf	_TMR2_InterruptHandler^(0+384),w
 27222  215B  0465               	iorwf	(_TMR2_InterruptHandler+1)^(0+384),w
 27223  215C  1903               	btfsc	3,2
 27224  215D  0008               	return
 27225                           
 27226                           ;tmr2.c: 124: {
 27227                           ;tmr2.c: 125: TMR2_InterruptHandler();
 27228  215E  0865               	movf	(_TMR2_InterruptHandler+1)^(0+384),w
 27229  215F  008A               	movwf	10
 27230  2160  0864               	movf	_TMR2_InterruptHandler^(0+384),w
 27231  2161  000A               	callw
 27232  2162  31A1               	pagesel	$
 27233  2163  0008               	return
 27234  2164                     __end_of_TMR2_ISR:	
 27235                           
 27236                           	psect	text170
 27237  206A                     __ptext170:	
 27238 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 27239 ;; Defined at:
 27240 ;;		line 134 in file "mcc_generated_files/tmr2.c"
 27241 ;; Parameters:    Size  Location     Type
 27242 ;;		None
 27243 ;; Auto vars:     Size  Location     Type
 27244 ;;		None
 27245 ;; Return value:  Size  Location     Type
 27246 ;;                  1    wreg      void 
 27247 ;; Registers used:
 27248 ;;		wreg, status,2, status,0, pclath, cstack
 27249 ;; Tracked objects:
 27250 ;;		On entry : 0/0
 27251 ;;		On exit  : 0/0
 27252 ;;		Unchanged: 0/0
 27253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27258 ;;Total ram usage:        0 bytes
 27259 ;; Hardware stack levels used:    1
 27260 ;; Hardware stack levels required when called:    1
 27261 ;; This function calls:
 27262 ;;		_TMR2_StopTimer
 27263 ;;		_TMR2_WriteTimer
 27264 ;; This function is called by:
 27265 ;;		_TMR2_Initialize
 27266 ;;		_TMR2_ISR
 27267 ;; This function uses a non-reentrant model
 27268 ;;
 27269                           
 27270                           
 27271                           ;psect for function _TMR2_DefaultInterruptHandler
 27272  206A                     _TMR2_DefaultInterruptHandler:	
 27273                           
 27274                           ;incstack = 0
 27275                           ; Regs used in _TMR2_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 27276                           ;tmr2.c: 138: do { LATCbits.LATC1 = 1; } while(0);
 27277  206A  0022               	movlb	2	; select bank2
 27278  206B  148E               	bsf	14,1	;volatile
 27279                           
 27280                           ;tmr2.c: 141: TMR2_StopTimer();
 27281  206C  31AF  2725  31A0   	fcall	_TMR2_StopTimer
 27282                           
 27283                           ;tmr2.c: 142: TMR2_WriteTimer(0);
 27284  206F  3000               	movlw	0
 27285  2070  31AF  279E         	fcall	_TMR2_WriteTimer
 27286  2072  0008               	return
 27287  2073                     __end_of_TMR2_DefaultInterruptHandler:	
 27288                           
 27289                           	psect	text171
 27290  2F9E                     __ptext171:	
 27291 ;; *************** function _TMR2_WriteTimer *****************
 27292 ;; Defined at:
 27293 ;;		line 106 in file "mcc_generated_files/tmr2.c"
 27294 ;; Parameters:    Size  Location     Type
 27295 ;;  timerVal        1    wreg     unsigned char 
 27296 ;; Auto vars:     Size  Location     Type
 27297 ;;  timerVal        1    0[COMMON] unsigned char 
 27298 ;; Return value:  Size  Location     Type
 27299 ;;                  1    wreg      void 
 27300 ;; Registers used:
 27301 ;;		wreg
 27302 ;; Tracked objects:
 27303 ;;		On entry : 0/0
 27304 ;;		On exit  : 0/0
 27305 ;;		Unchanged: 0/0
 27306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27308 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27310 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27311 ;;Total ram usage:        1 bytes
 27312 ;; Hardware stack levels used:    1
 27313 ;; This function calls:
 27314 ;;		Nothing
 27315 ;; This function is called by:
 27316 ;;		_TMR2_DefaultInterruptHandler
 27317 ;; This function uses a non-reentrant model
 27318 ;;
 27319                           
 27320                           
 27321                           ;psect for function _TMR2_WriteTimer
 27322  2F9E                     _TMR2_WriteTimer:	
 27323                           
 27324                           ;incstack = 0
 27325                           ; Regs used in _TMR2_WriteTimer: [wreg]
 27326                           ;TMR2_WriteTimer@timerVal stored from wreg
 27327  2F9E  00F0               	movwf	TMR2_WriteTimer@timerVal
 27328                           
 27329                           ;tmr2.c: 109: TMR2 = timerVal;
 27330  2F9F  0870               	movf	TMR2_WriteTimer@timerVal,w
 27331  2FA0  0020               	movlb	0	; select bank0
 27332  2FA1  009D               	movwf	29	;volatile
 27333  2FA2  0008               	return
 27334  2FA3                     __end_of_TMR2_WriteTimer:	
 27335                           
 27336                           	psect	text172
 27337  2F25                     __ptext172:	
 27338 ;; *************** function _TMR2_StopTimer *****************
 27339 ;; Defined at:
 27340 ;;		line 91 in file "mcc_generated_files/tmr2.c"
 27341 ;; Parameters:    Size  Location     Type
 27342 ;;		None
 27343 ;; Auto vars:     Size  Location     Type
 27344 ;;		None
 27345 ;; Return value:  Size  Location     Type
 27346 ;;                  1    wreg      void 
 27347 ;; Registers used:
 27348 ;;		None
 27349 ;; Tracked objects:
 27350 ;;		On entry : 0/0
 27351 ;;		On exit  : 0/0
 27352 ;;		Unchanged: 0/0
 27353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27358 ;;Total ram usage:        0 bytes
 27359 ;; Hardware stack levels used:    1
 27360 ;; This function calls:
 27361 ;;		Nothing
 27362 ;; This function is called by:
 27363 ;;		_TMR2_DefaultInterruptHandler
 27364 ;; This function uses a non-reentrant model
 27365 ;;
 27366                           
 27367                           
 27368                           ;psect for function _TMR2_StopTimer
 27369  2F25                     _TMR2_StopTimer:	
 27370                           
 27371                           ;tmr2.c: 94: T2CONbits.TMR2ON = 0;
 27372                           
 27373                           ;incstack = 0
 27374                           ; Regs used in _TMR2_StopTimer: []
 27375  2F25  0020               	movlb	0	; select bank0
 27376  2F26  111F               	bcf	31,2	;volatile
 27377  2F27  0008               	return
 27378  2F28                     __end_of_TMR2_StopTimer:	
 27379                           
 27380                           	psect	text173
 27381  214A                     __ptext173:	
 27382 ;; *************** function _TMR0_ISR *****************
 27383 ;; Defined at:
 27384 ;;		line 119 in file "mcc_generated_files/tmr0.c"
 27385 ;; Parameters:    Size  Location     Type
 27386 ;;		None
 27387 ;; Auto vars:     Size  Location     Type
 27388 ;;		None
 27389 ;; Return value:  Size  Location     Type
 27390 ;;                  1    wreg      void 
 27391 ;; Registers used:
 27392 ;;		wreg, status,2, status,0, pclath, cstack
 27393 ;; Tracked objects:
 27394 ;;		On entry : 0/0
 27395 ;;		On exit  : 0/0
 27396 ;;		Unchanged: 0/0
 27397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27402 ;;Total ram usage:        0 bytes
 27403 ;; Hardware stack levels used:    1
 27404 ;; Hardware stack levels required when called:    4
 27405 ;; This function calls:
 27406 ;;		Absolute function
 27407 ;;		_TMR0_DefaultInterruptHandler
 27408 ;; This function is called by:
 27409 ;;		_INTERRUPT_InterruptManager
 27410 ;; This function uses a non-reentrant model
 27411 ;;
 27412                           
 27413                           
 27414                           ;psect for function _TMR0_ISR
 27415  214A                     _TMR0_ISR:	
 27416                           
 27417                           ;tmr0.c: 122: PIR0bits.TMR0IF = 0;
 27418                           
 27419                           ;incstack = 0
 27420                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 27421  214A  0020               	movlb	0	; select bank0
 27422  214B  1290               	bcf	16,5	;volatile
 27423                           
 27424                           ;tmr0.c: 123: if(TMR0_InterruptHandler)
 27425  214C  0023               	movlb	3	; select bank3
 27426  214D  0866               	movf	_TMR0_InterruptHandler^(0+384),w
 27427  214E  0467               	iorwf	(_TMR0_InterruptHandler+1)^(0+384),w
 27428  214F  1903               	btfsc	3,2
 27429  2150  0008               	return
 27430                           
 27431                           ;tmr0.c: 124: {
 27432                           ;tmr0.c: 125: TMR0_InterruptHandler();
 27433  2151  0867               	movf	(_TMR0_InterruptHandler+1)^(0+384),w
 27434  2152  008A               	movwf	10
 27435  2153  0866               	movf	_TMR0_InterruptHandler^(0+384),w
 27436  2154  000A               	callw
 27437  2155  31A1               	pagesel	$
 27438  2156  0008               	return
 27439  2157                     __end_of_TMR0_ISR:	
 27440                           
 27441                           	psect	text174
 27442  2716                     __ptext174:	
 27443 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 27444 ;; Defined at:
 27445 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 27446 ;; Parameters:    Size  Location     Type
 27447 ;;		None
 27448 ;; Auto vars:     Size  Location     Type
 27449 ;;		None
 27450 ;; Return value:  Size  Location     Type
 27451 ;;                  1    wreg      void 
 27452 ;; Registers used:
 27453 ;;		wreg, status,2, status,0, pclath, cstack
 27454 ;; Tracked objects:
 27455 ;;		On entry : 0/0
 27456 ;;		On exit  : 0/0
 27457 ;;		Unchanged: 0/0
 27458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27463 ;;Total ram usage:        0 bytes
 27464 ;; Hardware stack levels used:    1
 27465 ;; Hardware stack levels required when called:    3
 27466 ;; This function calls:
 27467 ;;		_TMR0_StopTimer
 27468 ;;		_TMR0_Write8bitTimer
 27469 ;;		i1_LEDsOn
 27470 ;; This function is called by:
 27471 ;;		_TMR0_Initialize
 27472 ;;		_TMR0_ISR
 27473 ;; This function uses a non-reentrant model
 27474 ;;
 27475                           
 27476                           
 27477                           ;psect for function _TMR0_DefaultInterruptHandler
 27478  2716                     _TMR0_DefaultInterruptHandler:	
 27479                           
 27480                           ;tmr0.c: 141: LEDsOn(second_top, 1);
 27481                           
 27482                           ;incstack = 0
 27483                           ; Regs used in _TMR0_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 27484  2716  0022               	movlb	2	; select bank2
 27485  2717  0861               	movf	(_second_top+3)^(0+256),w
 27486  2718  0020               	movlb	0	; select bank0
 27487  2719  00AA               	movwf	i1LEDsOn@LEDpins+3
 27488  271A  0022               	movlb	2	; select bank2
 27489  271B  0860               	movf	(_second_top+2)^(0+256),w
 27490  271C  0020               	movlb	0	; select bank0
 27491  271D  00A9               	movwf	i1LEDsOn@LEDpins+2
 27492  271E  0022               	movlb	2	; select bank2
 27493  271F  085F               	movf	(_second_top+1)^(0+256),w
 27494  2720  0020               	movlb	0	; select bank0
 27495  2721  00A8               	movwf	i1LEDsOn@LEDpins+1
 27496  2722  0022               	movlb	2	; select bank2
 27497  2723  085E               	movf	_second_top^(0+256),w
 27498  2724  0020               	movlb	0	; select bank0
 27499  2725  00A7               	movwf	i1LEDsOn@LEDpins
 27500  2726  3001               	movlw	1
 27501  2727  00AB               	movwf	i1LEDsOn@topOrBottom
 27502  2728  3000               	movlw	0
 27503  2729  00AC               	movwf	i1LEDsOn@topOrBottom+1
 27504  272A  31A3  23D9  31A7   	fcall	i1_LEDsOn
 27505                           
 27506                           ;tmr0.c: 142: LEDsOn(second_bottom,2);
 27507  272D  0022               	movlb	2	; select bank2
 27508  272E  0855               	movf	(_second_bottom+3)^(0+256),w
 27509  272F  0020               	movlb	0	; select bank0
 27510  2730  00AA               	movwf	i1LEDsOn@LEDpins+3
 27511  2731  0022               	movlb	2	; select bank2
 27512  2732  0854               	movf	(_second_bottom+2)^(0+256),w
 27513  2733  0020               	movlb	0	; select bank0
 27514  2734  00A9               	movwf	i1LEDsOn@LEDpins+2
 27515  2735  0022               	movlb	2	; select bank2
 27516  2736  0853               	movf	(_second_bottom+1)^(0+256),w
 27517  2737  0020               	movlb	0	; select bank0
 27518  2738  00A8               	movwf	i1LEDsOn@LEDpins+1
 27519  2739  0022               	movlb	2	; select bank2
 27520  273A  0852               	movf	_second_bottom^(0+256),w
 27521  273B  0020               	movlb	0	; select bank0
 27522  273C  00A7               	movwf	i1LEDsOn@LEDpins
 27523  273D  3002               	movlw	2
 27524  273E  00AB               	movwf	i1LEDsOn@topOrBottom
 27525  273F  3000               	movlw	0
 27526  2740  00AC               	movwf	i1LEDsOn@topOrBottom+1
 27527  2741  31A3  23D9  31A7   	fcall	i1_LEDsOn
 27528                           
 27529                           ;tmr0.c: 144: do { LATCbits.LATC1 = 0; } while(0);
 27530  2744  0022               	movlb	2	; select bank2
 27531  2745  108E               	bcf	14,1	;volatile
 27532                           
 27533                           ;tmr0.c: 145: TMR0_StopTimer();
 27534  2746  31AF  2722  31A7   	fcall	_TMR0_StopTimer
 27535                           
 27536                           ;tmr0.c: 146: TMR0_Write8bitTimer(0);
 27537  2749  3000               	movlw	0
 27538  274A  31AF  2799         	fcall	_TMR0_Write8bitTimer
 27539  274C  0008               	return
 27540  274D                     __end_of_TMR0_DefaultInterruptHandler:	
 27541                           
 27542                           	psect	text175
 27543  23D9                     __ptext175:	
 27544 ;; *************** function i1_LEDsOn *****************
 27545 ;; Defined at:
 27546 ;;		line 6 in file "LEDcomm.c"
 27547 ;; Parameters:    Size  Location     Type
 27548 ;;  LEDpins         4    7[BANK0 ] unsigned long 
 27549 ;;  topOrBottom     2   11[BANK0 ] int 
 27550 ;; Auto vars:     Size  Location     Type
 27551 ;;		None
 27552 ;; Return value:  Size  Location     Type
 27553 ;;                  1    wreg      void 
 27554 ;; Registers used:
 27555 ;;		wreg, status,2, status,0, pclath, cstack
 27556 ;; Tracked objects:
 27557 ;;		On entry : 0/0
 27558 ;;		On exit  : 0/0
 27559 ;;		Unchanged: 0/0
 27560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27561 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27563 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27564 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27565 ;;Total ram usage:       10 bytes
 27566 ;; Hardware stack levels used:    1
 27567 ;; Hardware stack levels required when called:    2
 27568 ;; This function calls:
 27569 ;;		i1_send_2length_2bytes_IK
 27570 ;; This function is called by:
 27571 ;;		_TMR0_DefaultInterruptHandler
 27572 ;; This function uses a non-reentrant model
 27573 ;;
 27574                           
 27575                           
 27576                           ;psect for function i1_LEDsOn
 27577  23D9                     i1_LEDsOn:	
 27578                           
 27579                           ;LEDcomm.c: 7: send_2length_2bytes_IK((unsigned int)((LEDpins>>16) & 0xFFFF),(unsigned i
      +                          nt)LEDpins, 1, topOrBottom);
 27580                           
 27581                           ;incstack = 0
 27582                           ; Regs used in i1_LEDsOn: [wreg+status,2+status,0+pclath+cstack]
 27583  23D9  0020               	movlb	0	; select bank0
 27584  23DA  0827               	movf	i1LEDsOn@LEDpins,w
 27585  23DB  00AD               	movwf	??i1_LEDsOn
 27586  23DC  0828               	movf	i1LEDsOn@LEDpins+1,w
 27587  23DD  00AE               	movwf	??i1_LEDsOn+1
 27588  23DE  0829               	movf	i1LEDsOn@LEDpins+2,w
 27589  23DF  00AF               	movwf	??i1_LEDsOn+2
 27590  23E0  082A               	movf	i1LEDsOn@LEDpins+3,w
 27591  23E1  00B0               	movwf	??i1_LEDsOn+3
 27592  23E2  3010               	movlw	16
 27593  23E3                     u872_25:	
 27594  23E3  36B0               	lsrf	??i1_LEDsOn+3,f
 27595  23E4  0CAF               	rrf	??i1_LEDsOn+2,f
 27596  23E5  0CAE               	rrf	??i1_LEDsOn+1,f
 27597  23E6  0CAD               	rrf	??i1_LEDsOn,f
 27598  23E7  0B89               	decfsz	9,f
 27599  23E8  2BE3               	goto	u872_25
 27600  23E9  082E               	movf	??i1_LEDsOn+1,w
 27601  23EA  00A1               	movwf	i1send_2length_2bytes_IK@data1+1
 27602  23EB  082D               	movf	??i1_LEDsOn,w
 27603  23EC  00A0               	movwf	i1send_2length_2bytes_IK@data1
 27604  23ED  0828               	movf	i1LEDsOn@LEDpins+1,w
 27605  23EE  00A3               	movwf	i1send_2length_2bytes_IK@data2+1
 27606  23EF  0827               	movf	i1LEDsOn@LEDpins,w
 27607  23F0  00A2               	movwf	i1send_2length_2bytes_IK@data2
 27608  23F1  01A4               	clrf	i1send_2length_2bytes_IK@latch_start
 27609  23F2  0AA4               	incf	i1send_2length_2bytes_IK@latch_start,f
 27610  23F3  082C               	movf	i1LEDsOn@topOrBottom+1,w
 27611  23F4  00A6               	movwf	i1send_2length_2bytes_IK@topOrBottom+1
 27612  23F5  082B               	movf	i1LEDsOn@topOrBottom,w
 27613  23F6  00A5               	movwf	i1send_2length_2bytes_IK@topOrBottom
 27614  23F7  31A1  21FB         	fcall	i1_send_2length_2bytes_IK
 27615  23F9  0008               	return
 27616  23FA                     __end_ofi1_LEDsOn:	
 27617                           
 27618                           	psect	text176
 27619  21FB                     __ptext176:	
 27620 ;; *************** function i1_send_2length_2bytes_IK *****************
 27621 ;; Defined at:
 27622 ;;		line 70 in file "LEDcomm.c"
 27623 ;; Parameters:    Size  Location     Type
 27624 ;;  data1           2    0[BANK0 ] unsigned int 
 27625 ;;  data2           2    2[BANK0 ] unsigned int 
 27626 ;;  latch_start     1    4[BANK0 ] unsigned char 
 27627 ;;  topOrBottom     2    5[BANK0 ] int 
 27628 ;; Auto vars:     Size  Location     Type
 27629 ;;		None
 27630 ;; Return value:  Size  Location     Type
 27631 ;;                  1    wreg      void 
 27632 ;; Registers used:
 27633 ;;		wreg, status,2, status,0, pclath, cstack
 27634 ;; Tracked objects:
 27635 ;;		On entry : 0/0
 27636 ;;		On exit  : 0/0
 27637 ;;		Unchanged: 0/0
 27638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27639 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27642 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27643 ;;Total ram usage:        8 bytes
 27644 ;; Hardware stack levels used:    1
 27645 ;; Hardware stack levels required when called:    1
 27646 ;; This function calls:
 27647 ;;		i1_send_2bytes_latchless_IK
 27648 ;;		i1_send_last_2bytes_IK
 27649 ;; This function is called by:
 27650 ;;		i1_LEDsOn
 27651 ;; This function uses a non-reentrant model
 27652 ;;
 27653                           
 27654                           
 27655                           ;psect for function i1_send_2length_2bytes_IK
 27656  21FB                     i1_send_2length_2bytes_IK:	
 27657                           
 27658                           ;LEDcomm.c: 71: send_2bytes_latchless_IK( data1);
 27659                           
 27660                           ;incstack = 0
 27661                           ; Regs used in i1_send_2length_2bytes_IK: [wreg+status,2+status,0+pclath+cstack]
 27662  21FB  0020               	movlb	0	; select bank0
 27663  21FC  0821               	movf	i1send_2length_2bytes_IK@data1+1,w
 27664  21FD  00F1               	movwf	i1send_2bytes_latchless_IK@data+1
 27665  21FE  0820               	movf	i1send_2length_2bytes_IK@data1,w
 27666  21FF  00F0               	movwf	i1send_2bytes_latchless_IK@data
 27667  2200  31A5  253E  31A1   	fcall	i1_send_2bytes_latchless_IK
 27668                           
 27669                           ;LEDcomm.c: 72: send_last_2bytes_IK( data2, latch_start, topOrBottom);
 27670  2203  0020               	movlb	0	; select bank0
 27671  2204  0823               	movf	i1send_2length_2bytes_IK@data2+1,w
 27672  2205  00F1               	movwf	i1send_last_2bytes_IK@data+1
 27673  2206  0822               	movf	i1send_2length_2bytes_IK@data2,w
 27674  2207  00F0               	movwf	i1send_last_2bytes_IK@data
 27675  2208  0824               	movf	i1send_2length_2bytes_IK@latch_start,w
 27676  2209  00FB               	movwf	??i1_send_2length_2bytes_IK
 27677  220A  087B               	movf	??i1_send_2length_2bytes_IK,w
 27678  220B  00F2               	movwf	i1send_last_2bytes_IK@latch_start
 27679  220C  0826               	movf	i1send_2length_2bytes_IK@topOrBottom+1,w
 27680  220D  00F4               	movwf	i1send_last_2bytes_IK@topOrBottom+1
 27681  220E  0825               	movf	i1send_2length_2bytes_IK@topOrBottom,w
 27682  220F  00F3               	movwf	i1send_last_2bytes_IK@topOrBottom
 27683  2210  319A  225B         	fcall	i1_send_last_2bytes_IK
 27684  2212  0008               	return
 27685  2213                     __end_ofi1_send_2length_2bytes_IK:	
 27686                           
 27687                           	psect	text177
 27688  1A5B                     __ptext177:	
 27689 ;; *************** function i1_send_last_2bytes_IK *****************
 27690 ;; Defined at:
 27691 ;;		line 19 in file "LEDcomm.c"
 27692 ;; Parameters:    Size  Location     Type
 27693 ;;  data            2    0[COMMON] unsigned int 
 27694 ;;  latch_start     1    2[COMMON] unsigned char 
 27695 ;;  topOrBottom     2    3[COMMON] int 
 27696 ;; Auto vars:     Size  Location     Type
 27697 ;;  send_last_2b    2    9[COMMON] int 
 27698 ;; Return value:  Size  Location     Type
 27699 ;;                  1    wreg      void 
 27700 ;; Registers used:
 27701 ;;		wreg, status,2, status,0
 27702 ;; Tracked objects:
 27703 ;;		On entry : 0/0
 27704 ;;		On exit  : 0/0
 27705 ;;		Unchanged: 0/0
 27706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27707 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27708 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27709 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27710 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27711 ;;Total ram usage:       11 bytes
 27712 ;; Hardware stack levels used:    1
 27713 ;; This function calls:
 27714 ;;		Nothing
 27715 ;; This function is called by:
 27716 ;;		i1_send_2length_2bytes_IK
 27717 ;; This function uses a non-reentrant model
 27718 ;;
 27719                           
 27720                           
 27721                           ;psect for function i1_send_last_2bytes_IK
 27722  1A5B                     i1_send_last_2bytes_IK:	
 27723                           
 27724                           ;LEDcomm.c: 22: if (topOrBottom == 1){do { LATBbits.LATB4 = 0; } while(0);} else do { LA
      +                          TCbits.LATC0 = 0; } while(0);
 27725                           
 27726                           ;incstack = 0
 27727                           ; Regs used in i1_send_last_2bytes_IK: [wreg+status,2+status,0]
 27728  1A5B  0373               	decf	i1send_last_2bytes_IK@topOrBottom,w
 27729  1A5C  0474               	iorwf	i1send_last_2bytes_IK@topOrBottom+1,w
 27730  1A5D  1D03               	btfss	3,2
 27731  1A5E  2A62               	goto	i1l216
 27732  1A5F  0022               	movlb	2	; select bank2
 27733  1A60  120D               	bcf	13,4	;volatile
 27734  1A61  2A64               	goto	i1l8185
 27735  1A62                     i1l216:	
 27736  1A62  0022               	movlb	2	; select bank2
 27737  1A63  100E               	bcf	14,0	;volatile
 27738  1A64                     i1l8185:	
 27739                           
 27740                           ;LEDcomm.c: 24: for(int j = 15; j>=0; j--){
 27741  1A64  300F               	movlw	15
 27742  1A65  00F9               	movwf	i1send_last_2bytes_IK@j
 27743  1A66  3000               	movlw	0
 27744  1A67  00FA               	movwf	i1send_last_2bytes_IK@j+1
 27745  1A68  1BFA               	btfsc	i1send_last_2bytes_IK@j+1,7
 27746  1A69  2A9B               	goto	i1l237
 27747  1A6A                     i1l220:	
 27748                           ;LEDcomm.c: 26: do { LATAbits.LATA2 = 0; } while(0);
 27749                           
 27750  1A6A  110C               	bcf	12,2	;volatile
 27751                           
 27752                           ;LEDcomm.c: 28: if (data & 1 << j){
 27753  1A6B  3001               	movlw	1
 27754  1A6C  00F5               	movwf	??i1_send_last_2bytes_IK
 27755  1A6D  3000               	movlw	0
 27756  1A6E  00F6               	movwf	??i1_send_last_2bytes_IK+1
 27757  1A6F  0A79               	incf	i1send_last_2bytes_IK@j,w
 27758  1A70  2A73               	goto	u806_24
 27759  1A71                     u806_25:	
 27760  1A71  35F5               	lslf	??i1_send_last_2bytes_IK,f
 27761  1A72  0DF6               	rlf	??i1_send_last_2bytes_IK+1,f
 27762  1A73                     u806_24:	
 27763  1A73  0B89               	decfsz	9,f
 27764  1A74  2A71               	goto	u806_25
 27765  1A75  0870               	movf	i1send_last_2bytes_IK@data,w
 27766  1A76  0575               	andwf	??i1_send_last_2bytes_IK,w
 27767  1A77  00F7               	movwf	??i1_send_last_2bytes_IK+2
 27768  1A78  0871               	movf	i1send_last_2bytes_IK@data+1,w
 27769  1A79  0576               	andwf	??i1_send_last_2bytes_IK+1,w
 27770  1A7A  00F8               	movwf	??i1_send_last_2bytes_IK+3
 27771  1A7B  0877               	movf	??i1_send_last_2bytes_IK+2,w
 27772  1A7C  0478               	iorwf	??i1_send_last_2bytes_IK+3,w
 27773  1A7D  1903               	btfsc	3,2
 27774  1A7E  2A81               	goto	i1l226
 27775                           
 27776                           ;LEDcomm.c: 29: do { LATCbits.LATC2 = 1; } while(0);
 27777  1A7F  150E               	bsf	14,2	;volatile
 27778                           
 27779                           ;LEDcomm.c: 30: }
 27780  1A80  2A82               	goto	i1l8193
 27781  1A81                     i1l226:	
 27782                           ;LEDcomm.c: 31: else do { LATCbits.LATC2 = 0; } while(0);
 27783                           
 27784  1A81  110E               	bcf	14,2	;volatile
 27785  1A82                     i1l8193:	
 27786                           
 27787                           ;LEDcomm.c: 33: if( j == latch_start) {
 27788  1A82  0872               	movf	i1send_last_2bytes_IK@latch_start,w
 27789  1A83  00F5               	movwf	??i1_send_last_2bytes_IK
 27790  1A84  01F6               	clrf	??i1_send_last_2bytes_IK+1
 27791  1A85  087A               	movf	i1send_last_2bytes_IK@j+1,w
 27792  1A86  0676               	xorwf	??i1_send_last_2bytes_IK+1,w
 27793  1A87  1D03               	skipz
 27794  1A88  2A8B               	goto	u808_25
 27795  1A89  0879               	movf	i1send_last_2bytes_IK@j,w
 27796  1A8A  0675               	xorwf	??i1_send_last_2bytes_IK,w
 27797  1A8B                     u808_25:	
 27798  1A8B  1D03               	skipz
 27799  1A8C  2A94               	goto	i1l235
 27800                           
 27801                           ;LEDcomm.c: 35: if (topOrBottom == 1){do { LATBbits.LATB4 = 1; } while(0);} else do { LA
      +                          TCbits.LATC0 = 1; } while(0);
 27802  1A8D  0373               	decf	i1send_last_2bytes_IK@topOrBottom,w
 27803  1A8E  0474               	iorwf	i1send_last_2bytes_IK@topOrBottom+1,w
 27804  1A8F  1D03               	btfss	3,2
 27805  1A90  2A93               	goto	i1l233
 27806  1A91  160D               	bsf	13,4	;volatile
 27807  1A92  2A94               	goto	i1l235
 27808  1A93                     i1l233:	
 27809  1A93  140E               	bsf	14,0	;volatile
 27810  1A94                     i1l235:	
 27811                           ;LEDcomm.c: 37: }
 27812                           ;LEDcomm.c: 39: do { LATAbits.LATA2 = 1; } while(0);
 27813                           
 27814  1A94  150C               	bsf	12,2	;volatile
 27815  1A95  30FF               	movlw	255
 27816  1A96  07F9               	addwf	i1send_last_2bytes_IK@j,f
 27817  1A97  30FF               	movlw	255
 27818  1A98  3DFA               	addwfc	i1send_last_2bytes_IK@j+1,f
 27819  1A99  1FFA               	btfss	i1send_last_2bytes_IK@j+1,7
 27820  1A9A  2A6A               	goto	i1l220
 27821  1A9B                     i1l237:	
 27822                           ;LEDcomm.c: 41: }
 27823                           ;LEDcomm.c: 43: do { LATAbits.LATA2 = 0; } while(0);
 27824                           
 27825  1A9B  110C               	bcf	12,2	;volatile
 27826                           
 27827                           ;LEDcomm.c: 44: if (topOrBottom == 1){do { LATBbits.LATB4 = 0; } while(0);} else do { LA
      +                          TCbits.LATC0 = 0; } while(0);
 27828  1A9C  0373               	decf	i1send_last_2bytes_IK@topOrBottom,w
 27829  1A9D  0474               	iorwf	i1send_last_2bytes_IK@topOrBottom+1,w
 27830  1A9E  1D03               	btfss	3,2
 27831  1A9F  2AA2               	goto	i1l243
 27832  1AA0  120D               	bcf	13,4	;volatile
 27833  1AA1  0008               	return
 27834  1AA2                     i1l243:	
 27835  1AA2  100E               	bcf	14,0	;volatile
 27836  1AA3  0008               	return
 27837  1AA4                     __end_ofi1_send_last_2bytes_IK:	
 27838                           
 27839                           	psect	text178
 27840  253E                     __ptext178:	
 27841 ;; *************** function i1_send_2bytes_latchless_IK *****************
 27842 ;; Defined at:
 27843 ;;		line 49 in file "LEDcomm.c"
 27844 ;; Parameters:    Size  Location     Type
 27845 ;;  data            2    0[COMMON] unsigned int 
 27846 ;; Auto vars:     Size  Location     Type
 27847 ;;  send_2bytes_    2    6[COMMON] int 
 27848 ;; Return value:  Size  Location     Type
 27849 ;;                  1    wreg      void 
 27850 ;; Registers used:
 27851 ;;		wreg, status,2, status,0
 27852 ;; Tracked objects:
 27853 ;;		On entry : 0/0
 27854 ;;		On exit  : 0/0
 27855 ;;		Unchanged: 0/0
 27856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27857 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27858 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27859 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27860 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27861 ;;Total ram usage:        8 bytes
 27862 ;; Hardware stack levels used:    1
 27863 ;; This function calls:
 27864 ;;		Nothing
 27865 ;; This function is called by:
 27866 ;;		i1_send_2length_2bytes_IK
 27867 ;; This function uses a non-reentrant model
 27868 ;;
 27869                           
 27870                           
 27871                           ;psect for function i1_send_2bytes_latchless_IK
 27872  253E                     i1_send_2bytes_latchless_IK:	
 27873                           
 27874                           ;incstack = 0
 27875                           ; Regs used in i1_send_2bytes_latchless_IK: [wreg+status,2+status,0]
 27876                           ;LEDcomm.c: 51: do { LATBbits.LATB4 = 0; } while(0);
 27877  253E  0022               	movlb	2	; select bank2
 27878  253F  120D               	bcf	13,4	;volatile
 27879                           
 27880                           ;LEDcomm.c: 53: for(int j = 15; j>=0; j--){
 27881  2540  300F               	movlw	15
 27882  2541  00F6               	movwf	i1send_2bytes_latchless_IK@j
 27883  2542  3000               	movlw	0
 27884  2543  00F7               	movwf	i1send_2bytes_latchless_IK@j+1
 27885  2544  1BF7               	btfsc	i1send_2bytes_latchless_IK@j+1,7
 27886  2545  2D65               	goto	i1l262
 27887  2546                     i1l252:	
 27888                           ;LEDcomm.c: 54: do { LATAbits.LATA2 = 0; } while(0);
 27889                           
 27890  2546  110C               	bcf	12,2	;volatile
 27891                           
 27892                           ;LEDcomm.c: 56: if (data & 1 << j){
 27893  2547  3001               	movlw	1
 27894  2548  00F2               	movwf	??i1_send_2bytes_latchless_IK
 27895  2549  3000               	movlw	0
 27896  254A  00F3               	movwf	??i1_send_2bytes_latchless_IK+1
 27897  254B  0A76               	incf	i1send_2bytes_latchless_IK@j,w
 27898  254C  2D4F               	goto	u813_24
 27899  254D                     u813_25:	
 27900  254D  35F2               	lslf	??i1_send_2bytes_latchless_IK,f
 27901  254E  0DF3               	rlf	??i1_send_2bytes_latchless_IK+1,f
 27902  254F                     u813_24:	
 27903  254F  0B89               	decfsz	9,f
 27904  2550  2D4D               	goto	u813_25
 27905  2551  0870               	movf	i1send_2bytes_latchless_IK@data,w
 27906  2552  0572               	andwf	??i1_send_2bytes_latchless_IK,w
 27907  2553  00F4               	movwf	??i1_send_2bytes_latchless_IK+2
 27908  2554  0871               	movf	i1send_2bytes_latchless_IK@data+1,w
 27909  2555  0573               	andwf	??i1_send_2bytes_latchless_IK+1,w
 27910  2556  00F5               	movwf	??i1_send_2bytes_latchless_IK+3
 27911  2557  0874               	movf	??i1_send_2bytes_latchless_IK+2,w
 27912  2558  0475               	iorwf	??i1_send_2bytes_latchless_IK+3,w
 27913  2559  1903               	btfsc	3,2
 27914  255A  2D5D               	goto	i1l258
 27915                           
 27916                           ;LEDcomm.c: 57: do { LATCbits.LATC2 = 1; } while(0);
 27917  255B  150E               	bsf	14,2	;volatile
 27918                           
 27919                           ;LEDcomm.c: 58: }
 27920  255C  2D5E               	goto	i1l260
 27921  255D                     i1l258:	
 27922                           ;LEDcomm.c: 59: else do { LATCbits.LATC2 = 0; } while(0);
 27923                           
 27924  255D  110E               	bcf	14,2	;volatile
 27925  255E                     i1l260:	
 27926                           ;LEDcomm.c: 62: do { LATAbits.LATA2 = 1; } while(0);
 27927                           
 27928  255E  150C               	bsf	12,2	;volatile
 27929  255F  30FF               	movlw	255
 27930  2560  07F6               	addwf	i1send_2bytes_latchless_IK@j,f
 27931  2561  30FF               	movlw	255
 27932  2562  3DF7               	addwfc	i1send_2bytes_latchless_IK@j+1,f
 27933  2563  1FF7               	btfss	i1send_2bytes_latchless_IK@j+1,7
 27934  2564  2D46               	goto	i1l252
 27935  2565                     i1l262:	
 27936                           ;LEDcomm.c: 64: }
 27937                           ;LEDcomm.c: 66: do { LATAbits.LATA2 = 0; } while(0);
 27938                           
 27939  2565  110C               	bcf	12,2	;volatile
 27940  2566  0008               	return
 27941  2567                     __end_ofi1_send_2bytes_latchless_IK:	
 27942                           
 27943                           	psect	text179
 27944  2F99                     __ptext179:	
 27945 ;; *************** function _TMR0_Write8bitTimer *****************
 27946 ;; Defined at:
 27947 ;;		line 107 in file "mcc_generated_files/tmr0.c"
 27948 ;; Parameters:    Size  Location     Type
 27949 ;;  timerVal        1    wreg     unsigned char 
 27950 ;; Auto vars:     Size  Location     Type
 27951 ;;  timerVal        1    0[COMMON] unsigned char 
 27952 ;; Return value:  Size  Location     Type
 27953 ;;                  1    wreg      void 
 27954 ;; Registers used:
 27955 ;;		wreg
 27956 ;; Tracked objects:
 27957 ;;		On entry : 0/0
 27958 ;;		On exit  : 0/0
 27959 ;;		Unchanged: 0/0
 27960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27962 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27964 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27965 ;;Total ram usage:        1 bytes
 27966 ;; Hardware stack levels used:    1
 27967 ;; This function calls:
 27968 ;;		Nothing
 27969 ;; This function is called by:
 27970 ;;		_TMR0_DefaultInterruptHandler
 27971 ;; This function uses a non-reentrant model
 27972 ;;
 27973                           
 27974                           
 27975                           ;psect for function _TMR0_Write8bitTimer
 27976  2F99                     _TMR0_Write8bitTimer:	
 27977                           
 27978                           ;incstack = 0
 27979                           ; Regs used in _TMR0_Write8bitTimer: [wreg]
 27980                           ;TMR0_Write8bitTimer@timerVal stored from wreg
 27981  2F99  00F0               	movwf	TMR0_Write8bitTimer@timerVal
 27982                           
 27983                           ;tmr0.c: 110: TMR0L = timerVal;
 27984  2F9A  0870               	movf	TMR0_Write8bitTimer@timerVal,w
 27985  2F9B  0020               	movlb	0	; select bank0
 27986  2F9C  0095               	movwf	21	;volatile
 27987  2F9D  0008               	return
 27988  2F9E                     __end_of_TMR0_Write8bitTimer:	
 27989                           
 27990                           	psect	text180
 27991  2F22                     __ptext180:	
 27992 ;; *************** function _TMR0_StopTimer *****************
 27993 ;; Defined at:
 27994 ;;		line 91 in file "mcc_generated_files/tmr0.c"
 27995 ;; Parameters:    Size  Location     Type
 27996 ;;		None
 27997 ;; Auto vars:     Size  Location     Type
 27998 ;;		None
 27999 ;; Return value:  Size  Location     Type
 28000 ;;                  1    wreg      void 
 28001 ;; Registers used:
 28002 ;;		None
 28003 ;; Tracked objects:
 28004 ;;		On entry : 0/0
 28005 ;;		On exit  : 0/0
 28006 ;;		Unchanged: 0/0
 28007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28012 ;;Total ram usage:        0 bytes
 28013 ;; Hardware stack levels used:    1
 28014 ;; This function calls:
 28015 ;;		Nothing
 28016 ;; This function is called by:
 28017 ;;		_TMR0_DefaultInterruptHandler
 28018 ;; This function uses a non-reentrant model
 28019 ;;
 28020                           
 28021                           
 28022                           ;psect for function _TMR0_StopTimer
 28023  2F22                     _TMR0_StopTimer:	
 28024                           
 28025                           ;tmr0.c: 94: T0CON0bits.T0EN = 0;
 28026                           
 28027                           ;incstack = 0
 28028                           ; Regs used in _TMR0_StopTimer: []
 28029  2F22  0020               	movlb	0	; select bank0
 28030  2F23  1397               	bcf	23,7	;volatile
 28031  2F24  0008               	return
 28032  2F25                     __end_of_TMR0_StopTimer:	
 28033                           
 28034                           	psect	text181
 28035  2300                     __ptext181:	
 28036 ;; *************** function _EUSART_Transmit_ISR *****************
 28037 ;; Defined at:
 28038 ;;		line 161 in file "mcc_generated_files/eusart.c"
 28039 ;; Parameters:    Size  Location     Type
 28040 ;;		None
 28041 ;; Auto vars:     Size  Location     Type
 28042 ;;		None
 28043 ;; Return value:  Size  Location     Type
 28044 ;;                  1    wreg      void 
 28045 ;; Registers used:
 28046 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28047 ;; Tracked objects:
 28048 ;;		On entry : 0/0
 28049 ;;		On exit  : 0/0
 28050 ;;		Unchanged: 0/0
 28051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28054 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28055 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28056 ;;Total ram usage:        1 bytes
 28057 ;; Hardware stack levels used:    1
 28058 ;; This function calls:
 28059 ;;		Nothing
 28060 ;; This function is called by:
 28061 ;;		_INTERRUPT_InterruptManager
 28062 ;; This function uses a non-reentrant model
 28063 ;;
 28064                           
 28065                           
 28066                           ;psect for function _EUSART_Transmit_ISR
 28067  2300                     _EUSART_Transmit_ISR:	
 28068                           
 28069                           ;eusart.c: 165: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 28070                           
 28071                           ;incstack = 0
 28072                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 28073  2300  3008               	movlw	8
 28074  2301  0020               	movlb	0	; select bank0
 28075  2302  025E               	subwf	_eusartTxBufferRemaining,w	;volatile
 28076  2303  1803               	skipnc
 28077  2304  2B1B               	goto	i1l454
 28078                           
 28079                           ;eusart.c: 166: {
 28080                           ;eusart.c: 167: TX1REG = eusartTxBuffer[eusartTxTail++];
 28081  2305  0859               	movf	_eusartTxTail,w
 28082  2306  3EA8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 28083  2307  0086               	movwf	6
 28084  2308  3001               	movlw	1	; select bank3/4
 28085  2309  0087               	movwf	7
 28086  230A  0801               	movf	1,w
 28087  230B  0023               	movlb	3	; select bank3
 28088  230C  009A               	movwf	26	;volatile
 28089  230D  3001               	movlw	1
 28090  230E  00F0               	movwf	??_EUSART_Transmit_ISR
 28091  230F  0870               	movf	??_EUSART_Transmit_ISR,w
 28092  2310  0020               	movlb	0	; select bank0
 28093  2311  07D9               	addwf	_eusartTxTail,f	;volatile
 28094                           
 28095                           ;eusart.c: 168: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 28096  2312  3008               	movlw	8
 28097  2313  0259               	subwf	_eusartTxTail,w	;volatile
 28098  2314  1803               	btfsc	3,0
 28099                           
 28100                           ;eusart.c: 169: {
 28101                           ;eusart.c: 170: eusartTxTail = 0;
 28102  2315  01D9               	clrf	_eusartTxTail	;volatile
 28103                           
 28104                           ;eusart.c: 171: }
 28105                           ;eusart.c: 172: eusartTxBufferRemaining++;
 28106  2316  3001               	movlw	1
 28107  2317  00F0               	movwf	??_EUSART_Transmit_ISR
 28108  2318  0870               	movf	??_EUSART_Transmit_ISR,w
 28109  2319  07DE               	addwf	_eusartTxBufferRemaining,f	;volatile
 28110                           
 28111                           ;eusart.c: 173: }
 28112  231A  0008               	return
 28113  231B                     i1l454:	
 28114                           
 28115                           ;eusart.c: 174: else
 28116                           ;eusart.c: 175: {
 28117                           ;eusart.c: 176: PIE1bits.TXIE = 0;
 28118  231B  0021               	movlb	1	; select bank1
 28119  231C  1211               	bcf	17,4	;volatile
 28120  231D  0008               	return
 28121  231E                     __end_of_EUSART_Transmit_ISR:	
 28122                           
 28123                           	psect	text182
 28124  22AB                     __ptext182:	
 28125 ;; *************** function _EUSART_Receive_ISR *****************
 28126 ;; Defined at:
 28127 ;;		line 180 in file "mcc_generated_files/eusart.c"
 28128 ;; Parameters:    Size  Location     Type
 28129 ;;		None
 28130 ;; Auto vars:     Size  Location     Type
 28131 ;;		None
 28132 ;; Return value:  Size  Location     Type
 28133 ;;                  1    wreg      void 
 28134 ;; Registers used:
 28135 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28136 ;; Tracked objects:
 28137 ;;		On entry : 0/0
 28138 ;;		On exit  : 0/0
 28139 ;;		Unchanged: 0/0
 28140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28143 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28144 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28145 ;;Total ram usage:        1 bytes
 28146 ;; Hardware stack levels used:    1
 28147 ;; This function calls:
 28148 ;;		Nothing
 28149 ;; This function is called by:
 28150 ;;		_INTERRUPT_InterruptManager
 28151 ;; This function uses a non-reentrant model
 28152 ;;
 28153                           
 28154                           
 28155                           ;psect for function _EUSART_Receive_ISR
 28156  22AB                     _EUSART_Receive_ISR:	
 28157                           
 28158                           ;eusart.c: 183: if(1 == RC1STAbits.OERR)
 28159                           
 28160                           ;incstack = 0
 28161                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 28162  22AB  0023               	movlb	3	; select bank3
 28163  22AC  1C9D               	btfss	29,1	;volatile
 28164  22AD  2AB0               	goto	i1l6947
 28165                           
 28166                           ;eusart.c: 184: {
 28167                           ;eusart.c: 187: RC1STAbits.CREN = 0;
 28168  22AE  121D               	bcf	29,4	;volatile
 28169                           
 28170                           ;eusart.c: 188: RC1STAbits.CREN = 1;
 28171  22AF  161D               	bsf	29,4	;volatile
 28172  22B0                     i1l6947:	
 28173                           
 28174                           ;eusart.c: 189: }
 28175                           ;eusart.c: 192: eusartRxBuffer[eusartRxHead++] = RC1REG;
 28176  22B0  0819               	movf	25,w	;volatile
 28177  22B1  00F0               	movwf	??_EUSART_Receive_ISR
 28178  22B2  0020               	movlb	0	; select bank0
 28179  22B3  0858               	movf	_eusartRxHead,w
 28180  22B4  3EA0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 28181  22B5  0086               	movwf	6
 28182  22B6  3001               	movlw	1	; select bank3/4
 28183  22B7  0087               	movwf	7
 28184  22B8  0870               	movf	??_EUSART_Receive_ISR,w
 28185  22B9  0081               	movwf	1
 28186  22BA  3001               	movlw	1
 28187  22BB  00F0               	movwf	??_EUSART_Receive_ISR
 28188  22BC  0870               	movf	??_EUSART_Receive_ISR,w
 28189  22BD  07D8               	addwf	_eusartRxHead,f	;volatile
 28190                           
 28191                           ;eusart.c: 193: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 28192  22BE  3008               	movlw	8
 28193  22BF  0258               	subwf	_eusartRxHead,w	;volatile
 28194  22C0  1803               	btfsc	3,0
 28195                           
 28196                           ;eusart.c: 194: {
 28197                           ;eusart.c: 195: eusartRxHead = 0;
 28198  22C1  01D8               	clrf	_eusartRxHead	;volatile
 28199                           
 28200                           ;eusart.c: 196: }
 28201                           ;eusart.c: 197: eusartRxCount++;
 28202  22C2  3001               	movlw	1
 28203  22C3  00F0               	movwf	??_EUSART_Receive_ISR
 28204  22C4  0870               	movf	??_EUSART_Receive_ISR,w
 28205  22C5  07D6               	addwf	_eusartRxCount,f	;volatile
 28206  22C6  0008               	return
 28207  22C7                     __end_of_EUSART_Receive_ISR:	
 28208  007E                     btemp	set	126	;btemp
 28209  007E                     int$flags	set	126
 28210  007E                     wtemp0	set	126


Data Sizes:
    Strings     529
    Constant    804
    Data        48
    BSS         244
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     46      63
    BANK1            80     56      80
    BANK2            80      1      79
    BANK3            80      9      76
    BANK4            80      0      72
    BANK5            80     28      68
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           80      0       0
    BANK24           16      0       0
    BANK25            0      0       0

Pointer List with Targets:

    i2c_ISR$2998	PTR const FTN()enum E8364 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S1001$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    mssp1_waitForEvent@timeout	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_57(CODE[2]), STR_56(CODE[2]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_57(CODE[2]), STR_56(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> STR_57(CODE[2]), STR_56(CODE[2]), NULL(NULL[0]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_57(CODE[2]), STR_56(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> floor@expon(COMMON[2]), trunc@expon(BANK1[2]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_57(CODE[2]), STR_56(CODE[2]), 

    strtok@sp	PTR unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    stricmp@s2	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_82(CODE[10]), STR_81(CODE[5]), STR_80(CODE[5]), STR_79(CODE[7]), 
		 -> STR_78(CODE[8]), STR_77(CODE[5]), STR_76(CODE[5]), STR_75(CODE[11]), 
		 -> STR_74(CODE[13]), STR_73(CODE[7]), STR_72(CODE[8]), STR_71(CODE[10]), 
		 -> STR_70(CODE[11]), STR_69(CODE[15]), STR_68(CODE[14]), STR_67(CODE[12]), 
		 -> STR_66(CODE[8]), STR_65(CODE[8]), STR_64(CODE[2]), STR_63(CODE[5]), 
		 -> STR_62(CODE[5]), STR_61(CODE[2]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), 

    stricmp@s1	PTR const unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_84(CODE[23]), STR_83(CODE[3]), STR_55(CODE[17]), STR_54(CODE[18]), 
		 -> STR_53(CODE[18]), STR_52(CODE[17]), STR_51(CODE[28]), STR_50(CODE[9]), 
		 -> STR_49(CODE[9]), STR_48(CODE[25]), STR_47(CODE[11]), STR_46(CODE[8]), 
		 -> STR_45(CODE[8]), STR_44(CODE[8]), STR_43(CODE[31]), STR_42(CODE[11]), 
		 -> STR_41(CODE[8]), STR_40(CODE[8]), STR_39(CODE[8]), STR_38(CODE[26]), 
		 -> STR_37(CODE[30]), STR_36(CODE[3]), STR_35(CODE[3]), STR_34(CODE[3]), 
		 -> STR_33(CODE[2]), STR_32(CODE[4]), STR_31(CODE[2]), STR_30(CODE[4]), 
		 -> STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[3]), STR_22(CODE[3]), 
		 -> STR_21(CODE[3]), STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[4]), STR_12(CODE[3]), STR_11(CODE[16]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[8]), STR_6(CODE[13]), 
		 -> STR_5(CODE[15]), STR_4(CODE[16]), STR_3(CODE[2]), STR_2(CODE[4]), 
		 -> STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    execCmd@s	PTR struct CMD_STRUCT size(1) Largest target is 21
		 -> cmd_struct(BANK3[21]), 

    parseCmd@s	PTR struct CMD_STRUCT size(1) Largest target is 21
		 -> cmd_struct(BANK3[21]), 

    sp__strtok	PTR unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    parseCmd@cmdString	PTR unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), 

    parseCmd@p	PTR unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E8364[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 40
		 -> drv_read@reg(BANK0[1]), drv_read@buff(BANK0[1]), drv_fifo_downstroke(BANK5[40]), drv_fifo_upstroke(BANK4[40]), 
		 -> drv_write@buff(BANK0[2]), 

    S1001$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S1001$callbackTable	PTR FTN(PTR void ,)enum E8198[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E8198[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S1001$data_ptr	PTR unsigned char  size(2) Largest target is 40
		 -> drv_read@reg(BANK0[1]), drv_read@buff(BANK0[1]), drv_fifo_downstroke(BANK5[40]), drv_fifo_upstroke(BANK4[40]), 
		 -> drv_write@buff(BANK0[2]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 40
		 -> drv_read@reg(BANK0[1]), drv_read@buff(BANK0[1]), drv_fifo_downstroke(BANK5[40]), drv_fifo_upstroke(BANK4[40]), 
		 -> drv_write@buff(BANK0[2]), 

    i2c1_driver_setI2cISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c1_driver_setBusCollisionISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    i1_i2c_ISR->i1_do_I2C_TX
    i1_do_I2C_TX->i1_i2c1_driver_TXData
    i1_do_I2C_TX->i1_i2c1_driver_isNACK
    i1_do_I2C_TX->i1_returnReset
    i1_do_I2C_TX->i1_returnStop
    i1_do_I2C_SEND_ADR_WRITE->i1_i2c1_driver_TXData
    i1_do_I2C_SEND_ADR_READ->i1_i2c1_driver_TXData
    _TMR4_DefaultInterruptHandler->_TMR4_WriteTimer
    _TMR2_DefaultInterruptHandler->_TMR2_WriteTimer
    i1_LEDsOn->i1_send_2length_2bytes_IK
    i1_send_2length_2bytes_IK->i1_send_last_2bytes_IK

Critical Paths under _main in BANK0

    _parseCmd->_strtok
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _stricmp->_toupper
    _atoi->___wmul
    _main_initialize->_LED_setBrightnessRange
    _main_initialize->_LEDsPwr
    _drv_init->_calcDownstroke
    _drv_init->_calcUpstroke
    _drv_init->_drv_write
    _i2c_open->_i2c1_driver_setBusCollisionISR
    _i2c_open->_i2c1_driver_setI2cISR
    _drv_reset->_drv_write
    _execCmd->_setDrvPiezoOnTime
    _timedActiveHeatOn->_LEDsOn
    _setLEDPwr->_LEDsPwr
    _LEDsPwr->_send_2length_2bytes_IK
    _setLEDBrightnessRange->_LED_setBrightnessRange
    _setHeaterToggle->_LEDsOn
    _setH2OnTime->___ftmul
    _setH1OffTime->___ftmul
    _setDrvPiezoOnTime->___ftmul
    ___ftmul->___awtoft
    _setDrvPeak->_calcDownstroke
    _setDrvPeak->_calcUpstroke
    _round->_trunc
    ___fttol->___ftmul
    ___altoft->___ftpack
    ___ftneg->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___awdiv
    _setDrvGain->_drv_write
    _LED_test_openshort->_LEDsOn
    _LED_testComm->_LED_setBrightnessRange
    _LED_setBrightnessRange->_send_2length_2bytes_IK
    _doMove->_LEDsOn
    _drv_write_wvfrm->_i2c_masterOperation
    _drv_write_DC->_drv_write
    _printf->___llmod
    _putch->_EUSART_Write
    ___llmod->___lldiv
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_isNACK
    _do_I2C_TX->_returnReset
    _do_I2C_TX->_returnStop
    _do_I2C_SEND_ADR_WRITE->_i2c1_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c1_driver_TXData
    ___awdiv->___wmul
    _LEDsOn->_send_2length_2bytes_IK
    _send_2length_2bytes_IK->_send_last_2bytes_IK
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR0_DefaultInterruptHandler->i1_LEDsOn
    i1_LEDsOn->i1_send_2length_2bytes_IK

Critical Paths under _main in BANK1

    _main->_execCmd
    _main_initialize->_drv_init
    _drv_init->_calcDownstroke
    _drv_init->_calcUpstroke
    _execCmd->_commCheck
    _execCmd->_setDrvPeak
    _zeroPosition->_printf
    _timedActiveHeatOn->_printf
    _stop->_printf
    _startRelMove->_printf
    _startAbsMove->_printf
    _setMoveMask->_printf
    _setLEDPwr->_printf
    _setLEDBrightnessRange->_printf
    _setHeaterToggle->_printf
    _setHeaterPreTime->_printf
    _setHeaterPostTime->_printf
    _setH2OnTime->___fttol
    _setH1OffTime->___fttol
    _setDrvPiezoOnTime->___fttol
    _setDrvPeak->_calcDownstroke
    _setDrvPeak->_calcUpstroke
    _calcUpstroke->_round
    _calcDownstroke->_round
    _round->_trunc
    _trunc->___fttol
    ___fttol->___ftadd
    ___ftadd->___ftmul
    _setDrvGain->_printf
    _setActive->_printf
    _getPosition->_printf
    _getMoveMask->_printf
    _getMotionStatus->_printf
    _getActive->_printf
    _commCheck->_LED_testComm
    _drv_read->_printf
    _LED_test_openshort->_printf
    _LED_testComm->_LED_readConfig
    _LED_readConfig->_LED_getData
    _LED_getData->_printf
    _doRelMove->_doMove
    _doAbsMove->_doMove
    _doMove->_drv_write_DC
    _drv_write->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _main_initialize->_drv_init
    _drv_init->_calcDownstroke
    _drv_init->_calcUpstroke
    _setDrvPeak->_calcDownstroke
    _setDrvPeak->_calcUpstroke

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_doAbsMove

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  472203
                                              0 BANK2      1     1      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                          _doAbsMove
                          _doRelMove
                            _execCmd
                    _main_initialize
                           _parseCmd
                             _printf
 ---------------------------------------------------------------------------------
 (1) _parseCmd                                             6     5      1    8490
                                             37 BANK0      6     5      1
                               _atoi
                            _stricmp
                             _strtok
 ---------------------------------------------------------------------------------
 (2) _strtok                                               6     4      2    1446
                                             31 BANK0      6     4      2
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (3) _strspn                                               7     5      2     529
                                             24 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              7     5      2     529
                                             24 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strchr                                               7     3      4     344
                                             17 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _stricmp                                              6     4      2    2508
                                             19 BANK0      6     4      2
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _toupper                                              2     2      0      67
                                             17 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2    2554
                                             23 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                             17 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _main_initialize                                      0     0      0   94075
             _LED_setBrightnessRange
                            _LEDsPwr
                _TMR0_Load8bitPeriod
            _TMR2_LoadPeriodRegister
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           _drv_init
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drv_init                                             5     1      4   67118
                                             53 BANK1      1     1      0
                                              5 BANK3      4     0      4
                     _calcDownstroke
                       _calcUpstroke
                          _drv_reset
                          _drv_write
                           _i2c_open
                     _i2c_setAddress
                             _printf
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddress                                       2     2      0      22
                                             17 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     216
                                             19 BANK0      3     3      0
                   _i2c1_driver_open
     _i2c1_driver_setBusCollisionISR
              _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_setI2cISR                                2     0      2      86
                                             17 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_setBusCollisionISR                       2     0      2      86
                                             17 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _drv_reset                                            1     1      0    8539
                                             21 BANK1      1     1      0
                          _drv_write
 ---------------------------------------------------------------------------------
 (1) _execCmd                                              1     1      0  311352
                                             55 BANK1      1     1      0
                          _commCheck
                             _doMove
                          _getActive
                    _getMotionStatus
                        _getMoveMask
                        _getPosition
                             _printf
                          _setActive
                         _setDrvGain
                         _setDrvPeak
                  _setDrvPiezoOnTime
                       _setH1OffTime
                        _setH2OnTime
                  _setHeaterPostTime
                   _setHeaterPreTime
                    _setHeaterToggle
              _setLEDBrightnessRange
                          _setLEDPwr
                        _setMoveMask
                       _startAbsMove
                       _startRelMove
                               _stop
                  _timedActiveHeatOn
                       _zeroPosition
 ---------------------------------------------------------------------------------
 (2) _zeroPosition                                        12    10      2    6166
                                             41 BANK0      2     2      0
                                             21 BANK1     10     8      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _timedActiveHeatOn                                   13     7      6   11155
                                             21 BANK1     13     7      6
                             _LEDsOn
                             _printf
 ---------------------------------------------------------------------------------
 (2) _stop                                                 2     0      2    6036
                                             21 BANK1      2     0      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _startRelMove                                         2     0      2    6144
                                             21 BANK1      2     0      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _startAbsMove                                         3     1      2    6144
                                             41 BANK0      1     1      0
                                             21 BANK1      2     0      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setMoveMask                                          8     4      4    6314
                                             41 BANK0      4     4      0
                                             21 BANK1      4     0      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setLEDPwr                                            4     0      4    9324
                                             21 BANK1      4     0      4
                            _LEDsPwr
                             _printf
 ---------------------------------------------------------------------------------
 (2) _LEDsPwr                                             14    10      4    3072
                                             36 BANK0     10     6      4
                                              0 BANK1      4     4      0
             _send_2length_2bytes_IK
 ---------------------------------------------------------------------------------
 (2) _setLEDBrightnessRange                                4     0      4    9669
                                             21 BANK1      4     0      4
             _LED_setBrightnessRange
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setHeaterToggle                                      8     4      4   11118
                                             21 BANK1      8     4      4
                             _LEDsOn
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setHeaterPreTime                                     2     0      2    6144
                                             21 BANK1      2     0      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setHeaterPostTime                                    2     0      2    6144
                                             21 BANK1      2     0      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setH2OnTime                                          2     0      2   20554
                                             37 BANK1      2     0      2
                _TMR0_Load8bitPeriod
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setH1OffTime                                         2     0      2   20554
                                             37 BANK1      2     0      2
            _TMR2_LoadPeriodRegister
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                             _printf
 ---------------------------------------------------------------------------------
 (2) _TMR2_LoadPeriodRegister                              1     1      0      22
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setDrvPiezoOnTime                                    4     2      2   20554
                                             44 BANK0      2     2      0
                                             37 BANK1      2     0      2
                _TMR0_Load8bitPeriod
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4600
                                             38 BANK0      6     0      6
                                              0 BANK1     10    10      0
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _TMR0_Load8bitPeriod                                  1     1      0      22
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setDrvPeak                                           2     0      2   49694
                                             53 BANK1      2     0      2
                     _calcDownstroke
                       _calcUpstroke
                             _printf
 ---------------------------------------------------------------------------------
 (3) _calcUpstroke                                         8     6      2   18876
                                             45 BANK0      1     1      0
                                             51 BANK1      2     0      2
                                              0 BANK3      5     5      0
                            ___awdiv
                           ___awtoft
                            ___fttol
                             ___wmul
                              _round
 ---------------------------------------------------------------------------------
 (3) _calcDownstroke                                       8     6      2   24674
                                             45 BANK0      1     1      0
                                             51 BANK1      2     0      2
                                              0 BANK3      5     5      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftneg
                            ___fttol
                             ___wmul
                              _round
 ---------------------------------------------------------------------------------
 (4) _round                                                6     3      3   10969
                                             45 BANK1      6     3      3
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftneg
                             ___wmul (ARG)
                              _trunc
 ---------------------------------------------------------------------------------
 (5) _trunc                                                9     6      3    4887
                                             44 BANK0      1     1      0
                                             37 BANK1      8     5      3
                           ___altoft
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                6     2      4     566
                                             17 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4    1121
                                             23 BANK1     14    10      4
                           ___altoft (ARG)
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___altoft                                             8     4      4    2802
                                             25 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     390
                                             38 BANK0      3     0      3
                           ___altoft (ARG)
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                           ___ftpack (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             13     7      6    5377
                                             10 BANK1     13     7      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2086
                                             17 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             6     3      3    3290
                                             32 BANK0      6     3      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2464
                                             17 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _setDrvGain                                           5     3      2   14729
                                             21 BANK1      5     3      2
                          _drv_write
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setActive                                           12     8      4    6314
                                             21 BANK1     12     8      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _getPosition                                          6     4      2    6206
                                             41 BANK0      4     4      0
                                             21 BANK1      2     0      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _getMoveMask                                          8     6      2    6135
                                             41 BANK0      4     4      0
                                             21 BANK1      4     2      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _getMotionStatus                                      2     0      2    6036
                                             21 BANK1      2     0      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _getActive                                            8     6      2    6135
                                             41 BANK0      4     4      0
                                             21 BANK1      4     2      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _commCheck                                            3     1      2   40767
                                             52 BANK1      3     1      2
                       _LED_testComm
                 _LED_test_openshort
                           _drv_read
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drv_read                                             6     4      2    7904
                                             41 BANK0      4     4      0
                                             21 BANK1      2     0      2
                _i2c_masterOperation
                      _i2c_setBuffer
                             _printf
 ---------------------------------------------------------------------------------
 (3) _LED_test_openshort                                   7     3      4   14159
                                             21 BANK1      7     3      4
                             _LEDsOn
                             _printf
             _send_2length_2bytes_IK
 ---------------------------------------------------------------------------------
 (3) _LED_testComm                                        10     8      2   12668
                                             42 BANK1     10     8      2
                     _LED_readConfig
             _LED_setBrightnessRange
 ---------------------------------------------------------------------------------
 (2) _LED_setBrightnessRange                              14    10      4    3417
                                             36 BANK0     10     6      4
                                              0 BANK1      4     4      0
             _send_2length_2bytes_IK
 ---------------------------------------------------------------------------------
 (4) _LED_readConfig                                       5     1      4    8902
                                             41 BANK0      1     1      0
                                             38 BANK1      4     0      4
                        _LED_getData
             _send_2length_2bytes_IK
 ---------------------------------------------------------------------------------
 (5) _LED_getData                                         17    13      4    6376
                                             21 BANK1     17    13      4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _doRelMove                                           18    18      0   22794
                                             35 BANK1     18    18      0
                             _doMove
 ---------------------------------------------------------------------------------
 (1) _doAbsMove                                           36    36      0   29152
                                             35 BANK1      8     8      0
                                              0 BANK5     28    28      0
                             _doMove
                             _printf
 ---------------------------------------------------------------------------------
 (2) _doMove                                               7     5      2   22534
                                             28 BANK1      7     5      2
                             _LEDsOn
                    _TMR0_StartTimer
                    _TMR2_StartTimer
                    _TMR4_StartTimer
                     _calcHeaterPins
                       _drv_write_DC
                    _drv_write_wvfrm
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drv_write_wvfrm                                      1     1      0    1767
                                             26 BANK0      1     1      0
                _i2c_masterOperation
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _drv_write_DC                                         7     3      4    9853
                                             21 BANK1      7     3      4
                            ___awdiv
                          _drv_write
 ---------------------------------------------------------------------------------
 (3) _drv_write                                            5     4      1    8539
                                             41 BANK0      5     4      1
                _i2c_masterOperation
                      _i2c_setBuffer
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    23      6    6036
                                              0 BANK1     21    15      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             19 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         2     2      0      62
                                             17 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     386
                                             31 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     395
                                             17 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _i2c_setBuffer                                        4     0      4     632
                                             17 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0    1104
                                             23 BANK0      3     3      0
                  _i2c1_driver_start
                         _i2c_poller
                 _mssp1_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp1_IRQisEnabled                                   2     2      0       0
                                             17 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0    1036
                            _i2c_ISR
                 _mssp1_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp1_waitForEvent                                   1     1      0      42
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              1     1      0     994
                                             22 BANK0      1     1      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp1_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      1     1      0     216
                                             17 BANK0      1     1      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (8) _mssp1_setIRQ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            4     4      0     284
                                             18 BANK0      4     4      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_isNACK                                   1     1      0       0
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_TXData                                   1     1      0      31
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            1     1      0     216
                                             17 BANK0      1     1      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
              _i2c1_driver_getRXData
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_resetBus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               1     1      0     216
                                             17 BANK0      1     1      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1       0
                                             17 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1     216
                                             17 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_sendACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1061
                                             23 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _calcHeaterPins                                       4     4      0       0
                                             17 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LEDsOn                                              10     4      6    4804
                                             36 BANK0     10     4      6
             _send_2length_2bytes_IK
 ---------------------------------------------------------------------------------
 (3) _send_2length_2bytes_IK                               8     1      7    2387
                                             28 BANK0      8     1      7
           _send_2bytes_latchless_IK
                _send_last_2bytes_IK
 ---------------------------------------------------------------------------------
 (4) _send_last_2bytes_IK                                 11     6      5     516
                                             17 BANK0     11     6      5
 ---------------------------------------------------------------------------------
 (4) _send_2bytes_latchless_IK                             8     6      2     207
                                             17 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     280
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0      86
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2      86
                                             17 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      86
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      86
                                             17 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     108
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     108
                                             17 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                             17 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0    1817
                                             12 COMMON     1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
                           _TMR2_ISR
                           _TMR4_ISR
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (12) i1_i2c_ISR                                           1     1      0     690
                                              5 COMMON     1     1      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
               i1_i2c1_driver_isNACK
                   i1_mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (13) i1_mssp1_clearIRQ                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX_EMPTY                                   1     1      0     140
                                              0 COMMON     1     1      0
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                     i1_mssp1_setIRQ
                      i1_returnReset *
                       i1_returnStop *
 ---------------------------------------------------------------------------------
 (14) i1_mssp1_setIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX                                         4     4      0     208
                                              1 COMMON     4     4      0
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
               i1_i2c1_driver_TXData
               i1_i2c1_driver_isNACK
                      i1_returnReset *
                       i1_returnStop *
 ---------------------------------------------------------------------------------
 (13) i1_i2c1_driver_isNACK                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      31
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_READ                              0     0      0      31
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_TXData                                1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RX                                         1     1      0     140
                                              0 COMMON     1     1      0
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
            i1_i2c1_driver_getRXData
              i1_i2c1_driver_sendACK
                      i1_returnReset *
                       i1_returnStop *
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (15) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RESET                                      0     0      0       0
             i1_i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_resetBus                              0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RCEN                                       0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ADDRESS_NACK                            1     1      0     140
                                              0 COMMON     1     1      0
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                      i1_returnReset *
                       i1_returnStop *
 ---------------------------------------------------------------------------------
 (14) i1_returnStop                                        1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_returnReset                                       1     0      1     140
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_STOP                                  0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (15) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART                               0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (15) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ACK                                     0     0      0       0
              i1_i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_sendACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (13) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR4_ISR                                            0     0      0      22
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _TMR4_DefaultInterruptHandler                        0     0      0      22
                     _TMR4_StopTimer
                    _TMR4_WriteTimer
 ---------------------------------------------------------------------------------
 (14) _TMR4_WriteTimer                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) _TMR4_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR2_ISR                                            0     0      0      22
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _TMR2_DefaultInterruptHandler                        0     0      0      22
                     _TMR2_StopTimer
                    _TMR2_WriteTimer
 ---------------------------------------------------------------------------------
 (14) _TMR2_WriteTimer                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) _TMR2_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0    1083
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _TMR0_DefaultInterruptHandler                        0     0      0    1083
                     _TMR0_StopTimer
                _TMR0_Write8bitTimer
                           i1_LEDsOn
 ---------------------------------------------------------------------------------
 (14) i1_LEDsOn                                           10     4      6    1052
                                              7 BANK0     10     4      6
           i1_send_2length_2bytes_IK
 ---------------------------------------------------------------------------------
 (15) i1_send_2length_2bytes_IK                            8     1      7     819
                                             11 COMMON     1     1      0
                                              0 BANK0      7     0      7
         i1_send_2bytes_latchless_IK
              i1_send_last_2bytes_IK
 ---------------------------------------------------------------------------------
 (16) i1_send_last_2bytes_IK                              11     6      5     390
                                              0 COMMON    11     6      5
 ---------------------------------------------------------------------------------
 (16) i1_send_2bytes_latchless_IK                          8     6      2     165
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (14) _TMR0_Write8bitTimer                                 1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) _TMR0_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _doAbsMove
     _doMove
       _LEDsOn
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _TMR0_StartTimer
       _TMR2_StartTimer
       _TMR4_StartTimer
       _calcHeaterPins
       _drv_write_DC
         ___awdiv
           ___wmul (ARG)
         _drv_write
           _i2c_masterOperation
             _i2c1_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c1_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _returnReset *
                   _returnStop *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c1_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c1_driver_startRX
                 _do_I2C_RESET *
                   _i2c1_driver_resetBus
                 _do_I2C_RX *
                   _do_I2C_DO_NACK_RESTART
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP
                     _i2c1_driver_sendNACK
                   _i2c1_driver_getRXData
                   _i2c1_driver_sendACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_SEND_ADR_READ *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _do_I2C_TX *
                   _do_I2C_SEND_RESTART_READ
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _i2c1_driver_TXData
                   _i2c1_driver_isNACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_TX_EMPTY *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _mssp1_setIRQ
                   _returnReset *
                   _returnStop *
                 _i2c1_driver_isNACK *
                 _mssp1_clearIRQ *
               _mssp1_waitForEvent
             _mssp1_IRQisEnabled
           _i2c_setBuffer
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _EUSART_Write
       _drv_write_wvfrm
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
         _i2c_setBuffer
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       _putch
         _EUSART_Write
   _doRelMove
     _doMove
       _LEDsOn
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _TMR0_StartTimer
       _TMR2_StartTimer
       _TMR4_StartTimer
       _calcHeaterPins
       _drv_write_DC
         ___awdiv
           ___wmul (ARG)
         _drv_write
           _i2c_masterOperation
             _i2c1_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c1_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _returnReset *
                   _returnStop *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c1_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c1_driver_startRX
                 _do_I2C_RESET *
                   _i2c1_driver_resetBus
                 _do_I2C_RX *
                   _do_I2C_DO_NACK_RESTART
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP
                     _i2c1_driver_sendNACK
                   _i2c1_driver_getRXData
                   _i2c1_driver_sendACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_SEND_ADR_READ *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _do_I2C_TX *
                   _do_I2C_SEND_RESTART_READ
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _i2c1_driver_TXData
                   _i2c1_driver_isNACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_TX_EMPTY *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _mssp1_setIRQ
                   _returnReset *
                   _returnStop *
                 _i2c1_driver_isNACK *
                 _mssp1_clearIRQ *
               _mssp1_waitForEvent
             _mssp1_IRQisEnabled
           _i2c_setBuffer
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _EUSART_Write
       _drv_write_wvfrm
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
         _i2c_setBuffer
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
   _execCmd
     _commCheck
       _LED_testComm
         _LED_readConfig
           _LED_getData
             _printf
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               _putch
                 _EUSART_Write
           _send_2length_2bytes_IK
             _send_2bytes_latchless_IK
             _send_last_2bytes_IK
         _LED_setBrightnessRange
           _send_2length_2bytes_IK
             _send_2bytes_latchless_IK
             _send_last_2bytes_IK
       _LED_test_openshort
         _LEDsOn
           _send_2length_2bytes_IK
             _send_2bytes_latchless_IK
             _send_last_2bytes_IK
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _EUSART_Write
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _drv_read
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
         _i2c_setBuffer
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _EUSART_Write
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _doMove
       _LEDsOn
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _TMR0_StartTimer
       _TMR2_StartTimer
       _TMR4_StartTimer
       _calcHeaterPins
       _drv_write_DC
         ___awdiv
           ___wmul (ARG)
         _drv_write
           _i2c_masterOperation
             _i2c1_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c1_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _returnReset *
                   _returnStop *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c1_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c1_driver_startRX
                 _do_I2C_RESET *
                   _i2c1_driver_resetBus
                 _do_I2C_RX *
                   _do_I2C_DO_NACK_RESTART
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP
                     _i2c1_driver_sendNACK
                   _i2c1_driver_getRXData
                   _i2c1_driver_sendACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_SEND_ADR_READ *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _do_I2C_TX *
                   _do_I2C_SEND_RESTART_READ
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _i2c1_driver_TXData
                   _i2c1_driver_isNACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_TX_EMPTY *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _mssp1_setIRQ
                   _returnReset *
                   _returnStop *
                 _i2c1_driver_isNACK *
                 _mssp1_clearIRQ *
               _mssp1_waitForEvent
             _mssp1_IRQisEnabled
           _i2c_setBuffer
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _EUSART_Write
       _drv_write_wvfrm
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
         _i2c_setBuffer
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _getActive
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _getMotionStatus
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _getMoveMask
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _getPosition
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       _putch
         _EUSART_Write
     _setActive
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setDrvGain
       _drv_write
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
         _i2c_setBuffer
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _EUSART_Write
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setDrvPeak
       _calcDownstroke
         ___awdiv
           ___wmul (ARG)
         ___awtoft
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
         ___wmul
         _round
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftadd (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
             _frexp (ARG)
       _calcUpstroke
         ___awdiv
           ___wmul (ARG)
         ___awtoft
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
         ___wmul
         _round
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftadd (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
             _frexp (ARG)
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setDrvPiezoOnTime
       _TMR0_Load8bitPeriod
       ___awtoft
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul (ARG)
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setH1OffTime
       _TMR2_LoadPeriodRegister
       ___awtoft
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul (ARG)
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setH2OnTime
       _TMR0_Load8bitPeriod
       ___awtoft
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul (ARG)
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setHeaterPostTime
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setHeaterPreTime
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setHeaterToggle
       _LEDsOn
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setLEDBrightnessRange
       _LED_setBrightnessRange
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setLEDPwr
       _LEDsPwr
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setMoveMask
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _startAbsMove
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _startRelMove
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _stop
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _timedActiveHeatOn
       _LEDsOn
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _zeroPosition
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
   _main_initialize
     _LED_setBrightnessRange
       _send_2length_2bytes_IK
         _send_2bytes_latchless_IK
         _send_last_2bytes_IK
     _LEDsPwr
       _send_2length_2bytes_IK
         _send_2bytes_latchless_IK
         _send_last_2bytes_IK
     _TMR0_Load8bitPeriod
     _TMR2_LoadPeriodRegister
     ___awtoft
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul (ARG)
     _drv_init
       _calcDownstroke
         ___awdiv
           ___wmul (ARG)
         ___awtoft
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
         ___wmul
         _round
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftadd (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
             _frexp (ARG)
       _calcUpstroke
         ___awdiv
           ___wmul (ARG)
         ___awtoft
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
         ___wmul
         _round
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftadd (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
             _frexp (ARG)
       _drv_reset
         _drv_write
           _i2c_masterOperation
             _i2c1_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c1_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _returnReset *
                   _returnStop *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c1_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c1_driver_startRX
                 _do_I2C_RESET *
                   _i2c1_driver_resetBus
                 _do_I2C_RX *
                   _do_I2C_DO_NACK_RESTART
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP
                     _i2c1_driver_sendNACK
                   _i2c1_driver_getRXData
                   _i2c1_driver_sendACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_SEND_ADR_READ *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _do_I2C_TX *
                   _do_I2C_SEND_RESTART_READ
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _i2c1_driver_TXData
                   _i2c1_driver_isNACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_TX_EMPTY *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _mssp1_setIRQ
                   _returnReset *
                   _returnStop *
                 _i2c1_driver_isNACK *
                 _mssp1_clearIRQ *
               _mssp1_waitForEvent
             _mssp1_IRQisEnabled
           _i2c_setBuffer
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _EUSART_Write
       _drv_write
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
         _i2c_setBuffer
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _EUSART_Write
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setAddress
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       _putch
         _EUSART_Write
   _parseCmd
     _atoi
       ___wmul
       _isdigit
     _stricmp
       _toupper
     _strtok
       _strcspn
         _strchr
       _strspn
         _strchr
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
       _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _TMR0_ISR *
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
       _TMR0_StopTimer
       _TMR0_Write8bitTimer
       i1_LEDsOn
         i1_send_2length_2bytes_IK
           i1_send_2bytes_latchless_IK
           i1_send_last_2bytes_IK
   _TMR2_ISR *
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
       _TMR2_StopTimer
       _TMR2_WriteTimer
   _TMR4_ISR *
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
       _TMR4_StopTimer
       _TMR4_WriteTimer
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c1_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       i1_do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       i1_do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       i1_returnReset *
       i1_returnStop *
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c1_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c1_driver_resetBus
     i1_do_I2C_RX *
       i1_do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       i1_i2c1_driver_getRXData
       i1_i2c1_driver_sendACK
       i1_returnReset *
       i1_returnStop *
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     i1_do_I2C_TX *
       i1_do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       i1_do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       i1_i2c1_driver_TXData
       i1_i2c1_driver_isNACK
       i1_returnReset *
       i1_returnStop *
     i1_do_I2C_TX_EMPTY *
       i1_do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       i1_do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       i1_mssp1_setIRQ
       i1_returnReset *
       i1_returnStop *
     i1_i2c1_driver_isNACK *
     i1_mssp1_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2E      3F       5       78.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     38      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      1      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      48      13       90.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0     1C4      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50     1C      44      16       85.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     1C4      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              50      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23              50      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24              10      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25               0      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jul 23 16:50:35 2018

        i1send_last_2bytes_IK@topOrBottom 0073                              returnReset@p 0031  
                            ___altoft@exp 003F          __end_of_TMR2_SetInterruptHandler 2085  
                                       pc 0002              __end_ofdrv2665@drv_fifo_sine 187A  
                  setLEDBrightnessRange@r 00B5             _do_I2C_SEND_RESTART$intlevel0 203E  
                       ??_getMotionStatus 0049                               __CFG_CP$OFF 0000  
                           ___altoft@sign 0040                              ___awdiv@sign 003D  
                    __size_of_do_I2C_IDLE 0009                       _do_I2C_SEND_RESTART 203A  
                            _startAbsMove 22E3                      __size_of_do_I2C_RCEN 000A  
                     ___wmul@multiplicand 0033                    i1send_last_2bytes_IK@j 0079  
                    __end_ofi1_returnStop 2F22                              ___ftadd@exp1 00B6  
                            ___ftadd@exp2 00B5                               i1_do_I2C_RX 1906  
                             i1_do_I2C_TX 1BD5                               __CFG_LVP$ON 0000  
                            ___ftadd@sign 00B4                                       l220 1DC7  
                                     l310 1702                                       l216 1DBE  
                                     l320 175E                                       l208 1ED7  
                                     l233 1DF6                                       l226 1DE1  
                                     l314 170B                                       l243 1E0B  
                                     l235 1DF8                                       l260 260E  
                                     l252 25F2                                       l237 1E01  
                                     l262 2616                                       l258 260C  
                                     l442 24D9                                       l287 1630  
                                     l529 2107                                       l774 1E3F  
                                     l790 1A35                                       _PR2 001E  
                                     _PR4 0416                              __CFG_CPD$OFF 0000  
                i1_do_I2C_DO_NACK_RESTART 2F81              __size_of_i2c_masterOperation 0024  
                    _returnStop$intlevel0 2FC6                   __size_of_PMD_Initialize 0008  
                         _TMR2_Initialize 18F4                     __size_of_do_I2C_RESET 000B  
                                     wreg 0009                              _startRelMove 2290  
                         _setHeaterToggle 1675                     __end_ofi1_returnReset 11E6  
                         ?i1_mssp1_setIRQ 0070                        i1_i2c1_driver_stop 2F34  
         i2c1_driver_setBusCollisionISR@f 0031                                      S9679 2000  
                setLEDBrightnessRange@tOB 00B7                         setDrvGain@setGain 00B8  
                            ?_EUSART_Read 0070                                      l1141 07E5  
                                    l1135 0798                                      l1138 07CB  
                                    l1252 09F7                                      l2204 2276  
                                    l1249 09D0                                      l1621 0EF4  
                                    l1622 0F4A                                      l1616 0EF2  
                                    l1619 0F13                                      l1637 0FFF  
                                    l1902 1F70                                      l1903 1F78  
                                    l1719 22D0                             i1returnStop@p 0070  
                                    l1926 0D47                                      l6111 21AA  
                                    l6051 219A                                      l6131 2626  
                                    l6123 2674                                      l6117 264E  
                                    l1895 1F5D                                      l6135 2644  
                                    l6119 2656                                      l6129 261E  
                                    l1986 17E6                                      l8003 17DD  
                                    l8005 17E9                                      l8103 0CE6  
                                    l8121 0D13                                      l8009 17F7  
                                    l8035 1704                                      l8123 0D1D  
                                    l8115 0D00                                      l8019 26ED  
                                    l9011 1FC2                                      l9003 1FB6  
                                    l8045 1731                                      l8221 083F  
                                    l8133 0D39                                      l8125 0D22  
                                    l9013 1FEB                                      l6701 1AC9  
                                    l8311 1D0C                                      l8303 1CFB  
                                    l8143 0D6B                                      l8135 0D43  
                                    l8127 0D26                                      l6711 1AED  
                                    l8233 08B2                                      l8225 0865  
                                    l8153 0D86                                      l9009 1FBE  
                                    l9201 05F7                                      l8307 1D04  
                                    l8083 24A5                                      l8227 086E  
                                    l8323 2426                                      l8139 0D59  
                                    l9019 1FFB                                      l6723 26DA  
                                    l7613 20F2                                      l8077 2495  
                                    l8093 0CD0                                      l8173 1D2E  
                                    l8501 0BF9                                      l9301 03BA  
                                    l6717 26AF                                      l6709 1AEC  
                                    l9221 0642                                      l9213 0624  
                                    l9205 0606                                      l7623 2092  
                                    l7631 212A                                      l7703 1E60  
                                    l8079 249B                                      l9311 040C  
                                    l9303 03CE                                      l6719 26B7  
                                    l7561 203E                                      l7721 1A37  
                                    l7609 24EE                                      l8433 224C  
                                    l8361 164B                                      l8097 0CD7  
                                    l8513 0C43                                      l9321 0470  
                                    l9313 0420                                      l9305 03E2  
                                    l9241 068D                                      l9233 066F  
                                    l9225 0651                                      l9217 0633  
                                    l9209 0615                                      l7555 2036  
                                    l7731 1A3D                                      l7707 1A17  
                                    l7811 1D82                                      l8259 22CA  
                                    l9331 04FC                                      l9323 0484  
                                    l9315 0434                                      l9307 03ED  
                                    l8285 1CD5                                      l7733 25BE  
                                    l7549 2FFC                                      l7573 2056  
                                    l7661 0804                                      l7725 1A3A  
                                    l8445 2750                                      l9421 0186  
                                    l9413 0102                                      l8365 1667  
                                    l8525 0C67                                      l8517 0C51  
                                    l9341 0557                                      l9333 0519  
                                    l9325 04A1                                      l9317 0448  
                                    l9309 03F8                                      l6693 1AB2  
                                    l9261 06D8                                      l9253 06BA  
                                    l9245 069C                                      l9237 067E  
                                    l9229 0660                                      l8295 1CDD  
                                    l8279 1CCA                                      l7735 25C1  
                                    l7751 25CB                                      l7567 2046  
                                    l7639 20FD                                      l7647 20CA  
                                    l7655 204E                                      l7823 1DAD  
                                    l7911 0F59                                      l8375 1428  
                                    l8359 163F                                      l9343 0562  
                                    l9335 0536                                      l9327 04BE  
                                    l9319 045C                                      l6687 1AAD  
                                    l8297 1CE9                                      l7585 2FC6  
                                    l7745 25C8                                      l7665 080D  
                                    l7681 1E18                                      l7761 24F5  
                                    l7809 1D74                                      l7833 194F  
                                    l7921 0F70                                      l9441 01B4  
                                    l9417 0174                                      l8369 166E  
                                    l8529 0C75                                      l8721 131E  
                                    l8713 12C4                                      l9345 056D  
                                    l9337 0541                                      l9329 04DB  
                                    l9281 072A                                      l9273 0705  
                                    l9265 06E7                                      l9257 06C9  
                                    l9249 06AB                                      l9193 05D9  
                                    l9185 05B6                                      l6971 239B  
                                    l7739 25C4                                      l7579 205E  
                                    l7675 0813                                      l7819 1DA2  
                                    l7835 195D                                      l7843 1980  
                                    l7595 24CE                                      l7931 0FA5  
                                    l7915 0F6A                                      l9435 01A5  
                                    l8483 1A07                                      l8475 19E9  
                                    l9347 0575                                      l9339 054C  
                                    l9291 0756                                      l9283 0731  
                                    l7589 2FCC                                      l7669 0810  
                                    l7685 1E1B                                      l7677 1E12  
                                    l8653 07AE                                      l8901 1408  
                                    l7781 1F44                                      l8717 130C  
                                    l9349 057D                                      l9277 071B  
                                    l9269 06F6                                      l9197 05E8  
                                    l9189 05CA                                      l7695 1E21  
                                    l7839 1975                                      l7927 0F9D  
                                    l9447 02E8                                      l9367 0DC7  
                                    l7791 1F6A                                      l7783 1F49  
                                    l7775 1F33                                      l8495 0BDC  
                                    l9287 0743                                      l9551 1524  
            TMR0_Load8bitPeriod@periodVal 0031                                      l7857 1DE3  
                                    l7849 1DC0                                      l7689 1E1E  
                                    l7769 2506                                      l7953 210F  
                                    l7937 0FAB                                      l9369 0DD7  
                                    l8737 27FA                                      l8761 1994  
                                    l8913 1277                                      l8921 12A7  
                                    l9561 154B                                      l7939 0ED3  
                                    l9387 0E52                                      l8763 1999  
                                    l8755 198D                                      l8771 19A5  
                                    l7779 1F3A                                      l8915 129D  
                                    l9299 03A6                                      l9571 1568  
                                    l9563 1550                                      l7885 0EEF  
                                    l8933 1B42                                      l8757 1990  
                                    l8773 19B8                                      l7789 1F62  
                                    l7965 2799                                      l8853 16E7  
                                    l8951 1B8F                                      l8759 1992  
                                    l7967 27A9                                      l8847 16AC  
                                    l9575 151D                                      l7897 0F24  
                                    l7889 0EF6                                      l9681 19AA  
                                    l7977 1792                                      l9577 1521  
                                    l8939 1B7E                                      l7995 17C2  
                         __end_of_LEDsPwr 1F2A                                      l8875 09CD  
                                    l8867 0994                                      l8965 243E  
                                    l8973 2456                                      l8957 1BCB  
                                    l8893 13E2                                      l7997 17D0  
                                    l8983 0A8E                                      l8967 2446  
                                    l8895 13FE                                      l8991 1F99  
                                    STR_1 303C                                      STR_2 303C  
                                    l8969 244E                                      l8993 1F91  
                                    STR_3 2863                       drv_init@output_gain 01DE  
                                    STR_4 290F                                      l8987 0ADB  
                                    l8979 0A45                                      l8995 1F9E  
                                    STR_5 293D                                      STR_6 28F2  
                                    STR_7 29F6                                      STR_8 3046  
                                    STR_9 3046                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PMD0 0911                                      _PMD1 0912  
                                    _PMD2 0913                                      _PMD3 0914  
                                    _PMD4 0915                                      _PMD5 0916  
                                    u7115 1F65                                      u7205 1D83  
                                    u7215 1D97                                      u7225 1DA3  
                                    u7155 1F7F                                      u7075 1F3F  
                                    u7324 1DD2                                      u9020 1BAB  
                                    u7325 1DD0                                      u7255 1952  
                                    u7095 1F58                                      u7345 1DED  
                                    u7185 1D77                                      u9025 1BA6  
                                    u8315 1CEA                                      u7275 196B  
                                    u8235 22D1                                      u8500 1484  
                                    u8165 2404                                      u8325 1CF4  
                                    u7285 1976                                      u8245 22D6  
                    ?_do_I2C_SEND_RESTART 0070                                      u8335 1CFC  
                                    u7615 17C3                                      u8185 0859  
                                    u9065 0AD4                                      u7394 25FD  
                                    u7714 171E                                      u7395 25FB  
                                    u7715 171C                                      u8195 087F  
                                    u7555 279E                                      u9500 0E19  
                                    u7724 173E                                      u7485 0F93  
                                    u7725 173C                                      u7645 17DE  
                                    u9510 0E23                                      u8470 1466  
                                    u8295 1CE0                                      u8535 276F  
                                    u8471 1464                                      u8375 1ED0  
                                    u9600 0122                                      u9520 0E24  
                                    u8480 1467                                      u9505 0E15  
                                    u7905 0D14                                      u7585 1799  
                                    u8545 1594                                      u8705 0C7D  
                                    u8625 0C0C                                      u8385 1EE5  
                                    u8490 1483                                      u8635 0C22  
                                    u8395 1F0D                                      u9700 0226  
                                    u9620 016A                                      u8820 168A  
                                    u9605 011E                                      u8805 27CF  
                                    u8565 08D9                                      u9710 0292  
                                    u9630 016B                                      u9550 0E94  
                                    u8735 07A2                                      u7935 0D27  
                                    u8655 0C52                                      u9800 0355  
                                    u9720 0293                                      u9560 0E9E  
                                    u8920 13D7                                      u8840 16C0  
                                    u8760 12DD                                      u8745 07D9  
                                    u9713 028E                                      u9705 0222  
                                    u9625 0166                                      u9545 0E7B  
                                    u8665 0C59                                      u8825 1686  
                                    u9810 0367                                      u9570 0E9F  
                                    u8930 13F0                                      u9555 0E90  
                                    u7875 0D01                                      u8755 12C2  
                                    u9820 0368                                      u9740 02B6  
                                    u9805 0351                                      u9645 0184  
                                    u8925 13D3                                      u7965 0D3A  
                                    u8845 16BC                                      u8765 12D9  
                                    u9734 029B                                      u9670 0201  
                                    u9735 0299                                      u9495 0E00  
                                    u8935 13EC                                      u8695 0C76  
                                    u9680 0202                                      u8960 1265  
                                    u9745 02B2                                      u9673 01FD  
                                    u9665 01B2                                      u8945 124D  
                                    u8785 131C                                      u9770 031B  
                                    u8890 13B5                                      u8970 1288  
                                    u9755 02E6                                      u9595 0100  
                                    u8883 09EB                                      u9780 032D  
                                    u9765 02F9                                      u8965 1261  
                                    u9790 032E                                      u9694 020B  
                                    u8990 1B5E                                      u9775 0317  
                                    u9695 0209                                      u8895 13B1  
                                    u8975 1284                                      _TMR2 001D  
                                    u8995 1B59                                      _TMR4 0415  
                                    _WPUA 020C                                      _WPUB 020D  
                                    _WPUC 020E                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000         __size_of_do_I2C_SEND_RESTART_READ 0008  
                     ?i1_i2c1_driver_stop 0070                 ?_do_I2C_SEND_RESTART_READ 0070  
                                    _atoi 1F8F                                      _main 1504  
                            ___ftpack@arg 0031                 __size_of_do_I2C_SEND_STOP 0008  
                  __size_of_do_I2C_DO_ACK 0008                              ___ftpack@exp 0034  
                         _TMR0_StartTimer 2F43                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                                    _stop 2517                         ??i1_do_I2C_DO_ACK 0070  
                           __CFG_BOREN$ON 0000                              ?_LED_getData 00B5  
                 i1_i2c1_driver_getRXData 2F3A                     ?_do_I2C_SEND_ADR_READ 0070  
                           __CFG_BORV$LOW 0000           ??_i2c1_driver_clearBusCollision 0070  
                                    start 005A                          _setHeaterPreTime 217E  
                   __size_of_zeroPosition 0075                             _i2c_setBuffer 21E6  
                  LED_test_openshort@type 00B5                   ??_setLEDBrightnessRange 004E  
                           __CFG_CSWEN$ON 0000                             __CFG_MCLRE$ON 0000  
              ??_TMR4_SetInterruptHandler 0033                              ___ftmul@cntr 00A8  
                _send_2bytes_latchless_IK 25E9                           __end_of_i2c_ISR 2517  
                            ___ftmul@sign 00A9                        timedActiveHeatOn@t 00C0  
                ??_do_I2C_DO_NACK_RESTART 0031                             i1_do_I2C_IDLE 2FAD  
                         _drv_write_wvfrm 2243                              ___fttol@exp1 00C4  
                            ?_setH2OnTime 00C5                             i1_do_I2C_RCEN 2FBC  
                            ___fttol@lval 00C0                   __end_of_TMR0_Initialize 21E6  
                            _do_I2C_RESET 20EE                            i1returnReset@p 0070  
            __size_of_TMR0_Write8bitTimer 0005            ??_TMR0_DefaultInterruptHandler 007C  
                           ?_EUSART_Write 0070            __size_of_OSCILLATOR_Initialize 000A  
           __end_of_OSCILLATOR_Initialize 20C6                      ??i1_i2c1_driver_stop 0070  
                                   ?_atoi 0037                  __end_of_i2c1_driver_open 20EE  
                                   ?_main 0070                           __end_of___awdiv 1D11  
                __end_of_i2c1_driver_stop 2F55                           __end_of___ftadd 0DAC  
                                   STR_10 3046                                     STR_11 28FF  
                                   STR_20 3046                                     STR_12 3046  
                                   STR_21 3046                                     STR_13 3038  
                                   STR_22 3046                                     STR_14 3046  
                                   STR_30 303C                                     STR_31 2863  
                                   STR_23 3046                                     STR_15 3049  
                                   STR_24 3046                                     STR_16 3046  
                                   STR_32 303C                                     STR_40 29E6  
                                   STR_33 2863                                     STR_25 3046  
                                   STR_17 3046                                     STR_41 29FE  
                           __CFG_WDTE$OFF 0000                                     STR_26 3046  
                                   STR_18 3046                                     STR_34 304F  
                                   STR_50 29B4                                     STR_42 2995  
                    send_last_2bytes_IK@j 003A                                     STR_35 3046  
                                   STR_19 3046                                     STR_27 3049  
                                   STR_51 2865                                     STR_43 2828  
                                   STR_28 3046                                     STR_44 29EE  
                                   STR_36 304C                                     STR_60 3034  
                                   STR_52 28EE                                     STR_45 29E6  
                                   STR_29 3049                                     STR_61 3032  
                                   STR_53 28CB                                     STR_37 2847  
                                   STR_54 28CB                                     STR_46 29FE  
                                   STR_62 3013                                     STR_70 297F  
                                   STR_38 2881                                     STR_47 2995  
                                   STR_63 301D                                     STR_39 29EE  
                                   STR_71 29A0                                     STR_55 28DD  
                                   STR_56 2A04                                     STR_64 3054  
                                   STR_80 3027                                     STR_72 29D6  
                                   STR_48 289B                                     STR_57 2A04  
                                   STR_81 3022                                     STR_73 3007  
                                   STR_65 29C6                                     STR_49 29BD  
                                   STR_58 302C                                     STR_66 29CE  
                                   STR_82 29AA                                     STR_74 295A  
                                   STR_83 28C8                                     STR_59 3030  
                                   STR_75 298A                                     STR_67 2973  
                                   STR_76 300E                                     STR_68 294C  
                                   STR_84 28B4                                     STR_77 3018  
                                   STR_69 292E                                     STR_78 29DE  
                                   STR_79 3000                           __end_of___ftneg 20A0  
                         __end_of___lldiv 1DB6                                     ?_stop 00B5  
                                   u10207 09EE                                     u10217 19EA  
                                   u10065 1572                                     u10137 150B  
                                   u10227 1754                                     u10147 133D  
                                   u10237 07A5                           __end_of___ftmul 0CA8  
                                   u10157 1349                                     u10247 07DC  
                                   u10167 1358                                     u10257 210B  
                                   u10177 136D                                     u10187 1381  
                         ___awdiv@divisor 0037                                     u10197 0975  
                         __end_of___llmod 1989                           __end_of___fttol 1800  
                                   _T2CON 001F                                     _T4CON 0417  
              __end_of_i2c1_driver_TXData 2FD4                            __CFG_DEBUG$OFF 0000  
                        __end_ofi1_LEDsOn 23FA                                     i1l220 1A6A  
                                   i1l216 1A62                                     i1l233 1A93  
                                   i1l226 1A81                                     i1l243 1AA2  
                                   i1l235 1A94                                     i1l260 255E  
                                   i1l252 2546                                     i1l237 1A9B  
                                   i1l262 2565                                     i1l258 255D  
                                   i1l381 002F                                     i1l454 231B  
                                   i1l383 0039                                     i1l392 0055  
                                   i1l376 0013                                     i1l385 0043  
                                   i1l387 004D                                     i1l379 0022  
                                   i1l774 1C01                                     i1l790 1921  
                         ___awdiv@counter 003C                          __end_of_LEDpower 3054  
                                   _OSCEN 091D                                     _TMR0H 0016  
                                   _TMR0L 0015                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                      __end_ofsin@coeff_a 292E                        __end_ofsin@coeff_b 2973  
       __size_of_TMR0_SetInterruptHandler 0009             i1send_2length_2bytes_IK@data1 0020  
           i1send_2length_2bytes_IK@data2 0022                           _TMR4_Initialize 21AC  
               ?_TMR0_SetInterruptHandler 0031                               i2c_open@ret 0034  
                        __end_of_TMR0_ISR 2157                          __end_of_TMR2_ISR 2164  
                        __end_of_TMR4_ISR 2171                           __end_of_execCmd 0590  
                      __size_ofi1_i2c_ISR 0020                             ___awtoft@sign 0045  
              __end_of_i2c1_driver_isNACK 217E                           __end_of_dpowers 2828  
                          _WDT_Initialize 2F85                                     _frexp 26E0  
                                   _errno 0162                         _timedActiveHeatOn 096F  
                         __end_of_isdigit 219C              ?i1_do_I2C_SEND_RESTART_WRITE 0070  
              ?_do_I2C_SEND_RESTART_WRITE 0070                             ___ftpack@sign 0035  
                                   atoi@a 003C                                     atoi@s 003E  
                                   _putch 2FD4                                     _round 11E6  
                   ??_do_I2C_SEND_RESTART 0031                                     _trunc 1D11  
               send_2bytes_latchless_IK@j 0037                         ?i1_mssp1_clearIRQ 0070  
  __end_of_i2c1_driver_setBusCollisionISR 20A9   __size_of_i2c1_driver_setBusCollisionISR 0009  
          _i2c1_driver_setBusCollisionISR 20A0                              _zeroPosition 12B4  
                                   pclath 000A                        setDrvPiezoOnTime@t 00C5  
                 __size_of_mssp1_clearIRQ 0003                      i1_i2c1_driver_TXData 2FA8  
                      ?_timedActiveHeatOn 00B5        __end_ofi1_send_2bytes_latchless_IK 2567  
              i1_send_2bytes_latchless_IK 253E                      setLEDPwr@topOrBottom 00B7  
                          _i2c_setAddress 2062                    ?_do_I2C_SEND_ADR_WRITE 0070  
                                   status 0003                        ??i1_mssp1_clearIRQ 0070  
                                   wtemp0 007E                           _TMR2_StartTimer 2F46  
                         __end_of_stricmp 26E0          __size_of_TMR2_LoadPeriodRegister 0005  
                         __end_of_strcspn 2649                           __end_of_toupper 21AC  
                       ??_main_initialize 004E                            ?_i2c_setBuffer 0031  
                   __size_of_calcUpstroke 007B                       _send_last_2bytes_IK 1DB6  
                    i1_i2c1_driver_isNACK 211A                         _setHeaterPostTime 21BF  
                     ??_timedActiveHeatOn 00BB                             _fsmStateTable 0248  
                         __initialization 005C            __size_ofi1_do_I2C_SEND_RESTART 0004  
                              _i2c_poller 210F             __end_ofi1_do_I2C_SEND_RESTART 2F75  
                          _remainingSteps 013E                              __end_of_atoi 2000  
                              _i2c_status 0120                            ?i1_do_I2C_IDLE 0070  
                            __end_of_main 157E                        ?_setHeaterPostTime 00B5  
                          ?i1_do_I2C_RCEN 0070                              __end_of_stop 253E  
               LED_readConfig@topOrBottom 00C6                __end_ofi1_do_I2C_SEND_STOP 2F79  
                        __end_of_i2c_open 1B3B                            ??_EUSART_Write 0031  
                 __end_of_TMR2_Initialize 1906                             ?_setH1OffTime 00C5  
             ?_INTERRUPT_InterruptManager 0070                             ?_LED_testComm 00CA  
                 __end_of_setHeaterToggle 16F2                            i1_do_I2C_RESET 2FDA  
                           _do_I2C_DO_ACK 204A                                    ??_atoi 0039  
                _TMR2_SetInterruptHandler 207C                                    ??_main 016E  
                           ___fttol@sign1 00BF                       ??_setHeaterPostTime 0049  
                                  ??_stop 0049             __size_of_i2c1_driver_sendNACK 0004  
                         _TMR2_WriteTimer 2F9E                      ?_send_last_2bytes_IK 0031  
                           ?_drv_write_DC 00B5                                 ??_LEDsPwr 0048  
                  __end_of_WDT_Initialize 2F89             __size_of_i2c1_driver_resetBus 0001  
                             drv_read@reg 004B                        setHeaterPostTime@t 00B5  
               __end_of_timedActiveHeatOn 0A24                   ?_do_I2C_DO_ADDRESS_NACK 0070  
                            ?_setMoveMask 00B5                        setHeaterToggle@num 00B5  
                        _piezo_on_time_ms 00EA                   __end_of_TMR0_StartTimer 2F46  
                           _drv_fifo_sine 187A                                    ?_frexp 0031  
                        __end_of___altoft 27C1                          ___llmod@dividend 0043  
                    __size_of_getMoveMask 004D                          ___awdiv@dividend 0039  
                        __end_of___awtoft 243D                                    _ANSELA 018C  
                                  ?_putch 0070                                    _ANSELB 018D  
                                  _ANSELC 018E                    __end_of_i2c_setAddress 206A  
                        __end_of___ftpack 1F8F                                    ?_round 00CD  
                      __CFG_RSTOSC$HFINT1 0000                                    _T0CON0 0017  
                                  _T0CON1 0018                                    ?_trunc 00C5  
                            _calcUpstroke 157E                   ?i1_do_I2C_SEND_ADR_READ 0070  
                    drv2665@drv_fifo_sine 1800                     ?i1_i2c1_driver_TXData 0070  
                                  _RC1REG 0199                                    _RC1STA 019D  
                                  _ODCONA 028C                                    _ODCONB 028D  
                                  _ODCONC 028E                 ??i1_i2c1_driver_getRXData 0070  
                                  i1l9023 2FE8                                    i1l9031 2FE1  
                                  i1l9105 1923                                    i1l9123 2596  
                                  i1l6803 2FBC                                    i1l9115 1929  
                                  i1l9117 2590                                    i1l9053 246A  
                                  i1l9045 2460                                    i1l9061 1BD5  
                                  i1l9109 1926                                    i1l9119 2593  
                                  i1l9135 259D                                    i1l9039 2F79  
                                  i1l8193 1A82                                    i1l8185 1A64  
                                  i1l9129 259A                                    i1l9049 2467  
                                  i1l9073 1BE1                                    i1l9065 1BDB  
                                  i1l9059 246D                                    i1l9091 1906  
                                  i1l9069 1BDE                                    i1l9087 1C1D  
                                  i1l9079 1BE4                                    i1l6769 2FDA  
                                  i1l8553 2F69                                    i1l6947 22B0  
                                  i1l6779 2FAD                                    i1l8571 2F75  
                                  i1l8565 2F71                                    i1l9461 2379  
                                  i1l8559 2F6D                                    i1l8583 2F81  
                                  i1l8593 11E4                                    i1l8577 2F7D  
                                  i1l8589 2F20                                    i1l9469 2389  
                 TMR4_WriteTimer@timerVal 0070                                    _LEDsOn 23FA  
           ??i1_do_I2C_SEND_RESTART_WRITE 0070                                    _OSCFRQ 091F  
                                  u813_24 254F                                    u813_25 254D  
                                  u806_24 1A73                                    u806_25 1A71  
                                  u808_25 1A8B                                    u872_25 23E3  
                  ??_do_I2C_SEND_ADR_READ 0032                           drv_write_DC@val 00B5  
                                  _TX1REG 019A                      __size_of_getPosition 003F  
                                  _WDTCON 0097                                    _TX1STA 019E  
                               ??_i2c_ISR 0036               __size_of_LED_test_openshort 007C  
               __end_of_setHeaterPostTime 21D2                           _TMR4_StartTimer 2F49  
                 __end_of_drv_write_wvfrm 225C                     ?i1_i2c1_driver_isNACK 0070  
                          __CFG_PWRTE$OFF 0000             LED_test_openshort@topOrBottom 00B7  
                   _i2c1_driver_getRXData 2F58                       LED_getData@readData 00C0  
                 __size_of_LED_readConfig 0029                       _do_I2C_RX$intlevel0 1A17  
                   __size_ofi1_returnStop 0002               __end_of_do_I2C_DO_NACK_STOP 205A  
                       __end_ofi1_i2c_ISR 2399                                    ___wmul 22C7  
                               ??___awdiv 003B     __end_of_i2c1_driver_clearBusCollision 2F2E  
  __size_of_i2c1_driver_clearBusCollision 0003             _i2c1_driver_clearBusCollision 2F2B  
                               ??___ftadd 00B0                            __CFG_STVREN$ON 0000  
                                  _doMove 0761                                 ??___ftneg 0049  
                               ??___lldiv 0039                                 ??___ftmul 00A0  
                               ??___llmod 0047                                 ??___fttol 00BB  
             i1send_2bytes_latchless_IK@j 0076           __size_of_do_I2C_DO_NACK_RESTART 0008  
                       startAbsMove@steps 00B5                            ??_setH1OffTime 004C  
                        __end_of_drv_init 139E                          __end_of_drv_read 1A13  
                  __end_ofi1_do_I2C_RESET 2FE1                          __end_of_drv_sine 11E4  
                 ?_send_2length_2bytes_IK 003C                       _EUSART_Transmit_ISR 2300  
                          ??_LED_testComm 00CC                          ?_TMR0_Initialize 0070  
                 __end_of_TMR4_Initialize 21BF                          ___awdiv@quotient 003E  
                          ?_do_I2C_DO_ACK 0070                          __end_of_parseCmd 0761  
                                  _printf 0ECE                                    _strchr 2276  
                                  _strtok 1AA4                                    _strspn 2649  
                               ??_execCmd 004E                     ___ftmul@f3_as_product 00A5  
                  i2c1_driver_setI2cISR@f 0031                     i2c_setAddress@address 0032  
    __end_of_TMR4_DefaultInterruptHandler 20BC     __size_of_TMR4_DefaultInterruptHandler 000A  
            _TMR4_DefaultInterruptHandler 20B2                     ??_send_last_2bytes_IK 0036  
             __end_of_i2c1_driver_sendACK 2F8D                            _PMD_Initialize 2FF0  
          __end_of_do_I2C_DO_ADDRESS_NACK 082B                           _TMR4_WriteTimer 2FA3  
                          ??_drv_write_DC 00B9                                 ??_isdigit 0031  
                         ?_WDT_Initialize 0070               __end_of_i2c1_driver_restart 2F52  
                            ?_returnReset 0031                   timedActiveHeatOn@onTime 00B5  
           _do_I2C_DO_NACK_STOP$intlevel0 2056                     _i2c1_driver_setI2cISR 20A9  
             __end_of_i2c1_driver_startRX 2F58                                    round@f 00D0  
                      LEDsPwr@topOrBottom 0046                                    round@x 00CD  
       __size_ofi1_do_I2C_DO_ADDRESS_NACK 0024            __end_ofi1_do_I2C_SEND_ADR_READ 2FF0  
                 __end_of_TMR2_StartTimer 2F49  TMR4_SetInterruptHandler@InterruptHandler 0031  
TMR2_SetInterruptHandler@InterruptHandler 0031  TMR0_SetInterruptHandler@InterruptHandler 0031  
               ?i1_do_I2C_DO_ADDRESS_NACK 0070                       _calcDownstroke$2996 01D9  
           timedActiveHeatOn@topOrBorBoth 00B9                                    trunc@i 00C8  
                                  trunc@x 00C5                                 ??_stricmp 0035  
                               ??_strcspn 003A                                 ??_toupper 0031  
                    ?_EUSART_Transmit_ISR 0070                           ?_i2c_setAddress 0070  
                       i1_do_I2C_TX_EMPTY 2590                      __size_of_EUSART_Read 0020  
                       _SYSTEM_Initialize 2213            __size_ofi1_send_last_2bytes_IK 0049  
                 __end_of__initialization 00EA                                ___altoft@c 0039  
           __end_ofi1_send_last_2bytes_IK 1AA4                           ??_i2c_setBuffer 0035  
          _do_I2C_SEND_ADR_READ$intlevel0 212A                          _do_I2C_SEND_STOP 2042  
                            i1_returnStop 2F20                                ___ftadd@f1 00AA  
                              ___ftadd@f2 00AD                           _getMotionStatus 243D  
                   i1_do_I2C_DO_NACK_STOP 2F7D                        __size_of_do_I2C_RX 0048  
                      __size_of_do_I2C_TX 0059                        ?i1_do_I2C_TX_EMPTY 0070  
                      ?_SYSTEM_Initialize 0070                        __size_of_doAbsMove 02B0  
                        _moveVector_downs 00E0                __end_of_mssp1_IRQisEnabled 20DA  
                     _i2c_masterOperation 2484                  __size_of_do_I2C_TX_EMPTY 002F  
                              ___ftneg@f1 0046                                ___awtoft@c 0040  
                               ?i1_LEDsOn 0027                           ??i1_do_I2C_IDLE 0070  
                         ??i1_do_I2C_RCEN 0070                                ___ftmul@f1 0046  
                              ___ftmul@f2 0049                __end_of_mssp1_waitForEvent 210F  
                    __size_of_LED_getData 0087                                ___fttol@f1 00B7  
                             ?_i2c_poller 0070                            __pcstackCOMMON 0070  
              ??i1_do_I2C_DO_NACK_RESTART 0070                       _do_I2C_TX$intlevel0 1E12  
                     ??i1_do_I2C_TX_EMPTY 0070            __end_of_send_2length_2bytes_IK 2243  
                            __pidataBANK0 2F95                              __pidataBANK1 07FA  
                            __pidataBANK2 0002                              __pidataBANK3 2F91  
                            __pidataBANK4 23B9                       ??_SYSTEM_Initialize 0033  
                              _absCommand 004E                                 ?_TMR0_ISR 0070  
                               ?_TMR2_ISR 0070                        __size_of_doRelMove 0122  
                               ?_TMR4_ISR 0070                   __end_of_TMR2_WriteTimer 2FA3  
                   i1_i2c1_driver_sendACK 2F61                             __end_of_frexp 2716  
                   i1i2c1_driver_TXData@d 0070                           ?i1_do_I2C_RESET 0070  
                           __end_of_putch 2FDA                             __end_of_round 1241  
                           __end_of_trunc 1D63                          ?_TMR2_Initialize 0070  
                   i1_i2c1_driver_restart 2F31         __size_ofi1_send_2length_2bytes_IK 0018  
                  __end_of_PMD_Initialize 2FF8                          ?_setHeaterToggle 00B5  
                    __size_of_setH2OnTime 004E                 ?i1_send_2length_2bytes_IK 0020  
                      __size_of_getActive 004D                              ?i1_do_I2C_RX 0070  
                            ?i1_do_I2C_TX 0070                     i1_i2c1_driver_startRX 2F37  
                        ??i1_mssp1_setIRQ 0070                      ?_i2c_masterOperation 0070  
            ??i1_do_I2C_SEND_RESTART_READ 0070                        __size_of_commCheck 00C7  
                __end_of_setHeaterPreTime 218D                              LED_getData@j 00C4  
           ?_TMR4_DefaultInterruptHandler 0070                __size_of_timedActiveHeatOn 00B5  
                         i1_do_I2C_DO_ACK 2F79               __end_of_TMR0_Load8bitPeriod 2FB7  
               __end_ofi1_do_I2C_TX_EMPTY 25BA                          ?_TMR0_StartTimer 0070  
                  _do_I2C_DO_NACK_RESTART 205A                    ??i1_i2c1_driver_TXData 0070  
                          _do_I2C_TX$1204 0034                                   ??_frexp 0035  
                 __end_of_TMR4_StartTimer 2F4C                 __end_of_SYSTEM_Initialize 222B  
                   ??_EUSART_Transmit_ISR 0070                                   ??_putch 0033  
                                 ??_round 004D                                   ??_trunc 004C  
                          _mssp1_clearIRQ 2F5E                                __pbssBANK0 004E  
                              __pbssBANK1 00D8                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                              __pbssBANK5 02A0                   __size_of_calcHeaterPins 0079  
                     _TMR0_Write8bitTimer 2F99                ??_send_2bytes_latchless_IK 0033  
                    __end_of_EUSART_Write 24F1                                   ?_LEDsOn 0044  
                          _moveVector_ups 00E4                   _TMR2_LoadPeriodRegister 2FB7  
                               ?_i2c_open 0070                   drv_write_DC@duration_ms 00B7  
                              _activeMask 00DC                  ??i1_i2c1_driver_sendNACK 0070  
                         drv2665@drv_sine 1000                        __size_of_drv_reset 000A  
                  ??i1_i2c1_driver_isNACK 0070                __size_of_setHeaterPostTime 0013  
                      __size_of_drv_write 0024               __size_of_EUSART_Receive_ISR 001C  
                   _TMR4_InterruptHandler 01E2                        __size_of_setLEDPwr 001E  
                  ?_i2c1_driver_getRXData 0070                  ??i1_i2c1_driver_resetBus 0070  
                        ?_drv_write_wvfrm 0070                              drv_read@buff 004C  
                              ??i1_LEDsOn 002D                     _do_I2C_IDLE$intlevel0 2092  
                          _SSP1DATPPSbits 0E21              __size_of_i2c_busCollisionISR 0003  
                              __pmaintext 1504                                doAbsMove@i 00C5  
                           ??_do_I2C_IDLE 0031                        __size_of_setActive 0076  
                           ??_do_I2C_RCEN 0031          __end_of_TMR0_SetInterruptHandler 207C  
                 __size_of_TMR0_StopTimer 0003            __size_of_setLEDBrightnessRange 001E  
                                 ?___wmul 0031             __end_of_setLEDBrightnessRange 233C  
                              ??_TMR0_ISR 007C                           __CFG_PPS1WAY$ON 0000  
                              _cmd_struct 01B0                                ??_TMR2_ISR 0071  
                                 ?_doMove 00BC                                ??_TMR4_ISR 0071  
                         ??_do_I2C_DO_ACK 0031                                __pintentry 0004  
                 __end_of_TMR4_WriteTimer 2FA8                         startRelMove@steps 00B5  
                   setHeaterToggle@topOrB 00B7                      ?_TMR0_Write8bitTimer 0070  
                               ?___altoft 0039                          ?_TMR4_Initialize 0070  
                     i2c_setBuffer@buffer 0031                                 ?___awtoft 0040  
                               ?___ftpack 0031                            _SSP1CLKPPSbits 0E20  
                                 ?_printf 00A0                           ?_PMD_Initialize 0070  
                                 ?_strchr 0031            ?_i2c1_driver_clearBusCollision 0070  
                                 ?_strtok 003F                                   ?_strspn 0038  
                   ??_i2c_masterOperation 0037                         ?_i2c1_driver_open 0070  
                       __end_of_do_I2C_RX 1A5B                         __end_of_do_I2C_TX 1E67  
                       ?_i2c1_driver_stop 0070                             _eusartRxCount 0056  
                       __end_of_doAbsMove 039E                  ?i1_do_I2C_SEND_ADR_WRITE 0070  
                         calcDownstroke@i 01DC                                   _SP1BRGH 019C  
                                 _SP1BRGL 019B                    ?_i2c1_driver_setI2cISR 0031  
                                 _LEDsPwr 1EC6                        ??_i2c1_driver_open 0031  
                      ??_i2c1_driver_stop 0031                                   _OSCCON1 0919  
                                 _OSCCON3 091B                             ?_mssp1_setIRQ 0070  
                         _main_initialize 0AEB                                   _NVMADRH 0892  
                                 _NVMADRL 0891                                   _NVMDATH 0894  
                                 _OSCTUNE 091E                                   _NVMDATL 0893  
                                 _NVMCON2 0896                                   _SSP1ADD 0212  
                                 _SSP1BUF 0211                    __end_of_mssp1_clearIRQ 2F61  
                                 _SSP1MSK 0213                   __end_of_getMotionStatus 2460  
                 __size_of_TMR2_StopTimer 0003                       __size_of_i2c_poller 000B  
                            setH2OnTime@t 00C5                   __size_of_calcDownstroke 00AC  
                        ?_TMR2_StartTimer 0070                   ??_do_I2C_SEND_ADR_WRITE 0032  
     _do_I2C_SEND_RESTART_WRITE$intlevel0 2036                         __end_of_doRelMove 0ECE  
             ??_do_I2C_SEND_RESTART_WRITE 0031                      __size_of_setMoveMask 0073  
                    __end_of_setH1OffTime 1C71                    ?i1_do_I2C_DO_NACK_STOP 0070  
                      _i2c1_driver_TXData 2FCE                      __end_of_LED_testComm 148B  
                              ??_i2c_open 0033                                 ?_drv_init 01DE  
                               ?_drv_read 00B5                           __size_of_LEDsOn 0021  
                      _i2c1_driver_i2cISR 016A               ?i1_send_2bytes_latchless_IK 0070  
       LED_setBrightnessRange@topOrBottom 0046                         __end_of_getActive 1B88  
                                 _i2c_ISR 24F1                                 ?_parseCmd 0045  
                       __end_of_commCheck 0AEB                      __end_of_drv_write_DC 2784  
                   _returnReset$intlevel0 2FCC                     _do_I2C_RCEN$intlevel0 20CA  
                      _i2c1_driver_isNACK 2171                       ?_i2c1_driver_TXData 0070  
                            drv_write@reg 004B                ??_TMR2_SetInterruptHandler 0033  
                          _LED_readConfig 2567          _do_I2C_DO_ADDRESS_NACK$intlevel0 0804  
                      __end_of_TMR0_RANGE 3046                        __end_of_TMR2_RANGE 3043  
                  ?i1_i2c1_driver_sendACK 0070                                doRelMove@j 00D3  
                 __size_of_TMR4_StopTimer 0003                    __size_ofi1_returnReset 0002  
                                 ___awdiv 1CBF                                   ___ftadd 0CA8  
                                 ___ftneg 2097                                   ___lldiv 1D63  
               __size_ofi1_mssp1_clearIRQ 0003                           __size_of___wmul 001C  
                                 ___ftmul 0BBF                                   ___llmod 1946  
                                 ___fttol 1779                     ??_TMR0_Write8bitTimer 0070  
                         __size_of_doMove 0099                    ?i1_i2c1_driver_restart 0070  
                        ?_TMR2_WriteTimer 0070                         ??_do_I2C_TX_EMPTY 0031  
                              ??___altoft 003D                       ?_i2c1_driver_isNACK 0070  
                                 _cmdRead 0164                    ?i1_i2c1_driver_startRX 0070  
                              ??___awtoft 0043                                ??___ftpack 0036  
                 __end_ofi1_do_I2C_DO_ACK 2F7D                                   __ptext1 0590  
                                 __ptext2 1AA4                                   __ptext3 2649  
                                 __ptext4 2619                                   __ptext5 2276  
                                 __ptext6 26AC                                   __ptext7 219C  
                                 __ptext8 1F8F                                   __ptext9 218D  
             __size_ofi1_i2c1_driver_stop 0003                       __end_of_do_I2C_IDLE 2097  
                         __size_of_printf 0132                       __end_of_do_I2C_RCEN 20D0  
                       __end_of_drv_reset 20E4                                   _execCmd 039E  
                         __size_of_strchr 001A                           __size_of_strtok 004B  
                         __size_of_strspn 0030                         __end_of_drv_write 24CC  
                                 _dpowers 2800                  ??_LED_setBrightnessRange 0048  
                   _OSCILLATOR_Initialize 20BC                                   _readIdx 0052  
                               _T2CONbits 001F                                   doMove@t 00BF  
                                 _isdigit 218D                            setActive@onOff 00B7  
                       __end_of_setLEDPwr 235A               __end_of_do_I2C_SEND_RESTART 2042  
                          ??_mssp1_setIRQ 0031                                 _T4CONbits 0417  
                    ??_i2c1_driver_TXData 0031                  ??_PIN_MANAGER_Initialize 0031  
       __size_of_TMR4_SetInterruptHandler 0009                 ?_TMR4_SetInterruptHandler 0031  
                  i2c_masterOperation@ret 0039                        calcUpstroke@maxVal 00D3  
                      i1_do_I2C_SEND_STOP 2F75                   __end_ofdrv2665@drv_sine 10F2  
                       __end_of_setActive 1414                           ?_mssp1_clearIRQ 0070  
              _do_I2C_SEND_STOP$intlevel0 2046                __size_ofi1_do_I2C_TX_EMPTY 002A  
               ??_TMR2_LoadPeriodRegister 0031                  _do_I2C_SEND_RESTART_READ 2FF8  
              __size_of_SYSTEM_Initialize 0018                                _setDrvGain 1989  
                       setActive@probeNum 00B5                                   clrloop0 2133  
                        ?_TMR4_StartTimer 0070                                _setDrvPeak 235A  
                                 _stricmp 26AC                                   _strcspn 2619  
                                 _toupper 219C                      __size_of_returnReset 0006  
                    end_of_initialization 00EA                      drv_init@idle_timeout 01E0  
                    ??_i2c1_driver_isNACK 0031            ??_TMR4_DefaultInterruptHandler 0071  
                              _second_top 015E                                getActive@i 00B7  
             TMR0_Write8bitTimer@timerVal 0070                                ??_drv_init 00D5  
                              ??_drv_read 0049                              setLEDPwr@pwr 00B5  
                                 init_ram 213E              __end_of_i2c1_driver_sendNACK 2F91  
                     ?i1_do_I2C_SEND_STOP 0070                                   initloop 213F  
         __size_ofi1_i2c1_driver_sendNACK 0004                                ??_parseCmd 0046  
                  __end_of_LED_readConfig 2590                         _EUSART_Initialize 225C  
            __end_of_i2c1_driver_resetBus 2F20                           ___lldiv@divisor 0031  
         __size_ofi1_i2c1_driver_resetBus 0001                           ___lldiv@counter 003E  
                      ?_EUSART_Initialize 0070                                   printf@c 00B4  
                                 printf@f 00A0                                _motionType 0055  
               _do_I2C_SEND_RESTART_WRITE 2032                         LEDsOn@topOrBottom 0048  
                        ?_TMR4_WriteTimer 0070                     i1_do_I2C_SEND_RESTART 2F71  
        __end_ofi1_do_I2C_DO_ADDRESS_NACK 2484           __end_ofi1_do_I2C_SEND_ADR_WRITE 2FE8  
                     ??_EUSART_Initialize 0031                          ??_WDT_Initialize 0031  
                               i1_i2c_ISR 2379                      ??i1_do_I2C_SEND_STOP 0070  
                                 strspn@i 003C                                _returnStop 2FC2  
                 __end_of_main_initialize 0BBF                  _TMR0_SetInterruptHandler 2073  
                               _PORTCbits 000E                  __end_of_do_I2C_SEND_STOP 204A  
      __end_ofi1_do_I2C_SEND_RESTART_READ 2F6D                i1_do_I2C_SEND_RESTART_READ 2F69  
                    __size_ofi1_do_I2C_RX 0040                      __size_ofi1_do_I2C_TX 004E  
                  _inter_step_interval_ms 01E8                          ??_i2c_setAddress 0031  
                           ??_getMoveMask 0049                     __size_of_EUSART_Write 0025  
                           i1_returnReset 11E4                               returnStop@p 0031  
                        ?_getMotionStatus 00B5                             ??_getPosition 0049  
                     LED_test_openshort@j 00BA                          __CFG_FEXTOSC$OFF 0000  
                          _calcHeaterPins 148B          __end_of_send_2bytes_latchless_IK 2619  
              __end_of_LED_test_openshort 1675                   TMR2_WriteTimer@timerVal 0070  
                               _RXPPSbits 0E24                 __end_of_EUSART_Initialize 2276  
          send_last_2bytes_IK@latch_start 0033               LED_setBrightnessRange@range 0044  
                          __end_of_LEDsOn 241B          __end_ofi1_send_2length_2bytes_IK 2213  
                         ?_LED_readConfig 00C6             __size_of_do_I2C_SEND_ADR_READ 000C  
                        ??i1_do_I2C_RESET 0070                               ___ftmul@exp 00A4  
                            ??_i2c_poller 0037                            _TMR0_StopTimer 2F22  
                             _do_I2C_IDLE 208E                               _do_I2C_RCEN 20C6  
                       __size_ofi1_LEDsOn 0021                   LED_testComm@topOrBottom 00CA  
    __end_of_TMR2_DefaultInterruptHandler 2073     __size_of_TMR2_DefaultInterruptHandler 0009  
            _TMR2_DefaultInterruptHandler 206A               __end_of_send_last_2bytes_IK 1E0E  
                           ?_startAbsMove 00B5                            __end_of___wmul 22E3  
                          __end_of_doMove 07FA                              _EUSART_Write 24CC  
                       __size_of_TMR0_ISR 000D                                ?i1_i2c_ISR 0070  
                       __size_of_TMR2_ISR 000D                         __size_of_TMR4_ISR 000D  
                      _mssp1_IRQisEnabled 20D0                    i1_i2c1_driver_sendNACK 2F65  
                        ?i1_do_I2C_DO_ACK 0070                    ?_OSCILLATOR_Initialize 0070  
            __size_of_do_I2C_DO_NACK_STOP 0008          TMR2_LoadPeriodRegister@periodVal 0031  
                          __end_of_printf 1000                        _mssp1_waitForEvent 2104  
     __size_ofi1_send_2bytes_latchless_IK 0029                    i1_i2c1_driver_resetBus 2F1E  
                          __end_of_strchr 2290           __size_of_LED_setBrightnessRange 0098  
                 ?_do_I2C_DO_NACK_RESTART 0070                            __end_of_strtok 1AEF  
                          __end_of_strspn 2679                         setHeaterPreTime@t 00B5  
                     start_initialization 005C                             ?_startRelMove 00B5  
                       ?_setHeaterPreTime 00B5                       _i2c_busCollisionISR 2F2E  
                   __size_of_setH1OffTime 004E                  __size_of_TMR0_Initialize 0014  
         __size_of_PIN_MANAGER_Initialize 0033                       ?_mssp1_IRQisEnabled 0070  
                          ?i1_returnReset 0070                  ?i1_i2c1_driver_getRXData 0070  
                  __end_of_calcHeaterPins 1504                     __size_of_LED_testComm 0077  
                          _TMR2_StopTimer 2F25                             ??_EUSART_Read 0031  
                          _calcDownstroke 08C3       __end_ofi1_do_I2C_SEND_RESTART_WRITE 2F71  
             i1_do_I2C_SEND_RESTART_WRITE 2F6D                              _first_bottom 015A  
                      ??_setHeaterPreTime 0049                               ?_setDrvGain 00B5  
                             ?_setDrvPeak 00D5                       ?_mssp1_waitForEvent 0070  
                           _second_bottom 0152                               putch@txData 0033  
                      __end_of_i2c_poller 211A              __size_of_i2c1_driver_sendACK 0004  
                         i2c_open@address 0035                       __end_of_getMoveMask 1BD5  
                 i2c_setBuffer@bufferSize 0033                                  ??_LEDsOn 004A  
                 ??_i2c1_driver_getRXData 0031                     __size_of_drv_write_DC 0037  
                              frexp@value 0031              __size_of_i2c1_driver_restart 0003  
            __size_of_i2c1_driver_startRX 0003                           ___llmod@divisor 003F  
                           ??_LED_getData 00B9                           ___llmod@counter 0048  
                   __end_of_i2c_setBuffer 21FB                       __end_of_getPosition 2800  
                       __size_of_i2c_open 004C                    __end_of_TMR0_StopTimer 2F25  
                     _heater_post_time_ms 016C                     i1_send_last_2bytes_IK 1A5B  
     LED_setBrightnessRange@LED_configReg 00A0                      ?_i2c_busCollisionISR 0070  
                        __CFG_LPBOREN$OFF 0000                      __end_of_mssp1_setIRQ 2F5E  
                            _drv_peak_val 00EE                      ??_mssp1_IRQisEnabled 0031  
                        i1_do_I2C_TX$1204 0073                                LEDsPwr@pwr 0044  
                          _TMR4_StopTimer 2F28                          ??_PMD_Initialize 0031  
                   __end_ofi1_do_I2C_IDLE 2FB2                     __end_ofi1_do_I2C_RCEN 2FC2  
                                ??___wmul 0035                    ?i1_do_I2C_SEND_RESTART 0070  
                    ??_mssp1_waitForEvent 0031                             ??_setH2OnTime 004C  
                                ??_doMove 00BE                          i1_mssp1_clearIRQ 2F40  
                          ??_startAbsMove 0049                             ?_do_I2C_RESET 0070  
                             __pdataBANK0 005A                               __pdataBANK1 00EA  
                             __pdataBANK2 016C                               __pdataBANK3 01E8  
                             __pdataBANK4 0248                      calcDownstroke@maxVal 00D3  
               _do_I2C_TX_EMPTY$intlevel0 25BE                              _setH1OffTime 1C23  
           ?_TMR2_DefaultInterruptHandler 0070                               ?_returnStop 0031  
                       _setDrvPiezoOnTime 1E67                              _LED_testComm 1414  
                                ??_printf 00A6                   ??_i2c1_driver_setI2cISR 0033  
                        ?_main_initialize 0070                                  ??_strchr 0035  
          i1send_2bytes_latchless_IK@data 0070            __end_of_do_I2C_DO_NACK_RESTART 2062  
                                ??_strtok 0041                                  ??_strspn 003A  
                       __size_of___altoft 003D                      _i2c1_driver_sendNACK 2F8D  
                       __size_of___awtoft 0022                         __size_of___ftpack 0065  
                      ?_setDrvPiezoOnTime 00C5                               __pbssBIGRAM 2790  
             __end_of_EUSART_Transmit_ISR 231E                            ??_startRelMove 0049  
                i1_do_I2C_DO_ADDRESS_NACK 2460                    __end_of_TMR2_StopTimer 2F28  
                          setDrvGain@gain 00B5                               __pbssCOMMON 007D  
                  __end_of_calcDownstroke 096F                                  ?_LEDsPwr 0044  
                               ___latbits 0003                      _i2c1_driver_resetBus 2F1F  
                            _drv_write_DC 274D                             __pcstackBANK0 0020  
                           __pcstackBANK1 00A0                             __pcstackBANK2 016E  
                           __pcstackBANK3 01D9                             __pcstackBANK5 02C8  
       __size_ofi1_do_I2C_DO_NACK_RESTART 0004                  __size_of_TMR2_Initialize 0012  
                               _do_I2C_RX 1A13                 ?i1_do_I2C_DO_NACK_RESTART 0070  
                               _do_I2C_TX 1E0E                           ?_calcHeaterPins 0070  
                 ??i1_do_I2C_DO_NACK_STOP 0070                                 _doAbsMove 00EE  
                __size_of_setHeaterToggle 007D                              _isdigit$2365 0031  
                     ??_setDrvPiezoOnTime 004C                             ?_zeroPosition 00B5  
                           LEDsOn@LEDpins 0044            __size_of_do_I2C_SEND_ADR_WRITE 000B  
           __size_ofi1_i2c1_driver_TXData 0005                __end_of_EUSART_Receive_ISR 22C7  
           __end_of_do_I2C_SEND_ADR_WRITE 2104                __size_of_EUSART_Initialize 001A  
               __size_of_i2c1_driver_open 000A                                sin@coeff_a 291F  
                              sin@coeff_b 2967                              doMove@t_1660 00C1  
               __size_of_i2c1_driver_stop 0003                                  ?_i2c_ISR 0070  
         _do_I2C_SEND_ADR_WRITE$intlevel0 20FD          __size_ofi1_do_I2C_SEND_ADR_WRITE 0007  
                     __end_of_EUSART_Read 23B9              __size_of_TMR0_Load8bitPeriod 0005  
                               _doRelMove 0DAC                           _do_I2C_TX_EMPTY 25BA  
                       parseCmd@cmdString 0047                     _TMR0_InterruptHandler 01E6  
                               __pnvBANK0 005E                                 __pnvBANK3 01E2  
                  _LED_setBrightnessRange 082B                   ??i1_i2c1_driver_sendACK 0070  
                __size_of_TMR0_StartTimer 0003                         __size_of_drv_init 0075  
                       __size_of_drv_read 0047                           ?_TMR0_StopTimer 0070  
                  __end_of_TMR4_StopTimer 2F2B                     ??_i2c_busCollisionISR 0070  
           __size_ofi1_i2c1_driver_isNACK 000C                    _PIN_MANAGER_Initialize 2679  
                 ??i1_i2c1_driver_restart 0070                                 _getActive 1B3B  
                       __size_of_parseCmd 01D1                              setDrvPeak@pk 00D5  
                     __end_of_drv_address 3057                      EUSART_Read@readValue 0032  
                 ??i1_i2c1_driver_startRX 0070          __end_of_TMR4_SetInterruptHandler 208E  
                          ??_do_I2C_RESET 0031                  i1_send_2length_2bytes_IK 21FB  
                     __end_of_LED_getData 1779                                  ?___awdiv 0037  
                               __ptext100 2F58                                 __ptext101 2F8D  
                               __ptext110 1CBF                                 __ptext102 2F1F  
                               __ptext111 148B                                 __ptext103 2F55  
                               __ptext120 2F85                                 __ptext112 2F49  
                               __ptext104 2FC8                                 __ptext121 21AC  
                               __ptext113 2F46                                 __ptext105 2FC2  
                               __ptext130 225C                                 __ptext122 2085  
                               __ptext114 2F43                                 __ptext106 2F52  
                               __ptext131 2399                                 __ptext123 18F4  
                               __ptext115 23FA                                 __ptext107 2F4F  
                               __ptext140 2F79                                 __ptext124 207C  
                               __ptext116 222B                                 __ptext108 2F89  
                               __ptext141 2FBC                                 __ptext133 2379  
                               __ptext125 21D2                                 __ptext117 1DB6  
                               __ptext109 2F4C                                  ?___ftadd 00AA  
                               __ptext150 2590                                 __ptext142 2FE1  
                               __ptext134 2F40                                 __ptext126 2073  
                               __ptext118 25E9                                 __ptext151 2F3D  
                               __ptext143 2FE8                                 __ptext135 1906  
                               __ptext127 2FF0                                 __ptext119 2213  
                               __ptext160 2F34                                 __ptext152 211A  
                               __ptext144 2F75                                 __ptext136 1BD5  
                               __ptext128 2679                                 __ptext161 2F31  
                               __ptext153 2FA8                                 __ptext145 2F71  
                               __ptext137 2460                                 __ptext129 20BC  
                               __ptext170 206A                                 __ptext162 2F61  
                               __ptext154 2F3A                                 __ptext146 2F6D  
                               __ptext138 2F81                                 __ptext171 2F9E  
                               __ptext163 2F2E                                 __ptext155 2F65  
                               __ptext147 2F69                                 __ptext139 2F7D  
                               __ptext180 2F22                                 __ptext172 2F25  
                               __ptext164 2F2B                                 __ptext156 2F1E  
                               __ptext148 2FAD                                 __ptext181 2300  
                               __ptext173 214A                                 __ptext165 2164  
                               __ptext157 2F37                                 __ptext149 2FDA  
                               __ptext182 22AB                                 __ptext174 2716  
                               __ptext166 20B2                                 __ptext158 11E4  
                               __ptext175 23D9                                 __ptext167 2FA3  
                               __ptext159 2F20                                 __ptext176 21FB  
                               __ptext168 2F28                                 __ptext177 1A5B  
                               __ptext169 2157                                 __ptext178 253E  
                               __ptext179 2F99               __end_of_i2c_masterOperation 24A8  
                                ?___ftneg 0046                                  ?___lldiv 0031  
                                ?___ftmul 0046                                  ?___llmod 003F  
                                ?___fttol 00B7                                 _commCheck 0A24  
               __end_of_setDrvPiezoOnTime 1EC6                  ??_do_I2C_DO_ADDRESS_NACK 0031  
                       _calcUpstroke$2995 01D9               _i2c1_driver_busCollisionISR 00E8  
                            _eusartRxHead 0058                       __size_of_setDrvGain 0043  
       __size_of_send_2bytes_latchless_IK 0030                              _eusartTxHead 007D  
                     __size_of_setDrvPeak 001F                              _eusartRxTail 0057  
               ?_send_2bytes_latchless_IK 0031                  __size_of_drv_write_wvfrm 0019  
                            _eusartTxTail 0059                           doAbsMove@i_1676 00C9  
                         doAbsMove@i_1678 00C7                     __end_of_do_I2C_DO_ACK 2052  
                   _setLEDBrightnessRange 231E                               ??i1_i2c_ISR 0075  
            ??_INTERRUPT_InterruptManager 007C                                 __pswtext1 2000  
              ??_do_I2C_SEND_RESTART_READ 0031                     ?_i2c1_driver_sendNACK 0070  
         __end_ofi1_i2c1_driver_getRXData 2F3D                   _eusartTxBufferRemaining 005E  
                                ?_execCmd 0070                  ??i1_do_I2C_SEND_ADR_READ 0071  
                        ??_mssp1_clearIRQ 0031                                  _BAUD1CON 019F  
                     __end_of_setH2OnTime 1CBF                           ??i1_returnReset 0071  
                                ?_isdigit 0070                    LED_testComm@readResult 00CE  
                         ?_TMR2_StopTimer 0070                     ?_i2c1_driver_resetBus 0070  
      __size_of_do_I2C_SEND_RESTART_WRITE 0008                           ?_calcDownstroke 00D3  
                               _first_top 0156                               _getMoveMask 1B88  
                 send_last_2bytes_IK@data 0031                             ??_setMoveMask 0049  
                   __end_of_drv_fifo_sine 18F4                                 _drv_reset 20DA  
                       parseCmd@paramIter 0048                                ?_do_I2C_RX 0070  
                              ?_do_I2C_TX 0070                  __size_of_TMR4_Initialize 0013  
                               _drv_write 24A8                                ?_doAbsMove 0070  
                       _i2c1_driver_start 2F4C                            ??_zeroPosition 00B7  
             send_2length_2bytes_IK@data1 003C               send_2length_2bytes_IK@data2 003E  
                               _setLEDPwr 233C                            __size_of_frexp 0036  
          send_last_2bytes_IK@topOrBottom 0034                                  ?_stricmp 0033  
                                ?_strcspn 0038                                  ?_toupper 0070  
                           ?_calcUpstroke 00D3                               _getPosition 27C1  
                 __size_ofi1_mssp1_setIRQ 0003                            __size_of_putch 0006  
                          __size_of_round 005B                            __size_of_trunc 0052  
                       _i2c_ISR$intlevel0 24F5                        ?_i2c1_driver_start 0070  
                          _eusartRxBuffer 01A0                             zeroPosition@i 0049  
                               _setActive 139E                         ??_TMR0_Initialize 0033  
                          _eusartTxBuffer 01A8                            ___wmul@product 0035  
                                _LATAbits 010C                                  _LATBbits 010D  
                                _LATCbits 010E                    ?i1_send_last_2bytes_IK 0070  
                              ?_doRelMove 0070                  ??_send_2length_2bytes_IK 0043  
                     __size_of_returnStop 0006                 i1send_last_2bytes_IK@data 0070  
                               clear_ram0 2132                                  _PIE0bits 0090  
                                _PIE1bits 0091                                  _PIE2bits 0092  
                __size_of_TMR2_StartTimer 0003               __end_of_TMR0_Write8bitTimer 2F9E  
                         ?_TMR4_StopTimer 0070                       ??_i2c1_driver_start 0031  
                                i1_LEDsOn 23D9                             setH1OffTime@t 00C5  
     __size_of_INTERRUPT_InterruptManager 0056                                  _LEDpower 3052  
              ??_TMR0_SetInterruptHandler 0033                                  _PIR0bits 0010  
                                _PIR1bits 0011                                  _PIR2bits 0012  
                              ?_getActive 00B5                    _currentPositions_steps 2790  
                      _heater_pre_time_ms 00EC                  LED_testComm@oldConfigReg 00D0  
                                _SSP1CON1 0215                                  _SSP1CON2 0216  
                                _TMR0_ISR 214A                                  _TMR2_ISR 2157  
                                _TMR4_ISR 2164                                ?_commCheck 00D4  
                                _SSP1STAT 0214                __end_ofi1_i2c1_driver_stop 2F37  
                       ___wmul@multiplier 0031                         ?_do_I2C_SEND_STOP 0070  
             ?i1_do_I2C_SEND_RESTART_READ 0070                                printf@flag 00B2  
                              printf@prec 00AC            ??_TMR2_DefaultInterruptHandler 0071  
       __size_of_TMR2_SetInterruptHandler 0009                  __size_of_TMR2_WriteTimer 0005  
               __end_of_i2c1_driver_start 2F4F                             ??_returnReset 0032  
                      ??_do_I2C_SEND_STOP 0031                 ?_TMR2_SetInterruptHandler 0031  
             __size_of_i2c1_driver_TXData 0006                                ?_drv_reset 0070  
                       _drv_fifo_upstroke 0220                          __size_of_LEDsPwr 0064  
       __end_of_do_I2C_SEND_RESTART_WRITE 203A                                ?_drv_write 0049  
                          ??_calcUpstroke 004D                               _EUSART_Read 2399  
                 __end_of_do_I2C_TX_EMPTY 25E9                         doAbsMove@allThere 00C3  
       send_2length_2bytes_IK@latch_start 0040       i1send_2length_2bytes_IK@latch_start 0024  
                              ?_setLEDPwr 00B5                          ??_LED_readConfig 0049  
                    __end_of_startAbsMove 2300              __size_of_do_I2C_SEND_RESTART 0008  
             __size_of_i2c1_driver_isNACK 000D                    LED_getData@topOrBottom 00B5  
                 _do_I2C_DO_ACK$intlevel0 204E                                  _i2c_open 1AEF  
                              ?_setActive 00B5                       __end_of_setMoveMask 12B4  
                           ?i1_returnStop 0070                     __size_of_mssp1_setIRQ 0003  
                       ??_TMR2_Initialize 0033                               _drv_address 3056  
                       ??_setHeaterToggle 00B9                       _do_I2C_DO_NACK_STOP 2052  
                               frexp@eptr 0034                               _LED_getData 16F2  
                        __size_of_i2c_ISR 0026                           i1LEDsOn@LEDpins 0027  
                __size_of_TMR4_StartTimer 0003                             drv_write@data 0049  
                           drv_write_DC@i 00BA                             drv_write@buff 004C  
                    __end_of_startRelMove 22AB                              ?_do_I2C_IDLE 0070  
                            ?_do_I2C_RCEN 0070                        _LED_test_openshort 15F9  
                 ?i1_i2c1_driver_sendNACK 0070                   ??_OSCILLATOR_Initialize 0031  
              __size_of_setDrvPiezoOnTime 005F                               _setH2OnTime 1C71  
                  ?_setLEDBrightnessRange 00B5                         ??_TMR0_StartTimer 0031  
                     _i2c1_driver_sendACK 2F89                          __size_of___awdiv 0052  
                        __size_of___ftadd 0104                          __size_of___ftneg 0009  
         __size_of_do_I2C_DO_ADDRESS_NACK 002B          i1send_last_2bytes_IK@latch_start 0072  
                        __size_of___lldiv 0053                                  ___altoft 2784  
                        __size_of___ftmul 00E9                       i2c1_driver_TXData@d 0031  
                        __size_of___llmod 0043                          __size_of___fttol 0087  
                  ??_i2c1_driver_sendNACK 0031                                  ___awtoft 241B  
                 ?i1_i2c1_driver_resetBus 0070                                  ___ftpack 1F2A  
        ??_i2c1_driver_setBusCollisionISR 0033           ?_i2c1_driver_setBusCollisionISR 0031  
                           ??i1_do_I2C_RX 0070                             ??i1_do_I2C_TX 0071  
      _do_I2C_SEND_RESTART_READ$intlevel0 2FFC                       _i2c1_driver_restart 2F4F  
                               parseCmd@p 004A                                 parseCmd@s 0045  
             __size_ofi1_do_I2C_SEND_STOP 0004                             LEDsPwr@pwrAll 00A0  
                _TMR4_SetInterruptHandler 2085                      ?_do_I2C_DO_NACK_STOP 0070  
                     _i2c1_driver_startRX 2F55                       ?_LED_test_openshort 00B5  
            __end_of_do_I2C_SEND_ADR_READ 2132                    ??_i2c1_driver_resetBus 0031  
         __size_ofi1_do_I2C_SEND_ADR_READ 0008                      _demoHeaterToggle_bot 0142  
                        __size_of_execCmd 01F2                  ?_TMR2_LoadPeriodRegister 0070  
                    _demoHeaterToggle_top 0146                                _T0CON0bits 0017  
                       ??_drv_write_wvfrm 003A                  __size_of_TMR4_WriteTimer 0005  
                        __size_of_isdigit 000F                                  _demoLong 005A  
                            _mssp1_setIRQ 2F5B                               ??_do_I2C_RX 0031  
                             ??_do_I2C_TX 0032                               ??_doAbsMove 02C8  
                                __ptext10 0AEB                                  __ptext11 1329  
                                __ptext20 096F                                  __ptext12 2062  
                                __ptext21 2517                                  __ptext13 1AEF  
                                __ptext30 21BF                                  __ptext22 2290  
                                __ptext14 20A9                                  __ptext31 1C71  
                                __ptext23 22E3                                  __ptext15 20A0  
                                __ptext40 11E6                                  __ptext32 1C23  
                                __ptext24 1241                                  __ptext16 20E4  
                                __ptext41 1D11                                  __ptext33 2FB7  
                                __ptext25 233C                                  __ptext17 20DA  
                                __ptext50 1989                                  __ptext42 26E0  
                                __ptext34 1E67                                  __ptext26 1EC6  
                                __ptext18 039E                                  __ptext51 139E  
                                __ptext43 1779                                  __ptext35 0BBF  
                                __ptext27 231E                                  __ptext19 12B4  
                                __ptext60 082B                                  __ptext52 27C1  
                                __ptext44 2784                                  __ptext36 2FB2  
                                __ptext28 1675                                  __ptext61 2567  
                                __ptext53 1B88                                  __ptext45 2097  
                                __ptext37 235A                                  __ptext29 217E  
                                __ptext70 2FD4                                  __ptext62 16F2  
                                __ptext54 243D                                  __ptext46 0CA8  
                                __ptext38 157E                                  __ptext71 24CC  
                                __ptext63 0DAC                                  __ptext55 1B3B  
                                __ptext47 22C7                                  __ptext39 08C3  
                                __ptext80 2F5E                                  __ptext72 1946  
                                __ptext64 00EE                                  __ptext56 0A24  
                                __ptext48 241B                                  __ptext81 1A13  
                                __ptext73 1D63                                  __ptext65 0761  
                                __ptext57 19CC                                  __ptext49 1F2A  
                                __ptext90 2042                                  __ptext82 1E0E  
                                __ptext74 21E6                                  __ptext66 2243  
                                __ptext58 15F9                                  __ptext91 203A  
                                __ptext83 0800                                  __ptext75 2484  
                                __ptext67 274D                                  __ptext59 1414  
                                __ptext92 2032                                  __ptext84 205A  
                                __ptext76 20D0                                  __ptext68 24A8  
                                __ptext93 2FF8                                  __ptext85 2052  
                                __ptext77 210F                                  __ptext69 0ECE  
                                __ptext94 208E                                  __ptext86 204A  
                                __ptext78 2104                                  __ptext95 20EE  
                                __ptext87 20C6                                  __ptext79 24F1  
                                __ptext96 25BA                                  __ptext88 20F9  
                                __ptext97 2F5B                                  __ptext89 2126  
                                __ptext98 2171                                  __ptext99 2FCE  
                            _SSP1CON1bits 0215                              _SSP1CON2bits 0216  
                            ??_setDrvGain 00B7                              ??_setDrvPeak 004E  
                __end_ofi1_mssp1_clearIRQ 2F43              send_2bytes_latchless_IK@data 0031  
                    ?_i2c1_driver_sendACK 0070                      __end_of_do_I2C_RESET 20F9  
                     i1LEDsOn@topOrBottom 002B                          __size_of_stricmp 0034  
                        __size_of_strcspn 0030                          __size_of_toupper 0010  
                          ??i1_returnStop 0071                   i1_do_I2C_SEND_ADR_WRITE 2FE1  
                    ?_i2c1_driver_restart 0070                       __end_of_returnReset 2FCE  
                                _drv_init 1329                                  _drv_read 19CC  
                                _drv_sine 10F2                          _i2c1_driver_open 20E4  
                              trunc@expon 00CB                         ??_TMR4_Initialize 0033  
                        _i2c1_driver_stop 2F52                             __size_of_atoi 0071  
                           __size_of_main 007A                      ?_i2c1_driver_startRX 0070  
                                _errorOut 0166                      ??_LED_test_openshort 00B9  
                                _readdata 01C5            __size_of_i2c1_driver_getRXData 0003  
                             ??_doRelMove 00C3                             __size_of_stop 0027  
           __end_of_i2c1_driver_getRXData 2F5B                                  _parseCmd 0590  
         __size_of_send_2length_2bytes_IK 0018      __end_of_TMR0_DefaultInterruptHandler 274D  
   __size_of_TMR0_DefaultInterruptHandler 0037              _TMR0_DefaultInterruptHandler 2716  
                __size_of_getMotionStatus 0023                 __size_of_setHeaterPreTime 000F  
                 ??i1_do_I2C_SEND_RESTART 0070          __size_ofi1_i2c1_driver_getRXData 0003  
                                _moveMask 00D8                   i2c_masterOperation@read 0038  
                             ??_getActive 0049                                _RC1STAbits 019D  
    __size_ofi1_do_I2C_SEND_RESTART_WRITE 0004            __end_ofi1_i2c1_driver_sendNACK 2F69  
                              _RB5PPSbits 0E9D                          setMoveMask@onOff 00B7  
                              _RB6PPSbits 0E9E                                  int$flags 007E  
              ??i1_do_I2C_DO_ADDRESS_NACK 0070                                _RB7PPSbits 0E9F  
                                atoi@sign 003B                               ??_commCheck 00D6  
        __end_ofi1_do_I2C_DO_NACK_RESTART 2F85                         _LED_configReg_bot 014A  
          __end_ofi1_i2c1_driver_resetBus 2F1F                      __end_of_zeroPosition 1329  
                       _LED_configReg_top 014E                         ??_TMR2_StartTimer 0031  
      __end_of_INTERRUPT_InterruptManager 005A                _INTERRUPT_InterruptManager 0004  
                               printf@val 00AE                              _SSP1STATbits 0214  
                      __end_of_setDrvGain 19CC          __end_of_do_I2C_SEND_RESTART_READ 3000  
                      __end_of_setDrvPeak 2379                              ??_returnStop 0032  
                                execCmd@s 00D7                     ??_do_I2C_DO_NACK_STOP 0031  
                        ??_calcHeaterPins 0031                       _TMR0_Load8bitPeriod 2FB2  
               mssp1_waitForEvent@timeout 0031            __size_of_i2c1_driver_setI2cISR 0009  
           __end_of_i2c1_driver_setI2cISR 20B2                                _INTCONbits 000B  
            __size_of_send_last_2bytes_IK 0058                               _NVMCON1bits 0895  
              __size_of_i2c1_driver_start 0003                               ??_drv_reset 00B5  
                             _setMoveMask 1241                       __end_ofi1_do_I2C_RX 1946  
                          __pstringtext10 291F                            __pstringtext11 2967  
                          __pstringtext20 28EE                            __pstringtext12 2828  
                     __end_ofi1_do_I2C_TX 1C23                            __pstringtext21 28FF  
                          __pstringtext13 2847                            __pstringtext30 2995  
                          __pstringtext22 290F                            __pstringtext14 2865  
                          __pstringtext31 29A0                            __pstringtext23 292E  
                          __pstringtext15 2881                            __pstringtext40 29EE  
                          __pstringtext32 29AA                            __pstringtext24 293D  
                          __pstringtext16 289B                            __pstringtext41 29F6  
                          __pstringtext33 29B4                            __pstringtext25 294C  
                          __pstringtext17 28B4                            __pstringtext50 3027  
                          __pstringtext42 29FE                            __pstringtext34 29BD  
                          __pstringtext26 295A                            __pstringtext18 28CB  
                          __pstringtext51 302C                            __pstringtext43 3000  
                          __pstringtext35 29C6                            __pstringtext27 2973  
                          __pstringtext19 28DD                            __pstringtext60 3054  
                          __pstringtext52 3030                            __pstringtext44 3007  
                          __pstringtext36 29CE                            __pstringtext28 297F  
                          __pstringtext61 0000                            __pstringtext53 3034  
                          __pstringtext45 300E                            __pstringtext37 29D6  
                          __pstringtext29 298A                            __pstringtext54 3038  
                          __pstringtext46 3013                            __pstringtext38 29DE  
                          __pstringtext55 303C                            __pstringtext47 3018  
                          __pstringtext39 29E6                            __pstringtext56 3046  
                          __pstringtext48 301D                            __pstringtext57 3049  
                          __pstringtext49 3022                            __pstringtext58 304C  
                          __pstringtext59 304F                                  isdigit@c 0032  
                             ??_drv_write 004A                  __size_ofi1_do_I2C_DO_ACK 0004  
                             ??_setLEDPwr 004E                     ??_i2c1_driver_sendACK 0031  
                        ?_do_I2C_TX_EMPTY 0070                            i1_mssp1_setIRQ 2F3D  
                 __size_of_WDT_Initialize 0004                    _do_I2C_DO_ADDRESS_NACK 0800  
          __size_ofi1_do_I2C_DO_NACK_STOP 0004                                  intlevel1 0000  
           __end_ofi1_do_I2C_DO_NACK_STOP 2F81                    _do_I2C_RESET$intlevel0 20F2  
                        ??_TMR0_StopTimer 0070                     ??_i2c1_driver_restart 0031  
                       ??_TMR2_WriteTimer 0070                   ?_LED_setBrightnessRange 0044  
                             ??_setActive 00B9                                 strchr@chr 0033  
                   ??_i2c1_driver_startRX 0031                                 strchr@ptr 0031  
              ??i1_send_2length_2bytes_IK 007B                          ___lldiv@dividend 0035  
                 ?_PIN_MANAGER_Initialize 0070                   __size_of_i2c_setAddress 0008  
                    ?_TMR0_Load8bitPeriod 0070              ??i1_send_2bytes_latchless_IK 0072  
                  i1_do_I2C_SEND_ADR_READ 2FE8                         __CFG_CLKOUTEN$OFF 0000  
                               stricmp@s1 0038                                 stricmp@s2 0033  
                               strcspn@s1 003E                                 strcspn@s2 0038  
                      __end_of_returnStop 2FC8                              getMoveMask@i 00B7  
                     _drv_fifo_downstroke 02A0       __size_ofi1_do_I2C_SEND_RESTART_READ 0004  
          __size_ofi1_i2c1_driver_sendACK 0004             ?_TMR0_DefaultInterruptHandler 0070  
           __end_ofi1_i2c1_driver_sendACK 2F65               __size_of_mssp1_IRQisEnabled 000A  
          __size_ofi1_i2c1_driver_restart 0003                                  printf@ap 00B3  
           __end_ofi1_i2c1_driver_restart 2F34                        _EUSART_Receive_ISR 22AB  
             __size_of_mssp1_waitForEvent 000B                   drv_write_wvfrm@upOrDown 003A  
          __size_ofi1_i2c1_driver_startRX 0003                      __end_of_calcUpstroke 15F9  
            __end_ofi1_i2c1_driver_TXData 2FAD             __end_ofi1_i2c1_driver_startRX 2F3A  
                       ??_TMR4_StartTimer 0031                          ??_TMR2_StopTimer 0070  
                          _interpulseWait 0168           __end_of_TMR2_LoadPeriodRegister 2FBC  
                        ??_calcDownstroke 004D                             __pstringtext1 1000  
                           __pstringtext2 10F2                             __pstringtext3 1800  
                           __pstringtext4 187A                             __pstringtext5 2800  
                           __pstringtext6 3040                             __pstringtext7 3043  
                           __pstringtext8 3052                             __pstringtext9 3056  
                 __size_ofi1_do_I2C_RESET 0007                    _send_2length_2bytes_IK 222B  
                     ?_EUSART_Receive_ISR 0070              __end_ofi1_i2c1_driver_isNACK 2126  
                              _TMR0_RANGE 3043                          ___lldiv@quotient 003A  
                         _TMR0_Initialize 21D2                                  stricmp@r 0037  
                              _TMR2_RANGE 3040                                  strcspn@i 003C  
       send_2length_2bytes_IK@topOrBottom 0041       i1send_2length_2bytes_IK@topOrBottom 0025  
                  __size_of_i2c_setBuffer 0015                              ?_getMoveMask 00B5  
                   __size_of_startAbsMove 001D                                  toupper@c 0032  
                  __end_ofi1_mssp1_setIRQ 2F40                               _returnReset 2FC8  
                                strtok@s1 0044                                  strtok@s2 003F  
                                strspn@s1 003E                                  strspn@s2 0038  
        _do_I2C_DO_NACK_RESTART$intlevel0 205E                                  strtok@sp 0054  
               ??i1_do_I2C_SEND_ADR_WRITE 0071                  __size_of_main_initialize 00D4  
          __end_of_LED_setBrightnessRange 08C3                              getPosition@a 00B5  
                            ?_getPosition 00B5                    __size_ofi1_do_I2C_IDLE 0005  
                  __size_ofi1_do_I2C_RCEN 0006                   ??i1_send_last_2bytes_IK 0075  
                      EUSART_Write@txData 0032              __size_of_EUSART_Transmit_ISR 001E  
          __end_of_PIN_MANAGER_Initialize 26AC               __end_of_i2c_busCollisionISR 2F31  
                        ??_TMR4_StopTimer 0070                         ??_TMR4_WriteTimer 0070  
                           calcUpstroke@i 01DC                     __size_of_startRelMove 001B  
                   ??_TMR0_Load8bitPeriod 0031                       setMoveMask@probeNum 00B5  
                    ??_EUSART_Receive_ISR 0070                     _TMR2_InterruptHandler 01E4  
                   _do_I2C_SEND_ADR_WRITE 20F9                      _do_I2C_SEND_ADR_READ 2126  
