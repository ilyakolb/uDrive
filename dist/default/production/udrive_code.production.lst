

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Oct 04 09:42:15 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18346
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	stringtext12,global,class=STRCODE,delta=2
    22                           	psect	stringtext13,global,class=STRCODE,delta=2
    23                           	psect	stringtext14,global,class=STRCODE,delta=2
    24                           	psect	stringtext15,global,class=STRCODE,delta=2
    25                           	psect	stringtext16,global,class=STRCODE,delta=2
    26                           	psect	stringtext17,global,class=STRCODE,delta=2
    27                           	psect	stringtext18,global,class=STRCODE,delta=2
    28                           	psect	stringtext19,global,class=STRCODE,delta=2
    29                           	psect	stringtext20,global,class=STRCODE,delta=2
    30                           	psect	stringtext21,global,class=STRCODE,delta=2
    31                           	psect	stringtext22,global,class=STRCODE,delta=2
    32                           	psect	stringtext23,global,class=STRCODE,delta=2
    33                           	psect	stringtext24,global,class=STRCODE,delta=2
    34                           	psect	stringtext25,global,class=STRCODE,delta=2
    35                           	psect	stringtext26,global,class=STRCODE,delta=2
    36                           	psect	stringtext27,global,class=STRCODE,delta=2
    37                           	psect	stringtext28,global,class=STRCODE,delta=2
    38                           	psect	stringtext29,global,class=STRCODE,delta=2
    39                           	psect	stringtext30,global,class=STRCODE,delta=2
    40                           	psect	stringtext31,global,class=STRCODE,delta=2
    41                           	psect	stringtext32,global,class=STRCODE,delta=2
    42                           	psect	stringtext33,global,class=STRCODE,delta=2
    43                           	psect	stringtext34,global,class=STRCODE,delta=2
    44                           	psect	stringtext35,global,class=STRCODE,delta=2
    45                           	psect	stringtext36,global,class=STRCODE,delta=2
    46                           	psect	stringtext37,global,class=STRCODE,delta=2
    47                           	psect	stringtext38,global,class=STRCODE,delta=2
    48                           	psect	stringtext39,global,class=STRCODE,delta=2
    49                           	psect	stringtext40,global,class=STRCODE,delta=2
    50                           	psect	stringtext41,global,class=STRCODE,delta=2
    51                           	psect	stringtext42,global,class=STRCODE,delta=2
    52                           	psect	stringtext43,global,class=STRCODE,delta=2
    53                           	psect	stringtext44,global,class=STRCODE,delta=2
    54                           	psect	stringtext45,global,class=STRCODE,delta=2
    55                           	psect	stringtext46,global,class=STRCODE,delta=2
    56                           	psect	stringtext47,global,class=STRCODE,delta=2
    57                           	psect	stringtext48,global,class=STRCODE,delta=2
    58                           	psect	stringtext49,global,class=STRCODE,delta=2
    59                           	psect	stringtext50,global,class=STRCODE,delta=2
    60                           	psect	stringtext51,global,class=STRCODE,delta=2
    61                           	psect	stringtext52,global,class=STRCODE,delta=2
    62                           	psect	stringtext53,global,class=STRCODE,delta=2
    63                           	psect	stringtext54,global,class=STRCODE,delta=2
    64                           	psect	stringtext55,global,class=STRCODE,delta=2
    65                           	psect	stringtext56,global,class=STRCODE,delta=2
    66                           	psect	stringtext57,global,class=STRCODE,delta=2
    67                           	psect	stringtext58,global,class=STRCODE,delta=2
    68                           	psect	cinit,global,class=CODE,merge=1,delta=2
    69                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    70                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    71                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    72                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    73                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    74                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    75                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    76                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    77                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    78                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    79                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    80                           	psect	inittext,global,class=CODE,delta=2
    81                           	psect	clrtext,global,class=CODE,delta=2
    82                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    83                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    84                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    85                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    86                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    87                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    88                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    89                           	psect	text1,local,class=CODE,merge=1,delta=2
    90                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    92                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    93                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    94                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    95                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    96                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    98                           	psect	text10,local,class=CODE,merge=1,delta=2
    99                           	psect	text11,local,class=CODE,merge=1,delta=2
   100                           	psect	text12,local,class=CODE,merge=1,delta=2
   101                           	psect	text13,local,class=CODE,merge=1,delta=2
   102                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text16,local,class=CODE,merge=1,delta=2
   105                           	psect	text17,local,class=CODE,merge=1,delta=2
   106                           	psect	text18,local,class=CODE,merge=1,delta=2
   107                           	psect	swtext1,local,class=CONST,delta=2
   108                           	psect	text19,local,class=CODE,merge=1,delta=2
   109                           	psect	text20,local,class=CODE,merge=1,delta=2
   110                           	psect	text21,local,class=CODE,merge=1,delta=2
   111                           	psect	text22,local,class=CODE,merge=1,delta=2
   112                           	psect	text23,local,class=CODE,merge=1,delta=2
   113                           	psect	text24,local,class=CODE,merge=1,delta=2
   114                           	psect	text25,local,class=CODE,merge=1,delta=2
   115                           	psect	text26,local,class=CODE,merge=1,delta=2
   116                           	psect	text27,local,class=CODE,merge=1,delta=2
   117                           	psect	text28,local,class=CODE,merge=1,delta=2
   118                           	psect	text29,local,class=CODE,merge=1,delta=2
   119                           	psect	text30,local,class=CODE,merge=1,delta=2
   120                           	psect	text31,local,class=CODE,merge=1,delta=2
   121                           	psect	text32,local,class=CODE,merge=1,delta=2
   122                           	psect	text33,local,class=CODE,merge=1,delta=2
   123                           	psect	text34,local,class=CODE,merge=1,delta=2
   124                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
   125                           	psect	text36,local,class=CODE,merge=1,delta=2
   126                           	psect	text37,local,class=CODE,merge=1,delta=2
   127                           	psect	text38,local,class=CODE,merge=1,delta=2
   128                           	psect	text39,local,class=CODE,merge=1,delta=2
   129                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
   130                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
   131                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
   132                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
   133                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
   134                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
   135                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
   136                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
   137                           	psect	text48,local,class=CODE,merge=1,delta=2,group=2
   138                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
   139                           	psect	text50,local,class=CODE,merge=1,delta=2
   140                           	psect	text51,local,class=CODE,merge=1,delta=2
   141                           	psect	text52,local,class=CODE,merge=1,delta=2
   142                           	psect	text53,local,class=CODE,merge=1,delta=2
   143                           	psect	text54,local,class=CODE,merge=1,delta=2
   144                           	psect	text55,local,class=CODE,merge=1,delta=2
   145                           	psect	text56,local,class=CODE,merge=1,delta=2
   146                           	psect	text57,local,class=CODE,merge=1,delta=2
   147                           	psect	text58,local,class=CODE,merge=1,delta=2
   148                           	psect	text59,local,class=CODE,merge=1,delta=2
   149                           	psect	text60,local,class=CODE,merge=1,delta=2
   150                           	psect	text61,local,class=CODE,merge=1,delta=2
   151                           	psect	text62,local,class=CODE,merge=1,delta=2
   152                           	psect	text63,local,class=CODE,merge=1,delta=2
   153                           	psect	text64,local,class=CODE,merge=1,delta=2
   154                           	psect	text65,local,class=CODE,merge=1,delta=2
   155                           	psect	text66,local,class=CODE,merge=1,delta=2
   156                           	psect	text67,local,class=CODE,merge=1,delta=2
   157                           	psect	text68,local,class=CODE,merge=1,delta=2
   158                           	psect	text69,local,class=CODE,merge=1,delta=2
   159                           	psect	text70,local,class=CODE,merge=1,delta=2
   160                           	psect	text71,local,class=CODE,merge=1,delta=2
   161                           	psect	text72,local,class=CODE,merge=1,delta=2,group=2
   162                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
   163                           	psect	text74,local,class=CODE,merge=1,delta=2
   164                           	psect	text75,local,class=CODE,merge=1,delta=2
   165                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text77,local,class=CODE,merge=1,inline,delta=2
   167                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	text79,local,class=CODE,merge=1,delta=2
   169                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   170                           	psect	text81,local,class=CODE,merge=1,delta=2
   171                           	psect	text82,local,class=CODE,merge=1,delta=2
   172                           	psect	text83,local,class=CODE,merge=1,delta=2
   173                           	psect	text84,local,class=CODE,merge=1,delta=2
   174                           	psect	text85,local,class=CODE,merge=1,delta=2
   175                           	psect	text86,local,class=CODE,merge=1,delta=2
   176                           	psect	text87,local,class=CODE,merge=1,delta=2
   177                           	psect	text88,local,class=CODE,merge=1,delta=2
   178                           	psect	text89,local,class=CODE,merge=1,delta=2
   179                           	psect	text90,local,class=CODE,merge=1,delta=2
   180                           	psect	text91,local,class=CODE,merge=1,delta=2
   181                           	psect	text92,local,class=CODE,merge=1,delta=2
   182                           	psect	text93,local,class=CODE,merge=1,delta=2
   183                           	psect	text94,local,class=CODE,merge=1,delta=2
   184                           	psect	text95,local,class=CODE,merge=1,delta=2
   185                           	psect	text96,local,class=CODE,merge=1,delta=2
   186                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   187                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   188                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   189                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   190                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   191                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   192                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   193                           	psect	text104,local,class=CODE,merge=1,delta=2
   194                           	psect	text105,local,class=CODE,merge=1,delta=2
   195                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   196                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   197                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   198                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   199                           	psect	text110,local,class=CODE,merge=1,delta=2,group=2
   200                           	psect	text111,local,class=CODE,merge=1,delta=2
   201                           	psect	text112,local,class=CODE,merge=1,delta=2
   202                           	psect	text113,local,class=CODE,merge=1,delta=2
   203                           	psect	text114,local,class=CODE,merge=1,delta=2
   204                           	psect	text115,local,class=CODE,merge=1,delta=2
   205                           	psect	text116,local,class=CODE,merge=1,delta=2
   206                           	psect	text117,local,class=CODE,merge=1,delta=2
   207                           	psect	text118,local,class=CODE,merge=1,delta=2
   208                           	psect	text119,local,class=CODE,merge=1,delta=2
   209                           	psect	text120,local,class=CODE,merge=1,delta=2
   210                           	psect	text121,local,class=CODE,merge=1,delta=2
   211                           	psect	text122,local,class=CODE,merge=1,delta=2
   212                           	psect	text123,local,class=CODE,merge=1,delta=2
   213                           	psect	text124,local,class=CODE,merge=1,delta=2
   214                           	psect	text125,local,class=CODE,merge=1,delta=2
   215                           	psect	text126,local,class=CODE,merge=1,delta=2
   216                           	psect	text127,local,class=CODE,merge=1,delta=2
   217                           	psect	text128,local,class=CODE,merge=1,delta=2
   218                           	psect	text129,local,class=CODE,merge=1,delta=2
   219                           	psect	text130,local,class=CODE,merge=1,delta=2
   220                           	psect	text131,local,class=CODE,merge=1,delta=2
   221                           	psect	intentry,global,class=CODE,delta=2
   222                           	psect	text133,local,class=CODE,merge=1,delta=2
   223                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   224                           	psect	text135,local,class=CODE,merge=1,delta=2
   225                           	psect	text136,local,class=CODE,merge=1,delta=2
   226                           	psect	text137,local,class=CODE,merge=1,delta=2
   227                           	psect	text138,local,class=CODE,merge=1,delta=2
   228                           	psect	text139,local,class=CODE,merge=1,delta=2
   229                           	psect	text140,local,class=CODE,merge=1,delta=2
   230                           	psect	text141,local,class=CODE,merge=1,delta=2
   231                           	psect	text142,local,class=CODE,merge=1,delta=2
   232                           	psect	text143,local,class=CODE,merge=1,delta=2
   233                           	psect	text144,local,class=CODE,merge=1,delta=2
   234                           	psect	text145,local,class=CODE,merge=1,delta=2
   235                           	psect	text146,local,class=CODE,merge=1,delta=2
   236                           	psect	text147,local,class=CODE,merge=1,delta=2
   237                           	psect	text148,local,class=CODE,merge=1,delta=2
   238                           	psect	text149,local,class=CODE,merge=1,delta=2
   239                           	psect	text150,local,class=CODE,merge=1,delta=2
   240                           	psect	text151,local,class=CODE,merge=1,inline,delta=2
   241                           	psect	text152,local,class=CODE,merge=1,inline,delta=2
   242                           	psect	text153,local,class=CODE,merge=1,inline,delta=2
   243                           	psect	text154,local,class=CODE,merge=1,inline,delta=2
   244                           	psect	text155,local,class=CODE,merge=1,inline,delta=2
   245                           	psect	text156,local,class=CODE,merge=1,inline,delta=2
   246                           	psect	text157,local,class=CODE,merge=1,inline,delta=2
   247                           	psect	text158,local,class=CODE,merge=1,delta=2
   248                           	psect	text159,local,class=CODE,merge=1,delta=2
   249                           	psect	text160,local,class=CODE,merge=1,inline,delta=2
   250                           	psect	text161,local,class=CODE,merge=1,inline,delta=2
   251                           	psect	text162,local,class=CODE,merge=1,inline,delta=2
   252                           	psect	text163,local,class=CODE,merge=1,delta=2
   253                           	psect	text164,local,class=CODE,merge=1,inline,delta=2
   254                           	psect	text165,local,class=CODE,merge=1,delta=2
   255                           	psect	text166,local,class=CODE,merge=1,delta=2
   256                           	psect	text167,local,class=CODE,merge=1,delta=2
   257                           	psect	text168,local,class=CODE,merge=1,delta=2
   258                           	psect	text169,local,class=CODE,merge=1,delta=2
   259                           	psect	text170,local,class=CODE,merge=1,delta=2
   260                           	psect	text171,local,class=CODE,merge=1,delta=2
   261                           	psect	text172,local,class=CODE,merge=1,delta=2
   262                           	psect	text173,local,class=CODE,merge=1,delta=2
   263                           	psect	text174,local,class=CODE,merge=1,delta=2
   264                           	psect	text175,local,class=CODE,merge=1,delta=2
   265                           	psect	text176,local,class=CODE,merge=1,delta=2
   266                           	psect	text177,local,class=CODE,merge=1,delta=2
   267                           	psect	text178,local,class=CODE,merge=1,delta=2
   268                           	psect	text179,local,class=CODE,merge=1,delta=2
   269                           	psect	text180,local,class=CODE,merge=1,delta=2
   270                           	psect	text181,local,class=CODE,merge=1,delta=2
   271                           	psect	text182,local,class=CODE,merge=1,delta=2
   272                           	dabs	1,0xCA0,32
   273                           	dabs	1,0xC30,64
   274                           	dabs	1,0x2790,0,_currentPositions_steps
   275                           	dabs	1,0x7E,2
   276  0000                     
   277                           ; Version 1.45
   278                           ; Generated 16/11/2017 GMT
   279                           ; 
   280                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   281                           ; All rights reserved.
   282                           ; 
   283                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   284                           ; 
   285                           ; Redistribution and use in source and binary forms, with or without modification, are
   286                           ; permitted provided that the following conditions are met:
   287                           ; 
   288                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   289                           ;        conditions and the following disclaimer.
   290                           ; 
   291                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   292                           ;        of conditions and the following disclaimer in the documentation and/or other
   293                           ;        materials provided with the distribution.
   294                           ; 
   295                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   296                           ;        software without specific prior written permission.
   297                           ; 
   298                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   299                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   300                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   301                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   302                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   303                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   304                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   305                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   306                           ; 
   307                           ; 
   308                           ; Code-generator required, PIC16F18346 Definitions
   309                           ; 
   310                           ; SFR Addresses
   311  0000                     	;# 
   312  0001                     	;# 
   313  0002                     	;# 
   314  0003                     	;# 
   315  0004                     	;# 
   316  0005                     	;# 
   317  0006                     	;# 
   318  0007                     	;# 
   319  0008                     	;# 
   320  0009                     	;# 
   321  000A                     	;# 
   322  000B                     	;# 
   323  000C                     	;# 
   324  000D                     	;# 
   325  000E                     	;# 
   326  0010                     	;# 
   327  0011                     	;# 
   328  0012                     	;# 
   329  0013                     	;# 
   330  0014                     	;# 
   331  0015                     	;# 
   332  0015                     	;# 
   333  0016                     	;# 
   334  0016                     	;# 
   335  0017                     	;# 
   336  0018                     	;# 
   337  0019                     	;# 
   338  0019                     	;# 
   339  001A                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  001D                     	;# 
   343  001E                     	;# 
   344  001F                     	;# 
   345  008C                     	;# 
   346  008D                     	;# 
   347  008E                     	;# 
   348  0090                     	;# 
   349  0091                     	;# 
   350  0092                     	;# 
   351  0093                     	;# 
   352  0094                     	;# 
   353  0097                     	;# 
   354  009B                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  009F                     	;# 
   360  010C                     	;# 
   361  010D                     	;# 
   362  010E                     	;# 
   363  0111                     	;# 
   364  0112                     	;# 
   365  0113                     	;# 
   366  0114                     	;# 
   367  0115                     	;# 
   368  0116                     	;# 
   369  0117                     	;# 
   370  0118                     	;# 
   371  0119                     	;# 
   372  018C                     	;# 
   373  018D                     	;# 
   374  018E                     	;# 
   375  0197                     	;# 
   376  0199                     	;# 
   377  0199                     	;# 
   378  0199                     	;# 
   379  019A                     	;# 
   380  019A                     	;# 
   381  019A                     	;# 
   382  019B                     	;# 
   383  019B                     	;# 
   384  019B                     	;# 
   385  019B                     	;# 
   386  019B                     	;# 
   387  019C                     	;# 
   388  019C                     	;# 
   389  019C                     	;# 
   390  019D                     	;# 
   391  019D                     	;# 
   392  019D                     	;# 
   393  019E                     	;# 
   394  019E                     	;# 
   395  019E                     	;# 
   396  019F                     	;# 
   397  019F                     	;# 
   398  019F                     	;# 
   399  019F                     	;# 
   400  019F                     	;# 
   401  020C                     	;# 
   402  020D                     	;# 
   403  020E                     	;# 
   404  0211                     	;# 
   405  0211                     	;# 
   406  0212                     	;# 
   407  0212                     	;# 
   408  0213                     	;# 
   409  0213                     	;# 
   410  0214                     	;# 
   411  0214                     	;# 
   412  0215                     	;# 
   413  0215                     	;# 
   414  0215                     	;# 
   415  0215                     	;# 
   416  0216                     	;# 
   417  0216                     	;# 
   418  0217                     	;# 
   419  0217                     	;# 
   420  0219                     	;# 
   421  021A                     	;# 
   422  021B                     	;# 
   423  021C                     	;# 
   424  021D                     	;# 
   425  021D                     	;# 
   426  021E                     	;# 
   427  021F                     	;# 
   428  028C                     	;# 
   429  028D                     	;# 
   430  028E                     	;# 
   431  0291                     	;# 
   432  0291                     	;# 
   433  0292                     	;# 
   434  0293                     	;# 
   435  0294                     	;# 
   436  0295                     	;# 
   437  0295                     	;# 
   438  0296                     	;# 
   439  0297                     	;# 
   440  0298                     	;# 
   441  029F                     	;# 
   442  030C                     	;# 
   443  030D                     	;# 
   444  030E                     	;# 
   445  0311                     	;# 
   446  0311                     	;# 
   447  0312                     	;# 
   448  0313                     	;# 
   449  0314                     	;# 
   450  0315                     	;# 
   451  0315                     	;# 
   452  0316                     	;# 
   453  0317                     	;# 
   454  0318                     	;# 
   455  038C                     	;# 
   456  038D                     	;# 
   457  038E                     	;# 
   458  0391                     	;# 
   459  0392                     	;# 
   460  0393                     	;# 
   461  0394                     	;# 
   462  0395                     	;# 
   463  0396                     	;# 
   464  0397                     	;# 
   465  0398                     	;# 
   466  0399                     	;# 
   467  039A                     	;# 
   468  039C                     	;# 
   469  039D                     	;# 
   470  039E                     	;# 
   471  039F                     	;# 
   472  0411                     	;# 
   473  0411                     	;# 
   474  0412                     	;# 
   475  0413                     	;# 
   476  0414                     	;# 
   477  0415                     	;# 
   478  0416                     	;# 
   479  0417                     	;# 
   480  0418                     	;# 
   481  0418                     	;# 
   482  0419                     	;# 
   483  041A                     	;# 
   484  041B                     	;# 
   485  041C                     	;# 
   486  041D                     	;# 
   487  041E                     	;# 
   488  041F                     	;# 
   489  0498                     	;# 
   490  0498                     	;# 
   491  0499                     	;# 
   492  049A                     	;# 
   493  049B                     	;# 
   494  049B                     	;# 
   495  049C                     	;# 
   496  049D                     	;# 
   497  049E                     	;# 
   498  049F                     	;# 
   499  0617                     	;# 
   500  0618                     	;# 
   501  0619                     	;# 
   502  0619                     	;# 
   503  061A                     	;# 
   504  061B                     	;# 
   505  061C                     	;# 
   506  061C                     	;# 
   507  061F                     	;# 
   508  0691                     	;# 
   509  0692                     	;# 
   510  0693                     	;# 
   511  0694                     	;# 
   512  0695                     	;# 
   513  0696                     	;# 
   514  0697                     	;# 
   515  0698                     	;# 
   516  0699                     	;# 
   517  0711                     	;# 
   518  0712                     	;# 
   519  0713                     	;# 
   520  0714                     	;# 
   521  0715                     	;# 
   522  0716                     	;# 
   523  0717                     	;# 
   524  0718                     	;# 
   525  0719                     	;# 
   526  0891                     	;# 
   527  0891                     	;# 
   528  0891                     	;# 
   529  0891                     	;# 
   530  0891                     	;# 
   531  0891                     	;# 
   532  0892                     	;# 
   533  0892                     	;# 
   534  0892                     	;# 
   535  0893                     	;# 
   536  0893                     	;# 
   537  0893                     	;# 
   538  0893                     	;# 
   539  0893                     	;# 
   540  0893                     	;# 
   541  0894                     	;# 
   542  0894                     	;# 
   543  0894                     	;# 
   544  0895                     	;# 
   545  0895                     	;# 
   546  0895                     	;# 
   547  0896                     	;# 
   548  0896                     	;# 
   549  0896                     	;# 
   550  089B                     	;# 
   551  0911                     	;# 
   552  0912                     	;# 
   553  0913                     	;# 
   554  0914                     	;# 
   555  0915                     	;# 
   556  0916                     	;# 
   557  0918                     	;# 
   558  0919                     	;# 
   559  091A                     	;# 
   560  091B                     	;# 
   561  091C                     	;# 
   562  091D                     	;# 
   563  091E                     	;# 
   564  091F                     	;# 
   565  0E0F                     	;# 
   566  0E10                     	;# 
   567  0E11                     	;# 
   568  0E12                     	;# 
   569  0E13                     	;# 
   570  0E14                     	;# 
   571  0E15                     	;# 
   572  0E16                     	;# 
   573  0E17                     	;# 
   574  0E18                     	;# 
   575  0E19                     	;# 
   576  0E1A                     	;# 
   577  0E1B                     	;# 
   578  0E1C                     	;# 
   579  0E1D                     	;# 
   580  0E1E                     	;# 
   581  0E1F                     	;# 
   582  0E20                     	;# 
   583  0E21                     	;# 
   584  0E22                     	;# 
   585  0E24                     	;# 
   586  0E25                     	;# 
   587  0E28                     	;# 
   588  0E29                     	;# 
   589  0E2A                     	;# 
   590  0E2B                     	;# 
   591  0E2C                     	;# 
   592  0E2D                     	;# 
   593  0E2E                     	;# 
   594  0E2F                     	;# 
   595  0E90                     	;# 
   596  0E91                     	;# 
   597  0E92                     	;# 
   598  0E94                     	;# 
   599  0E95                     	;# 
   600  0E9C                     	;# 
   601  0E9D                     	;# 
   602  0E9E                     	;# 
   603  0E9F                     	;# 
   604  0EA0                     	;# 
   605  0EA1                     	;# 
   606  0EA2                     	;# 
   607  0EA3                     	;# 
   608  0EA4                     	;# 
   609  0EA5                     	;# 
   610  0EA6                     	;# 
   611  0EA7                     	;# 
   612  0F0F                     	;# 
   613  0F10                     	;# 
   614  0F11                     	;# 
   615  0F12                     	;# 
   616  0F13                     	;# 
   617  0F14                     	;# 
   618  0F15                     	;# 
   619  0F16                     	;# 
   620  0F17                     	;# 
   621  0F18                     	;# 
   622  0F19                     	;# 
   623  0F1A                     	;# 
   624  0F1B                     	;# 
   625  0F1C                     	;# 
   626  0F1D                     	;# 
   627  0F1E                     	;# 
   628  0F1F                     	;# 
   629  0F20                     	;# 
   630  0F21                     	;# 
   631  0F22                     	;# 
   632  0F23                     	;# 
   633  0F24                     	;# 
   634  0F25                     	;# 
   635  0F26                     	;# 
   636  0F27                     	;# 
   637  0F28                     	;# 
   638  0F29                     	;# 
   639  0F2A                     	;# 
   640  0F2B                     	;# 
   641  0F2C                     	;# 
   642  0F2D                     	;# 
   643  0F2E                     	;# 
   644  0F2F                     	;# 
   645  0F30                     	;# 
   646  0F31                     	;# 
   647  0F32                     	;# 
   648  0F33                     	;# 
   649  0F34                     	;# 
   650  0F35                     	;# 
   651  0F36                     	;# 
   652  0F37                     	;# 
   653  0FE4                     	;# 
   654  0FE5                     	;# 
   655  0FE6                     	;# 
   656  0FE7                     	;# 
   657  0FE8                     	;# 
   658  0FE9                     	;# 
   659  0FEA                     	;# 
   660  0FEB                     	;# 
   661  0FED                     	;# 
   662  0FEE                     	;# 
   663  0FEF                     	;# 
   664  0000                     	;# 
   665  0001                     	;# 
   666  0002                     	;# 
   667  0003                     	;# 
   668  0004                     	;# 
   669  0005                     	;# 
   670  0006                     	;# 
   671  0007                     	;# 
   672  0008                     	;# 
   673  0009                     	;# 
   674  000A                     	;# 
   675  000B                     	;# 
   676  000C                     	;# 
   677  000D                     	;# 
   678  000E                     	;# 
   679  0010                     	;# 
   680  0011                     	;# 
   681  0012                     	;# 
   682  0013                     	;# 
   683  0014                     	;# 
   684  0015                     	;# 
   685  0015                     	;# 
   686  0016                     	;# 
   687  0016                     	;# 
   688  0017                     	;# 
   689  0018                     	;# 
   690  0019                     	;# 
   691  0019                     	;# 
   692  001A                     	;# 
   693  001B                     	;# 
   694  001C                     	;# 
   695  001D                     	;# 
   696  001E                     	;# 
   697  001F                     	;# 
   698  008C                     	;# 
   699  008D                     	;# 
   700  008E                     	;# 
   701  0090                     	;# 
   702  0091                     	;# 
   703  0092                     	;# 
   704  0093                     	;# 
   705  0094                     	;# 
   706  0097                     	;# 
   707  009B                     	;# 
   708  009B                     	;# 
   709  009C                     	;# 
   710  009D                     	;# 
   711  009E                     	;# 
   712  009F                     	;# 
   713  010C                     	;# 
   714  010D                     	;# 
   715  010E                     	;# 
   716  0111                     	;# 
   717  0112                     	;# 
   718  0113                     	;# 
   719  0114                     	;# 
   720  0115                     	;# 
   721  0116                     	;# 
   722  0117                     	;# 
   723  0118                     	;# 
   724  0119                     	;# 
   725  018C                     	;# 
   726  018D                     	;# 
   727  018E                     	;# 
   728  0197                     	;# 
   729  0199                     	;# 
   730  0199                     	;# 
   731  0199                     	;# 
   732  019A                     	;# 
   733  019A                     	;# 
   734  019A                     	;# 
   735  019B                     	;# 
   736  019B                     	;# 
   737  019B                     	;# 
   738  019B                     	;# 
   739  019B                     	;# 
   740  019C                     	;# 
   741  019C                     	;# 
   742  019C                     	;# 
   743  019D                     	;# 
   744  019D                     	;# 
   745  019D                     	;# 
   746  019E                     	;# 
   747  019E                     	;# 
   748  019E                     	;# 
   749  019F                     	;# 
   750  019F                     	;# 
   751  019F                     	;# 
   752  019F                     	;# 
   753  019F                     	;# 
   754  020C                     	;# 
   755  020D                     	;# 
   756  020E                     	;# 
   757  0211                     	;# 
   758  0211                     	;# 
   759  0212                     	;# 
   760  0212                     	;# 
   761  0213                     	;# 
   762  0213                     	;# 
   763  0214                     	;# 
   764  0214                     	;# 
   765  0215                     	;# 
   766  0215                     	;# 
   767  0215                     	;# 
   768  0215                     	;# 
   769  0216                     	;# 
   770  0216                     	;# 
   771  0217                     	;# 
   772  0217                     	;# 
   773  0219                     	;# 
   774  021A                     	;# 
   775  021B                     	;# 
   776  021C                     	;# 
   777  021D                     	;# 
   778  021D                     	;# 
   779  021E                     	;# 
   780  021F                     	;# 
   781  028C                     	;# 
   782  028D                     	;# 
   783  028E                     	;# 
   784  0291                     	;# 
   785  0291                     	;# 
   786  0292                     	;# 
   787  0293                     	;# 
   788  0294                     	;# 
   789  0295                     	;# 
   790  0295                     	;# 
   791  0296                     	;# 
   792  0297                     	;# 
   793  0298                     	;# 
   794  029F                     	;# 
   795  030C                     	;# 
   796  030D                     	;# 
   797  030E                     	;# 
   798  0311                     	;# 
   799  0311                     	;# 
   800  0312                     	;# 
   801  0313                     	;# 
   802  0314                     	;# 
   803  0315                     	;# 
   804  0315                     	;# 
   805  0316                     	;# 
   806  0317                     	;# 
   807  0318                     	;# 
   808  038C                     	;# 
   809  038D                     	;# 
   810  038E                     	;# 
   811  0391                     	;# 
   812  0392                     	;# 
   813  0393                     	;# 
   814  0394                     	;# 
   815  0395                     	;# 
   816  0396                     	;# 
   817  0397                     	;# 
   818  0398                     	;# 
   819  0399                     	;# 
   820  039A                     	;# 
   821  039C                     	;# 
   822  039D                     	;# 
   823  039E                     	;# 
   824  039F                     	;# 
   825  0411                     	;# 
   826  0411                     	;# 
   827  0412                     	;# 
   828  0413                     	;# 
   829  0414                     	;# 
   830  0415                     	;# 
   831  0416                     	;# 
   832  0417                     	;# 
   833  0418                     	;# 
   834  0418                     	;# 
   835  0419                     	;# 
   836  041A                     	;# 
   837  041B                     	;# 
   838  041C                     	;# 
   839  041D                     	;# 
   840  041E                     	;# 
   841  041F                     	;# 
   842  0498                     	;# 
   843  0498                     	;# 
   844  0499                     	;# 
   845  049A                     	;# 
   846  049B                     	;# 
   847  049B                     	;# 
   848  049C                     	;# 
   849  049D                     	;# 
   850  049E                     	;# 
   851  049F                     	;# 
   852  0617                     	;# 
   853  0618                     	;# 
   854  0619                     	;# 
   855  0619                     	;# 
   856  061A                     	;# 
   857  061B                     	;# 
   858  061C                     	;# 
   859  061C                     	;# 
   860  061F                     	;# 
   861  0691                     	;# 
   862  0692                     	;# 
   863  0693                     	;# 
   864  0694                     	;# 
   865  0695                     	;# 
   866  0696                     	;# 
   867  0697                     	;# 
   868  0698                     	;# 
   869  0699                     	;# 
   870  0711                     	;# 
   871  0712                     	;# 
   872  0713                     	;# 
   873  0714                     	;# 
   874  0715                     	;# 
   875  0716                     	;# 
   876  0717                     	;# 
   877  0718                     	;# 
   878  0719                     	;# 
   879  0891                     	;# 
   880  0891                     	;# 
   881  0891                     	;# 
   882  0891                     	;# 
   883  0891                     	;# 
   884  0891                     	;# 
   885  0892                     	;# 
   886  0892                     	;# 
   887  0892                     	;# 
   888  0893                     	;# 
   889  0893                     	;# 
   890  0893                     	;# 
   891  0893                     	;# 
   892  0893                     	;# 
   893  0893                     	;# 
   894  0894                     	;# 
   895  0894                     	;# 
   896  0894                     	;# 
   897  0895                     	;# 
   898  0895                     	;# 
   899  0895                     	;# 
   900  0896                     	;# 
   901  0896                     	;# 
   902  0896                     	;# 
   903  089B                     	;# 
   904  0911                     	;# 
   905  0912                     	;# 
   906  0913                     	;# 
   907  0914                     	;# 
   908  0915                     	;# 
   909  0916                     	;# 
   910  0918                     	;# 
   911  0919                     	;# 
   912  091A                     	;# 
   913  091B                     	;# 
   914  091C                     	;# 
   915  091D                     	;# 
   916  091E                     	;# 
   917  091F                     	;# 
   918  0E0F                     	;# 
   919  0E10                     	;# 
   920  0E11                     	;# 
   921  0E12                     	;# 
   922  0E13                     	;# 
   923  0E14                     	;# 
   924  0E15                     	;# 
   925  0E16                     	;# 
   926  0E17                     	;# 
   927  0E18                     	;# 
   928  0E19                     	;# 
   929  0E1A                     	;# 
   930  0E1B                     	;# 
   931  0E1C                     	;# 
   932  0E1D                     	;# 
   933  0E1E                     	;# 
   934  0E1F                     	;# 
   935  0E20                     	;# 
   936  0E21                     	;# 
   937  0E22                     	;# 
   938  0E24                     	;# 
   939  0E25                     	;# 
   940  0E28                     	;# 
   941  0E29                     	;# 
   942  0E2A                     	;# 
   943  0E2B                     	;# 
   944  0E2C                     	;# 
   945  0E2D                     	;# 
   946  0E2E                     	;# 
   947  0E2F                     	;# 
   948  0E90                     	;# 
   949  0E91                     	;# 
   950  0E92                     	;# 
   951  0E94                     	;# 
   952  0E95                     	;# 
   953  0E9C                     	;# 
   954  0E9D                     	;# 
   955  0E9E                     	;# 
   956  0E9F                     	;# 
   957  0EA0                     	;# 
   958  0EA1                     	;# 
   959  0EA2                     	;# 
   960  0EA3                     	;# 
   961  0EA4                     	;# 
   962  0EA5                     	;# 
   963  0EA6                     	;# 
   964  0EA7                     	;# 
   965  0F0F                     	;# 
   966  0F10                     	;# 
   967  0F11                     	;# 
   968  0F12                     	;# 
   969  0F13                     	;# 
   970  0F14                     	;# 
   971  0F15                     	;# 
   972  0F16                     	;# 
   973  0F17                     	;# 
   974  0F18                     	;# 
   975  0F19                     	;# 
   976  0F1A                     	;# 
   977  0F1B                     	;# 
   978  0F1C                     	;# 
   979  0F1D                     	;# 
   980  0F1E                     	;# 
   981  0F1F                     	;# 
   982  0F20                     	;# 
   983  0F21                     	;# 
   984  0F22                     	;# 
   985  0F23                     	;# 
   986  0F24                     	;# 
   987  0F25                     	;# 
   988  0F26                     	;# 
   989  0F27                     	;# 
   990  0F28                     	;# 
   991  0F29                     	;# 
   992  0F2A                     	;# 
   993  0F2B                     	;# 
   994  0F2C                     	;# 
   995  0F2D                     	;# 
   996  0F2E                     	;# 
   997  0F2F                     	;# 
   998  0F30                     	;# 
   999  0F31                     	;# 
  1000  0F32                     	;# 
  1001  0F33                     	;# 
  1002  0F34                     	;# 
  1003  0F35                     	;# 
  1004  0F36                     	;# 
  1005  0F37                     	;# 
  1006  0FE4                     	;# 
  1007  0FE5                     	;# 
  1008  0FE6                     	;# 
  1009  0FE7                     	;# 
  1010  0FE8                     	;# 
  1011  0FE9                     	;# 
  1012  0FEA                     	;# 
  1013  0FEB                     	;# 
  1014  0FED                     	;# 
  1015  0FEE                     	;# 
  1016  0FEF                     	;# 
  1017  0000                     	;# 
  1018  0001                     	;# 
  1019  0002                     	;# 
  1020  0003                     	;# 
  1021  0004                     	;# 
  1022  0005                     	;# 
  1023  0006                     	;# 
  1024  0007                     	;# 
  1025  0008                     	;# 
  1026  0009                     	;# 
  1027  000A                     	;# 
  1028  000B                     	;# 
  1029  000C                     	;# 
  1030  000D                     	;# 
  1031  000E                     	;# 
  1032  0010                     	;# 
  1033  0011                     	;# 
  1034  0012                     	;# 
  1035  0013                     	;# 
  1036  0014                     	;# 
  1037  0015                     	;# 
  1038  0015                     	;# 
  1039  0016                     	;# 
  1040  0016                     	;# 
  1041  0017                     	;# 
  1042  0018                     	;# 
  1043  0019                     	;# 
  1044  0019                     	;# 
  1045  001A                     	;# 
  1046  001B                     	;# 
  1047  001C                     	;# 
  1048  001D                     	;# 
  1049  001E                     	;# 
  1050  001F                     	;# 
  1051  008C                     	;# 
  1052  008D                     	;# 
  1053  008E                     	;# 
  1054  0090                     	;# 
  1055  0091                     	;# 
  1056  0092                     	;# 
  1057  0093                     	;# 
  1058  0094                     	;# 
  1059  0097                     	;# 
  1060  009B                     	;# 
  1061  009B                     	;# 
  1062  009C                     	;# 
  1063  009D                     	;# 
  1064  009E                     	;# 
  1065  009F                     	;# 
  1066  010C                     	;# 
  1067  010D                     	;# 
  1068  010E                     	;# 
  1069  0111                     	;# 
  1070  0112                     	;# 
  1071  0113                     	;# 
  1072  0114                     	;# 
  1073  0115                     	;# 
  1074  0116                     	;# 
  1075  0117                     	;# 
  1076  0118                     	;# 
  1077  0119                     	;# 
  1078  018C                     	;# 
  1079  018D                     	;# 
  1080  018E                     	;# 
  1081  0197                     	;# 
  1082  0199                     	;# 
  1083  0199                     	;# 
  1084  0199                     	;# 
  1085  019A                     	;# 
  1086  019A                     	;# 
  1087  019A                     	;# 
  1088  019B                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019B                     	;# 
  1092  019B                     	;# 
  1093  019C                     	;# 
  1094  019C                     	;# 
  1095  019C                     	;# 
  1096  019D                     	;# 
  1097  019D                     	;# 
  1098  019D                     	;# 
  1099  019E                     	;# 
  1100  019E                     	;# 
  1101  019E                     	;# 
  1102  019F                     	;# 
  1103  019F                     	;# 
  1104  019F                     	;# 
  1105  019F                     	;# 
  1106  019F                     	;# 
  1107  020C                     	;# 
  1108  020D                     	;# 
  1109  020E                     	;# 
  1110  0211                     	;# 
  1111  0211                     	;# 
  1112  0212                     	;# 
  1113  0212                     	;# 
  1114  0213                     	;# 
  1115  0213                     	;# 
  1116  0214                     	;# 
  1117  0214                     	;# 
  1118  0215                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0216                     	;# 
  1123  0216                     	;# 
  1124  0217                     	;# 
  1125  0217                     	;# 
  1126  0219                     	;# 
  1127  021A                     	;# 
  1128  021B                     	;# 
  1129  021C                     	;# 
  1130  021D                     	;# 
  1131  021D                     	;# 
  1132  021E                     	;# 
  1133  021F                     	;# 
  1134  028C                     	;# 
  1135  028D                     	;# 
  1136  028E                     	;# 
  1137  0291                     	;# 
  1138  0291                     	;# 
  1139  0292                     	;# 
  1140  0293                     	;# 
  1141  0294                     	;# 
  1142  0295                     	;# 
  1143  0295                     	;# 
  1144  0296                     	;# 
  1145  0297                     	;# 
  1146  0298                     	;# 
  1147  029F                     	;# 
  1148  030C                     	;# 
  1149  030D                     	;# 
  1150  030E                     	;# 
  1151  0311                     	;# 
  1152  0311                     	;# 
  1153  0312                     	;# 
  1154  0313                     	;# 
  1155  0314                     	;# 
  1156  0315                     	;# 
  1157  0315                     	;# 
  1158  0316                     	;# 
  1159  0317                     	;# 
  1160  0318                     	;# 
  1161  038C                     	;# 
  1162  038D                     	;# 
  1163  038E                     	;# 
  1164  0391                     	;# 
  1165  0392                     	;# 
  1166  0393                     	;# 
  1167  0394                     	;# 
  1168  0395                     	;# 
  1169  0396                     	;# 
  1170  0397                     	;# 
  1171  0398                     	;# 
  1172  0399                     	;# 
  1173  039A                     	;# 
  1174  039C                     	;# 
  1175  039D                     	;# 
  1176  039E                     	;# 
  1177  039F                     	;# 
  1178  0411                     	;# 
  1179  0411                     	;# 
  1180  0412                     	;# 
  1181  0413                     	;# 
  1182  0414                     	;# 
  1183  0415                     	;# 
  1184  0416                     	;# 
  1185  0417                     	;# 
  1186  0418                     	;# 
  1187  0418                     	;# 
  1188  0419                     	;# 
  1189  041A                     	;# 
  1190  041B                     	;# 
  1191  041C                     	;# 
  1192  041D                     	;# 
  1193  041E                     	;# 
  1194  041F                     	;# 
  1195  0498                     	;# 
  1196  0498                     	;# 
  1197  0499                     	;# 
  1198  049A                     	;# 
  1199  049B                     	;# 
  1200  049B                     	;# 
  1201  049C                     	;# 
  1202  049D                     	;# 
  1203  049E                     	;# 
  1204  049F                     	;# 
  1205  0617                     	;# 
  1206  0618                     	;# 
  1207  0619                     	;# 
  1208  0619                     	;# 
  1209  061A                     	;# 
  1210  061B                     	;# 
  1211  061C                     	;# 
  1212  061C                     	;# 
  1213  061F                     	;# 
  1214  0691                     	;# 
  1215  0692                     	;# 
  1216  0693                     	;# 
  1217  0694                     	;# 
  1218  0695                     	;# 
  1219  0696                     	;# 
  1220  0697                     	;# 
  1221  0698                     	;# 
  1222  0699                     	;# 
  1223  0711                     	;# 
  1224  0712                     	;# 
  1225  0713                     	;# 
  1226  0714                     	;# 
  1227  0715                     	;# 
  1228  0716                     	;# 
  1229  0717                     	;# 
  1230  0718                     	;# 
  1231  0719                     	;# 
  1232  0891                     	;# 
  1233  0891                     	;# 
  1234  0891                     	;# 
  1235  0891                     	;# 
  1236  0891                     	;# 
  1237  0891                     	;# 
  1238  0892                     	;# 
  1239  0892                     	;# 
  1240  0892                     	;# 
  1241  0893                     	;# 
  1242  0893                     	;# 
  1243  0893                     	;# 
  1244  0893                     	;# 
  1245  0893                     	;# 
  1246  0893                     	;# 
  1247  0894                     	;# 
  1248  0894                     	;# 
  1249  0894                     	;# 
  1250  0895                     	;# 
  1251  0895                     	;# 
  1252  0895                     	;# 
  1253  0896                     	;# 
  1254  0896                     	;# 
  1255  0896                     	;# 
  1256  089B                     	;# 
  1257  0911                     	;# 
  1258  0912                     	;# 
  1259  0913                     	;# 
  1260  0914                     	;# 
  1261  0915                     	;# 
  1262  0916                     	;# 
  1263  0918                     	;# 
  1264  0919                     	;# 
  1265  091A                     	;# 
  1266  091B                     	;# 
  1267  091C                     	;# 
  1268  091D                     	;# 
  1269  091E                     	;# 
  1270  091F                     	;# 
  1271  0E0F                     	;# 
  1272  0E10                     	;# 
  1273  0E11                     	;# 
  1274  0E12                     	;# 
  1275  0E13                     	;# 
  1276  0E14                     	;# 
  1277  0E15                     	;# 
  1278  0E16                     	;# 
  1279  0E17                     	;# 
  1280  0E18                     	;# 
  1281  0E19                     	;# 
  1282  0E1A                     	;# 
  1283  0E1B                     	;# 
  1284  0E1C                     	;# 
  1285  0E1D                     	;# 
  1286  0E1E                     	;# 
  1287  0E1F                     	;# 
  1288  0E20                     	;# 
  1289  0E21                     	;# 
  1290  0E22                     	;# 
  1291  0E24                     	;# 
  1292  0E25                     	;# 
  1293  0E28                     	;# 
  1294  0E29                     	;# 
  1295  0E2A                     	;# 
  1296  0E2B                     	;# 
  1297  0E2C                     	;# 
  1298  0E2D                     	;# 
  1299  0E2E                     	;# 
  1300  0E2F                     	;# 
  1301  0E90                     	;# 
  1302  0E91                     	;# 
  1303  0E92                     	;# 
  1304  0E94                     	;# 
  1305  0E95                     	;# 
  1306  0E9C                     	;# 
  1307  0E9D                     	;# 
  1308  0E9E                     	;# 
  1309  0E9F                     	;# 
  1310  0EA0                     	;# 
  1311  0EA1                     	;# 
  1312  0EA2                     	;# 
  1313  0EA3                     	;# 
  1314  0EA4                     	;# 
  1315  0EA5                     	;# 
  1316  0EA6                     	;# 
  1317  0EA7                     	;# 
  1318  0F0F                     	;# 
  1319  0F10                     	;# 
  1320  0F11                     	;# 
  1321  0F12                     	;# 
  1322  0F13                     	;# 
  1323  0F14                     	;# 
  1324  0F15                     	;# 
  1325  0F16                     	;# 
  1326  0F17                     	;# 
  1327  0F18                     	;# 
  1328  0F19                     	;# 
  1329  0F1A                     	;# 
  1330  0F1B                     	;# 
  1331  0F1C                     	;# 
  1332  0F1D                     	;# 
  1333  0F1E                     	;# 
  1334  0F1F                     	;# 
  1335  0F20                     	;# 
  1336  0F21                     	;# 
  1337  0F22                     	;# 
  1338  0F23                     	;# 
  1339  0F24                     	;# 
  1340  0F25                     	;# 
  1341  0F26                     	;# 
  1342  0F27                     	;# 
  1343  0F28                     	;# 
  1344  0F29                     	;# 
  1345  0F2A                     	;# 
  1346  0F2B                     	;# 
  1347  0F2C                     	;# 
  1348  0F2D                     	;# 
  1349  0F2E                     	;# 
  1350  0F2F                     	;# 
  1351  0F30                     	;# 
  1352  0F31                     	;# 
  1353  0F32                     	;# 
  1354  0F33                     	;# 
  1355  0F34                     	;# 
  1356  0F35                     	;# 
  1357  0F36                     	;# 
  1358  0F37                     	;# 
  1359  0FE4                     	;# 
  1360  0FE5                     	;# 
  1361  0FE6                     	;# 
  1362  0FE7                     	;# 
  1363  0FE8                     	;# 
  1364  0FE9                     	;# 
  1365  0FEA                     	;# 
  1366  0FEB                     	;# 
  1367  0FED                     	;# 
  1368  0FEE                     	;# 
  1369  0FEF                     	;# 
  1370  0000                     	;# 
  1371  0001                     	;# 
  1372  0002                     	;# 
  1373  0003                     	;# 
  1374  0004                     	;# 
  1375  0005                     	;# 
  1376  0006                     	;# 
  1377  0007                     	;# 
  1378  0008                     	;# 
  1379  0009                     	;# 
  1380  000A                     	;# 
  1381  000B                     	;# 
  1382  000C                     	;# 
  1383  000D                     	;# 
  1384  000E                     	;# 
  1385  0010                     	;# 
  1386  0011                     	;# 
  1387  0012                     	;# 
  1388  0013                     	;# 
  1389  0014                     	;# 
  1390  0015                     	;# 
  1391  0015                     	;# 
  1392  0016                     	;# 
  1393  0016                     	;# 
  1394  0017                     	;# 
  1395  0018                     	;# 
  1396  0019                     	;# 
  1397  0019                     	;# 
  1398  001A                     	;# 
  1399  001B                     	;# 
  1400  001C                     	;# 
  1401  001D                     	;# 
  1402  001E                     	;# 
  1403  001F                     	;# 
  1404  008C                     	;# 
  1405  008D                     	;# 
  1406  008E                     	;# 
  1407  0090                     	;# 
  1408  0091                     	;# 
  1409  0092                     	;# 
  1410  0093                     	;# 
  1411  0094                     	;# 
  1412  0097                     	;# 
  1413  009B                     	;# 
  1414  009B                     	;# 
  1415  009C                     	;# 
  1416  009D                     	;# 
  1417  009E                     	;# 
  1418  009F                     	;# 
  1419  010C                     	;# 
  1420  010D                     	;# 
  1421  010E                     	;# 
  1422  0111                     	;# 
  1423  0112                     	;# 
  1424  0113                     	;# 
  1425  0114                     	;# 
  1426  0115                     	;# 
  1427  0116                     	;# 
  1428  0117                     	;# 
  1429  0118                     	;# 
  1430  0119                     	;# 
  1431  018C                     	;# 
  1432  018D                     	;# 
  1433  018E                     	;# 
  1434  0197                     	;# 
  1435  0199                     	;# 
  1436  0199                     	;# 
  1437  0199                     	;# 
  1438  019A                     	;# 
  1439  019A                     	;# 
  1440  019A                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019C                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019D                     	;# 
  1451  019D                     	;# 
  1452  019E                     	;# 
  1453  019E                     	;# 
  1454  019E                     	;# 
  1455  019F                     	;# 
  1456  019F                     	;# 
  1457  019F                     	;# 
  1458  019F                     	;# 
  1459  019F                     	;# 
  1460  020C                     	;# 
  1461  020D                     	;# 
  1462  020E                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0215                     	;# 
  1475  0216                     	;# 
  1476  0216                     	;# 
  1477  0217                     	;# 
  1478  0217                     	;# 
  1479  0219                     	;# 
  1480  021A                     	;# 
  1481  021B                     	;# 
  1482  021C                     	;# 
  1483  021D                     	;# 
  1484  021D                     	;# 
  1485  021E                     	;# 
  1486  021F                     	;# 
  1487  028C                     	;# 
  1488  028D                     	;# 
  1489  028E                     	;# 
  1490  0291                     	;# 
  1491  0291                     	;# 
  1492  0292                     	;# 
  1493  0293                     	;# 
  1494  0294                     	;# 
  1495  0295                     	;# 
  1496  0295                     	;# 
  1497  0296                     	;# 
  1498  0297                     	;# 
  1499  0298                     	;# 
  1500  029F                     	;# 
  1501  030C                     	;# 
  1502  030D                     	;# 
  1503  030E                     	;# 
  1504  0311                     	;# 
  1505  0311                     	;# 
  1506  0312                     	;# 
  1507  0313                     	;# 
  1508  0314                     	;# 
  1509  0315                     	;# 
  1510  0315                     	;# 
  1511  0316                     	;# 
  1512  0317                     	;# 
  1513  0318                     	;# 
  1514  038C                     	;# 
  1515  038D                     	;# 
  1516  038E                     	;# 
  1517  0391                     	;# 
  1518  0392                     	;# 
  1519  0393                     	;# 
  1520  0394                     	;# 
  1521  0395                     	;# 
  1522  0396                     	;# 
  1523  0397                     	;# 
  1524  0398                     	;# 
  1525  0399                     	;# 
  1526  039A                     	;# 
  1527  039C                     	;# 
  1528  039D                     	;# 
  1529  039E                     	;# 
  1530  039F                     	;# 
  1531  0411                     	;# 
  1532  0411                     	;# 
  1533  0412                     	;# 
  1534  0413                     	;# 
  1535  0414                     	;# 
  1536  0415                     	;# 
  1537  0416                     	;# 
  1538  0417                     	;# 
  1539  0418                     	;# 
  1540  0418                     	;# 
  1541  0419                     	;# 
  1542  041A                     	;# 
  1543  041B                     	;# 
  1544  041C                     	;# 
  1545  041D                     	;# 
  1546  041E                     	;# 
  1547  041F                     	;# 
  1548  0498                     	;# 
  1549  0498                     	;# 
  1550  0499                     	;# 
  1551  049A                     	;# 
  1552  049B                     	;# 
  1553  049B                     	;# 
  1554  049C                     	;# 
  1555  049D                     	;# 
  1556  049E                     	;# 
  1557  049F                     	;# 
  1558  0617                     	;# 
  1559  0618                     	;# 
  1560  0619                     	;# 
  1561  0619                     	;# 
  1562  061A                     	;# 
  1563  061B                     	;# 
  1564  061C                     	;# 
  1565  061C                     	;# 
  1566  061F                     	;# 
  1567  0691                     	;# 
  1568  0692                     	;# 
  1569  0693                     	;# 
  1570  0694                     	;# 
  1571  0695                     	;# 
  1572  0696                     	;# 
  1573  0697                     	;# 
  1574  0698                     	;# 
  1575  0699                     	;# 
  1576  0711                     	;# 
  1577  0712                     	;# 
  1578  0713                     	;# 
  1579  0714                     	;# 
  1580  0715                     	;# 
  1581  0716                     	;# 
  1582  0717                     	;# 
  1583  0718                     	;# 
  1584  0719                     	;# 
  1585  0891                     	;# 
  1586  0891                     	;# 
  1587  0891                     	;# 
  1588  0891                     	;# 
  1589  0891                     	;# 
  1590  0891                     	;# 
  1591  0892                     	;# 
  1592  0892                     	;# 
  1593  0892                     	;# 
  1594  0893                     	;# 
  1595  0893                     	;# 
  1596  0893                     	;# 
  1597  0893                     	;# 
  1598  0893                     	;# 
  1599  0893                     	;# 
  1600  0894                     	;# 
  1601  0894                     	;# 
  1602  0894                     	;# 
  1603  0895                     	;# 
  1604  0895                     	;# 
  1605  0895                     	;# 
  1606  0896                     	;# 
  1607  0896                     	;# 
  1608  0896                     	;# 
  1609  089B                     	;# 
  1610  0911                     	;# 
  1611  0912                     	;# 
  1612  0913                     	;# 
  1613  0914                     	;# 
  1614  0915                     	;# 
  1615  0916                     	;# 
  1616  0918                     	;# 
  1617  0919                     	;# 
  1618  091A                     	;# 
  1619  091B                     	;# 
  1620  091C                     	;# 
  1621  091D                     	;# 
  1622  091E                     	;# 
  1623  091F                     	;# 
  1624  0E0F                     	;# 
  1625  0E10                     	;# 
  1626  0E11                     	;# 
  1627  0E12                     	;# 
  1628  0E13                     	;# 
  1629  0E14                     	;# 
  1630  0E15                     	;# 
  1631  0E16                     	;# 
  1632  0E17                     	;# 
  1633  0E18                     	;# 
  1634  0E19                     	;# 
  1635  0E1A                     	;# 
  1636  0E1B                     	;# 
  1637  0E1C                     	;# 
  1638  0E1D                     	;# 
  1639  0E1E                     	;# 
  1640  0E1F                     	;# 
  1641  0E20                     	;# 
  1642  0E21                     	;# 
  1643  0E22                     	;# 
  1644  0E24                     	;# 
  1645  0E25                     	;# 
  1646  0E28                     	;# 
  1647  0E29                     	;# 
  1648  0E2A                     	;# 
  1649  0E2B                     	;# 
  1650  0E2C                     	;# 
  1651  0E2D                     	;# 
  1652  0E2E                     	;# 
  1653  0E2F                     	;# 
  1654  0E90                     	;# 
  1655  0E91                     	;# 
  1656  0E92                     	;# 
  1657  0E94                     	;# 
  1658  0E95                     	;# 
  1659  0E9C                     	;# 
  1660  0E9D                     	;# 
  1661  0E9E                     	;# 
  1662  0E9F                     	;# 
  1663  0EA0                     	;# 
  1664  0EA1                     	;# 
  1665  0EA2                     	;# 
  1666  0EA3                     	;# 
  1667  0EA4                     	;# 
  1668  0EA5                     	;# 
  1669  0EA6                     	;# 
  1670  0EA7                     	;# 
  1671  0F0F                     	;# 
  1672  0F10                     	;# 
  1673  0F11                     	;# 
  1674  0F12                     	;# 
  1675  0F13                     	;# 
  1676  0F14                     	;# 
  1677  0F15                     	;# 
  1678  0F16                     	;# 
  1679  0F17                     	;# 
  1680  0F18                     	;# 
  1681  0F19                     	;# 
  1682  0F1A                     	;# 
  1683  0F1B                     	;# 
  1684  0F1C                     	;# 
  1685  0F1D                     	;# 
  1686  0F1E                     	;# 
  1687  0F1F                     	;# 
  1688  0F20                     	;# 
  1689  0F21                     	;# 
  1690  0F22                     	;# 
  1691  0F23                     	;# 
  1692  0F24                     	;# 
  1693  0F25                     	;# 
  1694  0F26                     	;# 
  1695  0F27                     	;# 
  1696  0F28                     	;# 
  1697  0F29                     	;# 
  1698  0F2A                     	;# 
  1699  0F2B                     	;# 
  1700  0F2C                     	;# 
  1701  0F2D                     	;# 
  1702  0F2E                     	;# 
  1703  0F2F                     	;# 
  1704  0F30                     	;# 
  1705  0F31                     	;# 
  1706  0F32                     	;# 
  1707  0F33                     	;# 
  1708  0F34                     	;# 
  1709  0F35                     	;# 
  1710  0F36                     	;# 
  1711  0F37                     	;# 
  1712  0FE4                     	;# 
  1713  0FE5                     	;# 
  1714  0FE6                     	;# 
  1715  0FE7                     	;# 
  1716  0FE8                     	;# 
  1717  0FE9                     	;# 
  1718  0FEA                     	;# 
  1719  0FEB                     	;# 
  1720  0FED                     	;# 
  1721  0FEE                     	;# 
  1722  0FEF                     	;# 
  1723  0000                     	;# 
  1724  0001                     	;# 
  1725  0002                     	;# 
  1726  0003                     	;# 
  1727  0004                     	;# 
  1728  0005                     	;# 
  1729  0006                     	;# 
  1730  0007                     	;# 
  1731  0008                     	;# 
  1732  0009                     	;# 
  1733  000A                     	;# 
  1734  000B                     	;# 
  1735  000C                     	;# 
  1736  000D                     	;# 
  1737  000E                     	;# 
  1738  0010                     	;# 
  1739  0011                     	;# 
  1740  0012                     	;# 
  1741  0013                     	;# 
  1742  0014                     	;# 
  1743  0015                     	;# 
  1744  0015                     	;# 
  1745  0016                     	;# 
  1746  0016                     	;# 
  1747  0017                     	;# 
  1748  0018                     	;# 
  1749  0019                     	;# 
  1750  0019                     	;# 
  1751  001A                     	;# 
  1752  001B                     	;# 
  1753  001C                     	;# 
  1754  001D                     	;# 
  1755  001E                     	;# 
  1756  001F                     	;# 
  1757  008C                     	;# 
  1758  008D                     	;# 
  1759  008E                     	;# 
  1760  0090                     	;# 
  1761  0091                     	;# 
  1762  0092                     	;# 
  1763  0093                     	;# 
  1764  0094                     	;# 
  1765  0097                     	;# 
  1766  009B                     	;# 
  1767  009B                     	;# 
  1768  009C                     	;# 
  1769  009D                     	;# 
  1770  009E                     	;# 
  1771  009F                     	;# 
  1772  010C                     	;# 
  1773  010D                     	;# 
  1774  010E                     	;# 
  1775  0111                     	;# 
  1776  0112                     	;# 
  1777  0113                     	;# 
  1778  0114                     	;# 
  1779  0115                     	;# 
  1780  0116                     	;# 
  1781  0117                     	;# 
  1782  0118                     	;# 
  1783  0119                     	;# 
  1784  018C                     	;# 
  1785  018D                     	;# 
  1786  018E                     	;# 
  1787  0197                     	;# 
  1788  0199                     	;# 
  1789  0199                     	;# 
  1790  0199                     	;# 
  1791  019A                     	;# 
  1792  019A                     	;# 
  1793  019A                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019B                     	;# 
  1797  019B                     	;# 
  1798  019B                     	;# 
  1799  019C                     	;# 
  1800  019C                     	;# 
  1801  019C                     	;# 
  1802  019D                     	;# 
  1803  019D                     	;# 
  1804  019D                     	;# 
  1805  019E                     	;# 
  1806  019E                     	;# 
  1807  019E                     	;# 
  1808  019F                     	;# 
  1809  019F                     	;# 
  1810  019F                     	;# 
  1811  019F                     	;# 
  1812  019F                     	;# 
  1813  020C                     	;# 
  1814  020D                     	;# 
  1815  020E                     	;# 
  1816  0211                     	;# 
  1817  0211                     	;# 
  1818  0212                     	;# 
  1819  0212                     	;# 
  1820  0213                     	;# 
  1821  0213                     	;# 
  1822  0214                     	;# 
  1823  0214                     	;# 
  1824  0215                     	;# 
  1825  0215                     	;# 
  1826  0215                     	;# 
  1827  0215                     	;# 
  1828  0216                     	;# 
  1829  0216                     	;# 
  1830  0217                     	;# 
  1831  0217                     	;# 
  1832  0219                     	;# 
  1833  021A                     	;# 
  1834  021B                     	;# 
  1835  021C                     	;# 
  1836  021D                     	;# 
  1837  021D                     	;# 
  1838  021E                     	;# 
  1839  021F                     	;# 
  1840  028C                     	;# 
  1841  028D                     	;# 
  1842  028E                     	;# 
  1843  0291                     	;# 
  1844  0291                     	;# 
  1845  0292                     	;# 
  1846  0293                     	;# 
  1847  0294                     	;# 
  1848  0295                     	;# 
  1849  0295                     	;# 
  1850  0296                     	;# 
  1851  0297                     	;# 
  1852  0298                     	;# 
  1853  029F                     	;# 
  1854  030C                     	;# 
  1855  030D                     	;# 
  1856  030E                     	;# 
  1857  0311                     	;# 
  1858  0311                     	;# 
  1859  0312                     	;# 
  1860  0313                     	;# 
  1861  0314                     	;# 
  1862  0315                     	;# 
  1863  0315                     	;# 
  1864  0316                     	;# 
  1865  0317                     	;# 
  1866  0318                     	;# 
  1867  038C                     	;# 
  1868  038D                     	;# 
  1869  038E                     	;# 
  1870  0391                     	;# 
  1871  0392                     	;# 
  1872  0393                     	;# 
  1873  0394                     	;# 
  1874  0395                     	;# 
  1875  0396                     	;# 
  1876  0397                     	;# 
  1877  0398                     	;# 
  1878  0399                     	;# 
  1879  039A                     	;# 
  1880  039C                     	;# 
  1881  039D                     	;# 
  1882  039E                     	;# 
  1883  039F                     	;# 
  1884  0411                     	;# 
  1885  0411                     	;# 
  1886  0412                     	;# 
  1887  0413                     	;# 
  1888  0414                     	;# 
  1889  0415                     	;# 
  1890  0416                     	;# 
  1891  0417                     	;# 
  1892  0418                     	;# 
  1893  0418                     	;# 
  1894  0419                     	;# 
  1895  041A                     	;# 
  1896  041B                     	;# 
  1897  041C                     	;# 
  1898  041D                     	;# 
  1899  041E                     	;# 
  1900  041F                     	;# 
  1901  0498                     	;# 
  1902  0498                     	;# 
  1903  0499                     	;# 
  1904  049A                     	;# 
  1905  049B                     	;# 
  1906  049B                     	;# 
  1907  049C                     	;# 
  1908  049D                     	;# 
  1909  049E                     	;# 
  1910  049F                     	;# 
  1911  0617                     	;# 
  1912  0618                     	;# 
  1913  0619                     	;# 
  1914  0619                     	;# 
  1915  061A                     	;# 
  1916  061B                     	;# 
  1917  061C                     	;# 
  1918  061C                     	;# 
  1919  061F                     	;# 
  1920  0691                     	;# 
  1921  0692                     	;# 
  1922  0693                     	;# 
  1923  0694                     	;# 
  1924  0695                     	;# 
  1925  0696                     	;# 
  1926  0697                     	;# 
  1927  0698                     	;# 
  1928  0699                     	;# 
  1929  0711                     	;# 
  1930  0712                     	;# 
  1931  0713                     	;# 
  1932  0714                     	;# 
  1933  0715                     	;# 
  1934  0716                     	;# 
  1935  0717                     	;# 
  1936  0718                     	;# 
  1937  0719                     	;# 
  1938  0891                     	;# 
  1939  0891                     	;# 
  1940  0891                     	;# 
  1941  0891                     	;# 
  1942  0891                     	;# 
  1943  0891                     	;# 
  1944  0892                     	;# 
  1945  0892                     	;# 
  1946  0892                     	;# 
  1947  0893                     	;# 
  1948  0893                     	;# 
  1949  0893                     	;# 
  1950  0893                     	;# 
  1951  0893                     	;# 
  1952  0893                     	;# 
  1953  0894                     	;# 
  1954  0894                     	;# 
  1955  0894                     	;# 
  1956  0895                     	;# 
  1957  0895                     	;# 
  1958  0895                     	;# 
  1959  0896                     	;# 
  1960  0896                     	;# 
  1961  0896                     	;# 
  1962  089B                     	;# 
  1963  0911                     	;# 
  1964  0912                     	;# 
  1965  0913                     	;# 
  1966  0914                     	;# 
  1967  0915                     	;# 
  1968  0916                     	;# 
  1969  0918                     	;# 
  1970  0919                     	;# 
  1971  091A                     	;# 
  1972  091B                     	;# 
  1973  091C                     	;# 
  1974  091D                     	;# 
  1975  091E                     	;# 
  1976  091F                     	;# 
  1977  0E0F                     	;# 
  1978  0E10                     	;# 
  1979  0E11                     	;# 
  1980  0E12                     	;# 
  1981  0E13                     	;# 
  1982  0E14                     	;# 
  1983  0E15                     	;# 
  1984  0E16                     	;# 
  1985  0E17                     	;# 
  1986  0E18                     	;# 
  1987  0E19                     	;# 
  1988  0E1A                     	;# 
  1989  0E1B                     	;# 
  1990  0E1C                     	;# 
  1991  0E1D                     	;# 
  1992  0E1E                     	;# 
  1993  0E1F                     	;# 
  1994  0E20                     	;# 
  1995  0E21                     	;# 
  1996  0E22                     	;# 
  1997  0E24                     	;# 
  1998  0E25                     	;# 
  1999  0E28                     	;# 
  2000  0E29                     	;# 
  2001  0E2A                     	;# 
  2002  0E2B                     	;# 
  2003  0E2C                     	;# 
  2004  0E2D                     	;# 
  2005  0E2E                     	;# 
  2006  0E2F                     	;# 
  2007  0E90                     	;# 
  2008  0E91                     	;# 
  2009  0E92                     	;# 
  2010  0E94                     	;# 
  2011  0E95                     	;# 
  2012  0E9C                     	;# 
  2013  0E9D                     	;# 
  2014  0E9E                     	;# 
  2015  0E9F                     	;# 
  2016  0EA0                     	;# 
  2017  0EA1                     	;# 
  2018  0EA2                     	;# 
  2019  0EA3                     	;# 
  2020  0EA4                     	;# 
  2021  0EA5                     	;# 
  2022  0EA6                     	;# 
  2023  0EA7                     	;# 
  2024  0F0F                     	;# 
  2025  0F10                     	;# 
  2026  0F11                     	;# 
  2027  0F12                     	;# 
  2028  0F13                     	;# 
  2029  0F14                     	;# 
  2030  0F15                     	;# 
  2031  0F16                     	;# 
  2032  0F17                     	;# 
  2033  0F18                     	;# 
  2034  0F19                     	;# 
  2035  0F1A                     	;# 
  2036  0F1B                     	;# 
  2037  0F1C                     	;# 
  2038  0F1D                     	;# 
  2039  0F1E                     	;# 
  2040  0F1F                     	;# 
  2041  0F20                     	;# 
  2042  0F21                     	;# 
  2043  0F22                     	;# 
  2044  0F23                     	;# 
  2045  0F24                     	;# 
  2046  0F25                     	;# 
  2047  0F26                     	;# 
  2048  0F27                     	;# 
  2049  0F28                     	;# 
  2050  0F29                     	;# 
  2051  0F2A                     	;# 
  2052  0F2B                     	;# 
  2053  0F2C                     	;# 
  2054  0F2D                     	;# 
  2055  0F2E                     	;# 
  2056  0F2F                     	;# 
  2057  0F30                     	;# 
  2058  0F31                     	;# 
  2059  0F32                     	;# 
  2060  0F33                     	;# 
  2061  0F34                     	;# 
  2062  0F35                     	;# 
  2063  0F36                     	;# 
  2064  0F37                     	;# 
  2065  0FE4                     	;# 
  2066  0FE5                     	;# 
  2067  0FE6                     	;# 
  2068  0FE7                     	;# 
  2069  0FE8                     	;# 
  2070  0FE9                     	;# 
  2071  0FEA                     	;# 
  2072  0FEB                     	;# 
  2073  0FED                     	;# 
  2074  0FEE                     	;# 
  2075  0FEF                     	;# 
  2076  0000                     	;# 
  2077  0001                     	;# 
  2078  0002                     	;# 
  2079  0003                     	;# 
  2080  0004                     	;# 
  2081  0005                     	;# 
  2082  0006                     	;# 
  2083  0007                     	;# 
  2084  0008                     	;# 
  2085  0009                     	;# 
  2086  000A                     	;# 
  2087  000B                     	;# 
  2088  000C                     	;# 
  2089  000D                     	;# 
  2090  000E                     	;# 
  2091  0010                     	;# 
  2092  0011                     	;# 
  2093  0012                     	;# 
  2094  0013                     	;# 
  2095  0014                     	;# 
  2096  0015                     	;# 
  2097  0015                     	;# 
  2098  0016                     	;# 
  2099  0016                     	;# 
  2100  0017                     	;# 
  2101  0018                     	;# 
  2102  0019                     	;# 
  2103  0019                     	;# 
  2104  001A                     	;# 
  2105  001B                     	;# 
  2106  001C                     	;# 
  2107  001D                     	;# 
  2108  001E                     	;# 
  2109  001F                     	;# 
  2110  008C                     	;# 
  2111  008D                     	;# 
  2112  008E                     	;# 
  2113  0090                     	;# 
  2114  0091                     	;# 
  2115  0092                     	;# 
  2116  0093                     	;# 
  2117  0094                     	;# 
  2118  0097                     	;# 
  2119  009B                     	;# 
  2120  009B                     	;# 
  2121  009C                     	;# 
  2122  009D                     	;# 
  2123  009E                     	;# 
  2124  009F                     	;# 
  2125  010C                     	;# 
  2126  010D                     	;# 
  2127  010E                     	;# 
  2128  0111                     	;# 
  2129  0112                     	;# 
  2130  0113                     	;# 
  2131  0114                     	;# 
  2132  0115                     	;# 
  2133  0116                     	;# 
  2134  0117                     	;# 
  2135  0118                     	;# 
  2136  0119                     	;# 
  2137  018C                     	;# 
  2138  018D                     	;# 
  2139  018E                     	;# 
  2140  0197                     	;# 
  2141  0199                     	;# 
  2142  0199                     	;# 
  2143  0199                     	;# 
  2144  019A                     	;# 
  2145  019A                     	;# 
  2146  019A                     	;# 
  2147  019B                     	;# 
  2148  019B                     	;# 
  2149  019B                     	;# 
  2150  019B                     	;# 
  2151  019B                     	;# 
  2152  019C                     	;# 
  2153  019C                     	;# 
  2154  019C                     	;# 
  2155  019D                     	;# 
  2156  019D                     	;# 
  2157  019D                     	;# 
  2158  019E                     	;# 
  2159  019E                     	;# 
  2160  019E                     	;# 
  2161  019F                     	;# 
  2162  019F                     	;# 
  2163  019F                     	;# 
  2164  019F                     	;# 
  2165  019F                     	;# 
  2166  020C                     	;# 
  2167  020D                     	;# 
  2168  020E                     	;# 
  2169  0211                     	;# 
  2170  0211                     	;# 
  2171  0212                     	;# 
  2172  0212                     	;# 
  2173  0213                     	;# 
  2174  0213                     	;# 
  2175  0214                     	;# 
  2176  0214                     	;# 
  2177  0215                     	;# 
  2178  0215                     	;# 
  2179  0215                     	;# 
  2180  0215                     	;# 
  2181  0216                     	;# 
  2182  0216                     	;# 
  2183  0217                     	;# 
  2184  0217                     	;# 
  2185  0219                     	;# 
  2186  021A                     	;# 
  2187  021B                     	;# 
  2188  021C                     	;# 
  2189  021D                     	;# 
  2190  021D                     	;# 
  2191  021E                     	;# 
  2192  021F                     	;# 
  2193  028C                     	;# 
  2194  028D                     	;# 
  2195  028E                     	;# 
  2196  0291                     	;# 
  2197  0291                     	;# 
  2198  0292                     	;# 
  2199  0293                     	;# 
  2200  0294                     	;# 
  2201  0295                     	;# 
  2202  0295                     	;# 
  2203  0296                     	;# 
  2204  0297                     	;# 
  2205  0298                     	;# 
  2206  029F                     	;# 
  2207  030C                     	;# 
  2208  030D                     	;# 
  2209  030E                     	;# 
  2210  0311                     	;# 
  2211  0311                     	;# 
  2212  0312                     	;# 
  2213  0313                     	;# 
  2214  0314                     	;# 
  2215  0315                     	;# 
  2216  0315                     	;# 
  2217  0316                     	;# 
  2218  0317                     	;# 
  2219  0318                     	;# 
  2220  038C                     	;# 
  2221  038D                     	;# 
  2222  038E                     	;# 
  2223  0391                     	;# 
  2224  0392                     	;# 
  2225  0393                     	;# 
  2226  0394                     	;# 
  2227  0395                     	;# 
  2228  0396                     	;# 
  2229  0397                     	;# 
  2230  0398                     	;# 
  2231  0399                     	;# 
  2232  039A                     	;# 
  2233  039C                     	;# 
  2234  039D                     	;# 
  2235  039E                     	;# 
  2236  039F                     	;# 
  2237  0411                     	;# 
  2238  0411                     	;# 
  2239  0412                     	;# 
  2240  0413                     	;# 
  2241  0414                     	;# 
  2242  0415                     	;# 
  2243  0416                     	;# 
  2244  0417                     	;# 
  2245  0418                     	;# 
  2246  0418                     	;# 
  2247  0419                     	;# 
  2248  041A                     	;# 
  2249  041B                     	;# 
  2250  041C                     	;# 
  2251  041D                     	;# 
  2252  041E                     	;# 
  2253  041F                     	;# 
  2254  0498                     	;# 
  2255  0498                     	;# 
  2256  0499                     	;# 
  2257  049A                     	;# 
  2258  049B                     	;# 
  2259  049B                     	;# 
  2260  049C                     	;# 
  2261  049D                     	;# 
  2262  049E                     	;# 
  2263  049F                     	;# 
  2264  0617                     	;# 
  2265  0618                     	;# 
  2266  0619                     	;# 
  2267  0619                     	;# 
  2268  061A                     	;# 
  2269  061B                     	;# 
  2270  061C                     	;# 
  2271  061C                     	;# 
  2272  061F                     	;# 
  2273  0691                     	;# 
  2274  0692                     	;# 
  2275  0693                     	;# 
  2276  0694                     	;# 
  2277  0695                     	;# 
  2278  0696                     	;# 
  2279  0697                     	;# 
  2280  0698                     	;# 
  2281  0699                     	;# 
  2282  0711                     	;# 
  2283  0712                     	;# 
  2284  0713                     	;# 
  2285  0714                     	;# 
  2286  0715                     	;# 
  2287  0716                     	;# 
  2288  0717                     	;# 
  2289  0718                     	;# 
  2290  0719                     	;# 
  2291  0891                     	;# 
  2292  0891                     	;# 
  2293  0891                     	;# 
  2294  0891                     	;# 
  2295  0891                     	;# 
  2296  0891                     	;# 
  2297  0892                     	;# 
  2298  0892                     	;# 
  2299  0892                     	;# 
  2300  0893                     	;# 
  2301  0893                     	;# 
  2302  0893                     	;# 
  2303  0893                     	;# 
  2304  0893                     	;# 
  2305  0893                     	;# 
  2306  0894                     	;# 
  2307  0894                     	;# 
  2308  0894                     	;# 
  2309  0895                     	;# 
  2310  0895                     	;# 
  2311  0895                     	;# 
  2312  0896                     	;# 
  2313  0896                     	;# 
  2314  0896                     	;# 
  2315  089B                     	;# 
  2316  0911                     	;# 
  2317  0912                     	;# 
  2318  0913                     	;# 
  2319  0914                     	;# 
  2320  0915                     	;# 
  2321  0916                     	;# 
  2322  0918                     	;# 
  2323  0919                     	;# 
  2324  091A                     	;# 
  2325  091B                     	;# 
  2326  091C                     	;# 
  2327  091D                     	;# 
  2328  091E                     	;# 
  2329  091F                     	;# 
  2330  0E0F                     	;# 
  2331  0E10                     	;# 
  2332  0E11                     	;# 
  2333  0E12                     	;# 
  2334  0E13                     	;# 
  2335  0E14                     	;# 
  2336  0E15                     	;# 
  2337  0E16                     	;# 
  2338  0E17                     	;# 
  2339  0E18                     	;# 
  2340  0E19                     	;# 
  2341  0E1A                     	;# 
  2342  0E1B                     	;# 
  2343  0E1C                     	;# 
  2344  0E1D                     	;# 
  2345  0E1E                     	;# 
  2346  0E1F                     	;# 
  2347  0E20                     	;# 
  2348  0E21                     	;# 
  2349  0E22                     	;# 
  2350  0E24                     	;# 
  2351  0E25                     	;# 
  2352  0E28                     	;# 
  2353  0E29                     	;# 
  2354  0E2A                     	;# 
  2355  0E2B                     	;# 
  2356  0E2C                     	;# 
  2357  0E2D                     	;# 
  2358  0E2E                     	;# 
  2359  0E2F                     	;# 
  2360  0E90                     	;# 
  2361  0E91                     	;# 
  2362  0E92                     	;# 
  2363  0E94                     	;# 
  2364  0E95                     	;# 
  2365  0E9C                     	;# 
  2366  0E9D                     	;# 
  2367  0E9E                     	;# 
  2368  0E9F                     	;# 
  2369  0EA0                     	;# 
  2370  0EA1                     	;# 
  2371  0EA2                     	;# 
  2372  0EA3                     	;# 
  2373  0EA4                     	;# 
  2374  0EA5                     	;# 
  2375  0EA6                     	;# 
  2376  0EA7                     	;# 
  2377  0F0F                     	;# 
  2378  0F10                     	;# 
  2379  0F11                     	;# 
  2380  0F12                     	;# 
  2381  0F13                     	;# 
  2382  0F14                     	;# 
  2383  0F15                     	;# 
  2384  0F16                     	;# 
  2385  0F17                     	;# 
  2386  0F18                     	;# 
  2387  0F19                     	;# 
  2388  0F1A                     	;# 
  2389  0F1B                     	;# 
  2390  0F1C                     	;# 
  2391  0F1D                     	;# 
  2392  0F1E                     	;# 
  2393  0F1F                     	;# 
  2394  0F20                     	;# 
  2395  0F21                     	;# 
  2396  0F22                     	;# 
  2397  0F23                     	;# 
  2398  0F24                     	;# 
  2399  0F25                     	;# 
  2400  0F26                     	;# 
  2401  0F27                     	;# 
  2402  0F28                     	;# 
  2403  0F29                     	;# 
  2404  0F2A                     	;# 
  2405  0F2B                     	;# 
  2406  0F2C                     	;# 
  2407  0F2D                     	;# 
  2408  0F2E                     	;# 
  2409  0F2F                     	;# 
  2410  0F30                     	;# 
  2411  0F31                     	;# 
  2412  0F32                     	;# 
  2413  0F33                     	;# 
  2414  0F34                     	;# 
  2415  0F35                     	;# 
  2416  0F36                     	;# 
  2417  0F37                     	;# 
  2418  0FE4                     	;# 
  2419  0FE5                     	;# 
  2420  0FE6                     	;# 
  2421  0FE7                     	;# 
  2422  0FE8                     	;# 
  2423  0FE9                     	;# 
  2424  0FEA                     	;# 
  2425  0FEB                     	;# 
  2426  0FED                     	;# 
  2427  0FEE                     	;# 
  2428  0FEF                     	;# 
  2429  0000                     	;# 
  2430  0001                     	;# 
  2431  0002                     	;# 
  2432  0003                     	;# 
  2433  0004                     	;# 
  2434  0005                     	;# 
  2435  0006                     	;# 
  2436  0007                     	;# 
  2437  0008                     	;# 
  2438  0009                     	;# 
  2439  000A                     	;# 
  2440  000B                     	;# 
  2441  000C                     	;# 
  2442  000D                     	;# 
  2443  000E                     	;# 
  2444  0010                     	;# 
  2445  0011                     	;# 
  2446  0012                     	;# 
  2447  0013                     	;# 
  2448  0014                     	;# 
  2449  0015                     	;# 
  2450  0015                     	;# 
  2451  0016                     	;# 
  2452  0016                     	;# 
  2453  0017                     	;# 
  2454  0018                     	;# 
  2455  0019                     	;# 
  2456  0019                     	;# 
  2457  001A                     	;# 
  2458  001B                     	;# 
  2459  001C                     	;# 
  2460  001D                     	;# 
  2461  001E                     	;# 
  2462  001F                     	;# 
  2463  008C                     	;# 
  2464  008D                     	;# 
  2465  008E                     	;# 
  2466  0090                     	;# 
  2467  0091                     	;# 
  2468  0092                     	;# 
  2469  0093                     	;# 
  2470  0094                     	;# 
  2471  0097                     	;# 
  2472  009B                     	;# 
  2473  009B                     	;# 
  2474  009C                     	;# 
  2475  009D                     	;# 
  2476  009E                     	;# 
  2477  009F                     	;# 
  2478  010C                     	;# 
  2479  010D                     	;# 
  2480  010E                     	;# 
  2481  0111                     	;# 
  2482  0112                     	;# 
  2483  0113                     	;# 
  2484  0114                     	;# 
  2485  0115                     	;# 
  2486  0116                     	;# 
  2487  0117                     	;# 
  2488  0118                     	;# 
  2489  0119                     	;# 
  2490  018C                     	;# 
  2491  018D                     	;# 
  2492  018E                     	;# 
  2493  0197                     	;# 
  2494  0199                     	;# 
  2495  0199                     	;# 
  2496  0199                     	;# 
  2497  019A                     	;# 
  2498  019A                     	;# 
  2499  019A                     	;# 
  2500  019B                     	;# 
  2501  019B                     	;# 
  2502  019B                     	;# 
  2503  019B                     	;# 
  2504  019B                     	;# 
  2505  019C                     	;# 
  2506  019C                     	;# 
  2507  019C                     	;# 
  2508  019D                     	;# 
  2509  019D                     	;# 
  2510  019D                     	;# 
  2511  019E                     	;# 
  2512  019E                     	;# 
  2513  019E                     	;# 
  2514  019F                     	;# 
  2515  019F                     	;# 
  2516  019F                     	;# 
  2517  019F                     	;# 
  2518  019F                     	;# 
  2519  020C                     	;# 
  2520  020D                     	;# 
  2521  020E                     	;# 
  2522  0211                     	;# 
  2523  0211                     	;# 
  2524  0212                     	;# 
  2525  0212                     	;# 
  2526  0213                     	;# 
  2527  0213                     	;# 
  2528  0214                     	;# 
  2529  0214                     	;# 
  2530  0215                     	;# 
  2531  0215                     	;# 
  2532  0215                     	;# 
  2533  0215                     	;# 
  2534  0216                     	;# 
  2535  0216                     	;# 
  2536  0217                     	;# 
  2537  0217                     	;# 
  2538  0219                     	;# 
  2539  021A                     	;# 
  2540  021B                     	;# 
  2541  021C                     	;# 
  2542  021D                     	;# 
  2543  021D                     	;# 
  2544  021E                     	;# 
  2545  021F                     	;# 
  2546  028C                     	;# 
  2547  028D                     	;# 
  2548  028E                     	;# 
  2549  0291                     	;# 
  2550  0291                     	;# 
  2551  0292                     	;# 
  2552  0293                     	;# 
  2553  0294                     	;# 
  2554  0295                     	;# 
  2555  0295                     	;# 
  2556  0296                     	;# 
  2557  0297                     	;# 
  2558  0298                     	;# 
  2559  029F                     	;# 
  2560  030C                     	;# 
  2561  030D                     	;# 
  2562  030E                     	;# 
  2563  0311                     	;# 
  2564  0311                     	;# 
  2565  0312                     	;# 
  2566  0313                     	;# 
  2567  0314                     	;# 
  2568  0315                     	;# 
  2569  0315                     	;# 
  2570  0316                     	;# 
  2571  0317                     	;# 
  2572  0318                     	;# 
  2573  038C                     	;# 
  2574  038D                     	;# 
  2575  038E                     	;# 
  2576  0391                     	;# 
  2577  0392                     	;# 
  2578  0393                     	;# 
  2579  0394                     	;# 
  2580  0395                     	;# 
  2581  0396                     	;# 
  2582  0397                     	;# 
  2583  0398                     	;# 
  2584  0399                     	;# 
  2585  039A                     	;# 
  2586  039C                     	;# 
  2587  039D                     	;# 
  2588  039E                     	;# 
  2589  039F                     	;# 
  2590  0411                     	;# 
  2591  0411                     	;# 
  2592  0412                     	;# 
  2593  0413                     	;# 
  2594  0414                     	;# 
  2595  0415                     	;# 
  2596  0416                     	;# 
  2597  0417                     	;# 
  2598  0418                     	;# 
  2599  0418                     	;# 
  2600  0419                     	;# 
  2601  041A                     	;# 
  2602  041B                     	;# 
  2603  041C                     	;# 
  2604  041D                     	;# 
  2605  041E                     	;# 
  2606  041F                     	;# 
  2607  0498                     	;# 
  2608  0498                     	;# 
  2609  0499                     	;# 
  2610  049A                     	;# 
  2611  049B                     	;# 
  2612  049B                     	;# 
  2613  049C                     	;# 
  2614  049D                     	;# 
  2615  049E                     	;# 
  2616  049F                     	;# 
  2617  0617                     	;# 
  2618  0618                     	;# 
  2619  0619                     	;# 
  2620  0619                     	;# 
  2621  061A                     	;# 
  2622  061B                     	;# 
  2623  061C                     	;# 
  2624  061C                     	;# 
  2625  061F                     	;# 
  2626  0691                     	;# 
  2627  0692                     	;# 
  2628  0693                     	;# 
  2629  0694                     	;# 
  2630  0695                     	;# 
  2631  0696                     	;# 
  2632  0697                     	;# 
  2633  0698                     	;# 
  2634  0699                     	;# 
  2635  0711                     	;# 
  2636  0712                     	;# 
  2637  0713                     	;# 
  2638  0714                     	;# 
  2639  0715                     	;# 
  2640  0716                     	;# 
  2641  0717                     	;# 
  2642  0718                     	;# 
  2643  0719                     	;# 
  2644  0891                     	;# 
  2645  0891                     	;# 
  2646  0891                     	;# 
  2647  0891                     	;# 
  2648  0891                     	;# 
  2649  0891                     	;# 
  2650  0892                     	;# 
  2651  0892                     	;# 
  2652  0892                     	;# 
  2653  0893                     	;# 
  2654  0893                     	;# 
  2655  0893                     	;# 
  2656  0893                     	;# 
  2657  0893                     	;# 
  2658  0893                     	;# 
  2659  0894                     	;# 
  2660  0894                     	;# 
  2661  0894                     	;# 
  2662  0895                     	;# 
  2663  0895                     	;# 
  2664  0895                     	;# 
  2665  0896                     	;# 
  2666  0896                     	;# 
  2667  0896                     	;# 
  2668  089B                     	;# 
  2669  0911                     	;# 
  2670  0912                     	;# 
  2671  0913                     	;# 
  2672  0914                     	;# 
  2673  0915                     	;# 
  2674  0916                     	;# 
  2675  0918                     	;# 
  2676  0919                     	;# 
  2677  091A                     	;# 
  2678  091B                     	;# 
  2679  091C                     	;# 
  2680  091D                     	;# 
  2681  091E                     	;# 
  2682  091F                     	;# 
  2683  0E0F                     	;# 
  2684  0E10                     	;# 
  2685  0E11                     	;# 
  2686  0E12                     	;# 
  2687  0E13                     	;# 
  2688  0E14                     	;# 
  2689  0E15                     	;# 
  2690  0E16                     	;# 
  2691  0E17                     	;# 
  2692  0E18                     	;# 
  2693  0E19                     	;# 
  2694  0E1A                     	;# 
  2695  0E1B                     	;# 
  2696  0E1C                     	;# 
  2697  0E1D                     	;# 
  2698  0E1E                     	;# 
  2699  0E1F                     	;# 
  2700  0E20                     	;# 
  2701  0E21                     	;# 
  2702  0E22                     	;# 
  2703  0E24                     	;# 
  2704  0E25                     	;# 
  2705  0E28                     	;# 
  2706  0E29                     	;# 
  2707  0E2A                     	;# 
  2708  0E2B                     	;# 
  2709  0E2C                     	;# 
  2710  0E2D                     	;# 
  2711  0E2E                     	;# 
  2712  0E2F                     	;# 
  2713  0E90                     	;# 
  2714  0E91                     	;# 
  2715  0E92                     	;# 
  2716  0E94                     	;# 
  2717  0E95                     	;# 
  2718  0E9C                     	;# 
  2719  0E9D                     	;# 
  2720  0E9E                     	;# 
  2721  0E9F                     	;# 
  2722  0EA0                     	;# 
  2723  0EA1                     	;# 
  2724  0EA2                     	;# 
  2725  0EA3                     	;# 
  2726  0EA4                     	;# 
  2727  0EA5                     	;# 
  2728  0EA6                     	;# 
  2729  0EA7                     	;# 
  2730  0F0F                     	;# 
  2731  0F10                     	;# 
  2732  0F11                     	;# 
  2733  0F12                     	;# 
  2734  0F13                     	;# 
  2735  0F14                     	;# 
  2736  0F15                     	;# 
  2737  0F16                     	;# 
  2738  0F17                     	;# 
  2739  0F18                     	;# 
  2740  0F19                     	;# 
  2741  0F1A                     	;# 
  2742  0F1B                     	;# 
  2743  0F1C                     	;# 
  2744  0F1D                     	;# 
  2745  0F1E                     	;# 
  2746  0F1F                     	;# 
  2747  0F20                     	;# 
  2748  0F21                     	;# 
  2749  0F22                     	;# 
  2750  0F23                     	;# 
  2751  0F24                     	;# 
  2752  0F25                     	;# 
  2753  0F26                     	;# 
  2754  0F27                     	;# 
  2755  0F28                     	;# 
  2756  0F29                     	;# 
  2757  0F2A                     	;# 
  2758  0F2B                     	;# 
  2759  0F2C                     	;# 
  2760  0F2D                     	;# 
  2761  0F2E                     	;# 
  2762  0F2F                     	;# 
  2763  0F30                     	;# 
  2764  0F31                     	;# 
  2765  0F32                     	;# 
  2766  0F33                     	;# 
  2767  0F34                     	;# 
  2768  0F35                     	;# 
  2769  0F36                     	;# 
  2770  0F37                     	;# 
  2771  0FE4                     	;# 
  2772  0FE5                     	;# 
  2773  0FE6                     	;# 
  2774  0FE7                     	;# 
  2775  0FE8                     	;# 
  2776  0FE9                     	;# 
  2777  0FEA                     	;# 
  2778  0FEB                     	;# 
  2779  0FED                     	;# 
  2780  0FEE                     	;# 
  2781  0FEF                     	;# 
  2782  0000                     	;# 
  2783  0001                     	;# 
  2784  0002                     	;# 
  2785  0003                     	;# 
  2786  0004                     	;# 
  2787  0005                     	;# 
  2788  0006                     	;# 
  2789  0007                     	;# 
  2790  0008                     	;# 
  2791  0009                     	;# 
  2792  000A                     	;# 
  2793  000B                     	;# 
  2794  000C                     	;# 
  2795  000D                     	;# 
  2796  000E                     	;# 
  2797  0010                     	;# 
  2798  0011                     	;# 
  2799  0012                     	;# 
  2800  0013                     	;# 
  2801  0014                     	;# 
  2802  0015                     	;# 
  2803  0015                     	;# 
  2804  0016                     	;# 
  2805  0016                     	;# 
  2806  0017                     	;# 
  2807  0018                     	;# 
  2808  0019                     	;# 
  2809  0019                     	;# 
  2810  001A                     	;# 
  2811  001B                     	;# 
  2812  001C                     	;# 
  2813  001D                     	;# 
  2814  001E                     	;# 
  2815  001F                     	;# 
  2816  008C                     	;# 
  2817  008D                     	;# 
  2818  008E                     	;# 
  2819  0090                     	;# 
  2820  0091                     	;# 
  2821  0092                     	;# 
  2822  0093                     	;# 
  2823  0094                     	;# 
  2824  0097                     	;# 
  2825  009B                     	;# 
  2826  009B                     	;# 
  2827  009C                     	;# 
  2828  009D                     	;# 
  2829  009E                     	;# 
  2830  009F                     	;# 
  2831  010C                     	;# 
  2832  010D                     	;# 
  2833  010E                     	;# 
  2834  0111                     	;# 
  2835  0112                     	;# 
  2836  0113                     	;# 
  2837  0114                     	;# 
  2838  0115                     	;# 
  2839  0116                     	;# 
  2840  0117                     	;# 
  2841  0118                     	;# 
  2842  0119                     	;# 
  2843  018C                     	;# 
  2844  018D                     	;# 
  2845  018E                     	;# 
  2846  0197                     	;# 
  2847  0199                     	;# 
  2848  0199                     	;# 
  2849  0199                     	;# 
  2850  019A                     	;# 
  2851  019A                     	;# 
  2852  019A                     	;# 
  2853  019B                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019B                     	;# 
  2857  019B                     	;# 
  2858  019C                     	;# 
  2859  019C                     	;# 
  2860  019C                     	;# 
  2861  019D                     	;# 
  2862  019D                     	;# 
  2863  019D                     	;# 
  2864  019E                     	;# 
  2865  019E                     	;# 
  2866  019E                     	;# 
  2867  019F                     	;# 
  2868  019F                     	;# 
  2869  019F                     	;# 
  2870  019F                     	;# 
  2871  019F                     	;# 
  2872  020C                     	;# 
  2873  020D                     	;# 
  2874  020E                     	;# 
  2875  0211                     	;# 
  2876  0211                     	;# 
  2877  0212                     	;# 
  2878  0212                     	;# 
  2879  0213                     	;# 
  2880  0213                     	;# 
  2881  0214                     	;# 
  2882  0214                     	;# 
  2883  0215                     	;# 
  2884  0215                     	;# 
  2885  0215                     	;# 
  2886  0215                     	;# 
  2887  0216                     	;# 
  2888  0216                     	;# 
  2889  0217                     	;# 
  2890  0217                     	;# 
  2891  0219                     	;# 
  2892  021A                     	;# 
  2893  021B                     	;# 
  2894  021C                     	;# 
  2895  021D                     	;# 
  2896  021D                     	;# 
  2897  021E                     	;# 
  2898  021F                     	;# 
  2899  028C                     	;# 
  2900  028D                     	;# 
  2901  028E                     	;# 
  2902  0291                     	;# 
  2903  0291                     	;# 
  2904  0292                     	;# 
  2905  0293                     	;# 
  2906  0294                     	;# 
  2907  0295                     	;# 
  2908  0295                     	;# 
  2909  0296                     	;# 
  2910  0297                     	;# 
  2911  0298                     	;# 
  2912  029F                     	;# 
  2913  030C                     	;# 
  2914  030D                     	;# 
  2915  030E                     	;# 
  2916  0311                     	;# 
  2917  0311                     	;# 
  2918  0312                     	;# 
  2919  0313                     	;# 
  2920  0314                     	;# 
  2921  0315                     	;# 
  2922  0315                     	;# 
  2923  0316                     	;# 
  2924  0317                     	;# 
  2925  0318                     	;# 
  2926  038C                     	;# 
  2927  038D                     	;# 
  2928  038E                     	;# 
  2929  0391                     	;# 
  2930  0392                     	;# 
  2931  0393                     	;# 
  2932  0394                     	;# 
  2933  0395                     	;# 
  2934  0396                     	;# 
  2935  0397                     	;# 
  2936  0398                     	;# 
  2937  0399                     	;# 
  2938  039A                     	;# 
  2939  039C                     	;# 
  2940  039D                     	;# 
  2941  039E                     	;# 
  2942  039F                     	;# 
  2943  0411                     	;# 
  2944  0411                     	;# 
  2945  0412                     	;# 
  2946  0413                     	;# 
  2947  0414                     	;# 
  2948  0415                     	;# 
  2949  0416                     	;# 
  2950  0417                     	;# 
  2951  0418                     	;# 
  2952  0418                     	;# 
  2953  0419                     	;# 
  2954  041A                     	;# 
  2955  041B                     	;# 
  2956  041C                     	;# 
  2957  041D                     	;# 
  2958  041E                     	;# 
  2959  041F                     	;# 
  2960  0498                     	;# 
  2961  0498                     	;# 
  2962  0499                     	;# 
  2963  049A                     	;# 
  2964  049B                     	;# 
  2965  049B                     	;# 
  2966  049C                     	;# 
  2967  049D                     	;# 
  2968  049E                     	;# 
  2969  049F                     	;# 
  2970  0617                     	;# 
  2971  0618                     	;# 
  2972  0619                     	;# 
  2973  0619                     	;# 
  2974  061A                     	;# 
  2975  061B                     	;# 
  2976  061C                     	;# 
  2977  061C                     	;# 
  2978  061F                     	;# 
  2979  0691                     	;# 
  2980  0692                     	;# 
  2981  0693                     	;# 
  2982  0694                     	;# 
  2983  0695                     	;# 
  2984  0696                     	;# 
  2985  0697                     	;# 
  2986  0698                     	;# 
  2987  0699                     	;# 
  2988  0711                     	;# 
  2989  0712                     	;# 
  2990  0713                     	;# 
  2991  0714                     	;# 
  2992  0715                     	;# 
  2993  0716                     	;# 
  2994  0717                     	;# 
  2995  0718                     	;# 
  2996  0719                     	;# 
  2997  0891                     	;# 
  2998  0891                     	;# 
  2999  0891                     	;# 
  3000  0891                     	;# 
  3001  0891                     	;# 
  3002  0891                     	;# 
  3003  0892                     	;# 
  3004  0892                     	;# 
  3005  0892                     	;# 
  3006  0893                     	;# 
  3007  0893                     	;# 
  3008  0893                     	;# 
  3009  0893                     	;# 
  3010  0893                     	;# 
  3011  0893                     	;# 
  3012  0894                     	;# 
  3013  0894                     	;# 
  3014  0894                     	;# 
  3015  0895                     	;# 
  3016  0895                     	;# 
  3017  0895                     	;# 
  3018  0896                     	;# 
  3019  0896                     	;# 
  3020  0896                     	;# 
  3021  089B                     	;# 
  3022  0911                     	;# 
  3023  0912                     	;# 
  3024  0913                     	;# 
  3025  0914                     	;# 
  3026  0915                     	;# 
  3027  0916                     	;# 
  3028  0918                     	;# 
  3029  0919                     	;# 
  3030  091A                     	;# 
  3031  091B                     	;# 
  3032  091C                     	;# 
  3033  091D                     	;# 
  3034  091E                     	;# 
  3035  091F                     	;# 
  3036  0E0F                     	;# 
  3037  0E10                     	;# 
  3038  0E11                     	;# 
  3039  0E12                     	;# 
  3040  0E13                     	;# 
  3041  0E14                     	;# 
  3042  0E15                     	;# 
  3043  0E16                     	;# 
  3044  0E17                     	;# 
  3045  0E18                     	;# 
  3046  0E19                     	;# 
  3047  0E1A                     	;# 
  3048  0E1B                     	;# 
  3049  0E1C                     	;# 
  3050  0E1D                     	;# 
  3051  0E1E                     	;# 
  3052  0E1F                     	;# 
  3053  0E20                     	;# 
  3054  0E21                     	;# 
  3055  0E22                     	;# 
  3056  0E24                     	;# 
  3057  0E25                     	;# 
  3058  0E28                     	;# 
  3059  0E29                     	;# 
  3060  0E2A                     	;# 
  3061  0E2B                     	;# 
  3062  0E2C                     	;# 
  3063  0E2D                     	;# 
  3064  0E2E                     	;# 
  3065  0E2F                     	;# 
  3066  0E90                     	;# 
  3067  0E91                     	;# 
  3068  0E92                     	;# 
  3069  0E94                     	;# 
  3070  0E95                     	;# 
  3071  0E9C                     	;# 
  3072  0E9D                     	;# 
  3073  0E9E                     	;# 
  3074  0E9F                     	;# 
  3075  0EA0                     	;# 
  3076  0EA1                     	;# 
  3077  0EA2                     	;# 
  3078  0EA3                     	;# 
  3079  0EA4                     	;# 
  3080  0EA5                     	;# 
  3081  0EA6                     	;# 
  3082  0EA7                     	;# 
  3083  0F0F                     	;# 
  3084  0F10                     	;# 
  3085  0F11                     	;# 
  3086  0F12                     	;# 
  3087  0F13                     	;# 
  3088  0F14                     	;# 
  3089  0F15                     	;# 
  3090  0F16                     	;# 
  3091  0F17                     	;# 
  3092  0F18                     	;# 
  3093  0F19                     	;# 
  3094  0F1A                     	;# 
  3095  0F1B                     	;# 
  3096  0F1C                     	;# 
  3097  0F1D                     	;# 
  3098  0F1E                     	;# 
  3099  0F1F                     	;# 
  3100  0F20                     	;# 
  3101  0F21                     	;# 
  3102  0F22                     	;# 
  3103  0F23                     	;# 
  3104  0F24                     	;# 
  3105  0F25                     	;# 
  3106  0F26                     	;# 
  3107  0F27                     	;# 
  3108  0F28                     	;# 
  3109  0F29                     	;# 
  3110  0F2A                     	;# 
  3111  0F2B                     	;# 
  3112  0F2C                     	;# 
  3113  0F2D                     	;# 
  3114  0F2E                     	;# 
  3115  0F2F                     	;# 
  3116  0F30                     	;# 
  3117  0F31                     	;# 
  3118  0F32                     	;# 
  3119  0F33                     	;# 
  3120  0F34                     	;# 
  3121  0F35                     	;# 
  3122  0F36                     	;# 
  3123  0F37                     	;# 
  3124  0FE4                     	;# 
  3125  0FE5                     	;# 
  3126  0FE6                     	;# 
  3127  0FE7                     	;# 
  3128  0FE8                     	;# 
  3129  0FE9                     	;# 
  3130  0FEA                     	;# 
  3131  0FEB                     	;# 
  3132  0FED                     	;# 
  3133  0FEE                     	;# 
  3134  0FEF                     	;# 
  3135  0000                     	;# 
  3136  0001                     	;# 
  3137  0002                     	;# 
  3138  0003                     	;# 
  3139  0004                     	;# 
  3140  0005                     	;# 
  3141  0006                     	;# 
  3142  0007                     	;# 
  3143  0008                     	;# 
  3144  0009                     	;# 
  3145  000A                     	;# 
  3146  000B                     	;# 
  3147  000C                     	;# 
  3148  000D                     	;# 
  3149  000E                     	;# 
  3150  0010                     	;# 
  3151  0011                     	;# 
  3152  0012                     	;# 
  3153  0013                     	;# 
  3154  0014                     	;# 
  3155  0015                     	;# 
  3156  0015                     	;# 
  3157  0016                     	;# 
  3158  0016                     	;# 
  3159  0017                     	;# 
  3160  0018                     	;# 
  3161  0019                     	;# 
  3162  0019                     	;# 
  3163  001A                     	;# 
  3164  001B                     	;# 
  3165  001C                     	;# 
  3166  001D                     	;# 
  3167  001E                     	;# 
  3168  001F                     	;# 
  3169  008C                     	;# 
  3170  008D                     	;# 
  3171  008E                     	;# 
  3172  0090                     	;# 
  3173  0091                     	;# 
  3174  0092                     	;# 
  3175  0093                     	;# 
  3176  0094                     	;# 
  3177  0097                     	;# 
  3178  009B                     	;# 
  3179  009B                     	;# 
  3180  009C                     	;# 
  3181  009D                     	;# 
  3182  009E                     	;# 
  3183  009F                     	;# 
  3184  010C                     	;# 
  3185  010D                     	;# 
  3186  010E                     	;# 
  3187  0111                     	;# 
  3188  0112                     	;# 
  3189  0113                     	;# 
  3190  0114                     	;# 
  3191  0115                     	;# 
  3192  0116                     	;# 
  3193  0117                     	;# 
  3194  0118                     	;# 
  3195  0119                     	;# 
  3196  018C                     	;# 
  3197  018D                     	;# 
  3198  018E                     	;# 
  3199  0197                     	;# 
  3200  0199                     	;# 
  3201  0199                     	;# 
  3202  0199                     	;# 
  3203  019A                     	;# 
  3204  019A                     	;# 
  3205  019A                     	;# 
  3206  019B                     	;# 
  3207  019B                     	;# 
  3208  019B                     	;# 
  3209  019B                     	;# 
  3210  019B                     	;# 
  3211  019C                     	;# 
  3212  019C                     	;# 
  3213  019C                     	;# 
  3214  019D                     	;# 
  3215  019D                     	;# 
  3216  019D                     	;# 
  3217  019E                     	;# 
  3218  019E                     	;# 
  3219  019E                     	;# 
  3220  019F                     	;# 
  3221  019F                     	;# 
  3222  019F                     	;# 
  3223  019F                     	;# 
  3224  019F                     	;# 
  3225  020C                     	;# 
  3226  020D                     	;# 
  3227  020E                     	;# 
  3228  0211                     	;# 
  3229  0211                     	;# 
  3230  0212                     	;# 
  3231  0212                     	;# 
  3232  0213                     	;# 
  3233  0213                     	;# 
  3234  0214                     	;# 
  3235  0214                     	;# 
  3236  0215                     	;# 
  3237  0215                     	;# 
  3238  0215                     	;# 
  3239  0215                     	;# 
  3240  0216                     	;# 
  3241  0216                     	;# 
  3242  0217                     	;# 
  3243  0217                     	;# 
  3244  0219                     	;# 
  3245  021A                     	;# 
  3246  021B                     	;# 
  3247  021C                     	;# 
  3248  021D                     	;# 
  3249  021D                     	;# 
  3250  021E                     	;# 
  3251  021F                     	;# 
  3252  028C                     	;# 
  3253  028D                     	;# 
  3254  028E                     	;# 
  3255  0291                     	;# 
  3256  0291                     	;# 
  3257  0292                     	;# 
  3258  0293                     	;# 
  3259  0294                     	;# 
  3260  0295                     	;# 
  3261  0295                     	;# 
  3262  0296                     	;# 
  3263  0297                     	;# 
  3264  0298                     	;# 
  3265  029F                     	;# 
  3266  030C                     	;# 
  3267  030D                     	;# 
  3268  030E                     	;# 
  3269  0311                     	;# 
  3270  0311                     	;# 
  3271  0312                     	;# 
  3272  0313                     	;# 
  3273  0314                     	;# 
  3274  0315                     	;# 
  3275  0315                     	;# 
  3276  0316                     	;# 
  3277  0317                     	;# 
  3278  0318                     	;# 
  3279  038C                     	;# 
  3280  038D                     	;# 
  3281  038E                     	;# 
  3282  0391                     	;# 
  3283  0392                     	;# 
  3284  0393                     	;# 
  3285  0394                     	;# 
  3286  0395                     	;# 
  3287  0396                     	;# 
  3288  0397                     	;# 
  3289  0398                     	;# 
  3290  0399                     	;# 
  3291  039A                     	;# 
  3292  039C                     	;# 
  3293  039D                     	;# 
  3294  039E                     	;# 
  3295  039F                     	;# 
  3296  0411                     	;# 
  3297  0411                     	;# 
  3298  0412                     	;# 
  3299  0413                     	;# 
  3300  0414                     	;# 
  3301  0415                     	;# 
  3302  0416                     	;# 
  3303  0417                     	;# 
  3304  0418                     	;# 
  3305  0418                     	;# 
  3306  0419                     	;# 
  3307  041A                     	;# 
  3308  041B                     	;# 
  3309  041C                     	;# 
  3310  041D                     	;# 
  3311  041E                     	;# 
  3312  041F                     	;# 
  3313  0498                     	;# 
  3314  0498                     	;# 
  3315  0499                     	;# 
  3316  049A                     	;# 
  3317  049B                     	;# 
  3318  049B                     	;# 
  3319  049C                     	;# 
  3320  049D                     	;# 
  3321  049E                     	;# 
  3322  049F                     	;# 
  3323  0617                     	;# 
  3324  0618                     	;# 
  3325  0619                     	;# 
  3326  0619                     	;# 
  3327  061A                     	;# 
  3328  061B                     	;# 
  3329  061C                     	;# 
  3330  061C                     	;# 
  3331  061F                     	;# 
  3332  0691                     	;# 
  3333  0692                     	;# 
  3334  0693                     	;# 
  3335  0694                     	;# 
  3336  0695                     	;# 
  3337  0696                     	;# 
  3338  0697                     	;# 
  3339  0698                     	;# 
  3340  0699                     	;# 
  3341  0711                     	;# 
  3342  0712                     	;# 
  3343  0713                     	;# 
  3344  0714                     	;# 
  3345  0715                     	;# 
  3346  0716                     	;# 
  3347  0717                     	;# 
  3348  0718                     	;# 
  3349  0719                     	;# 
  3350  0891                     	;# 
  3351  0891                     	;# 
  3352  0891                     	;# 
  3353  0891                     	;# 
  3354  0891                     	;# 
  3355  0891                     	;# 
  3356  0892                     	;# 
  3357  0892                     	;# 
  3358  0892                     	;# 
  3359  0893                     	;# 
  3360  0893                     	;# 
  3361  0893                     	;# 
  3362  0893                     	;# 
  3363  0893                     	;# 
  3364  0893                     	;# 
  3365  0894                     	;# 
  3366  0894                     	;# 
  3367  0894                     	;# 
  3368  0895                     	;# 
  3369  0895                     	;# 
  3370  0895                     	;# 
  3371  0896                     	;# 
  3372  0896                     	;# 
  3373  0896                     	;# 
  3374  089B                     	;# 
  3375  0911                     	;# 
  3376  0912                     	;# 
  3377  0913                     	;# 
  3378  0914                     	;# 
  3379  0915                     	;# 
  3380  0916                     	;# 
  3381  0918                     	;# 
  3382  0919                     	;# 
  3383  091A                     	;# 
  3384  091B                     	;# 
  3385  091C                     	;# 
  3386  091D                     	;# 
  3387  091E                     	;# 
  3388  091F                     	;# 
  3389  0E0F                     	;# 
  3390  0E10                     	;# 
  3391  0E11                     	;# 
  3392  0E12                     	;# 
  3393  0E13                     	;# 
  3394  0E14                     	;# 
  3395  0E15                     	;# 
  3396  0E16                     	;# 
  3397  0E17                     	;# 
  3398  0E18                     	;# 
  3399  0E19                     	;# 
  3400  0E1A                     	;# 
  3401  0E1B                     	;# 
  3402  0E1C                     	;# 
  3403  0E1D                     	;# 
  3404  0E1E                     	;# 
  3405  0E1F                     	;# 
  3406  0E20                     	;# 
  3407  0E21                     	;# 
  3408  0E22                     	;# 
  3409  0E24                     	;# 
  3410  0E25                     	;# 
  3411  0E28                     	;# 
  3412  0E29                     	;# 
  3413  0E2A                     	;# 
  3414  0E2B                     	;# 
  3415  0E2C                     	;# 
  3416  0E2D                     	;# 
  3417  0E2E                     	;# 
  3418  0E2F                     	;# 
  3419  0E90                     	;# 
  3420  0E91                     	;# 
  3421  0E92                     	;# 
  3422  0E94                     	;# 
  3423  0E95                     	;# 
  3424  0E9C                     	;# 
  3425  0E9D                     	;# 
  3426  0E9E                     	;# 
  3427  0E9F                     	;# 
  3428  0EA0                     	;# 
  3429  0EA1                     	;# 
  3430  0EA2                     	;# 
  3431  0EA3                     	;# 
  3432  0EA4                     	;# 
  3433  0EA5                     	;# 
  3434  0EA6                     	;# 
  3435  0EA7                     	;# 
  3436  0F0F                     	;# 
  3437  0F10                     	;# 
  3438  0F11                     	;# 
  3439  0F12                     	;# 
  3440  0F13                     	;# 
  3441  0F14                     	;# 
  3442  0F15                     	;# 
  3443  0F16                     	;# 
  3444  0F17                     	;# 
  3445  0F18                     	;# 
  3446  0F19                     	;# 
  3447  0F1A                     	;# 
  3448  0F1B                     	;# 
  3449  0F1C                     	;# 
  3450  0F1D                     	;# 
  3451  0F1E                     	;# 
  3452  0F1F                     	;# 
  3453  0F20                     	;# 
  3454  0F21                     	;# 
  3455  0F22                     	;# 
  3456  0F23                     	;# 
  3457  0F24                     	;# 
  3458  0F25                     	;# 
  3459  0F26                     	;# 
  3460  0F27                     	;# 
  3461  0F28                     	;# 
  3462  0F29                     	;# 
  3463  0F2A                     	;# 
  3464  0F2B                     	;# 
  3465  0F2C                     	;# 
  3466  0F2D                     	;# 
  3467  0F2E                     	;# 
  3468  0F2F                     	;# 
  3469  0F30                     	;# 
  3470  0F31                     	;# 
  3471  0F32                     	;# 
  3472  0F33                     	;# 
  3473  0F34                     	;# 
  3474  0F35                     	;# 
  3475  0F36                     	;# 
  3476  0F37                     	;# 
  3477  0FE4                     	;# 
  3478  0FE5                     	;# 
  3479  0FE6                     	;# 
  3480  0FE7                     	;# 
  3481  0FE8                     	;# 
  3482  0FE9                     	;# 
  3483  0FEA                     	;# 
  3484  0FEB                     	;# 
  3485  0FED                     	;# 
  3486  0FEE                     	;# 
  3487  0FEF                     	;# 
  3488  0000                     	;# 
  3489  0001                     	;# 
  3490  0002                     	;# 
  3491  0003                     	;# 
  3492  0004                     	;# 
  3493  0005                     	;# 
  3494  0006                     	;# 
  3495  0007                     	;# 
  3496  0008                     	;# 
  3497  0009                     	;# 
  3498  000A                     	;# 
  3499  000B                     	;# 
  3500  000C                     	;# 
  3501  000D                     	;# 
  3502  000E                     	;# 
  3503  0010                     	;# 
  3504  0011                     	;# 
  3505  0012                     	;# 
  3506  0013                     	;# 
  3507  0014                     	;# 
  3508  0015                     	;# 
  3509  0015                     	;# 
  3510  0016                     	;# 
  3511  0016                     	;# 
  3512  0017                     	;# 
  3513  0018                     	;# 
  3514  0019                     	;# 
  3515  0019                     	;# 
  3516  001A                     	;# 
  3517  001B                     	;# 
  3518  001C                     	;# 
  3519  001D                     	;# 
  3520  001E                     	;# 
  3521  001F                     	;# 
  3522  008C                     	;# 
  3523  008D                     	;# 
  3524  008E                     	;# 
  3525  0090                     	;# 
  3526  0091                     	;# 
  3527  0092                     	;# 
  3528  0093                     	;# 
  3529  0094                     	;# 
  3530  0097                     	;# 
  3531  009B                     	;# 
  3532  009B                     	;# 
  3533  009C                     	;# 
  3534  009D                     	;# 
  3535  009E                     	;# 
  3536  009F                     	;# 
  3537  010C                     	;# 
  3538  010D                     	;# 
  3539  010E                     	;# 
  3540  0111                     	;# 
  3541  0112                     	;# 
  3542  0113                     	;# 
  3543  0114                     	;# 
  3544  0115                     	;# 
  3545  0116                     	;# 
  3546  0117                     	;# 
  3547  0118                     	;# 
  3548  0119                     	;# 
  3549  018C                     	;# 
  3550  018D                     	;# 
  3551  018E                     	;# 
  3552  0197                     	;# 
  3553  0199                     	;# 
  3554  0199                     	;# 
  3555  0199                     	;# 
  3556  019A                     	;# 
  3557  019A                     	;# 
  3558  019A                     	;# 
  3559  019B                     	;# 
  3560  019B                     	;# 
  3561  019B                     	;# 
  3562  019B                     	;# 
  3563  019B                     	;# 
  3564  019C                     	;# 
  3565  019C                     	;# 
  3566  019C                     	;# 
  3567  019D                     	;# 
  3568  019D                     	;# 
  3569  019D                     	;# 
  3570  019E                     	;# 
  3571  019E                     	;# 
  3572  019E                     	;# 
  3573  019F                     	;# 
  3574  019F                     	;# 
  3575  019F                     	;# 
  3576  019F                     	;# 
  3577  019F                     	;# 
  3578  020C                     	;# 
  3579  020D                     	;# 
  3580  020E                     	;# 
  3581  0211                     	;# 
  3582  0211                     	;# 
  3583  0212                     	;# 
  3584  0212                     	;# 
  3585  0213                     	;# 
  3586  0213                     	;# 
  3587  0214                     	;# 
  3588  0214                     	;# 
  3589  0215                     	;# 
  3590  0215                     	;# 
  3591  0215                     	;# 
  3592  0215                     	;# 
  3593  0216                     	;# 
  3594  0216                     	;# 
  3595  0217                     	;# 
  3596  0217                     	;# 
  3597  0219                     	;# 
  3598  021A                     	;# 
  3599  021B                     	;# 
  3600  021C                     	;# 
  3601  021D                     	;# 
  3602  021D                     	;# 
  3603  021E                     	;# 
  3604  021F                     	;# 
  3605  028C                     	;# 
  3606  028D                     	;# 
  3607  028E                     	;# 
  3608  0291                     	;# 
  3609  0291                     	;# 
  3610  0292                     	;# 
  3611  0293                     	;# 
  3612  0294                     	;# 
  3613  0295                     	;# 
  3614  0295                     	;# 
  3615  0296                     	;# 
  3616  0297                     	;# 
  3617  0298                     	;# 
  3618  029F                     	;# 
  3619  030C                     	;# 
  3620  030D                     	;# 
  3621  030E                     	;# 
  3622  0311                     	;# 
  3623  0311                     	;# 
  3624  0312                     	;# 
  3625  0313                     	;# 
  3626  0314                     	;# 
  3627  0315                     	;# 
  3628  0315                     	;# 
  3629  0316                     	;# 
  3630  0317                     	;# 
  3631  0318                     	;# 
  3632  038C                     	;# 
  3633  038D                     	;# 
  3634  038E                     	;# 
  3635  0391                     	;# 
  3636  0392                     	;# 
  3637  0393                     	;# 
  3638  0394                     	;# 
  3639  0395                     	;# 
  3640  0396                     	;# 
  3641  0397                     	;# 
  3642  0398                     	;# 
  3643  0399                     	;# 
  3644  039A                     	;# 
  3645  039C                     	;# 
  3646  039D                     	;# 
  3647  039E                     	;# 
  3648  039F                     	;# 
  3649  0411                     	;# 
  3650  0411                     	;# 
  3651  0412                     	;# 
  3652  0413                     	;# 
  3653  0414                     	;# 
  3654  0415                     	;# 
  3655  0416                     	;# 
  3656  0417                     	;# 
  3657  0418                     	;# 
  3658  0418                     	;# 
  3659  0419                     	;# 
  3660  041A                     	;# 
  3661  041B                     	;# 
  3662  041C                     	;# 
  3663  041D                     	;# 
  3664  041E                     	;# 
  3665  041F                     	;# 
  3666  0498                     	;# 
  3667  0498                     	;# 
  3668  0499                     	;# 
  3669  049A                     	;# 
  3670  049B                     	;# 
  3671  049B                     	;# 
  3672  049C                     	;# 
  3673  049D                     	;# 
  3674  049E                     	;# 
  3675  049F                     	;# 
  3676  0617                     	;# 
  3677  0618                     	;# 
  3678  0619                     	;# 
  3679  0619                     	;# 
  3680  061A                     	;# 
  3681  061B                     	;# 
  3682  061C                     	;# 
  3683  061C                     	;# 
  3684  061F                     	;# 
  3685  0691                     	;# 
  3686  0692                     	;# 
  3687  0693                     	;# 
  3688  0694                     	;# 
  3689  0695                     	;# 
  3690  0696                     	;# 
  3691  0697                     	;# 
  3692  0698                     	;# 
  3693  0699                     	;# 
  3694  0711                     	;# 
  3695  0712                     	;# 
  3696  0713                     	;# 
  3697  0714                     	;# 
  3698  0715                     	;# 
  3699  0716                     	;# 
  3700  0717                     	;# 
  3701  0718                     	;# 
  3702  0719                     	;# 
  3703  0891                     	;# 
  3704  0891                     	;# 
  3705  0891                     	;# 
  3706  0891                     	;# 
  3707  0891                     	;# 
  3708  0891                     	;# 
  3709  0892                     	;# 
  3710  0892                     	;# 
  3711  0892                     	;# 
  3712  0893                     	;# 
  3713  0893                     	;# 
  3714  0893                     	;# 
  3715  0893                     	;# 
  3716  0893                     	;# 
  3717  0893                     	;# 
  3718  0894                     	;# 
  3719  0894                     	;# 
  3720  0894                     	;# 
  3721  0895                     	;# 
  3722  0895                     	;# 
  3723  0895                     	;# 
  3724  0896                     	;# 
  3725  0896                     	;# 
  3726  0896                     	;# 
  3727  089B                     	;# 
  3728  0911                     	;# 
  3729  0912                     	;# 
  3730  0913                     	;# 
  3731  0914                     	;# 
  3732  0915                     	;# 
  3733  0916                     	;# 
  3734  0918                     	;# 
  3735  0919                     	;# 
  3736  091A                     	;# 
  3737  091B                     	;# 
  3738  091C                     	;# 
  3739  091D                     	;# 
  3740  091E                     	;# 
  3741  091F                     	;# 
  3742  0E0F                     	;# 
  3743  0E10                     	;# 
  3744  0E11                     	;# 
  3745  0E12                     	;# 
  3746  0E13                     	;# 
  3747  0E14                     	;# 
  3748  0E15                     	;# 
  3749  0E16                     	;# 
  3750  0E17                     	;# 
  3751  0E18                     	;# 
  3752  0E19                     	;# 
  3753  0E1A                     	;# 
  3754  0E1B                     	;# 
  3755  0E1C                     	;# 
  3756  0E1D                     	;# 
  3757  0E1E                     	;# 
  3758  0E1F                     	;# 
  3759  0E20                     	;# 
  3760  0E21                     	;# 
  3761  0E22                     	;# 
  3762  0E24                     	;# 
  3763  0E25                     	;# 
  3764  0E28                     	;# 
  3765  0E29                     	;# 
  3766  0E2A                     	;# 
  3767  0E2B                     	;# 
  3768  0E2C                     	;# 
  3769  0E2D                     	;# 
  3770  0E2E                     	;# 
  3771  0E2F                     	;# 
  3772  0E90                     	;# 
  3773  0E91                     	;# 
  3774  0E92                     	;# 
  3775  0E94                     	;# 
  3776  0E95                     	;# 
  3777  0E9C                     	;# 
  3778  0E9D                     	;# 
  3779  0E9E                     	;# 
  3780  0E9F                     	;# 
  3781  0EA0                     	;# 
  3782  0EA1                     	;# 
  3783  0EA2                     	;# 
  3784  0EA3                     	;# 
  3785  0EA4                     	;# 
  3786  0EA5                     	;# 
  3787  0EA6                     	;# 
  3788  0EA7                     	;# 
  3789  0F0F                     	;# 
  3790  0F10                     	;# 
  3791  0F11                     	;# 
  3792  0F12                     	;# 
  3793  0F13                     	;# 
  3794  0F14                     	;# 
  3795  0F15                     	;# 
  3796  0F16                     	;# 
  3797  0F17                     	;# 
  3798  0F18                     	;# 
  3799  0F19                     	;# 
  3800  0F1A                     	;# 
  3801  0F1B                     	;# 
  3802  0F1C                     	;# 
  3803  0F1D                     	;# 
  3804  0F1E                     	;# 
  3805  0F1F                     	;# 
  3806  0F20                     	;# 
  3807  0F21                     	;# 
  3808  0F22                     	;# 
  3809  0F23                     	;# 
  3810  0F24                     	;# 
  3811  0F25                     	;# 
  3812  0F26                     	;# 
  3813  0F27                     	;# 
  3814  0F28                     	;# 
  3815  0F29                     	;# 
  3816  0F2A                     	;# 
  3817  0F2B                     	;# 
  3818  0F2C                     	;# 
  3819  0F2D                     	;# 
  3820  0F2E                     	;# 
  3821  0F2F                     	;# 
  3822  0F30                     	;# 
  3823  0F31                     	;# 
  3824  0F32                     	;# 
  3825  0F33                     	;# 
  3826  0F34                     	;# 
  3827  0F35                     	;# 
  3828  0F36                     	;# 
  3829  0F37                     	;# 
  3830  0FE4                     	;# 
  3831  0FE5                     	;# 
  3832  0FE6                     	;# 
  3833  0FE7                     	;# 
  3834  0FE8                     	;# 
  3835  0FE9                     	;# 
  3836  0FEA                     	;# 
  3837  0FEB                     	;# 
  3838  0FED                     	;# 
  3839  0FEE                     	;# 
  3840  0FEF                     	;# 
  3841  0000                     	;# 
  3842  0001                     	;# 
  3843  0002                     	;# 
  3844  0003                     	;# 
  3845  0004                     	;# 
  3846  0005                     	;# 
  3847  0006                     	;# 
  3848  0007                     	;# 
  3849  0008                     	;# 
  3850  0009                     	;# 
  3851  000A                     	;# 
  3852  000B                     	;# 
  3853  000C                     	;# 
  3854  000D                     	;# 
  3855  000E                     	;# 
  3856  0010                     	;# 
  3857  0011                     	;# 
  3858  0012                     	;# 
  3859  0013                     	;# 
  3860  0014                     	;# 
  3861  0015                     	;# 
  3862  0015                     	;# 
  3863  0016                     	;# 
  3864  0016                     	;# 
  3865  0017                     	;# 
  3866  0018                     	;# 
  3867  0019                     	;# 
  3868  0019                     	;# 
  3869  001A                     	;# 
  3870  001B                     	;# 
  3871  001C                     	;# 
  3872  001D                     	;# 
  3873  001E                     	;# 
  3874  001F                     	;# 
  3875  008C                     	;# 
  3876  008D                     	;# 
  3877  008E                     	;# 
  3878  0090                     	;# 
  3879  0091                     	;# 
  3880  0092                     	;# 
  3881  0093                     	;# 
  3882  0094                     	;# 
  3883  0097                     	;# 
  3884  009B                     	;# 
  3885  009B                     	;# 
  3886  009C                     	;# 
  3887  009D                     	;# 
  3888  009E                     	;# 
  3889  009F                     	;# 
  3890  010C                     	;# 
  3891  010D                     	;# 
  3892  010E                     	;# 
  3893  0111                     	;# 
  3894  0112                     	;# 
  3895  0113                     	;# 
  3896  0114                     	;# 
  3897  0115                     	;# 
  3898  0116                     	;# 
  3899  0117                     	;# 
  3900  0118                     	;# 
  3901  0119                     	;# 
  3902  018C                     	;# 
  3903  018D                     	;# 
  3904  018E                     	;# 
  3905  0197                     	;# 
  3906  0199                     	;# 
  3907  0199                     	;# 
  3908  0199                     	;# 
  3909  019A                     	;# 
  3910  019A                     	;# 
  3911  019A                     	;# 
  3912  019B                     	;# 
  3913  019B                     	;# 
  3914  019B                     	;# 
  3915  019B                     	;# 
  3916  019B                     	;# 
  3917  019C                     	;# 
  3918  019C                     	;# 
  3919  019C                     	;# 
  3920  019D                     	;# 
  3921  019D                     	;# 
  3922  019D                     	;# 
  3923  019E                     	;# 
  3924  019E                     	;# 
  3925  019E                     	;# 
  3926  019F                     	;# 
  3927  019F                     	;# 
  3928  019F                     	;# 
  3929  019F                     	;# 
  3930  019F                     	;# 
  3931  020C                     	;# 
  3932  020D                     	;# 
  3933  020E                     	;# 
  3934  0211                     	;# 
  3935  0211                     	;# 
  3936  0212                     	;# 
  3937  0212                     	;# 
  3938  0213                     	;# 
  3939  0213                     	;# 
  3940  0214                     	;# 
  3941  0214                     	;# 
  3942  0215                     	;# 
  3943  0215                     	;# 
  3944  0215                     	;# 
  3945  0215                     	;# 
  3946  0216                     	;# 
  3947  0216                     	;# 
  3948  0217                     	;# 
  3949  0217                     	;# 
  3950  0219                     	;# 
  3951  021A                     	;# 
  3952  021B                     	;# 
  3953  021C                     	;# 
  3954  021D                     	;# 
  3955  021D                     	;# 
  3956  021E                     	;# 
  3957  021F                     	;# 
  3958  028C                     	;# 
  3959  028D                     	;# 
  3960  028E                     	;# 
  3961  0291                     	;# 
  3962  0291                     	;# 
  3963  0292                     	;# 
  3964  0293                     	;# 
  3965  0294                     	;# 
  3966  0295                     	;# 
  3967  0295                     	;# 
  3968  0296                     	;# 
  3969  0297                     	;# 
  3970  0298                     	;# 
  3971  029F                     	;# 
  3972  030C                     	;# 
  3973  030D                     	;# 
  3974  030E                     	;# 
  3975  0311                     	;# 
  3976  0311                     	;# 
  3977  0312                     	;# 
  3978  0313                     	;# 
  3979  0314                     	;# 
  3980  0315                     	;# 
  3981  0315                     	;# 
  3982  0316                     	;# 
  3983  0317                     	;# 
  3984  0318                     	;# 
  3985  038C                     	;# 
  3986  038D                     	;# 
  3987  038E                     	;# 
  3988  0391                     	;# 
  3989  0392                     	;# 
  3990  0393                     	;# 
  3991  0394                     	;# 
  3992  0395                     	;# 
  3993  0396                     	;# 
  3994  0397                     	;# 
  3995  0398                     	;# 
  3996  0399                     	;# 
  3997  039A                     	;# 
  3998  039C                     	;# 
  3999  039D                     	;# 
  4000  039E                     	;# 
  4001  039F                     	;# 
  4002  0411                     	;# 
  4003  0411                     	;# 
  4004  0412                     	;# 
  4005  0413                     	;# 
  4006  0414                     	;# 
  4007  0415                     	;# 
  4008  0416                     	;# 
  4009  0417                     	;# 
  4010  0418                     	;# 
  4011  0418                     	;# 
  4012  0419                     	;# 
  4013  041A                     	;# 
  4014  041B                     	;# 
  4015  041C                     	;# 
  4016  041D                     	;# 
  4017  041E                     	;# 
  4018  041F                     	;# 
  4019  0498                     	;# 
  4020  0498                     	;# 
  4021  0499                     	;# 
  4022  049A                     	;# 
  4023  049B                     	;# 
  4024  049B                     	;# 
  4025  049C                     	;# 
  4026  049D                     	;# 
  4027  049E                     	;# 
  4028  049F                     	;# 
  4029  0617                     	;# 
  4030  0618                     	;# 
  4031  0619                     	;# 
  4032  0619                     	;# 
  4033  061A                     	;# 
  4034  061B                     	;# 
  4035  061C                     	;# 
  4036  061C                     	;# 
  4037  061F                     	;# 
  4038  0691                     	;# 
  4039  0692                     	;# 
  4040  0693                     	;# 
  4041  0694                     	;# 
  4042  0695                     	;# 
  4043  0696                     	;# 
  4044  0697                     	;# 
  4045  0698                     	;# 
  4046  0699                     	;# 
  4047  0711                     	;# 
  4048  0712                     	;# 
  4049  0713                     	;# 
  4050  0714                     	;# 
  4051  0715                     	;# 
  4052  0716                     	;# 
  4053  0717                     	;# 
  4054  0718                     	;# 
  4055  0719                     	;# 
  4056  0891                     	;# 
  4057  0891                     	;# 
  4058  0891                     	;# 
  4059  0891                     	;# 
  4060  0891                     	;# 
  4061  0891                     	;# 
  4062  0892                     	;# 
  4063  0892                     	;# 
  4064  0892                     	;# 
  4065  0893                     	;# 
  4066  0893                     	;# 
  4067  0893                     	;# 
  4068  0893                     	;# 
  4069  0893                     	;# 
  4070  0893                     	;# 
  4071  0894                     	;# 
  4072  0894                     	;# 
  4073  0894                     	;# 
  4074  0895                     	;# 
  4075  0895                     	;# 
  4076  0895                     	;# 
  4077  0896                     	;# 
  4078  0896                     	;# 
  4079  0896                     	;# 
  4080  089B                     	;# 
  4081  0911                     	;# 
  4082  0912                     	;# 
  4083  0913                     	;# 
  4084  0914                     	;# 
  4085  0915                     	;# 
  4086  0916                     	;# 
  4087  0918                     	;# 
  4088  0919                     	;# 
  4089  091A                     	;# 
  4090  091B                     	;# 
  4091  091C                     	;# 
  4092  091D                     	;# 
  4093  091E                     	;# 
  4094  091F                     	;# 
  4095  0E0F                     	;# 
  4096  0E10                     	;# 
  4097  0E11                     	;# 
  4098  0E12                     	;# 
  4099  0E13                     	;# 
  4100  0E14                     	;# 
  4101  0E15                     	;# 
  4102  0E16                     	;# 
  4103  0E17                     	;# 
  4104  0E18                     	;# 
  4105  0E19                     	;# 
  4106  0E1A                     	;# 
  4107  0E1B                     	;# 
  4108  0E1C                     	;# 
  4109  0E1D                     	;# 
  4110  0E1E                     	;# 
  4111  0E1F                     	;# 
  4112  0E20                     	;# 
  4113  0E21                     	;# 
  4114  0E22                     	;# 
  4115  0E24                     	;# 
  4116  0E25                     	;# 
  4117  0E28                     	;# 
  4118  0E29                     	;# 
  4119  0E2A                     	;# 
  4120  0E2B                     	;# 
  4121  0E2C                     	;# 
  4122  0E2D                     	;# 
  4123  0E2E                     	;# 
  4124  0E2F                     	;# 
  4125  0E90                     	;# 
  4126  0E91                     	;# 
  4127  0E92                     	;# 
  4128  0E94                     	;# 
  4129  0E95                     	;# 
  4130  0E9C                     	;# 
  4131  0E9D                     	;# 
  4132  0E9E                     	;# 
  4133  0E9F                     	;# 
  4134  0EA0                     	;# 
  4135  0EA1                     	;# 
  4136  0EA2                     	;# 
  4137  0EA3                     	;# 
  4138  0EA4                     	;# 
  4139  0EA5                     	;# 
  4140  0EA6                     	;# 
  4141  0EA7                     	;# 
  4142  0F0F                     	;# 
  4143  0F10                     	;# 
  4144  0F11                     	;# 
  4145  0F12                     	;# 
  4146  0F13                     	;# 
  4147  0F14                     	;# 
  4148  0F15                     	;# 
  4149  0F16                     	;# 
  4150  0F17                     	;# 
  4151  0F18                     	;# 
  4152  0F19                     	;# 
  4153  0F1A                     	;# 
  4154  0F1B                     	;# 
  4155  0F1C                     	;# 
  4156  0F1D                     	;# 
  4157  0F1E                     	;# 
  4158  0F1F                     	;# 
  4159  0F20                     	;# 
  4160  0F21                     	;# 
  4161  0F22                     	;# 
  4162  0F23                     	;# 
  4163  0F24                     	;# 
  4164  0F25                     	;# 
  4165  0F26                     	;# 
  4166  0F27                     	;# 
  4167  0F28                     	;# 
  4168  0F29                     	;# 
  4169  0F2A                     	;# 
  4170  0F2B                     	;# 
  4171  0F2C                     	;# 
  4172  0F2D                     	;# 
  4173  0F2E                     	;# 
  4174  0F2F                     	;# 
  4175  0F30                     	;# 
  4176  0F31                     	;# 
  4177  0F32                     	;# 
  4178  0F33                     	;# 
  4179  0F34                     	;# 
  4180  0F35                     	;# 
  4181  0F36                     	;# 
  4182  0F37                     	;# 
  4183  0FE4                     	;# 
  4184  0FE5                     	;# 
  4185  0FE6                     	;# 
  4186  0FE7                     	;# 
  4187  0FE8                     	;# 
  4188  0FE9                     	;# 
  4189  0FEA                     	;# 
  4190  0FEB                     	;# 
  4191  0FED                     	;# 
  4192  0FEE                     	;# 
  4193  0FEF                     	;# 
  4194  0000                     	;# 
  4195  0001                     	;# 
  4196  0002                     	;# 
  4197  0003                     	;# 
  4198  0004                     	;# 
  4199  0005                     	;# 
  4200  0006                     	;# 
  4201  0007                     	;# 
  4202  0008                     	;# 
  4203  0009                     	;# 
  4204  000A                     	;# 
  4205  000B                     	;# 
  4206  000C                     	;# 
  4207  000D                     	;# 
  4208  000E                     	;# 
  4209  0010                     	;# 
  4210  0011                     	;# 
  4211  0012                     	;# 
  4212  0013                     	;# 
  4213  0014                     	;# 
  4214  0015                     	;# 
  4215  0015                     	;# 
  4216  0016                     	;# 
  4217  0016                     	;# 
  4218  0017                     	;# 
  4219  0018                     	;# 
  4220  0019                     	;# 
  4221  0019                     	;# 
  4222  001A                     	;# 
  4223  001B                     	;# 
  4224  001C                     	;# 
  4225  001D                     	;# 
  4226  001E                     	;# 
  4227  001F                     	;# 
  4228  008C                     	;# 
  4229  008D                     	;# 
  4230  008E                     	;# 
  4231  0090                     	;# 
  4232  0091                     	;# 
  4233  0092                     	;# 
  4234  0093                     	;# 
  4235  0094                     	;# 
  4236  0097                     	;# 
  4237  009B                     	;# 
  4238  009B                     	;# 
  4239  009C                     	;# 
  4240  009D                     	;# 
  4241  009E                     	;# 
  4242  009F                     	;# 
  4243  010C                     	;# 
  4244  010D                     	;# 
  4245  010E                     	;# 
  4246  0111                     	;# 
  4247  0112                     	;# 
  4248  0113                     	;# 
  4249  0114                     	;# 
  4250  0115                     	;# 
  4251  0116                     	;# 
  4252  0117                     	;# 
  4253  0118                     	;# 
  4254  0119                     	;# 
  4255  018C                     	;# 
  4256  018D                     	;# 
  4257  018E                     	;# 
  4258  0197                     	;# 
  4259  0199                     	;# 
  4260  0199                     	;# 
  4261  0199                     	;# 
  4262  019A                     	;# 
  4263  019A                     	;# 
  4264  019A                     	;# 
  4265  019B                     	;# 
  4266  019B                     	;# 
  4267  019B                     	;# 
  4268  019B                     	;# 
  4269  019B                     	;# 
  4270  019C                     	;# 
  4271  019C                     	;# 
  4272  019C                     	;# 
  4273  019D                     	;# 
  4274  019D                     	;# 
  4275  019D                     	;# 
  4276  019E                     	;# 
  4277  019E                     	;# 
  4278  019E                     	;# 
  4279  019F                     	;# 
  4280  019F                     	;# 
  4281  019F                     	;# 
  4282  019F                     	;# 
  4283  019F                     	;# 
  4284  020C                     	;# 
  4285  020D                     	;# 
  4286  020E                     	;# 
  4287  0211                     	;# 
  4288  0211                     	;# 
  4289  0212                     	;# 
  4290  0212                     	;# 
  4291  0213                     	;# 
  4292  0213                     	;# 
  4293  0214                     	;# 
  4294  0214                     	;# 
  4295  0215                     	;# 
  4296  0215                     	;# 
  4297  0215                     	;# 
  4298  0215                     	;# 
  4299  0216                     	;# 
  4300  0216                     	;# 
  4301  0217                     	;# 
  4302  0217                     	;# 
  4303  0219                     	;# 
  4304  021A                     	;# 
  4305  021B                     	;# 
  4306  021C                     	;# 
  4307  021D                     	;# 
  4308  021D                     	;# 
  4309  021E                     	;# 
  4310  021F                     	;# 
  4311  028C                     	;# 
  4312  028D                     	;# 
  4313  028E                     	;# 
  4314  0291                     	;# 
  4315  0291                     	;# 
  4316  0292                     	;# 
  4317  0293                     	;# 
  4318  0294                     	;# 
  4319  0295                     	;# 
  4320  0295                     	;# 
  4321  0296                     	;# 
  4322  0297                     	;# 
  4323  0298                     	;# 
  4324  029F                     	;# 
  4325  030C                     	;# 
  4326  030D                     	;# 
  4327  030E                     	;# 
  4328  0311                     	;# 
  4329  0311                     	;# 
  4330  0312                     	;# 
  4331  0313                     	;# 
  4332  0314                     	;# 
  4333  0315                     	;# 
  4334  0315                     	;# 
  4335  0316                     	;# 
  4336  0317                     	;# 
  4337  0318                     	;# 
  4338  038C                     	;# 
  4339  038D                     	;# 
  4340  038E                     	;# 
  4341  0391                     	;# 
  4342  0392                     	;# 
  4343  0393                     	;# 
  4344  0394                     	;# 
  4345  0395                     	;# 
  4346  0396                     	;# 
  4347  0397                     	;# 
  4348  0398                     	;# 
  4349  0399                     	;# 
  4350  039A                     	;# 
  4351  039C                     	;# 
  4352  039D                     	;# 
  4353  039E                     	;# 
  4354  039F                     	;# 
  4355  0411                     	;# 
  4356  0411                     	;# 
  4357  0412                     	;# 
  4358  0413                     	;# 
  4359  0414                     	;# 
  4360  0415                     	;# 
  4361  0416                     	;# 
  4362  0417                     	;# 
  4363  0418                     	;# 
  4364  0418                     	;# 
  4365  0419                     	;# 
  4366  041A                     	;# 
  4367  041B                     	;# 
  4368  041C                     	;# 
  4369  041D                     	;# 
  4370  041E                     	;# 
  4371  041F                     	;# 
  4372  0498                     	;# 
  4373  0498                     	;# 
  4374  0499                     	;# 
  4375  049A                     	;# 
  4376  049B                     	;# 
  4377  049B                     	;# 
  4378  049C                     	;# 
  4379  049D                     	;# 
  4380  049E                     	;# 
  4381  049F                     	;# 
  4382  0617                     	;# 
  4383  0618                     	;# 
  4384  0619                     	;# 
  4385  0619                     	;# 
  4386  061A                     	;# 
  4387  061B                     	;# 
  4388  061C                     	;# 
  4389  061C                     	;# 
  4390  061F                     	;# 
  4391  0691                     	;# 
  4392  0692                     	;# 
  4393  0693                     	;# 
  4394  0694                     	;# 
  4395  0695                     	;# 
  4396  0696                     	;# 
  4397  0697                     	;# 
  4398  0698                     	;# 
  4399  0699                     	;# 
  4400  0711                     	;# 
  4401  0712                     	;# 
  4402  0713                     	;# 
  4403  0714                     	;# 
  4404  0715                     	;# 
  4405  0716                     	;# 
  4406  0717                     	;# 
  4407  0718                     	;# 
  4408  0719                     	;# 
  4409  0891                     	;# 
  4410  0891                     	;# 
  4411  0891                     	;# 
  4412  0891                     	;# 
  4413  0891                     	;# 
  4414  0891                     	;# 
  4415  0892                     	;# 
  4416  0892                     	;# 
  4417  0892                     	;# 
  4418  0893                     	;# 
  4419  0893                     	;# 
  4420  0893                     	;# 
  4421  0893                     	;# 
  4422  0893                     	;# 
  4423  0893                     	;# 
  4424  0894                     	;# 
  4425  0894                     	;# 
  4426  0894                     	;# 
  4427  0895                     	;# 
  4428  0895                     	;# 
  4429  0895                     	;# 
  4430  0896                     	;# 
  4431  0896                     	;# 
  4432  0896                     	;# 
  4433  089B                     	;# 
  4434  0911                     	;# 
  4435  0912                     	;# 
  4436  0913                     	;# 
  4437  0914                     	;# 
  4438  0915                     	;# 
  4439  0916                     	;# 
  4440  0918                     	;# 
  4441  0919                     	;# 
  4442  091A                     	;# 
  4443  091B                     	;# 
  4444  091C                     	;# 
  4445  091D                     	;# 
  4446  091E                     	;# 
  4447  091F                     	;# 
  4448  0E0F                     	;# 
  4449  0E10                     	;# 
  4450  0E11                     	;# 
  4451  0E12                     	;# 
  4452  0E13                     	;# 
  4453  0E14                     	;# 
  4454  0E15                     	;# 
  4455  0E16                     	;# 
  4456  0E17                     	;# 
  4457  0E18                     	;# 
  4458  0E19                     	;# 
  4459  0E1A                     	;# 
  4460  0E1B                     	;# 
  4461  0E1C                     	;# 
  4462  0E1D                     	;# 
  4463  0E1E                     	;# 
  4464  0E1F                     	;# 
  4465  0E20                     	;# 
  4466  0E21                     	;# 
  4467  0E22                     	;# 
  4468  0E24                     	;# 
  4469  0E25                     	;# 
  4470  0E28                     	;# 
  4471  0E29                     	;# 
  4472  0E2A                     	;# 
  4473  0E2B                     	;# 
  4474  0E2C                     	;# 
  4475  0E2D                     	;# 
  4476  0E2E                     	;# 
  4477  0E2F                     	;# 
  4478  0E90                     	;# 
  4479  0E91                     	;# 
  4480  0E92                     	;# 
  4481  0E94                     	;# 
  4482  0E95                     	;# 
  4483  0E9C                     	;# 
  4484  0E9D                     	;# 
  4485  0E9E                     	;# 
  4486  0E9F                     	;# 
  4487  0EA0                     	;# 
  4488  0EA1                     	;# 
  4489  0EA2                     	;# 
  4490  0EA3                     	;# 
  4491  0EA4                     	;# 
  4492  0EA5                     	;# 
  4493  0EA6                     	;# 
  4494  0EA7                     	;# 
  4495  0F0F                     	;# 
  4496  0F10                     	;# 
  4497  0F11                     	;# 
  4498  0F12                     	;# 
  4499  0F13                     	;# 
  4500  0F14                     	;# 
  4501  0F15                     	;# 
  4502  0F16                     	;# 
  4503  0F17                     	;# 
  4504  0F18                     	;# 
  4505  0F19                     	;# 
  4506  0F1A                     	;# 
  4507  0F1B                     	;# 
  4508  0F1C                     	;# 
  4509  0F1D                     	;# 
  4510  0F1E                     	;# 
  4511  0F1F                     	;# 
  4512  0F20                     	;# 
  4513  0F21                     	;# 
  4514  0F22                     	;# 
  4515  0F23                     	;# 
  4516  0F24                     	;# 
  4517  0F25                     	;# 
  4518  0F26                     	;# 
  4519  0F27                     	;# 
  4520  0F28                     	;# 
  4521  0F29                     	;# 
  4522  0F2A                     	;# 
  4523  0F2B                     	;# 
  4524  0F2C                     	;# 
  4525  0F2D                     	;# 
  4526  0F2E                     	;# 
  4527  0F2F                     	;# 
  4528  0F30                     	;# 
  4529  0F31                     	;# 
  4530  0F32                     	;# 
  4531  0F33                     	;# 
  4532  0F34                     	;# 
  4533  0F35                     	;# 
  4534  0F36                     	;# 
  4535  0F37                     	;# 
  4536  0FE4                     	;# 
  4537  0FE5                     	;# 
  4538  0FE6                     	;# 
  4539  0FE7                     	;# 
  4540  0FE8                     	;# 
  4541  0FE9                     	;# 
  4542  0FEA                     	;# 
  4543  0FEB                     	;# 
  4544  0FED                     	;# 
  4545  0FEE                     	;# 
  4546  0FEF                     	;# 
  4547  0000                     	;# 
  4548  0001                     	;# 
  4549  0002                     	;# 
  4550  0003                     	;# 
  4551  0004                     	;# 
  4552  0005                     	;# 
  4553  0006                     	;# 
  4554  0007                     	;# 
  4555  0008                     	;# 
  4556  0009                     	;# 
  4557  000A                     	;# 
  4558  000B                     	;# 
  4559  000C                     	;# 
  4560  000D                     	;# 
  4561  000E                     	;# 
  4562  0010                     	;# 
  4563  0011                     	;# 
  4564  0012                     	;# 
  4565  0013                     	;# 
  4566  0014                     	;# 
  4567  0015                     	;# 
  4568  0015                     	;# 
  4569  0016                     	;# 
  4570  0016                     	;# 
  4571  0017                     	;# 
  4572  0018                     	;# 
  4573  0019                     	;# 
  4574  0019                     	;# 
  4575  001A                     	;# 
  4576  001B                     	;# 
  4577  001C                     	;# 
  4578  001D                     	;# 
  4579  001E                     	;# 
  4580  001F                     	;# 
  4581  008C                     	;# 
  4582  008D                     	;# 
  4583  008E                     	;# 
  4584  0090                     	;# 
  4585  0091                     	;# 
  4586  0092                     	;# 
  4587  0093                     	;# 
  4588  0094                     	;# 
  4589  0097                     	;# 
  4590  009B                     	;# 
  4591  009B                     	;# 
  4592  009C                     	;# 
  4593  009D                     	;# 
  4594  009E                     	;# 
  4595  009F                     	;# 
  4596  010C                     	;# 
  4597  010D                     	;# 
  4598  010E                     	;# 
  4599  0111                     	;# 
  4600  0112                     	;# 
  4601  0113                     	;# 
  4602  0114                     	;# 
  4603  0115                     	;# 
  4604  0116                     	;# 
  4605  0117                     	;# 
  4606  0118                     	;# 
  4607  0119                     	;# 
  4608  018C                     	;# 
  4609  018D                     	;# 
  4610  018E                     	;# 
  4611  0197                     	;# 
  4612  0199                     	;# 
  4613  0199                     	;# 
  4614  0199                     	;# 
  4615  019A                     	;# 
  4616  019A                     	;# 
  4617  019A                     	;# 
  4618  019B                     	;# 
  4619  019B                     	;# 
  4620  019B                     	;# 
  4621  019B                     	;# 
  4622  019B                     	;# 
  4623  019C                     	;# 
  4624  019C                     	;# 
  4625  019C                     	;# 
  4626  019D                     	;# 
  4627  019D                     	;# 
  4628  019D                     	;# 
  4629  019E                     	;# 
  4630  019E                     	;# 
  4631  019E                     	;# 
  4632  019F                     	;# 
  4633  019F                     	;# 
  4634  019F                     	;# 
  4635  019F                     	;# 
  4636  019F                     	;# 
  4637  020C                     	;# 
  4638  020D                     	;# 
  4639  020E                     	;# 
  4640  0211                     	;# 
  4641  0211                     	;# 
  4642  0212                     	;# 
  4643  0212                     	;# 
  4644  0213                     	;# 
  4645  0213                     	;# 
  4646  0214                     	;# 
  4647  0214                     	;# 
  4648  0215                     	;# 
  4649  0215                     	;# 
  4650  0215                     	;# 
  4651  0215                     	;# 
  4652  0216                     	;# 
  4653  0216                     	;# 
  4654  0217                     	;# 
  4655  0217                     	;# 
  4656  0219                     	;# 
  4657  021A                     	;# 
  4658  021B                     	;# 
  4659  021C                     	;# 
  4660  021D                     	;# 
  4661  021D                     	;# 
  4662  021E                     	;# 
  4663  021F                     	;# 
  4664  028C                     	;# 
  4665  028D                     	;# 
  4666  028E                     	;# 
  4667  0291                     	;# 
  4668  0291                     	;# 
  4669  0292                     	;# 
  4670  0293                     	;# 
  4671  0294                     	;# 
  4672  0295                     	;# 
  4673  0295                     	;# 
  4674  0296                     	;# 
  4675  0297                     	;# 
  4676  0298                     	;# 
  4677  029F                     	;# 
  4678  030C                     	;# 
  4679  030D                     	;# 
  4680  030E                     	;# 
  4681  0311                     	;# 
  4682  0311                     	;# 
  4683  0312                     	;# 
  4684  0313                     	;# 
  4685  0314                     	;# 
  4686  0315                     	;# 
  4687  0315                     	;# 
  4688  0316                     	;# 
  4689  0317                     	;# 
  4690  0318                     	;# 
  4691  038C                     	;# 
  4692  038D                     	;# 
  4693  038E                     	;# 
  4694  0391                     	;# 
  4695  0392                     	;# 
  4696  0393                     	;# 
  4697  0394                     	;# 
  4698  0395                     	;# 
  4699  0396                     	;# 
  4700  0397                     	;# 
  4701  0398                     	;# 
  4702  0399                     	;# 
  4703  039A                     	;# 
  4704  039C                     	;# 
  4705  039D                     	;# 
  4706  039E                     	;# 
  4707  039F                     	;# 
  4708  0411                     	;# 
  4709  0411                     	;# 
  4710  0412                     	;# 
  4711  0413                     	;# 
  4712  0414                     	;# 
  4713  0415                     	;# 
  4714  0416                     	;# 
  4715  0417                     	;# 
  4716  0418                     	;# 
  4717  0418                     	;# 
  4718  0419                     	;# 
  4719  041A                     	;# 
  4720  041B                     	;# 
  4721  041C                     	;# 
  4722  041D                     	;# 
  4723  041E                     	;# 
  4724  041F                     	;# 
  4725  0498                     	;# 
  4726  0498                     	;# 
  4727  0499                     	;# 
  4728  049A                     	;# 
  4729  049B                     	;# 
  4730  049B                     	;# 
  4731  049C                     	;# 
  4732  049D                     	;# 
  4733  049E                     	;# 
  4734  049F                     	;# 
  4735  0617                     	;# 
  4736  0618                     	;# 
  4737  0619                     	;# 
  4738  0619                     	;# 
  4739  061A                     	;# 
  4740  061B                     	;# 
  4741  061C                     	;# 
  4742  061C                     	;# 
  4743  061F                     	;# 
  4744  0691                     	;# 
  4745  0692                     	;# 
  4746  0693                     	;# 
  4747  0694                     	;# 
  4748  0695                     	;# 
  4749  0696                     	;# 
  4750  0697                     	;# 
  4751  0698                     	;# 
  4752  0699                     	;# 
  4753  0711                     	;# 
  4754  0712                     	;# 
  4755  0713                     	;# 
  4756  0714                     	;# 
  4757  0715                     	;# 
  4758  0716                     	;# 
  4759  0717                     	;# 
  4760  0718                     	;# 
  4761  0719                     	;# 
  4762  0891                     	;# 
  4763  0891                     	;# 
  4764  0891                     	;# 
  4765  0891                     	;# 
  4766  0891                     	;# 
  4767  0891                     	;# 
  4768  0892                     	;# 
  4769  0892                     	;# 
  4770  0892                     	;# 
  4771  0893                     	;# 
  4772  0893                     	;# 
  4773  0893                     	;# 
  4774  0893                     	;# 
  4775  0893                     	;# 
  4776  0893                     	;# 
  4777  0894                     	;# 
  4778  0894                     	;# 
  4779  0894                     	;# 
  4780  0895                     	;# 
  4781  0895                     	;# 
  4782  0895                     	;# 
  4783  0896                     	;# 
  4784  0896                     	;# 
  4785  0896                     	;# 
  4786  089B                     	;# 
  4787  0911                     	;# 
  4788  0912                     	;# 
  4789  0913                     	;# 
  4790  0914                     	;# 
  4791  0915                     	;# 
  4792  0916                     	;# 
  4793  0918                     	;# 
  4794  0919                     	;# 
  4795  091A                     	;# 
  4796  091B                     	;# 
  4797  091C                     	;# 
  4798  091D                     	;# 
  4799  091E                     	;# 
  4800  091F                     	;# 
  4801  0E0F                     	;# 
  4802  0E10                     	;# 
  4803  0E11                     	;# 
  4804  0E12                     	;# 
  4805  0E13                     	;# 
  4806  0E14                     	;# 
  4807  0E15                     	;# 
  4808  0E16                     	;# 
  4809  0E17                     	;# 
  4810  0E18                     	;# 
  4811  0E19                     	;# 
  4812  0E1A                     	;# 
  4813  0E1B                     	;# 
  4814  0E1C                     	;# 
  4815  0E1D                     	;# 
  4816  0E1E                     	;# 
  4817  0E1F                     	;# 
  4818  0E20                     	;# 
  4819  0E21                     	;# 
  4820  0E22                     	;# 
  4821  0E24                     	;# 
  4822  0E25                     	;# 
  4823  0E28                     	;# 
  4824  0E29                     	;# 
  4825  0E2A                     	;# 
  4826  0E2B                     	;# 
  4827  0E2C                     	;# 
  4828  0E2D                     	;# 
  4829  0E2E                     	;# 
  4830  0E2F                     	;# 
  4831  0E90                     	;# 
  4832  0E91                     	;# 
  4833  0E92                     	;# 
  4834  0E94                     	;# 
  4835  0E95                     	;# 
  4836  0E9C                     	;# 
  4837  0E9D                     	;# 
  4838  0E9E                     	;# 
  4839  0E9F                     	;# 
  4840  0EA0                     	;# 
  4841  0EA1                     	;# 
  4842  0EA2                     	;# 
  4843  0EA3                     	;# 
  4844  0EA4                     	;# 
  4845  0EA5                     	;# 
  4846  0EA6                     	;# 
  4847  0EA7                     	;# 
  4848  0F0F                     	;# 
  4849  0F10                     	;# 
  4850  0F11                     	;# 
  4851  0F12                     	;# 
  4852  0F13                     	;# 
  4853  0F14                     	;# 
  4854  0F15                     	;# 
  4855  0F16                     	;# 
  4856  0F17                     	;# 
  4857  0F18                     	;# 
  4858  0F19                     	;# 
  4859  0F1A                     	;# 
  4860  0F1B                     	;# 
  4861  0F1C                     	;# 
  4862  0F1D                     	;# 
  4863  0F1E                     	;# 
  4864  0F1F                     	;# 
  4865  0F20                     	;# 
  4866  0F21                     	;# 
  4867  0F22                     	;# 
  4868  0F23                     	;# 
  4869  0F24                     	;# 
  4870  0F25                     	;# 
  4871  0F26                     	;# 
  4872  0F27                     	;# 
  4873  0F28                     	;# 
  4874  0F29                     	;# 
  4875  0F2A                     	;# 
  4876  0F2B                     	;# 
  4877  0F2C                     	;# 
  4878  0F2D                     	;# 
  4879  0F2E                     	;# 
  4880  0F2F                     	;# 
  4881  0F30                     	;# 
  4882  0F31                     	;# 
  4883  0F32                     	;# 
  4884  0F33                     	;# 
  4885  0F34                     	;# 
  4886  0F35                     	;# 
  4887  0F36                     	;# 
  4888  0F37                     	;# 
  4889  0FE4                     	;# 
  4890  0FE5                     	;# 
  4891  0FE6                     	;# 
  4892  0FE7                     	;# 
  4893  0FE8                     	;# 
  4894  0FE9                     	;# 
  4895  0FEA                     	;# 
  4896  0FEB                     	;# 
  4897  0FED                     	;# 
  4898  0FEE                     	;# 
  4899  0FEF                     	;_currentPositions_steps
  4900                           
  4901                           	psect	idataBANK0
  4902  11E4                     __pidataBANK0:	
  4903                           
  4904                           ;initializer for _demoLong
  4905  11E4  3401               	retlw	1
  4906  11E5  3400               	retlw	0
  4907  11E6  3400               	retlw	0
  4908  11E7  3400               	retlw	0
  4909                           
  4910                           	psect	idataBANK1
  4911  2FEC                     __pidataBANK1:	
  4912                           
  4913                           ;initializer for _piezo_on_time_ms
  4914  2FEC  34C0               	retlw	192
  4915  2FED  3403               	retlw	3
  4916                           
  4917                           ;initializer for _heater_pre_time_ms
  4918  2FEE  341E               	retlw	30
  4919  2FEF  3400               	retlw	0
  4920                           
  4921                           ;initializer for _drv_peak_val
  4922  2FF0  347F               	retlw	127
  4923  2FF1  3400               	retlw	0
  4924                           
  4925                           	psect	idataBANK2
  4926  0002                     __pidataBANK2:	
  4927                           
  4928                           ;initializer for _heater_post_time_ms
  4929  0002  3428               	retlw	40
  4930  0003  3400               	retlw	0
  4931                           
  4932                           	psect	idataBANK4
  4933  18F4                     __pidataBANK4:	
  4934                           
  4935                           ;initializer for _fsmStateTable
  4936  18F4  34A6               	retlw	low _do_I2C_IDLE
  4937  18F5  3420               	retlw	high _do_I2C_IDLE
  4938  18F6  343E               	retlw	low _do_I2C_SEND_ADR_READ
  4939  18F7  3421               	retlw	high _do_I2C_SEND_ADR_READ
  4940  18F8  3411               	retlw	low _do_I2C_SEND_ADR_WRITE
  4941  18F9  3421               	retlw	high _do_I2C_SEND_ADR_WRITE
  4942  18FA  341C               	retlw	low _do_I2C_TX
  4943  18FB  341E               	retlw	high _do_I2C_TX
  4944  18FC  3421               	retlw	low _do_I2C_RX
  4945  18FD  341A               	retlw	high _do_I2C_RX
  4946  18FE  34DE               	retlw	low _do_I2C_RCEN
  4947  18FF  3420               	retlw	high _do_I2C_RCEN
  4948  1900  3400               	retlw	low _do_I2C_TX_EMPTY
  4949  1901  3408               	retlw	high _do_I2C_TX_EMPTY
  4950  1902  3442               	retlw	low _do_I2C_SEND_RESTART_READ
  4951  1903  3420               	retlw	high _do_I2C_SEND_RESTART_READ
  4952  1904  344A               	retlw	low _do_I2C_SEND_RESTART_WRITE
  4953  1905  3420               	retlw	high _do_I2C_SEND_RESTART_WRITE
  4954  1906  3452               	retlw	low _do_I2C_SEND_RESTART
  4955  1907  3420               	retlw	high _do_I2C_SEND_RESTART
  4956  1908  345A               	retlw	low _do_I2C_SEND_STOP
  4957  1909  3420               	retlw	high _do_I2C_SEND_STOP
  4958  190A  3462               	retlw	low _do_I2C_DO_ACK
  4959  190B  3420               	retlw	high _do_I2C_DO_ACK
  4960  190C  346A               	retlw	low _do_I2C_DO_NACK_STOP
  4961  190D  3420               	retlw	high _do_I2C_DO_NACK_STOP
  4962  190E  3472               	retlw	low _do_I2C_DO_NACK_RESTART
  4963  190F  3420               	retlw	high _do_I2C_DO_NACK_RESTART
  4964  1910  3406               	retlw	low _do_I2C_RESET
  4965  1911  3421               	retlw	high _do_I2C_RESET
  4966  1912  34BE               	retlw	low _do_I2C_DO_ADDRESS_NACK
  4967  1913  3425               	retlw	high _do_I2C_DO_ADDRESS_NACK
  4968                           
  4969                           	psect	stringtext1
  4970  1000                     __pstringtext1:	
  4971  1000                     drv2665@drv_sine:	
  4972  1000  3400               	retlw	0
  4973  1001  3400               	retlw	0
  4974  1002  3410               	retlw	16
  4975  1003  3400               	retlw	0
  4976  1004  3420               	retlw	32
  4977  1005  3400               	retlw	0
  4978  1006  342E               	retlw	46
  4979  1007  3400               	retlw	0
  4980  1008  343C               	retlw	60
  4981  1009  3400               	retlw	0
  4982  100A  3448               	retlw	72
  4983  100B  3400               	retlw	0
  4984  100C  3453               	retlw	83
  4985  100D  3400               	retlw	0
  4986  100E  345B               	retlw	91
  4987  100F  3400               	retlw	0
  4988  1010  3461               	retlw	97
  4989  1011  3400               	retlw	0
  4990  1012  3465               	retlw	101
  4991  1013  3400               	retlw	0
  4992  1014  3466               	retlw	102
  4993  1015  3400               	retlw	0
  4994  1016  3465               	retlw	101
  4995  1017  3400               	retlw	0
  4996  1018  3461               	retlw	97
  4997  1019  3400               	retlw	0
  4998  101A  345B               	retlw	91
  4999  101B  3400               	retlw	0
  5000  101C  3453               	retlw	83
  5001  101D  3400               	retlw	0
  5002  101E  3448               	retlw	72
  5003  101F  3400               	retlw	0
  5004  1020  343C               	retlw	60
  5005  1021  3400               	retlw	0
  5006  1022  342E               	retlw	46
  5007  1023  3400               	retlw	0
  5008  1024  3420               	retlw	32
  5009  1025  3400               	retlw	0
  5010  1026  3410               	retlw	16
  5011  1027  3400               	retlw	0
  5012  1028  3400               	retlw	0
  5013  1029  3400               	retlw	0
  5014  102A  34F0               	retlw	240
  5015  102B  3400               	retlw	0
  5016  102C  34E0               	retlw	224
  5017  102D  3400               	retlw	0
  5018  102E  34D2               	retlw	210
  5019  102F  3400               	retlw	0
  5020  1030  34C4               	retlw	196
  5021  1031  3400               	retlw	0
  5022  1032  34B8               	retlw	184
  5023  1033  3400               	retlw	0
  5024  1034  34AD               	retlw	173
  5025  1035  3400               	retlw	0
  5026  1036  34A5               	retlw	165
  5027  1037  3400               	retlw	0
  5028  1038  349F               	retlw	159
  5029  1039  3400               	retlw	0
  5030  103A  349B               	retlw	155
  5031  103B  3400               	retlw	0
  5032  103C  349A               	retlw	154
  5033  103D  3400               	retlw	0
  5034  103E  349B               	retlw	155
  5035  103F  3400               	retlw	0
  5036  1040  349F               	retlw	159
  5037  1041  3400               	retlw	0
  5038  1042  34A5               	retlw	165
  5039  1043  3400               	retlw	0
  5040  1044  34AD               	retlw	173
  5041  1045  3400               	retlw	0
  5042  1046  34B8               	retlw	184
  5043  1047  3400               	retlw	0
  5044  1048  34C4               	retlw	196
  5045  1049  3400               	retlw	0
  5046  104A  34D2               	retlw	210
  5047  104B  3400               	retlw	0
  5048  104C  34E0               	retlw	224
  5049  104D  3400               	retlw	0
  5050  104E  34F0               	retlw	240
  5051  104F  3400               	retlw	0
  5052  1050  3400               	retlw	0
  5053  1051  3400               	retlw	0
  5054  1052  3410               	retlw	16
  5055  1053  3400               	retlw	0
  5056  1054  3420               	retlw	32
  5057  1055  3400               	retlw	0
  5058  1056  342E               	retlw	46
  5059  1057  3400               	retlw	0
  5060  1058  343C               	retlw	60
  5061  1059  3400               	retlw	0
  5062  105A  3448               	retlw	72
  5063  105B  3400               	retlw	0
  5064  105C  3453               	retlw	83
  5065  105D  3400               	retlw	0
  5066  105E  345B               	retlw	91
  5067  105F  3400               	retlw	0
  5068  1060  3461               	retlw	97
  5069  1061  3400               	retlw	0
  5070  1062  3465               	retlw	101
  5071  1063  3400               	retlw	0
  5072  1064  3466               	retlw	102
  5073  1065  3400               	retlw	0
  5074  1066  3465               	retlw	101
  5075  1067  3400               	retlw	0
  5076  1068  3461               	retlw	97
  5077  1069  3400               	retlw	0
  5078  106A  345B               	retlw	91
  5079  106B  3400               	retlw	0
  5080  106C  3453               	retlw	83
  5081  106D  3400               	retlw	0
  5082  106E  3448               	retlw	72
  5083  106F  3400               	retlw	0
  5084  1070  343C               	retlw	60
  5085  1071  3400               	retlw	0
  5086  1072  342E               	retlw	46
  5087  1073  3400               	retlw	0
  5088  1074  3420               	retlw	32
  5089  1075  3400               	retlw	0
  5090  1076  3410               	retlw	16
  5091  1077  3400               	retlw	0
  5092  1078  3400               	retlw	0
  5093  1079  3400               	retlw	0
  5094  107A  34F0               	retlw	240
  5095  107B  3400               	retlw	0
  5096  107C  34E0               	retlw	224
  5097  107D  3400               	retlw	0
  5098  107E  34D2               	retlw	210
  5099  107F  3400               	retlw	0
  5100  1080  34C4               	retlw	196
  5101  1081  3400               	retlw	0
  5102  1082  34B8               	retlw	184
  5103  1083  3400               	retlw	0
  5104  1084  34AD               	retlw	173
  5105  1085  3400               	retlw	0
  5106  1086  34A5               	retlw	165
  5107  1087  3400               	retlw	0
  5108  1088  349F               	retlw	159
  5109  1089  3400               	retlw	0
  5110  108A  349B               	retlw	155
  5111  108B  3400               	retlw	0
  5112  108C  349A               	retlw	154
  5113  108D  3400               	retlw	0
  5114  108E  349B               	retlw	155
  5115  108F  3400               	retlw	0
  5116  1090  349F               	retlw	159
  5117  1091  3400               	retlw	0
  5118  1092  34A5               	retlw	165
  5119  1093  3400               	retlw	0
  5120  1094  34AD               	retlw	173
  5121  1095  3400               	retlw	0
  5122  1096  34B8               	retlw	184
  5123  1097  3400               	retlw	0
  5124  1098  34C4               	retlw	196
  5125  1099  3400               	retlw	0
  5126  109A  34D2               	retlw	210
  5127  109B  3400               	retlw	0
  5128  109C  34E0               	retlw	224
  5129  109D  3400               	retlw	0
  5130  109E  34F0               	retlw	240
  5131  109F  3400               	retlw	0
  5132  10A0  3400               	retlw	0
  5133  10A1  3400               	retlw	0
  5134  10A2  3410               	retlw	16
  5135  10A3  3400               	retlw	0
  5136  10A4  3420               	retlw	32
  5137  10A5  3400               	retlw	0
  5138  10A6  342E               	retlw	46
  5139  10A7  3400               	retlw	0
  5140  10A8  343C               	retlw	60
  5141  10A9  3400               	retlw	0
  5142  10AA  3448               	retlw	72
  5143  10AB  3400               	retlw	0
  5144  10AC  3453               	retlw	83
  5145  10AD  3400               	retlw	0
  5146  10AE  345B               	retlw	91
  5147  10AF  3400               	retlw	0
  5148  10B0  3461               	retlw	97
  5149  10B1  3400               	retlw	0
  5150  10B2  3465               	retlw	101
  5151  10B3  3400               	retlw	0
  5152  10B4  3466               	retlw	102
  5153  10B5  3400               	retlw	0
  5154  10B6  3465               	retlw	101
  5155  10B7  3400               	retlw	0
  5156  10B8  3461               	retlw	97
  5157  10B9  3400               	retlw	0
  5158  10BA  345B               	retlw	91
  5159  10BB  3400               	retlw	0
  5160  10BC  3453               	retlw	83
  5161  10BD  3400               	retlw	0
  5162  10BE  3448               	retlw	72
  5163  10BF  3400               	retlw	0
  5164  10C0  343C               	retlw	60
  5165  10C1  3400               	retlw	0
  5166  10C2  342E               	retlw	46
  5167  10C3  3400               	retlw	0
  5168  10C4  3420               	retlw	32
  5169  10C5  3400               	retlw	0
  5170  10C6  3410               	retlw	16
  5171  10C7  3400               	retlw	0
  5172  10C8  3400               	retlw	0
  5173  10C9  3400               	retlw	0
  5174  10CA  34F0               	retlw	240
  5175  10CB  3400               	retlw	0
  5176  10CC  34E0               	retlw	224
  5177  10CD  3400               	retlw	0
  5178  10CE  34D2               	retlw	210
  5179  10CF  3400               	retlw	0
  5180  10D0  34C4               	retlw	196
  5181  10D1  3400               	retlw	0
  5182  10D2  34B8               	retlw	184
  5183  10D3  3400               	retlw	0
  5184  10D4  34AD               	retlw	173
  5185  10D5  3400               	retlw	0
  5186  10D6  34A5               	retlw	165
  5187  10D7  3400               	retlw	0
  5188  10D8  349F               	retlw	159
  5189  10D9  3400               	retlw	0
  5190  10DA  349B               	retlw	155
  5191  10DB  3400               	retlw	0
  5192  10DC  349A               	retlw	154
  5193  10DD  3400               	retlw	0
  5194  10DE  349B               	retlw	155
  5195  10DF  3400               	retlw	0
  5196  10E0  349F               	retlw	159
  5197  10E1  3400               	retlw	0
  5198  10E2  34A5               	retlw	165
  5199  10E3  3400               	retlw	0
  5200  10E4  34AD               	retlw	173
  5201  10E5  3400               	retlw	0
  5202  10E6  34B8               	retlw	184
  5203  10E7  3400               	retlw	0
  5204  10E8  34C4               	retlw	196
  5205  10E9  3400               	retlw	0
  5206  10EA  34D2               	retlw	210
  5207  10EB  3400               	retlw	0
  5208  10EC  34E0               	retlw	224
  5209  10ED  3400               	retlw	0
  5210  10EE  34F0               	retlw	240
  5211  10EF  3400               	retlw	0
  5212  10F0  3400               	retlw	0
  5213  10F1  3400               	retlw	0
  5214  10F2                     __end_ofdrv2665@drv_sine:	
  5215                           
  5216                           	psect	stringtext2
  5217  10F2                     __pstringtext2:	
  5218  10F2                     _drv_sine:	
  5219  10F2  3400               	retlw	0
  5220  10F3  3400               	retlw	0
  5221  10F4  3410               	retlw	16
  5222  10F5  3400               	retlw	0
  5223  10F6  3420               	retlw	32
  5224  10F7  3400               	retlw	0
  5225  10F8  342E               	retlw	46
  5226  10F9  3400               	retlw	0
  5227  10FA  343C               	retlw	60
  5228  10FB  3400               	retlw	0
  5229  10FC  3448               	retlw	72
  5230  10FD  3400               	retlw	0
  5231  10FE  3453               	retlw	83
  5232  10FF  3400               	retlw	0
  5233  1100  345B               	retlw	91
  5234  1101  3400               	retlw	0
  5235  1102  3461               	retlw	97
  5236  1103  3400               	retlw	0
  5237  1104  3465               	retlw	101
  5238  1105  3400               	retlw	0
  5239  1106  3466               	retlw	102
  5240  1107  3400               	retlw	0
  5241  1108  3465               	retlw	101
  5242  1109  3400               	retlw	0
  5243  110A  3461               	retlw	97
  5244  110B  3400               	retlw	0
  5245  110C  345B               	retlw	91
  5246  110D  3400               	retlw	0
  5247  110E  3453               	retlw	83
  5248  110F  3400               	retlw	0
  5249  1110  3448               	retlw	72
  5250  1111  3400               	retlw	0
  5251  1112  343C               	retlw	60
  5252  1113  3400               	retlw	0
  5253  1114  342E               	retlw	46
  5254  1115  3400               	retlw	0
  5255  1116  3420               	retlw	32
  5256  1117  3400               	retlw	0
  5257  1118  3410               	retlw	16
  5258  1119  3400               	retlw	0
  5259  111A  3400               	retlw	0
  5260  111B  3400               	retlw	0
  5261  111C  34F0               	retlw	240
  5262  111D  3400               	retlw	0
  5263  111E  34E0               	retlw	224
  5264  111F  3400               	retlw	0
  5265  1120  34D2               	retlw	210
  5266  1121  3400               	retlw	0
  5267  1122  34C4               	retlw	196
  5268  1123  3400               	retlw	0
  5269  1124  34B8               	retlw	184
  5270  1125  3400               	retlw	0
  5271  1126  34AD               	retlw	173
  5272  1127  3400               	retlw	0
  5273  1128  34A5               	retlw	165
  5274  1129  3400               	retlw	0
  5275  112A  349F               	retlw	159
  5276  112B  3400               	retlw	0
  5277  112C  349B               	retlw	155
  5278  112D  3400               	retlw	0
  5279  112E  349A               	retlw	154
  5280  112F  3400               	retlw	0
  5281  1130  349B               	retlw	155
  5282  1131  3400               	retlw	0
  5283  1132  349F               	retlw	159
  5284  1133  3400               	retlw	0
  5285  1134  34A5               	retlw	165
  5286  1135  3400               	retlw	0
  5287  1136  34AD               	retlw	173
  5288  1137  3400               	retlw	0
  5289  1138  34B8               	retlw	184
  5290  1139  3400               	retlw	0
  5291  113A  34C4               	retlw	196
  5292  113B  3400               	retlw	0
  5293  113C  34D2               	retlw	210
  5294  113D  3400               	retlw	0
  5295  113E  34E0               	retlw	224
  5296  113F  3400               	retlw	0
  5297  1140  34F0               	retlw	240
  5298  1141  3400               	retlw	0
  5299  1142  3400               	retlw	0
  5300  1143  3400               	retlw	0
  5301  1144  3410               	retlw	16
  5302  1145  3400               	retlw	0
  5303  1146  3420               	retlw	32
  5304  1147  3400               	retlw	0
  5305  1148  342E               	retlw	46
  5306  1149  3400               	retlw	0
  5307  114A  343C               	retlw	60
  5308  114B  3400               	retlw	0
  5309  114C  3448               	retlw	72
  5310  114D  3400               	retlw	0
  5311  114E  3453               	retlw	83
  5312  114F  3400               	retlw	0
  5313  1150  345B               	retlw	91
  5314  1151  3400               	retlw	0
  5315  1152  3461               	retlw	97
  5316  1153  3400               	retlw	0
  5317  1154  3465               	retlw	101
  5318  1155  3400               	retlw	0
  5319  1156  3466               	retlw	102
  5320  1157  3400               	retlw	0
  5321  1158  3465               	retlw	101
  5322  1159  3400               	retlw	0
  5323  115A  3461               	retlw	97
  5324  115B  3400               	retlw	0
  5325  115C  345B               	retlw	91
  5326  115D  3400               	retlw	0
  5327  115E  3453               	retlw	83
  5328  115F  3400               	retlw	0
  5329  1160  3448               	retlw	72
  5330  1161  3400               	retlw	0
  5331  1162  343C               	retlw	60
  5332  1163  3400               	retlw	0
  5333  1164  342E               	retlw	46
  5334  1165  3400               	retlw	0
  5335  1166  3420               	retlw	32
  5336  1167  3400               	retlw	0
  5337  1168  3410               	retlw	16
  5338  1169  3400               	retlw	0
  5339  116A  3400               	retlw	0
  5340  116B  3400               	retlw	0
  5341  116C  34F0               	retlw	240
  5342  116D  3400               	retlw	0
  5343  116E  34E0               	retlw	224
  5344  116F  3400               	retlw	0
  5345  1170  34D2               	retlw	210
  5346  1171  3400               	retlw	0
  5347  1172  34C4               	retlw	196
  5348  1173  3400               	retlw	0
  5349  1174  34B8               	retlw	184
  5350  1175  3400               	retlw	0
  5351  1176  34AD               	retlw	173
  5352  1177  3400               	retlw	0
  5353  1178  34A5               	retlw	165
  5354  1179  3400               	retlw	0
  5355  117A  349F               	retlw	159
  5356  117B  3400               	retlw	0
  5357  117C  349B               	retlw	155
  5358  117D  3400               	retlw	0
  5359  117E  349A               	retlw	154
  5360  117F  3400               	retlw	0
  5361  1180  349B               	retlw	155
  5362  1181  3400               	retlw	0
  5363  1182  349F               	retlw	159
  5364  1183  3400               	retlw	0
  5365  1184  34A5               	retlw	165
  5366  1185  3400               	retlw	0
  5367  1186  34AD               	retlw	173
  5368  1187  3400               	retlw	0
  5369  1188  34B8               	retlw	184
  5370  1189  3400               	retlw	0
  5371  118A  34C4               	retlw	196
  5372  118B  3400               	retlw	0
  5373  118C  34D2               	retlw	210
  5374  118D  3400               	retlw	0
  5375  118E  34E0               	retlw	224
  5376  118F  3400               	retlw	0
  5377  1190  34F0               	retlw	240
  5378  1191  3400               	retlw	0
  5379  1192  3400               	retlw	0
  5380  1193  3400               	retlw	0
  5381  1194  3410               	retlw	16
  5382  1195  3400               	retlw	0
  5383  1196  3420               	retlw	32
  5384  1197  3400               	retlw	0
  5385  1198  342E               	retlw	46
  5386  1199  3400               	retlw	0
  5387  119A  343C               	retlw	60
  5388  119B  3400               	retlw	0
  5389  119C  3448               	retlw	72
  5390  119D  3400               	retlw	0
  5391  119E  3453               	retlw	83
  5392  119F  3400               	retlw	0
  5393  11A0  345B               	retlw	91
  5394  11A1  3400               	retlw	0
  5395  11A2  3461               	retlw	97
  5396  11A3  3400               	retlw	0
  5397  11A4  3465               	retlw	101
  5398  11A5  3400               	retlw	0
  5399  11A6  3466               	retlw	102
  5400  11A7  3400               	retlw	0
  5401  11A8  3465               	retlw	101
  5402  11A9  3400               	retlw	0
  5403  11AA  3461               	retlw	97
  5404  11AB  3400               	retlw	0
  5405  11AC  345B               	retlw	91
  5406  11AD  3400               	retlw	0
  5407  11AE  3453               	retlw	83
  5408  11AF  3400               	retlw	0
  5409  11B0  3448               	retlw	72
  5410  11B1  3400               	retlw	0
  5411  11B2  343C               	retlw	60
  5412  11B3  3400               	retlw	0
  5413  11B4  342E               	retlw	46
  5414  11B5  3400               	retlw	0
  5415  11B6  3420               	retlw	32
  5416  11B7  3400               	retlw	0
  5417  11B8  3410               	retlw	16
  5418  11B9  3400               	retlw	0
  5419  11BA  3400               	retlw	0
  5420  11BB  3400               	retlw	0
  5421  11BC  34F0               	retlw	240
  5422  11BD  3400               	retlw	0
  5423  11BE  34E0               	retlw	224
  5424  11BF  3400               	retlw	0
  5425  11C0  34D2               	retlw	210
  5426  11C1  3400               	retlw	0
  5427  11C2  34C4               	retlw	196
  5428  11C3  3400               	retlw	0
  5429  11C4  34B8               	retlw	184
  5430  11C5  3400               	retlw	0
  5431  11C6  34AD               	retlw	173
  5432  11C7  3400               	retlw	0
  5433  11C8  34A5               	retlw	165
  5434  11C9  3400               	retlw	0
  5435  11CA  349F               	retlw	159
  5436  11CB  3400               	retlw	0
  5437  11CC  349B               	retlw	155
  5438  11CD  3400               	retlw	0
  5439  11CE  349A               	retlw	154
  5440  11CF  3400               	retlw	0
  5441  11D0  349B               	retlw	155
  5442  11D1  3400               	retlw	0
  5443  11D2  349F               	retlw	159
  5444  11D3  3400               	retlw	0
  5445  11D4  34A5               	retlw	165
  5446  11D5  3400               	retlw	0
  5447  11D6  34AD               	retlw	173
  5448  11D7  3400               	retlw	0
  5449  11D8  34B8               	retlw	184
  5450  11D9  3400               	retlw	0
  5451  11DA  34C4               	retlw	196
  5452  11DB  3400               	retlw	0
  5453  11DC  34D2               	retlw	210
  5454  11DD  3400               	retlw	0
  5455  11DE  34E0               	retlw	224
  5456  11DF  3400               	retlw	0
  5457  11E0  34F0               	retlw	240
  5458  11E1  3400               	retlw	0
  5459  11E2  3400               	retlw	0
  5460  11E3  3400               	retlw	0
  5461  11E4                     __end_of_drv_sine:	
  5462                           
  5463                           	psect	stringtext3
  5464  1800                     __pstringtext3:	
  5465  1800                     drv2665@drv_fifo_sine:	
  5466  1800  340B               	retlw	11
  5467  1801  3400               	retlw	0
  5468  1802  3410               	retlw	16
  5469  1803  3420               	retlw	32
  5470  1804  342E               	retlw	46
  5471  1805  343C               	retlw	60
  5472  1806  3448               	retlw	72
  5473  1807  3453               	retlw	83
  5474  1808  345B               	retlw	91
  5475  1809  3461               	retlw	97
  5476  180A  3465               	retlw	101
  5477  180B  3466               	retlw	102
  5478  180C  3465               	retlw	101
  5479  180D  3461               	retlw	97
  5480  180E  345B               	retlw	91
  5481  180F  3453               	retlw	83
  5482  1810  3448               	retlw	72
  5483  1811  343C               	retlw	60
  5484  1812  342E               	retlw	46
  5485  1813  3420               	retlw	32
  5486  1814  3410               	retlw	16
  5487  1815  3400               	retlw	0
  5488  1816  34F0               	retlw	240
  5489  1817  34E0               	retlw	224
  5490  1818  34D2               	retlw	210
  5491  1819  34C4               	retlw	196
  5492  181A  34B8               	retlw	184
  5493  181B  34AD               	retlw	173
  5494  181C  34A5               	retlw	165
  5495  181D  349F               	retlw	159
  5496  181E  349B               	retlw	155
  5497  181F  349A               	retlw	154
  5498  1820  349B               	retlw	155
  5499  1821  349F               	retlw	159
  5500  1822  34A5               	retlw	165
  5501  1823  34AD               	retlw	173
  5502  1824  34B8               	retlw	184
  5503  1825  34C4               	retlw	196
  5504  1826  34D2               	retlw	210
  5505  1827  34E0               	retlw	224
  5506  1828  34F0               	retlw	240
  5507  1829  3400               	retlw	0
  5508  182A  3410               	retlw	16
  5509  182B  3420               	retlw	32
  5510  182C  342E               	retlw	46
  5511  182D  343C               	retlw	60
  5512  182E  3448               	retlw	72
  5513  182F  3453               	retlw	83
  5514  1830  345B               	retlw	91
  5515  1831  3461               	retlw	97
  5516  1832  3465               	retlw	101
  5517  1833  3466               	retlw	102
  5518  1834  3465               	retlw	101
  5519  1835  3461               	retlw	97
  5520  1836  345B               	retlw	91
  5521  1837  3453               	retlw	83
  5522  1838  3448               	retlw	72
  5523  1839  343C               	retlw	60
  5524  183A  342E               	retlw	46
  5525  183B  3420               	retlw	32
  5526  183C  3410               	retlw	16
  5527  183D  3400               	retlw	0
  5528  183E  34F0               	retlw	240
  5529  183F  34E0               	retlw	224
  5530  1840  34D2               	retlw	210
  5531  1841  34C4               	retlw	196
  5532  1842  34B8               	retlw	184
  5533  1843  34AD               	retlw	173
  5534  1844  34A5               	retlw	165
  5535  1845  349F               	retlw	159
  5536  1846  349B               	retlw	155
  5537  1847  349A               	retlw	154
  5538  1848  349B               	retlw	155
  5539  1849  349F               	retlw	159
  5540  184A  34A5               	retlw	165
  5541  184B  34AD               	retlw	173
  5542  184C  34B8               	retlw	184
  5543  184D  34C4               	retlw	196
  5544  184E  34D2               	retlw	210
  5545  184F  34E0               	retlw	224
  5546  1850  34F0               	retlw	240
  5547  1851  3400               	retlw	0
  5548  1852  3410               	retlw	16
  5549  1853  3420               	retlw	32
  5550  1854  342E               	retlw	46
  5551  1855  343C               	retlw	60
  5552  1856  3448               	retlw	72
  5553  1857  3453               	retlw	83
  5554  1858  345B               	retlw	91
  5555  1859  3461               	retlw	97
  5556  185A  3465               	retlw	101
  5557  185B  3466               	retlw	102
  5558  185C  3465               	retlw	101
  5559  185D  3461               	retlw	97
  5560  185E  345B               	retlw	91
  5561  185F  3453               	retlw	83
  5562  1860  3448               	retlw	72
  5563  1861  343C               	retlw	60
  5564  1862  342E               	retlw	46
  5565  1863  3420               	retlw	32
  5566  1864  3410               	retlw	16
  5567  1865  3400               	retlw	0
  5568  1866  34F0               	retlw	240
  5569  1867  34E0               	retlw	224
  5570  1868  34D2               	retlw	210
  5571  1869  34C4               	retlw	196
  5572  186A  34B8               	retlw	184
  5573  186B  34AD               	retlw	173
  5574  186C  34A5               	retlw	165
  5575  186D  349F               	retlw	159
  5576  186E  349B               	retlw	155
  5577  186F  349A               	retlw	154
  5578  1870  349B               	retlw	155
  5579  1871  349F               	retlw	159
  5580  1872  34A5               	retlw	165
  5581  1873  34AD               	retlw	173
  5582  1874  34B8               	retlw	184
  5583  1875  34C4               	retlw	196
  5584  1876  34D2               	retlw	210
  5585  1877  34E0               	retlw	224
  5586  1878  34F0               	retlw	240
  5587  1879  3400               	retlw	0
  5588  187A                     __end_ofdrv2665@drv_fifo_sine:	
  5589                           
  5590                           	psect	stringtext4
  5591  187A                     __pstringtext4:	
  5592  187A                     _drv_fifo_sine:	
  5593  187A  340B               	retlw	11
  5594  187B  3400               	retlw	0
  5595  187C  3410               	retlw	16
  5596  187D  3420               	retlw	32
  5597  187E  342E               	retlw	46
  5598  187F  343C               	retlw	60
  5599  1880  3448               	retlw	72
  5600  1881  3453               	retlw	83
  5601  1882  345B               	retlw	91
  5602  1883  3461               	retlw	97
  5603  1884  3465               	retlw	101
  5604  1885  3466               	retlw	102
  5605  1886  3465               	retlw	101
  5606  1887  3461               	retlw	97
  5607  1888  345B               	retlw	91
  5608  1889  3453               	retlw	83
  5609  188A  3448               	retlw	72
  5610  188B  343C               	retlw	60
  5611  188C  342E               	retlw	46
  5612  188D  3420               	retlw	32
  5613  188E  3410               	retlw	16
  5614  188F  3400               	retlw	0
  5615  1890  34F0               	retlw	240
  5616  1891  34E0               	retlw	224
  5617  1892  34D2               	retlw	210
  5618  1893  34C4               	retlw	196
  5619  1894  34B8               	retlw	184
  5620  1895  34AD               	retlw	173
  5621  1896  34A5               	retlw	165
  5622  1897  349F               	retlw	159
  5623  1898  349B               	retlw	155
  5624  1899  349A               	retlw	154
  5625  189A  349B               	retlw	155
  5626  189B  349F               	retlw	159
  5627  189C  34A5               	retlw	165
  5628  189D  34AD               	retlw	173
  5629  189E  34B8               	retlw	184
  5630  189F  34C4               	retlw	196
  5631  18A0  34D2               	retlw	210
  5632  18A1  34E0               	retlw	224
  5633  18A2  34F0               	retlw	240
  5634  18A3  3400               	retlw	0
  5635  18A4  3410               	retlw	16
  5636  18A5  3420               	retlw	32
  5637  18A6  342E               	retlw	46
  5638  18A7  343C               	retlw	60
  5639  18A8  3448               	retlw	72
  5640  18A9  3453               	retlw	83
  5641  18AA  345B               	retlw	91
  5642  18AB  3461               	retlw	97
  5643  18AC  3465               	retlw	101
  5644  18AD  3466               	retlw	102
  5645  18AE  3465               	retlw	101
  5646  18AF  3461               	retlw	97
  5647  18B0  345B               	retlw	91
  5648  18B1  3453               	retlw	83
  5649  18B2  3448               	retlw	72
  5650  18B3  343C               	retlw	60
  5651  18B4  342E               	retlw	46
  5652  18B5  3420               	retlw	32
  5653  18B6  3410               	retlw	16
  5654  18B7  3400               	retlw	0
  5655  18B8  34F0               	retlw	240
  5656  18B9  34E0               	retlw	224
  5657  18BA  34D2               	retlw	210
  5658  18BB  34C4               	retlw	196
  5659  18BC  34B8               	retlw	184
  5660  18BD  34AD               	retlw	173
  5661  18BE  34A5               	retlw	165
  5662  18BF  349F               	retlw	159
  5663  18C0  349B               	retlw	155
  5664  18C1  349A               	retlw	154
  5665  18C2  349B               	retlw	155
  5666  18C3  349F               	retlw	159
  5667  18C4  34A5               	retlw	165
  5668  18C5  34AD               	retlw	173
  5669  18C6  34B8               	retlw	184
  5670  18C7  34C4               	retlw	196
  5671  18C8  34D2               	retlw	210
  5672  18C9  34E0               	retlw	224
  5673  18CA  34F0               	retlw	240
  5674  18CB  3400               	retlw	0
  5675  18CC  3410               	retlw	16
  5676  18CD  3420               	retlw	32
  5677  18CE  342E               	retlw	46
  5678  18CF  343C               	retlw	60
  5679  18D0  3448               	retlw	72
  5680  18D1  3453               	retlw	83
  5681  18D2  345B               	retlw	91
  5682  18D3  3461               	retlw	97
  5683  18D4  3465               	retlw	101
  5684  18D5  3466               	retlw	102
  5685  18D6  3465               	retlw	101
  5686  18D7  3461               	retlw	97
  5687  18D8  345B               	retlw	91
  5688  18D9  3453               	retlw	83
  5689  18DA  3448               	retlw	72
  5690  18DB  343C               	retlw	60
  5691  18DC  342E               	retlw	46
  5692  18DD  3420               	retlw	32
  5693  18DE  3410               	retlw	16
  5694  18DF  3400               	retlw	0
  5695  18E0  34F0               	retlw	240
  5696  18E1  34E0               	retlw	224
  5697  18E2  34D2               	retlw	210
  5698  18E3  34C4               	retlw	196
  5699  18E4  34B8               	retlw	184
  5700  18E5  34AD               	retlw	173
  5701  18E6  34A5               	retlw	165
  5702  18E7  349F               	retlw	159
  5703  18E8  349B               	retlw	155
  5704  18E9  349A               	retlw	154
  5705  18EA  349B               	retlw	155
  5706  18EB  349F               	retlw	159
  5707  18EC  34A5               	retlw	165
  5708  18ED  34AD               	retlw	173
  5709  18EE  34B8               	retlw	184
  5710  18EF  34C4               	retlw	196
  5711  18F0  34D2               	retlw	210
  5712  18F1  34E0               	retlw	224
  5713  18F2  34F0               	retlw	240
  5714  18F3  3400               	retlw	0
  5715  18F4                     __end_of_drv_fifo_sine:	
  5716                           
  5717                           	psect	stringtext5
  5718  2800                     __pstringtext5:	
  5719  2800                     _dpowers:	
  5720  2800  3401               	retlw	1
  5721  2801  3400               	retlw	0
  5722  2802  3400               	retlw	0
  5723  2803  3400               	retlw	0
  5724  2804  340A               	retlw	10
  5725  2805  3400               	retlw	0
  5726  2806  3400               	retlw	0
  5727  2807  3400               	retlw	0
  5728  2808  3464               	retlw	100
  5729  2809  3400               	retlw	0
  5730  280A  3400               	retlw	0
  5731  280B  3400               	retlw	0
  5732  280C  34E8               	retlw	232
  5733  280D  3403               	retlw	3
  5734  280E  3400               	retlw	0
  5735  280F  3400               	retlw	0
  5736  2810  3410               	retlw	16
  5737  2811  3427               	retlw	39
  5738  2812  3400               	retlw	0
  5739  2813  3400               	retlw	0
  5740  2814  34A0               	retlw	160
  5741  2815  3486               	retlw	134
  5742  2816  3401               	retlw	1
  5743  2817  3400               	retlw	0
  5744  2818  3440               	retlw	64
  5745  2819  3442               	retlw	66
  5746  281A  340F               	retlw	15
  5747  281B  3400               	retlw	0
  5748  281C  3480               	retlw	128
  5749  281D  3496               	retlw	150
  5750  281E  3498               	retlw	152
  5751  281F  3400               	retlw	0
  5752  2820  3400               	retlw	0
  5753  2821  34E1               	retlw	225
  5754  2822  34F5               	retlw	245
  5755  2823  3405               	retlw	5
  5756  2824  3400               	retlw	0
  5757  2825  34CA               	retlw	202
  5758  2826  349A               	retlw	154
  5759  2827  343B               	retlw	59
  5760  2828                     __end_of_dpowers:	
  5761                           
  5762                           	psect	stringtext6
  5763  3032                     __pstringtext6:	
  5764  3032                     _TMR2_RANGE:	
  5765  3032  3400               	retlw	0
  5766  3033  34C8               	retlw	200
  5767  3034  343F               	retlw	63
  5768  3035                     __end_of_TMR2_RANGE:	
  5769                           
  5770                           	psect	stringtext7
  5771  3035                     __pstringtext7:	
  5772  3035                     _TMR0_RANGE:	
  5773  3035  3400               	retlw	0
  5774  3036  34C8               	retlw	200
  5775  3037  343D               	retlw	61
  5776  3038                     __end_of_TMR0_RANGE:	
  5777                           
  5778                           	psect	stringtext8
  5779  3044                     __pstringtext8:	
  5780  3044                     _LEDpower:	
  5781  3044  343F               	retlw	63
  5782  3045  3400               	retlw	0
  5783  3046                     __end_of_LEDpower:	
  5784                           
  5785                           	psect	stringtext9
  5786  3048                     __pstringtext9:	
  5787  3048                     _drv_address:	
  5788  3048  3459               	retlw	89
  5789  3049                     __end_of_drv_address:	
  5790                           
  5791                           	psect	stringtext10
  5792  290E                     __pstringtext10:	
  5793  290E                     sin@coeff_a:	
  5794  290E  34F4               	retlw	244
  5795  290F  344A               	retlw	74
  5796  2910  3448               	retlw	72
  5797  2911  3495               	retlw	149
  5798  2912  3495               	retlw	149
  5799  2913  34C7               	retlw	199
  5800  2914  34C1               	retlw	193
  5801  2915  34DC               	retlw	220
  5802  2916  3445               	retlw	69
  5803  2917  34DC               	retlw	220
  5804  2918  346D               	retlw	109
  5805  2919  34C3               	retlw	195
  5806  291A  34B3               	retlw	179
  5807  291B  3433               	retlw	51
  5808  291C  3440               	retlw	64
  5809  291D                     __end_ofsin@coeff_a:	
  5810                           
  5811                           	psect	stringtext11
  5812  2947                     __pstringtext11:	
  5813  2947                     sin@coeff_b:	
  5814  2947  3434               	retlw	52
  5815  2948  3401               	retlw	1
  5816  2949  3448               	retlw	72
  5817  294A  349D               	retlw	157
  5818  294B  34B0               	retlw	176
  5819  294C  3445               	retlw	69
  5820  294D  3400               	retlw	0
  5821  294E  34DA               	retlw	218
  5822  294F  3442               	retlw	66
  5823  2950  3400               	retlw	0
  5824  2951  3480               	retlw	128
  5825  2952  343F               	retlw	63
  5826  2953                     __end_ofsin@coeff_b:	
  5827                           
  5828                           	psect	nvBANK0
  5829  005E                     __pnvBANK0:	
  5830  005E                     _eusartTxBufferRemaining:	
  5831  005E                     	ds	1
  5832                           
  5833                           	psect	nvBANK3
  5834  01E6                     __pnvBANK3:	
  5835  01E6                     _TMR4_InterruptHandler:	
  5836  01E6                     	ds	2
  5837  01E8                     _TMR2_InterruptHandler:	
  5838  01E8                     	ds	2
  5839  01EA                     _TMR0_InterruptHandler:	
  5840  01EA                     	ds	2
  5841  001F                     _T2CONbits	set	31
  5842  001F                     _T2CON	set	31
  5843  001D                     _TMR2	set	29
  5844  001E                     _PR2	set	30
  5845  0017                     _T0CON0bits	set	23
  5846  0017                     _T0CON0	set	23
  5847  0015                     _TMR0L	set	21
  5848  0016                     _TMR0H	set	22
  5849  0018                     _T0CON1	set	24
  5850  0012                     _PIR2bits	set	18
  5851  0011                     _PIR1bits	set	17
  5852  0010                     _PIR0bits	set	16
  5853  000E                     _PORTCbits	set	14
  5854  000B                     _INTCONbits	set	11
  5855  0092                     _PIE2bits	set	146
  5856  0091                     _PIE1bits	set	145
  5857  0090                     _PIE0bits	set	144
  5858  008E                     _TRISC	set	142
  5859  008D                     _TRISB	set	141
  5860  008C                     _TRISA	set	140
  5861  0097                     _WDTCON	set	151
  5862  010C                     _LATAbits	set	268
  5863  010E                     _LATCbits	set	270
  5864  010D                     _LATBbits	set	269
  5865  010E                     _LATC	set	270
  5866  010D                     _LATB	set	269
  5867  010C                     _LATA	set	268
  5868  0199                     _RC1REG	set	409
  5869  019D                     _RC1STAbits	set	413
  5870  019A                     _TX1REG	set	410
  5871  019C                     _SP1BRGH	set	412
  5872  019B                     _SP1BRGL	set	411
  5873  019E                     _TX1STA	set	414
  5874  019D                     _RC1STA	set	413
  5875  019F                     _BAUD1CON	set	415
  5876  018C                     _ANSELA	set	396
  5877  018D                     _ANSELB	set	397
  5878  018E                     _ANSELC	set	398
  5879  0214                     _SSP1STATbits	set	532
  5880  0213                     _SSP1MSK	set	531
  5881  0211                     _SSP1BUF	set	529
  5882  0216                     _SSP1CON2bits	set	534
  5883  0212                     _SSP1ADD	set	530
  5884  0216                     _SSP1CON2	set	534
  5885  0215                     _SSP1CON1	set	533
  5886  0214                     _SSP1STAT	set	532
  5887  0215                     _SSP1CON1bits	set	533
  5888  020E                     _WPUC	set	526
  5889  020C                     _WPUA	set	524
  5890  020D                     _WPUB	set	525
  5891  028E                     _ODCONC	set	654
  5892  028D                     _ODCONB	set	653
  5893  028C                     _ODCONA	set	652
  5894  0417                     _T4CONbits	set	1047
  5895  0417                     _T4CON	set	1047
  5896  0415                     _TMR4	set	1045
  5897  0416                     _PR4	set	1046
  5898  0896                     _NVMCON2	set	2198
  5899  0893                     _NVMDATL	set	2195
  5900  0894                     _NVMDATH	set	2196
  5901  0895                     _NVMCON1bits	set	2197
  5902  0892                     _NVMADRH	set	2194
  5903  0891                     _NVMADRL	set	2193
  5904  0916                     _PMD5	set	2326
  5905  0915                     _PMD4	set	2325
  5906  0914                     _PMD3	set	2324
  5907  0913                     _PMD2	set	2323
  5908  0912                     _PMD1	set	2322
  5909  0911                     _PMD0	set	2321
  5910  091E                     _OSCTUNE	set	2334
  5911  091F                     _OSCFRQ	set	2335
  5912  091D                     _OSCEN	set	2333
  5913  091B                     _OSCCON3	set	2331
  5914  0919                     _OSCCON1	set	2329
  5915  0E24                     _RXPPSbits	set	3620
  5916  0E20                     _SSP1CLKPPSbits	set	3616
  5917  0E21                     _SSP1DATPPSbits	set	3617
  5918  0E9D                     _RB5PPSbits	set	3741
  5919  0E9E                     _RB6PPSbits	set	3742
  5920  0E9F                     _RB7PPSbits	set	3743
  5921                           
  5922                           	psect	stringtext12
  5923  2828                     __pstringtext12:	
  5924  2828                     STR_40:	
  5925  2828  340A               	retlw	10
  5926  2829  3474               	retlw	116	;'t'
  5927  282A  3465               	retlw	101	;'e'
  5928  282B  3473               	retlw	115	;'s'
  5929  282C  3474               	retlw	116	;'t'
  5930  282D  3469               	retlw	105	;'i'
  5931  282E  346E               	retlw	110	;'n'
  5932  282F  3467               	retlw	103	;'g'
  5933  2830  3420               	retlw	32	;' '
  5934  2831  3462               	retlw	98	;'b'
  5935  2832  346F               	retlw	111	;'o'
  5936  2833  3474               	retlw	116	;'t'
  5937  2834  3474               	retlw	116	;'t'
  5938  2835  346F               	retlw	111	;'o'
  5939  2836  346D               	retlw	109	;'m'
  5940  2837  3420               	retlw	32	;' '
  5941  2838  344C               	retlw	76	;'L'
  5942  2839  3445               	retlw	69	;'E'
  5943  283A  3444               	retlw	68	;'D'
  5944  283B  3420               	retlw	32	;' '
  5945  283C  3464               	retlw	100	;'d'
  5946  283D  3472               	retlw	114	;'r'
  5947  283E  3469               	retlw	105	;'i'
  5948  283F  3476               	retlw	118	;'v'
  5949  2840  3465               	retlw	101	;'e'
  5950  2841  3472               	retlw	114	;'r'
  5951  2842  342E               	retlw	46	;'.'
  5952  2843  342E               	retlw	46	;'.'
  5953  2844  342E               	retlw	46	;'.'
  5954  2845  340A               	retlw	10
  5955  2846  3400               	retlw	0
  5956                           
  5957                           	psect	stringtext13
  5958  2847                     __pstringtext13:	
  5959  2847                     STR_34:	
  5960  2847  340A               	retlw	10
  5961  2848  342D               	retlw	45	;'-'
  5962  2849  342D               	retlw	45	;'-'
  5963  284A  342D               	retlw	45	;'-'
  5964  284B  342D               	retlw	45	;'-'
  5965  284C  3473               	retlw	115	;'s'
  5966  284D  3474               	retlw	116	;'t'
  5967  284E  3461               	retlw	97	;'a'
  5968  284F  3472               	retlw	114	;'r'
  5969  2850  3474               	retlw	116	;'t'
  5970  2851  3469               	retlw	105	;'i'
  5971  2852  346E               	retlw	110	;'n'
  5972  2853  3467               	retlw	103	;'g'
  5973  2854  3420               	retlw	32	;' '
  5974  2855  3463               	retlw	99	;'c'
  5975  2856  346F               	retlw	111	;'o'
  5976  2857  346D               	retlw	109	;'m'
  5977  2858  346D               	retlw	109	;'m'
  5978  2859  3420               	retlw	32	;' '
  5979  285A  3474               	retlw	116	;'t'
  5980  285B  3465               	retlw	101	;'e'
  5981  285C  3473               	retlw	115	;'s'
  5982  285D  3474               	retlw	116	;'t'
  5983  285E  342D               	retlw	45	;'-'
  5984  285F  342D               	retlw	45	;'-'
  5985  2860  342D               	retlw	45	;'-'
  5986  2861  342D               	retlw	45	;'-'
  5987  2862  340A               	retlw	10
  5988  2863  340A               	retlw	10
  5989  2864  3400               	retlw	0
  5990                           
  5991                           	psect	stringtext14
  5992  2865                     __pstringtext14:	
  5993  2865                     STR_48:	
  5994  2865  342D               	retlw	45	;'-'
  5995  2866  342D               	retlw	45	;'-'
  5996  2867  342D               	retlw	45	;'-'
  5997  2868  342D               	retlw	45	;'-'
  5998  2869  3466               	retlw	102	;'f'
  5999  286A  3469               	retlw	105	;'i'
  6000  286B  346E               	retlw	110	;'n'
  6001  286C  3469               	retlw	105	;'i'
  6002  286D  3473               	retlw	115	;'s'
  6003  286E  3468               	retlw	104	;'h'
  6004  286F  3465               	retlw	101	;'e'
  6005  2870  3464               	retlw	100	;'d'
  6006  2871  3420               	retlw	32	;' '
  6007  2872  3463               	retlw	99	;'c'
  6008  2873  346F               	retlw	111	;'o'
  6009  2874  346D               	retlw	109	;'m'
  6010  2875  346D               	retlw	109	;'m'
  6011  2876  3420               	retlw	32	;' '
  6012  2877  3474               	retlw	116	;'t'
  6013  2878  3465               	retlw	101	;'e'
  6014  2879  3473               	retlw	115	;'s'
  6015  287A  3474               	retlw	116	;'t'
  6016  287B  342D               	retlw	45	;'-'
  6017  287C  342D               	retlw	45	;'-'
  6018  287D  342D               	retlw	45	;'-'
  6019  287E  342D               	retlw	45	;'-'
  6020  287F  340A               	retlw	10
  6021  2880  3400               	retlw	0
  6022                           
  6023                           	psect	stringtext15
  6024  2881                     __pstringtext15:	
  6025  2881                     STR_35:	
  6026  2881  3474               	retlw	116	;'t'
  6027  2882  3465               	retlw	101	;'e'
  6028  2883  3473               	retlw	115	;'s'
  6029  2884  3474               	retlw	116	;'t'
  6030  2885  3469               	retlw	105	;'i'
  6031  2886  346E               	retlw	110	;'n'
  6032  2887  3467               	retlw	103	;'g'
  6033  2888  3420               	retlw	32	;' '
  6034  2889  3474               	retlw	116	;'t'
  6035  288A  346F               	retlw	111	;'o'
  6036  288B  3470               	retlw	112	;'p'
  6037  288C  3420               	retlw	32	;' '
  6038  288D  344C               	retlw	76	;'L'
  6039  288E  3445               	retlw	69	;'E'
  6040  288F  3444               	retlw	68	;'D'
  6041  2890  3420               	retlw	32	;' '
  6042  2891  3464               	retlw	100	;'d'
  6043  2892  3472               	retlw	114	;'r'
  6044  2893  3469               	retlw	105	;'i'
  6045  2894  3476               	retlw	118	;'v'
  6046  2895  3465               	retlw	101	;'e'
  6047  2896  3472               	retlw	114	;'r'
  6048  2897  342E               	retlw	46	;'.'
  6049  2898  342E               	retlw	46	;'.'
  6050  2899  342E               	retlw	46	;'.'
  6051  289A  3400               	retlw	0
  6052                           
  6053                           	psect	stringtext16
  6054  289B                     __pstringtext16:	
  6055  289B                     STR_45:	
  6056  289B  340A               	retlw	10
  6057  289C  3474               	retlw	116	;'t'
  6058  289D  3465               	retlw	101	;'e'
  6059  289E  3473               	retlw	115	;'s'
  6060  289F  3474               	retlw	116	;'t'
  6061  28A0  3469               	retlw	105	;'i'
  6062  28A1  346E               	retlw	110	;'n'
  6063  28A2  3467               	retlw	103	;'g'
  6064  28A3  3420               	retlw	32	;' '
  6065  28A4  3470               	retlw	112	;'p'
  6066  28A5  3469               	retlw	105	;'i'
  6067  28A6  3465               	retlw	101	;'e'
  6068  28A7  347A               	retlw	122	;'z'
  6069  28A8  346F               	retlw	111	;'o'
  6070  28A9  3420               	retlw	32	;' '
  6071  28AA  3464               	retlw	100	;'d'
  6072  28AB  3472               	retlw	114	;'r'
  6073  28AC  3469               	retlw	105	;'i'
  6074  28AD  3476               	retlw	118	;'v'
  6075  28AE  3465               	retlw	101	;'e'
  6076  28AF  3472               	retlw	114	;'r'
  6077  28B0  342E               	retlw	46	;'.'
  6078  28B1  342E               	retlw	46	;'.'
  6079  28B2  342E               	retlw	46	;'.'
  6080  28B3  3400               	retlw	0
  6081                           
  6082                           	psect	stringtext17
  6083  28B4                     __pstringtext17:	
  6084  28B4                     STR_80:	
  6085  28B4  3455               	retlw	85	;'U'
  6086  28B5  344E               	retlw	78	;'N'
  6087  28B6  3452               	retlw	82	;'R'
  6088  28B7  3445               	retlw	69	;'E'
  6089  28B8  3443               	retlw	67	;'C'
  6090  28B9  344F               	retlw	79	;'O'
  6091  28BA  3447               	retlw	71	;'G'
  6092  28BB  344E               	retlw	78	;'N'
  6093  28BC  3449               	retlw	73	;'I'
  6094  28BD  345A               	retlw	90	;'Z'
  6095  28BE  3445               	retlw	69	;'E'
  6096  28BF  3444               	retlw	68	;'D'
  6097  28C0  3420               	retlw	32	;' '
  6098  28C1  3443               	retlw	67	;'C'
  6099  28C2  344F               	retlw	79	;'O'
  6100  28C3  344D               	retlw	77	;'M'
  6101  28C4  344D               	retlw	77	;'M'
  6102  28C5  3441               	retlw	65	;'A'
  6103  28C6  344E               	retlw	78	;'N'
  6104  28C7  3444               	retlw	68	;'D'
  6105  28C8  3421               	retlw	33	;'!'
  6106  28C9  340A               	retlw	10
  6107  28CA  3400               	retlw	0
  6108                           
  6109                           	psect	stringtext18
  6110  28CB                     __pstringtext18:	
  6111  28CB                     STR_49:	
  6112  28CB  3464               	retlw	100	;'d'
  6113  28CC  3472               	retlw	114	;'r'
  6114  28CD  3476               	retlw	118	;'v'
  6115  28CE  345F               	retlw	95	;'_'
  6116  28CF  3477               	retlw	119	;'w'
  6117  28D0  3472               	retlw	114	;'r'
  6118  28D1  3469               	retlw	105	;'i'
  6119  28D2  3474               	retlw	116	;'t'
  6120  28D3  3465               	retlw	101	;'e'
  6121  28D4  3420               	retlw	32	;' '
  6122  28D5  3465               	retlw	101	;'e'
  6123  28D6  3472               	retlw	114	;'r'
  6124  28D7  3472               	retlw	114	;'r'
  6125  28D8  346F               	retlw	111	;'o'
  6126  28D9  3472               	retlw	114	;'r'
  6127  28DA  3421               	retlw	33	;'!'
  6128  28DB  340A               	retlw	10
  6129  28DC  3400               	retlw	0
  6130                           
  6131                           	psect	stringtext19
  6132  28DD                     __pstringtext19:	
  6133  28DD                     STR_51:	
  6134  28DD  3464               	retlw	100	;'d'
  6135  28DE  3472               	retlw	114	;'r'
  6136  28DF  3476               	retlw	118	;'v'
  6137  28E0  345F               	retlw	95	;'_'
  6138  28E1  3472               	retlw	114	;'r'
  6139  28E2  3465               	retlw	101	;'e'
  6140  28E3  3461               	retlw	97	;'a'
  6141  28E4  3464               	retlw	100	;'d'
  6142  28E5  3420               	retlw	32	;' '
  6143  28E6  3465               	retlw	101	;'e'
  6144  28E7  3472               	retlw	114	;'r'
  6145  28E8  3472               	retlw	114	;'r'
  6146  28E9  346F               	retlw	111	;'o'
  6147  28EA  3472               	retlw	114	;'r'
  6148  28EB  3421               	retlw	33	;'!'
  6149  28EC  340A               	retlw	10
  6150  28ED  3400               	retlw	0
  6151                           
  6152                           	psect	stringtext20
  6153  28EE                     __pstringtext20:	
  6154  28EE                     STR_6:	
  6155  28EE  3461               	retlw	97	;'a'
  6156  28EF  3462               	retlw	98	;'b'
  6157  28F0  3473               	retlw	115	;'s'
  6158  28F1  343A               	retlw	58	;':'
  6159  28F2  3420               	retlw	32	;' '
  6160  28F3  3461               	retlw	97	;'a'
  6161  28F4  346C               	retlw	108	;'l'
  6162  28F5  346C               	retlw	108	;'l'
  6163  28F6  3420               	retlw	32	;' '
  6164  28F7  3474               	retlw	116	;'t'
  6165  28F8  3468               	retlw	104	;'h'
  6166  28F9  3465               	retlw	101	;'e'
  6167  28FA  3472               	retlw	114	;'r'
  6168  28FB  3465               	retlw	101	;'e'
  6169  28FC  340A               	retlw	10
  6170  28FD  3400               	retlw	0
  6171                           
  6172                           	psect	stringtext21
  6173  28FE                     __pstringtext21:	
  6174  28FE                     STR_4:	
  6175  28FE  3472               	retlw	114	;'r'
  6176  28FF  3465               	retlw	101	;'e'
  6177  2900  3461               	retlw	97	;'a'
  6178  2901  3464               	retlw	100	;'d'
  6179  2902  3420               	retlw	32	;' '
  6180  2903  3464               	retlw	100	;'d'
  6181  2904  3461               	retlw	97	;'a'
  6182  2905  3474               	retlw	116	;'t'
  6183  2906  3461               	retlw	97	;'a'
  6184  2907  343A               	retlw	58	;':'
  6185  2908  3420               	retlw	32	;' '
  6186  2909  3425               	retlw	37	;'%'
  6187  290A  346C               	retlw	108	;'l'
  6188  290B  3475               	retlw	117	;'u'
  6189  290C  340A               	retlw	10
  6190  290D  3400               	retlw	0
  6191                           
  6192                           	psect	stringtext22
  6193  291D                     __pstringtext22:	
  6194  291D                     STR_65:	
  6195  291D  3468               	retlw	104	;'h'
  6196  291E  3465               	retlw	101	;'e'
  6197  291F  3461               	retlw	97	;'a'
  6198  2920  3474               	retlw	116	;'t'
  6199  2921  3465               	retlw	101	;'e'
  6200  2922  3472               	retlw	114	;'r'
  6201  2923  3470               	retlw	112	;'p'
  6202  2924  346F               	retlw	111	;'o'
  6203  2925  3473               	retlw	115	;'s'
  6204  2926  3474               	retlw	116	;'t'
  6205  2927  3474               	retlw	116	;'t'
  6206  2928  3469               	retlw	105	;'i'
  6207  2929  346D               	retlw	109	;'m'
  6208  292A  3465               	retlw	101	;'e'
  6209  292B  3400               	retlw	0
  6210                           
  6211                           	psect	stringtext23
  6212  292C                     __pstringtext23:	
  6213  292C                     STR_64:	
  6214  292C  3468               	retlw	104	;'h'
  6215  292D  3465               	retlw	101	;'e'
  6216  292E  3461               	retlw	97	;'a'
  6217  292F  3474               	retlw	116	;'t'
  6218  2930  3465               	retlw	101	;'e'
  6219  2931  3472               	retlw	114	;'r'
  6220  2932  3470               	retlw	112	;'p'
  6221  2933  3472               	retlw	114	;'r'
  6222  2934  3465               	retlw	101	;'e'
  6223  2935  3474               	retlw	116	;'t'
  6224  2936  3469               	retlw	105	;'i'
  6225  2937  346D               	retlw	109	;'m'
  6226  2938  3465               	retlw	101	;'e'
  6227  2939  3400               	retlw	0
  6228                           
  6229                           	psect	stringtext24
  6230  293A                     __pstringtext24:	
  6231  293A                     STR_70:	
  6232  293A  3474               	retlw	116	;'t'
  6233  293B  346F               	retlw	111	;'o'
  6234  293C  3467               	retlw	103	;'g'
  6235  293D  3467               	retlw	103	;'g'
  6236  293E  346C               	retlw	108	;'l'
  6237  293F  3465               	retlw	101	;'e'
  6238  2940  3468               	retlw	104	;'h'
  6239  2941  3465               	retlw	101	;'e'
  6240  2942  3461               	retlw	97	;'a'
  6241  2943  3474               	retlw	116	;'t'
  6242  2944  3465               	retlw	101	;'e'
  6243  2945  3472               	retlw	114	;'r'
  6244  2946  3400               	retlw	0
  6245                           
  6246                           	psect	stringtext25
  6247  2953                     __pstringtext25:	
  6248  2953                     STR_63:	
  6249  2953  3470               	retlw	112	;'p'
  6250  2954  3469               	retlw	105	;'i'
  6251  2955  3465               	retlw	101	;'e'
  6252  2956  347A               	retlw	122	;'z'
  6253  2957  346F               	retlw	111	;'o'
  6254  2958  346F               	retlw	111	;'o'
  6255  2959  346E               	retlw	110	;'n'
  6256  295A  3474               	retlw	116	;'t'
  6257  295B  3469               	retlw	105	;'i'
  6258  295C  346D               	retlw	109	;'m'
  6259  295D  3465               	retlw	101	;'e'
  6260  295E  3400               	retlw	0
  6261                           
  6262                           	psect	stringtext26
  6263  295F                     __pstringtext26:	
  6264  295F                     STR_66:	
  6265  295F  3468               	retlw	104	;'h'
  6266  2960  3465               	retlw	101	;'e'
  6267  2961  3461               	retlw	97	;'a'
  6268  2962  3474               	retlw	116	;'t'
  6269  2963  3465               	retlw	101	;'e'
  6270  2964  3472               	retlw	114	;'r'
  6271  2965  3431               	retlw	49	;'1'
  6272  2966  346F               	retlw	111	;'o'
  6273  2967  3466               	retlw	102	;'f'
  6274  2968  3466               	retlw	102	;'f'
  6275  2969  3400               	retlw	0
  6276                           
  6277                           	psect	stringtext27
  6278  296A                     __pstringtext27:	
  6279  296A                     STR_71:	
  6280  296A  3474               	retlw	116	;'t'
  6281  296B  3469               	retlw	105	;'i'
  6282  296C  346D               	retlw	109	;'m'
  6283  296D  3465               	retlw	101	;'e'
  6284  296E  3468               	retlw	104	;'h'
  6285  296F  3465               	retlw	101	;'e'
  6286  2970  3461               	retlw	97	;'a'
  6287  2971  3474               	retlw	116	;'t'
  6288  2972  3465               	retlw	101	;'e'
  6289  2973  3472               	retlw	114	;'r'
  6290  2974  3400               	retlw	0
  6291                           
  6292                           	psect	stringtext28
  6293  2975                     __pstringtext28:	
  6294  2975                     STR_39:	
  6295  2975  340A               	retlw	10
  6296  2976  340A               	retlw	10
  6297  2977  3473               	retlw	115	;'s'
  6298  2978  3468               	retlw	104	;'h'
  6299  2979  346F               	retlw	111	;'o'
  6300  297A  3472               	retlw	114	;'r'
  6301  297B  3474               	retlw	116	;'t'
  6302  297C  3473               	retlw	115	;'s'
  6303  297D  343A               	retlw	58	;':'
  6304  297E  3420               	retlw	32	;' '
  6305  297F  3400               	retlw	0
  6306                           
  6307                           	psect	stringtext29
  6308  2980                     __pstringtext29:	
  6309  2980                     STR_67:	
  6310  2980  3468               	retlw	104	;'h'
  6311  2981  3465               	retlw	101	;'e'
  6312  2982  3461               	retlw	97	;'a'
  6313  2983  3474               	retlw	116	;'t'
  6314  2984  3465               	retlw	101	;'e'
  6315  2985  3472               	retlw	114	;'r'
  6316  2986  3432               	retlw	50	;'2'
  6317  2987  346F               	retlw	111	;'o'
  6318  2988  346E               	retlw	110	;'n'
  6319  2989  3400               	retlw	0
  6320                           
  6321                           	psect	stringtext30
  6322  298A                     __pstringtext30:	
  6323  298A                     STR_78:	
  6324  298A  3473               	retlw	115	;'s'
  6325  298B  346F               	retlw	111	;'o'
  6326  298C  3466               	retlw	102	;'f'
  6327  298D  3474               	retlw	116	;'t'
  6328  298E  3472               	retlw	114	;'r'
  6329  298F  3465               	retlw	101	;'e'
  6330  2990  3473               	retlw	115	;'s'
  6331  2991  3465               	retlw	101	;'e'
  6332  2992  3474               	retlw	116	;'t'
  6333  2993  3400               	retlw	0
  6334                           
  6335                           	psect	stringtext31
  6336  2994                     __pstringtext31:	
  6337  2994                     STR_47:	
  6338  2994  3446               	retlw	70	;'F'
  6339  2995  3441               	retlw	65	;'A'
  6340  2996  3449               	retlw	73	;'I'
  6341  2997  344C               	retlw	76	;'L'
  6342  2998  3445               	retlw	69	;'E'
  6343  2999  3444               	retlw	68	;'D'
  6344  299A  340A               	retlw	10
  6345  299B  340A               	retlw	10
  6346  299C  3400               	retlw	0
  6347                           
  6348                           	psect	stringtext32
  6349  299D                     __pstringtext32:	
  6350  299D                     STR_46:	
  6351  299D  3470               	retlw	112	;'p'
  6352  299E  3461               	retlw	97	;'a'
  6353  299F  3473               	retlw	115	;'s'
  6354  29A0  3473               	retlw	115	;'s'
  6355  29A1  3465               	retlw	101	;'e'
  6356  29A2  3464               	retlw	100	;'d'
  6357  29A3  340A               	retlw	10
  6358  29A4  340A               	retlw	10
  6359  29A5  3400               	retlw	0
  6360                           
  6361                           	psect	stringtext33
  6362  29A6                     __pstringtext33:	
  6363  29A6                     STR_61:	
  6364  29A6  3464               	retlw	100	;'d'
  6365  29A7  3472               	retlw	114	;'r'
  6366  29A8  3476               	retlw	118	;'v'
  6367  29A9  3450               	retlw	80	;'P'
  6368  29AA  3465               	retlw	101	;'e'
  6369  29AB  3461               	retlw	97	;'a'
  6370  29AC  346B               	retlw	107	;'k'
  6371  29AD  3400               	retlw	0
  6372                           
  6373                           	psect	stringtext34
  6374  29AE                     __pstringtext34:	
  6375  29AE                     STR_62:	
  6376  29AE  3464               	retlw	100	;'d'
  6377  29AF  3472               	retlw	114	;'r'
  6378  29B0  3476               	retlw	118	;'v'
  6379  29B1  3447               	retlw	71	;'G'
  6380  29B2  3461               	retlw	97	;'a'
  6381  29B3  3469               	retlw	105	;'i'
  6382  29B4  346E               	retlw	110	;'n'
  6383  29B5  3400               	retlw	0
  6384                           
  6385                           	psect	stringtext35
  6386  29B6                     __pstringtext35:	
  6387  29B6                     STR_68:	
  6388  29B6  346C               	retlw	108	;'l'
  6389  29B7  3465               	retlw	101	;'e'
  6390  29B8  3464               	retlw	100	;'d'
  6391  29B9  3467               	retlw	103	;'g'
  6392  29BA  3461               	retlw	97	;'a'
  6393  29BB  3469               	retlw	105	;'i'
  6394  29BC  346E               	retlw	110	;'n'
  6395  29BD  3400               	retlw	0
  6396                           
  6397                           	psect	stringtext36
  6398  29BE                     __pstringtext36:	
  6399  29BE                     STR_74:	
  6400  29BE  346D               	retlw	109	;'m'
  6401  29BF  3473               	retlw	115	;'s'
  6402  29C0  3474               	retlw	116	;'t'
  6403  29C1  3461               	retlw	97	;'a'
  6404  29C2  3474               	retlw	116	;'t'
  6405  29C3  3475               	retlw	117	;'u'
  6406  29C4  3473               	retlw	115	;'s'
  6407  29C5  3400               	retlw	0
  6408                           
  6409                           	psect	stringtext37
  6410  29C6                     __pstringtext37:	
  6411  29C6                     STR_37:	
  6412  29C6  3446               	retlw	70	;'F'
  6413  29C7  3441               	retlw	65	;'A'
  6414  29C8  3449               	retlw	73	;'I'
  6415  29C9  344C               	retlw	76	;'L'
  6416  29CA  3445               	retlw	69	;'E'
  6417  29CB  3444               	retlw	68	;'D'
  6418  29CC  340A               	retlw	10
  6419  29CD  3400               	retlw	0
  6420                           
  6421                           	psect	stringtext38
  6422  29CE                     __pstringtext38:	
  6423  29CE                     STR_36:	
  6424  29CE  3470               	retlw	112	;'p'
  6425  29CF  3461               	retlw	97	;'a'
  6426  29D0  3473               	retlw	115	;'s'
  6427  29D1  3473               	retlw	115	;'s'
  6428  29D2  3465               	retlw	101	;'e'
  6429  29D3  3464               	retlw	100	;'d'
  6430  29D4  340A               	retlw	10
  6431  29D5  3400               	retlw	0
  6432                           
  6433                           	psect	stringtext39
  6434  29D6                     __pstringtext39:	
  6435  29D6                     STR_38:	
  6436  29D6  346F               	retlw	111	;'o'
  6437  29D7  3470               	retlw	112	;'p'
  6438  29D8  3465               	retlw	101	;'e'
  6439  29D9  346E               	retlw	110	;'n'
  6440  29DA  3473               	retlw	115	;'s'
  6441  29DB  343A               	retlw	58	;':'
  6442  29DC  3420               	retlw	32	;' '
  6443  29DD  3400               	retlw	0
  6444                           
  6445                           	psect	stringtext40
  6446  29DE                     __pstringtext40:	
  6447  29DE                     STR_75:	
  6448  29DE  3464               	retlw	100	;'d'
  6449  29DF  346F               	retlw	111	;'o'
  6450  29E0  346D               	retlw	109	;'m'
  6451  29E1  346F               	retlw	111	;'o'
  6452  29E2  3476               	retlw	118	;'v'
  6453  29E3  3465               	retlw	101	;'e'
  6454  29E4  3400               	retlw	0
  6455                           
  6456                           	psect	stringtext41
  6457  29E5                     __pstringtext41:	
  6458  29E5                     STR_69:	
  6459  29E5  346C               	retlw	108	;'l'
  6460  29E6  3465               	retlw	101	;'e'
  6461  29E7  3464               	retlw	100	;'d'
  6462  29E8  3470               	retlw	112	;'p'
  6463  29E9  3477               	retlw	119	;'w'
  6464  29EA  3472               	retlw	114	;'r'
  6465  29EB  3400               	retlw	0
  6466                           
  6467                           	psect	stringtext42
  6468  3000                     __pstringtext42:	
  6469  3000                     STR_72:	
  6470  3000  3467               	retlw	103	;'g'
  6471  3001  3465               	retlw	101	;'e'
  6472  3002  3474               	retlw	116	;'t'
  6473  3003  3441               	retlw	65	;'A'
  6474  3004  3400               	retlw	0
  6475                           
  6476                           	psect	stringtext43
  6477  3005                     __pstringtext43:	
  6478  3005                     STR_58:	
  6479  3005  3473               	retlw	115	;'s'
  6480  3006  3465               	retlw	101	;'e'
  6481  3007  3474               	retlw	116	;'t'
  6482  3008  3441               	retlw	65	;'A'
  6483  3009  3400               	retlw	0
  6484                           
  6485                           	psect	stringtext44
  6486  300A                     __pstringtext44:	
  6487  300A                     STR_73:	
  6488  300A  3467               	retlw	103	;'g'
  6489  300B  3465               	retlw	101	;'e'
  6490  300C  3474               	retlw	116	;'t'
  6491  300D  344D               	retlw	77	;'M'
  6492  300E  3400               	retlw	0
  6493                           
  6494                           	psect	stringtext45
  6495  300F                     __pstringtext45:	
  6496  300F                     STR_59:	
  6497  300F  3473               	retlw	115	;'s'
  6498  3010  3465               	retlw	101	;'e'
  6499  3011  3474               	retlw	116	;'t'
  6500  3012  344D               	retlw	77	;'M'
  6501  3013  3400               	retlw	0
  6502                           
  6503                           	psect	stringtext46
  6504  3014                     __pstringtext46:	
  6505  3014                     STR_77:	
  6506  3014  3470               	retlw	112	;'p'
  6507  3015  3469               	retlw	105	;'i'
  6508  3016  346E               	retlw	110	;'n'
  6509  3017  3467               	retlw	103	;'g'
  6510  3018  3400               	retlw	0
  6511                           
  6512                           	psect	stringtext47
  6513  3019                     __pstringtext47:	
  6514  3019                     STR_76:	
  6515  3019  3463               	retlw	99	;'c'
  6516  301A  346F               	retlw	111	;'o'
  6517  301B  346D               	retlw	109	;'m'
  6518  301C  346D               	retlw	109	;'m'
  6519  301D  3400               	retlw	0
  6520                           
  6521                           	psect	stringtext48
  6522  301E                     __pstringtext48:	
  6523  301E                     STR_54:	
  6524  301E  3472               	retlw	114	;'r'
  6525  301F  3465               	retlw	101	;'e'
  6526  3020  346C               	retlw	108	;'l'
  6527  3021  3400               	retlw	0
  6528                           
  6529                           	psect	stringtext49
  6530  3022                     __pstringtext49:	
  6531  3022                     STR_55:	
  6532  3022  3461               	retlw	97	;'a'
  6533  3023  3462               	retlw	98	;'b'
  6534  3024  3473               	retlw	115	;'s'
  6535  3025  3400               	retlw	0
  6536                           
  6537                           	psect	stringtext50
  6538  3026                     __pstringtext50:	
  6539  3026                     STR_56:	
  6540  3026  3470               	retlw	112	;'p'
  6541  3027  346F               	retlw	111	;'o'
  6542  3028  3473               	retlw	115	;'s'
  6543  3029  3400               	retlw	0
  6544                           
  6545                           	psect	stringtext51
  6546  302A                     __pstringtext51:	
  6547  302A                     STR_10:	
  6548  302A  3425               	retlw	37	;'%'
  6549  302B  3464               	retlw	100	;'d'
  6550  302C  340A               	retlw	10
  6551  302D  3400               	retlw	0
  6552                           
  6553                           	psect	stringtext52
  6554  302E                     __pstringtext52:	
  6555  302E                     STR_1:	
  6556  302E  3425               	retlw	37	;'%'
  6557  302F  3464               	retlw	100	;'d'
  6558  3030  3420               	retlw	32	;' '
  6559  3031  3400               	retlw	0
  6560                           
  6561                           	psect	stringtext53
  6562  3038                     __pstringtext53:	
  6563  3038                     STR_5:	
  6564  3038  3441               	retlw	65	;'A'
  6565  3039  340A               	retlw	10
  6566  303A  3400               	retlw	0
  6567                           
  6568                           	psect	stringtext54
  6569  303B                     __pstringtext54:	
  6570  303B                     STR_12:	
  6571  303B  3445               	retlw	69	;'E'
  6572  303C  340A               	retlw	10
  6573  303D  3400               	retlw	0
  6574                           
  6575                           	psect	stringtext55
  6576  303E                     __pstringtext55:	
  6577  303E                     STR_33:	
  6578  303E  344E               	retlw	78	;'N'
  6579  303F  340A               	retlw	10
  6580  3040  3400               	retlw	0
  6581                           
  6582                           	psect	stringtext56
  6583  3041                     __pstringtext56:	
  6584  3041                     STR_31:	
  6585  3041  3452               	retlw	82	;'R'
  6586  3042  340A               	retlw	10
  6587  3043  3400               	retlw	0
  6588                           
  6589                           	psect	stringtext57
  6590  3046                     __pstringtext57:	
  6591  3046                     STR_60:	
  6592  3046  347A               	retlw	122	;'z'
  6593  3047  3400               	retlw	0
  6594                           
  6595                           	psect	stringtext58
  6596  0000                     __pstringtext58:	
  6597  2863                     
  6598                           ; #config settings
  6599  0000                     
  6600                           	psect	cinit
  6601  005C                     start_initialization:	
  6602  005C                     __initialization:		;BIGRAM
  6603                           
  6604                           ; Initialize objects allocated to BANK0
  6605  005C  30E4               	movlw	low __pidataBANK0
  6606  005D  0084               	movwf	4
  6607  005E  3091               	movlw	(high __pidataBANK0)| (0+128)
  6608  005F  0085               	movwf	5
  6609  0060  305A               	movlw	low __pdataBANK0
  6610  0061  0086               	movwf	6
  6611  0062  3000               	movlw	high __pdataBANK0
  6612  0063  0087               	movwf	7
  6613  0064  3000               	movlw	0
  6614  0065  00FF               	movwf	btemp+1
  6615  0066  3004               	movlw	4
  6616  0067  31A1  2156  3180   	fcall	init_ram
  6617                           
  6618                           ; Initialize objects allocated to BANK1
  6619  006A  30EC               	movlw	low __pidataBANK1
  6620  006B  0084               	movwf	4
  6621  006C  30AF               	movlw	(high __pidataBANK1)| (0+128)
  6622  006D  0085               	movwf	5
  6623  006E  30EA               	movlw	low __pdataBANK1
  6624  006F  0086               	movwf	6
  6625  0070  3000               	movlw	high __pdataBANK1
  6626  0071  0087               	movwf	7
  6627  0072  3000               	movlw	0
  6628  0073  00FF               	movwf	btemp+1
  6629  0074  3006               	movlw	6
  6630  0075  31A1  2156  3180   	fcall	init_ram
  6631                           
  6632                           ; Initialize objects allocated to BANK2
  6633  0078  0022               	movlb	2	; select bank2
  6634  0079  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
  6635  007C  00EA               	movwf	__pdataBANK2& (0+127)
  6636  007D  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
  6637  0080  00EB               	movwf	(__pdataBANK2+1)& (0+127)
  6638                           
  6639                           ; Initialize objects allocated to BANK4
  6640  0081  30F4               	movlw	low __pidataBANK4
  6641  0082  0084               	movwf	4
  6642  0083  3098               	movlw	(high __pidataBANK4)| (0+128)
  6643  0084  0085               	movwf	5
  6644  0085  3048               	movlw	low __pdataBANK4
  6645  0086  0086               	movwf	6
  6646  0087  3002               	movlw	high __pdataBANK4
  6647  0088  0087               	movwf	7
  6648  0089  3000               	movlw	0
  6649  008A  00FF               	movwf	btemp+1
  6650  008B  3020               	movlw	32
  6651  008C  31A1  2156  3180   	fcall	init_ram
  6652                           
  6653                           ; Clear objects allocated to BIGRAM
  6654  008F  3090               	movlw	low (0+10128)
  6655  0090  0084               	movwf	4
  6656  0091  3027               	movlw	high (0+10128)
  6657  0092  0085               	movwf	5
  6658  0093  3060               	movlw	96
  6659  0094  00FE               	movwf	btemp
  6660  0095  3000               	movlw	0
  6661  0096  00FF               	movwf	btemp+1
  6662  0097  31A1  214A  3180   	fcall	clear_ram0
  6663                           
  6664                           ; Clear objects allocated to COMMON
  6665  009A  01FD               	clrf	__pbssCOMMON& (0+127)
  6666                           
  6667                           ; Clear objects allocated to BANK0
  6668  009B  304E               	movlw	low __pbssBANK0
  6669  009C  0084               	movwf	4
  6670  009D  3000               	movlw	high __pbssBANK0
  6671  009E  0085               	movwf	5
  6672  009F  300C               	movlw	12
  6673  00A0  00FE               	movwf	btemp
  6674  00A1  3000               	movlw	0
  6675  00A2  00FF               	movwf	btemp+1
  6676  00A3  31A1  214A  3180   	fcall	clear_ram0
  6677                           
  6678                           ; Clear objects allocated to BANK1
  6679  00A6  30D8               	movlw	low __pbssBANK1
  6680  00A7  0084               	movwf	4
  6681  00A8  3000               	movlw	high __pbssBANK1
  6682  00A9  0085               	movwf	5
  6683  00AA  3012               	movlw	18
  6684  00AB  00FE               	movwf	btemp
  6685  00AC  3000               	movlw	0
  6686  00AD  00FF               	movwf	btemp+1
  6687  00AE  31A1  214A  3180   	fcall	clear_ram0
  6688                           
  6689                           ; Clear objects allocated to BANK2
  6690  00B1  3020               	movlw	low __pbssBANK2
  6691  00B2  0084               	movwf	4
  6692  00B3  3001               	movlw	high __pbssBANK2
  6693  00B4  0085               	movwf	5
  6694  00B5  304A               	movlw	74
  6695  00B6  00FE               	movwf	btemp
  6696  00B7  3000               	movlw	0
  6697  00B8  00FF               	movwf	btemp+1
  6698  00B9  31A1  214A  3180   	fcall	clear_ram0
  6699                           
  6700                           ; Clear objects allocated to BANK3
  6701  00BC  30A0               	movlw	low __pbssBANK3
  6702  00BD  0084               	movwf	4
  6703  00BE  3001               	movlw	high __pbssBANK3
  6704  00BF  0085               	movwf	5
  6705  00C0  303D               	movlw	61
  6706  00C1  00FE               	movwf	btemp
  6707  00C2  3000               	movlw	0
  6708  00C3  00FF               	movwf	btemp+1
  6709  00C4  31A1  214A  3180   	fcall	clear_ram0
  6710                           
  6711                           ; Clear objects allocated to BANK4
  6712  00C7  3020               	movlw	low __pbssBANK4
  6713  00C8  0084               	movwf	4
  6714  00C9  3002               	movlw	high __pbssBANK4
  6715  00CA  0085               	movwf	5
  6716  00CB  3028               	movlw	40
  6717  00CC  00FE               	movwf	btemp
  6718  00CD  3000               	movlw	0
  6719  00CE  00FF               	movwf	btemp+1
  6720  00CF  31A1  214A  3180   	fcall	clear_ram0
  6721                           
  6722                           ; Clear objects allocated to BANK5
  6723  00D2  30A0               	movlw	low __pbssBANK5
  6724  00D3  0084               	movwf	4
  6725  00D4  3002               	movlw	high __pbssBANK5
  6726  00D5  0085               	movwf	5
  6727  00D6  3028               	movlw	40
  6728  00D7  00FE               	movwf	btemp
  6729  00D8  3000               	movlw	0
  6730  00D9  00FF               	movwf	btemp+1
  6731  00DA  31A1  214A         	fcall	clear_ram0
  6732  00DC                     end_of_initialization:	
  6733                           ;End of C runtime variable initialization code
  6734                           
  6735  00DC                     __end_of__initialization:	
  6736  00DC  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6737  00DD  0020               	movlb	0
  6738  00DE  3192  2ABE         	ljmp	_main	;jump to C main() function
  6739                           
  6740                           	psect	bssCOMMON
  6741  007D                     __pbssCOMMON:	
  6742  007D                     _eusartTxHead:	
  6743  007D                     	ds	1
  6744                           
  6745                           	psect	bssBANK0
  6746  004E                     __pbssBANK0:	
  6747  004E                     _absCommand:	
  6748  004E                     	ds	4
  6749  0052                     _readIdx:	
  6750  0052                     	ds	2
  6751  0054                     strtok@sp:	
  6752  0054                     	ds	1
  6753  0055                     _motionType:	
  6754  0055                     	ds	1
  6755  0056                     _eusartRxCount:	
  6756  0056                     	ds	1
  6757  0057                     _eusartRxTail:	
  6758  0057                     	ds	1
  6759  0058                     _eusartRxHead:	
  6760  0058                     	ds	1
  6761  0059                     _eusartTxTail:	
  6762  0059                     	ds	1
  6763                           
  6764                           	psect	dataBANK0
  6765  005A                     __pdataBANK0:	
  6766  005A                     _demoLong:	
  6767  005A                     	ds	4
  6768                           
  6769                           	psect	bssBANK1
  6770  00D8                     __pbssBANK1:	
  6771  00D8                     _moveMask:	
  6772  00D8                     	ds	4
  6773  00DC                     _activeMask:	
  6774  00DC                     	ds	4
  6775  00E0                     _moveVector_downs:	
  6776  00E0                     	ds	4
  6777  00E4                     _moveVector_ups:	
  6778  00E4                     	ds	4
  6779  00E8                     _i2c1_driver_busCollisionISR:	
  6780  00E8                     	ds	2
  6781                           
  6782                           	psect	dataBANK1
  6783  00EA                     __pdataBANK1:	
  6784  00EA                     _piezo_on_time_ms:	
  6785  00EA                     	ds	2
  6786  00EC                     _heater_pre_time_ms:	
  6787  00EC                     	ds	2
  6788  00EE                     _drv_peak_val:	
  6789  00EE                     	ds	2
  6790                           
  6791                           	psect	bssBANK2
  6792  0120                     __pbssBANK2:	
  6793  0120                     _i2c_status:	
  6794  0120                     	ds	30
  6795  013E                     _remainingSteps:	
  6796  013E                     	ds	4
  6797  0142                     _demoHeaterToggle_top:	
  6798  0142                     	ds	4
  6799  0146                     _LED_configReg_bot:	
  6800  0146                     	ds	4
  6801  014A                     _LED_configReg_top:	
  6802  014A                     	ds	4
  6803  014E                     _second_bottom:	
  6804  014E                     	ds	4
  6805  0152                     _first_top:	
  6806  0152                     	ds	4
  6807  0156                     _first_bottom:	
  6808  0156                     	ds	4
  6809  015A                     _second_top:	
  6810  015A                     	ds	4
  6811  015E                     _errno:	
  6812  015E                     	ds	2
  6813  0160                     _verboseMove:	
  6814  0160                     	ds	2
  6815  0162                     _cmdRead:	
  6816  0162                     	ds	2
  6817  0164                     _errorOut:	
  6818  0164                     	ds	2
  6819  0166                     _interpulseWait:	
  6820  0166                     	ds	2
  6821  0168                     _i2c1_driver_i2cISR:	
  6822  0168                     	ds	2
  6823                           
  6824                           	psect	dataBANK2
  6825  016A                     __pdataBANK2:	
  6826  016A                     _heater_post_time_ms:	
  6827  016A                     	ds	2
  6828                           
  6829                           	psect	bssBANK3
  6830  01A0                     __pbssBANK3:	
  6831  01A0                     _eusartRxBuffer:	
  6832  01A0                     	ds	8
  6833  01A8                     _eusartTxBuffer:	
  6834  01A8                     	ds	8
  6835  01B0                     _demoHeaterToggle_bot:	
  6836  01B0                     	ds	4
  6837  01B4                     _cmd_struct:	
  6838  01B4                     	ds	21
  6839  01C9                     _readdata:	
  6840  01C9                     	ds	20
  6841                           
  6842                           	psect	bssBANK4
  6843  0220                     __pbssBANK4:	
  6844  0220                     _drv_fifo_upstroke:	
  6845  0220                     	ds	40
  6846                           
  6847                           	psect	dataBANK4
  6848  0248                     __pdataBANK4:	
  6849  0248                     _fsmStateTable:	
  6850  0248                     	ds	32
  6851                           
  6852                           	psect	bssBANK5
  6853  02A0                     __pbssBANK5:	
  6854  02A0                     _drv_fifo_downstroke:	
  6855  02A0                     	ds	40
  6856                           
  6857                           	psect	inittext
  6858  2156                     init_ram:	
  6859  2156  00FE               	movwf	126
  6860  2157                     initloop:	
  6861  2157  0012               	moviw fsr0++
  6862  2158  001E               	movwi fsr1++
  6863  2159  3001               	movlw	1
  6864  215A  02FE               	subwf	126,f
  6865  215B  3000               	movlw	0
  6866  215C  3BFF               	subwfb	127,f
  6867  215D  087F               	movf	127,w
  6868  215E  047E               	iorwf	126,w
  6869  215F  1903               	btfsc	3,2
  6870  2160  3400               	retlw	0
  6871  2161  2957               	goto	initloop
  6872                           
  6873                           	psect	clrtext
  6874  214A                     clear_ram0:	
  6875                           ;	Called with FSR0 containing the base address, and
  6876                           ;	btemp/btemp+1 has the size to clear
  6877                           
  6878  214A  0064               	clrwdt	;clear the watchdog before getting into this loop
  6879  214B                     clrloop0:	
  6880  214B  0180               	clrf	0	;clear RAM location pointed to by FSR
  6881  214C  3101               	addfsr 0,1
  6882  214D  3001               	movlw	1
  6883  214E  02FE               	subwf	126,f
  6884  214F  3000               	movlw	0
  6885  2150  3BFF               	subwfb	127,f
  6886  2151  087F               	movf	127,w
  6887  2152  047E               	iorwf	126,w
  6888  2153  1903               	btfsc	3,2
  6889  2154  3400               	retlw	0	;all done for this memory range, return
  6890  2155  294B               	goto	clrloop0	;have we reached the end yet?
  6891                           
  6892                           	psect	cstackBANK5
  6893  02C8                     __pcstackBANK5:	
  6894  02C8                     ??_doAbsMove:	
  6895                           
  6896                           ; 1 bytes @ 0x0
  6897  02C8                     	ds	28
  6898                           
  6899                           	psect	cstackBANK3
  6900  01DD                     __pcstackBANK3:	
  6901  01DD                     _calcUpstroke$2993:	
  6902  01DD                     _calcDownstroke$2994:	
  6903                           ; 3 bytes @ 0x0
  6904                           
  6905                           
  6906                           ; 3 bytes @ 0x0
  6907  01DD                     	ds	3
  6908  01E0                     calcUpstroke@i:	
  6909  01E0                     calcDownstroke@i:	
  6910                           ; 2 bytes @ 0x3
  6911                           
  6912                           
  6913                           ; 2 bytes @ 0x3
  6914  01E0                     	ds	2
  6915  01E2                     ?_drv_init:	
  6916  01E2                     drv_init@output_gain:	
  6917                           ; 1 bytes @ 0x5
  6918                           
  6919                           
  6920                           ; 2 bytes @ 0x5
  6921  01E2                     	ds	2
  6922  01E4                     drv_init@idle_timeout:	
  6923                           
  6924                           ; 2 bytes @ 0x7
  6925  01E4                     	ds	2
  6926                           
  6927                           	psect	cstackBANK2
  6928  016C                     __pcstackBANK2:	
  6929  016C                     ??_main:	
  6930                           
  6931                           ; 1 bytes @ 0x0
  6932  016C                     	ds	1
  6933                           
  6934                           	psect	cstackBANK1
  6935  00A0                     __pcstackBANK1:	
  6936  00A0                     ??___ftmul:	
  6937  00A0                     ?_printf:	
  6938                           ; 1 bytes @ 0x0
  6939                           
  6940  00A0                     printf@f:	
  6941                           ; 2 bytes @ 0x0
  6942                           
  6943  00A0                     LEDsPwr@pwrAll:	
  6944                           ; 2 bytes @ 0x0
  6945                           
  6946  00A0                     LED_setBrightnessRange@LED_configReg:	
  6947                           ; 4 bytes @ 0x0
  6948                           
  6949                           
  6950                           ; 4 bytes @ 0x0
  6951  00A0                     	ds	4
  6952  00A4                     ___ftmul@exp:	
  6953                           
  6954                           ; 1 bytes @ 0x4
  6955  00A4                     	ds	1
  6956  00A5                     ___ftmul@f3_as_product:	
  6957                           
  6958                           ; 3 bytes @ 0x5
  6959  00A5                     	ds	1
  6960  00A6                     ??_printf:	
  6961                           
  6962                           ; 1 bytes @ 0x6
  6963  00A6                     	ds	2
  6964  00A8                     ___ftmul@cntr:	
  6965                           
  6966                           ; 1 bytes @ 0x8
  6967  00A8                     	ds	1
  6968  00A9                     ___ftmul@sign:	
  6969                           
  6970                           ; 1 bytes @ 0x9
  6971  00A9                     	ds	1
  6972  00AA                     ?___ftadd:	
  6973  00AA                     ___ftadd@f1:	
  6974                           ; 3 bytes @ 0xA
  6975                           
  6976                           
  6977                           ; 3 bytes @ 0xA
  6978  00AA                     	ds	2
  6979  00AC                     printf@prec:	
  6980                           
  6981                           ; 2 bytes @ 0xC
  6982  00AC                     	ds	1
  6983  00AD                     ___ftadd@f2:	
  6984                           
  6985                           ; 3 bytes @ 0xD
  6986  00AD                     	ds	1
  6987  00AE                     printf@val:	
  6988                           
  6989                           ; 4 bytes @ 0xE
  6990  00AE                     	ds	2
  6991  00B0                     ??___ftadd:	
  6992                           
  6993                           ; 1 bytes @ 0x10
  6994  00B0                     	ds	2
  6995  00B2                     printf@flag:	
  6996                           
  6997                           ; 1 bytes @ 0x12
  6998  00B2                     	ds	1
  6999  00B3                     printf@ap:	
  7000                           
  7001                           ; 1 bytes @ 0x13
  7002  00B3                     	ds	1
  7003  00B4                     printf@c:	
  7004  00B4                     ___ftadd@sign:	
  7005                           ; 1 bytes @ 0x14
  7006                           
  7007                           
  7008                           ; 1 bytes @ 0x14
  7009  00B4                     	ds	1
  7010  00B5                     ?_drv_write_DC:	
  7011  00B5                     ??_drv_reset:	
  7012                           ; 1 bytes @ 0x15
  7013                           
  7014  00B5                     ?_LED_test_openshort:	
  7015                           ; 1 bytes @ 0x15
  7016                           
  7017  00B5                     ?_getMotionStatus:	
  7018                           ; 1 bytes @ 0x15
  7019                           
  7020  00B5                     ?_drv_read:	
  7021                           ; 2 bytes @ 0x15
  7022                           
  7023  00B5                     ?_stop:	
  7024                           ; 2 bytes @ 0x15
  7025                           
  7026  00B5                     ?_zeroPosition:	
  7027                           ; 2 bytes @ 0x15
  7028                           
  7029  00B5                     ?_getPosition:	
  7030                           ; 2 bytes @ 0x15
  7031                           
  7032  00B5                     ?_setDrvGain:	
  7033                           ; 2 bytes @ 0x15
  7034                           
  7035  00B5                     ?_setHeaterPreTime:	
  7036                           ; 2 bytes @ 0x15
  7037                           
  7038  00B5                     ?_setHeaterPostTime:	
  7039                           ; 2 bytes @ 0x15
  7040                           
  7041  00B5                     ?_setLEDBrightnessRange:	
  7042                           ; 2 bytes @ 0x15
  7043                           
  7044  00B5                     ?_setLEDPwr:	
  7045                           ; 2 bytes @ 0x15
  7046                           
  7047  00B5                     ?_setHeaterToggle:	
  7048                           ; 2 bytes @ 0x15
  7049                           
  7050  00B5                     ?_timedActiveHeatOn:	
  7051                           ; 2 bytes @ 0x15
  7052                           
  7053  00B5                     ?_setActive:	
  7054                           ; 2 bytes @ 0x15
  7055                           
  7056  00B5                     ?_setMoveMask:	
  7057                           ; 2 bytes @ 0x15
  7058                           
  7059  00B5                     ?_getActive:	
  7060                           ; 2 bytes @ 0x15
  7061                           
  7062  00B5                     ?_getMoveMask:	
  7063                           ; 2 bytes @ 0x15
  7064                           
  7065  00B5                     ?_LED_getData:	
  7066                           ; 2 bytes @ 0x15
  7067                           
  7068  00B5                     ___ftadd@exp2:	
  7069                           ; 4 bytes @ 0x15
  7070                           
  7071  00B5                     LED_test_openshort@type:	
  7072                           ; 1 bytes @ 0x15
  7073                           
  7074  00B5                     LED_getData@topOrBottom:	
  7075                           ; 2 bytes @ 0x15
  7076                           
  7077  00B5                     getPosition@a:	
  7078                           ; 2 bytes @ 0x15
  7079                           
  7080  00B5                     setDrvGain@gain:	
  7081                           ; 2 bytes @ 0x15
  7082                           
  7083  00B5                     setHeaterPreTime@t:	
  7084                           ; 2 bytes @ 0x15
  7085                           
  7086  00B5                     setHeaterPostTime@t:	
  7087                           ; 2 bytes @ 0x15
  7088                           
  7089  00B5                     setLEDBrightnessRange@r:	
  7090                           ; 2 bytes @ 0x15
  7091                           
  7092  00B5                     setLEDPwr@pwr:	
  7093                           ; 2 bytes @ 0x15
  7094                           
  7095  00B5                     setHeaterToggle@num:	
  7096                           ; 2 bytes @ 0x15
  7097                           
  7098  00B5                     setActive@probeNum:	
  7099                           ; 2 bytes @ 0x15
  7100                           
  7101  00B5                     setMoveMask@probeNum:	
  7102                           ; 2 bytes @ 0x15
  7103                           
  7104  00B5                     drv_write_DC@val:	
  7105                           ; 2 bytes @ 0x15
  7106                           
  7107  00B5                     timedActiveHeatOn@onTime:	
  7108                           ; 2 bytes @ 0x15
  7109                           
  7110                           
  7111                           ; 4 bytes @ 0x15
  7112  00B5                     	ds	1
  7113  00B6                     ___ftadd@exp1:	
  7114                           
  7115                           ; 1 bytes @ 0x16
  7116  00B6                     	ds	1
  7117  00B7                     ??_zeroPosition:	
  7118  00B7                     ??_setDrvGain:	
  7119                           ; 1 bytes @ 0x17
  7120                           
  7121  00B7                     ?___fttol:	
  7122                           ; 1 bytes @ 0x17
  7123                           
  7124  00B7                     LED_test_openshort@topOrBottom:	
  7125                           ; 4 bytes @ 0x17
  7126                           
  7127  00B7                     setLEDBrightnessRange@tOB:	
  7128                           ; 2 bytes @ 0x17
  7129                           
  7130  00B7                     setLEDPwr@topOrBottom:	
  7131                           ; 2 bytes @ 0x17
  7132                           
  7133  00B7                     setHeaterToggle@topOrB:	
  7134                           ; 2 bytes @ 0x17
  7135                           
  7136  00B7                     setActive@onOff:	
  7137                           ; 2 bytes @ 0x17
  7138                           
  7139  00B7                     setMoveMask@onOff:	
  7140                           ; 2 bytes @ 0x17
  7141                           
  7142  00B7                     getActive@i:	
  7143                           ; 2 bytes @ 0x17
  7144                           
  7145  00B7                     getMoveMask@i:	
  7146                           ; 2 bytes @ 0x17
  7147                           
  7148  00B7                     drv_write_DC@duration_ms:	
  7149                           ; 2 bytes @ 0x17
  7150                           
  7151  00B7                     ___fttol@f1:	
  7152                           ; 2 bytes @ 0x17
  7153                           
  7154                           
  7155                           ; 3 bytes @ 0x17
  7156  00B7                     	ds	1
  7157  00B8                     setDrvGain@setGain:	
  7158                           
  7159                           ; 2 bytes @ 0x18
  7160  00B8                     	ds	1
  7161  00B9                     ??_LED_getData:	
  7162  00B9                     ??_drv_write_DC:	
  7163                           ; 1 bytes @ 0x19
  7164                           
  7165  00B9                     ??_LED_test_openshort:	
  7166                           ; 1 bytes @ 0x19
  7167                           
  7168  00B9                     ??_setHeaterToggle:	
  7169                           ; 1 bytes @ 0x19
  7170                           
  7171  00B9                     ??_setActive:	
  7172                           ; 1 bytes @ 0x19
  7173                           
  7174  00B9                     timedActiveHeatOn@topOrBorBoth:	
  7175                           ; 1 bytes @ 0x19
  7176                           
  7177                           
  7178                           ; 2 bytes @ 0x19
  7179  00B9                     	ds	1
  7180  00BA                     LED_test_openshort@j:	
  7181  00BA                     drv_write_DC@i:	
  7182                           ; 2 bytes @ 0x1A
  7183                           
  7184                           
  7185                           ; 2 bytes @ 0x1A
  7186  00BA                     	ds	1
  7187  00BB                     ??_timedActiveHeatOn:	
  7188  00BB                     ??___fttol:	
  7189                           ; 1 bytes @ 0x1B
  7190                           
  7191                           
  7192                           ; 1 bytes @ 0x1B
  7193  00BB                     	ds	1
  7194  00BC                     ?_doMove:	
  7195                           
  7196                           ; 2 bytes @ 0x1C
  7197  00BC                     	ds	2
  7198  00BE                     ??_doMove:	
  7199                           
  7200                           ; 1 bytes @ 0x1E
  7201  00BE                     	ds	1
  7202  00BF                     ___fttol@sign1:	
  7203  00BF                     doMove@t:	
  7204                           ; 1 bytes @ 0x1F
  7205                           
  7206                           
  7207                           ; 2 bytes @ 0x1F
  7208  00BF                     	ds	1
  7209  00C0                     timedActiveHeatOn@t:	
  7210  00C0                     LED_getData@readData:	
  7211                           ; 2 bytes @ 0x20
  7212                           
  7213  00C0                     ___fttol@lval:	
  7214                           ; 4 bytes @ 0x20
  7215                           
  7216                           
  7217                           ; 4 bytes @ 0x20
  7218  00C0                     	ds	1
  7219  00C1                     doMove@t_1662:	
  7220                           
  7221                           ; 2 bytes @ 0x21
  7222  00C1                     	ds	2
  7223  00C3                     ??_doRelMove:	
  7224  00C3                     doAbsMove@allThere:	
  7225                           ; 1 bytes @ 0x23
  7226                           
  7227                           
  7228                           ; 2 bytes @ 0x23
  7229  00C3                     	ds	1
  7230  00C4                     ___fttol@exp1:	
  7231  00C4                     LED_getData@j:	
  7232                           ; 1 bytes @ 0x24
  7233                           
  7234                           
  7235                           ; 2 bytes @ 0x24
  7236  00C4                     	ds	1
  7237  00C5                     ?_setDrvPiezoOnTime:	
  7238  00C5                     ?_setH1OffTime:	
  7239                           ; 2 bytes @ 0x25
  7240                           
  7241  00C5                     ?_setH2OnTime:	
  7242                           ; 2 bytes @ 0x25
  7243                           
  7244  00C5                     ?_trunc:	
  7245                           ; 2 bytes @ 0x25
  7246                           
  7247  00C5                     doAbsMove@i:	
  7248                           ; 3 bytes @ 0x25
  7249                           
  7250  00C5                     setDrvPiezoOnTime@t:	
  7251                           ; 2 bytes @ 0x25
  7252                           
  7253  00C5                     setH1OffTime@t:	
  7254                           ; 2 bytes @ 0x25
  7255                           
  7256  00C5                     setH2OnTime@t:	
  7257                           ; 2 bytes @ 0x25
  7258                           
  7259  00C5                     trunc@x:	
  7260                           ; 2 bytes @ 0x25
  7261                           
  7262                           
  7263                           ; 3 bytes @ 0x25
  7264  00C5                     	ds	1
  7265  00C6                     ?_LED_readConfig:	
  7266  00C6                     LED_readConfig@topOrBottom:	
  7267                           ; 4 bytes @ 0x26
  7268                           
  7269                           
  7270                           ; 2 bytes @ 0x26
  7271  00C6                     	ds	1
  7272  00C7                     doAbsMove@i_1679:	
  7273                           
  7274                           ; 2 bytes @ 0x27
  7275  00C7                     	ds	1
  7276  00C8                     trunc@i:	
  7277                           
  7278                           ; 3 bytes @ 0x28
  7279  00C8                     	ds	1
  7280  00C9                     doAbsMove@i_1677:	
  7281                           
  7282                           ; 2 bytes @ 0x29
  7283  00C9                     	ds	1
  7284  00CA                     ?_LED_testComm:	
  7285  00CA                     LED_testComm@topOrBottom:	
  7286                           ; 2 bytes @ 0x2A
  7287                           
  7288                           
  7289                           ; 2 bytes @ 0x2A
  7290  00CA                     	ds	1
  7291  00CB                     trunc@expon:	
  7292                           
  7293                           ; 2 bytes @ 0x2B
  7294  00CB                     	ds	1
  7295  00CC                     ??_LED_testComm:	
  7296                           
  7297                           ; 1 bytes @ 0x2C
  7298  00CC                     	ds	1
  7299  00CD                     ?_round:	
  7300  00CD                     round@x:	
  7301                           ; 3 bytes @ 0x2D
  7302                           
  7303                           
  7304                           ; 3 bytes @ 0x2D
  7305  00CD                     	ds	1
  7306  00CE                     LED_testComm@readResult:	
  7307                           
  7308                           ; 2 bytes @ 0x2E
  7309  00CE                     	ds	2
  7310  00D0                     round@f:	
  7311  00D0                     LED_testComm@oldConfigReg:	
  7312                           ; 3 bytes @ 0x30
  7313                           
  7314                           
  7315                           ; 4 bytes @ 0x30
  7316  00D0                     	ds	3
  7317  00D3                     ?_calcUpstroke:	
  7318  00D3                     ?_calcDownstroke:	
  7319                           ; 1 bytes @ 0x33
  7320                           
  7321  00D3                     doRelMove@j:	
  7322                           ; 1 bytes @ 0x33
  7323                           
  7324  00D3                     calcUpstroke@maxVal:	
  7325                           ; 2 bytes @ 0x33
  7326                           
  7327  00D3                     calcDownstroke@maxVal:	
  7328                           ; 2 bytes @ 0x33
  7329                           
  7330                           
  7331                           ; 2 bytes @ 0x33
  7332  00D3                     	ds	1
  7333  00D4                     ?_commCheck:	
  7334                           
  7335                           ; 2 bytes @ 0x34
  7336  00D4                     	ds	1
  7337  00D5                     ??_drv_init:	
  7338  00D5                     ?_setDrvPeak:	
  7339                           ; 1 bytes @ 0x35
  7340                           
  7341  00D5                     setDrvPeak@pk:	
  7342                           ; 2 bytes @ 0x35
  7343                           
  7344                           
  7345                           ; 2 bytes @ 0x35
  7346  00D5                     	ds	1
  7347  00D6                     ??_commCheck:	
  7348                           
  7349                           ; 1 bytes @ 0x36
  7350  00D6                     	ds	1
  7351  00D7                     execCmd@s:	
  7352                           
  7353                           ; 1 bytes @ 0x37
  7354  00D7                     	ds	1
  7355                           
  7356                           	psect	cstackCOMMON
  7357  0070                     __pcstackCOMMON:	
  7358  0070                     ?_isdigit:	
  7359  0070                     ?_mssp1_IRQisEnabled:	
  7360                           ; 1 bit 
  7361                           
  7362  0070                     ?_i2c1_driver_open:	
  7363                           ; 1 bit 
  7364                           
  7365  0070                     ?_i2c1_driver_isNACK:	
  7366                           ; 1 bit 
  7367                           
  7368  0070                     ?i1_i2c1_driver_isNACK:	
  7369                           ; 1 bit 
  7370                           
  7371  0070                     ?_PMD_Initialize:	
  7372                           ; 1 bit 
  7373                           
  7374  0070                     ?_PIN_MANAGER_Initialize:	
  7375                           ; 1 bytes @ 0x0
  7376                           
  7377  0070                     ?_OSCILLATOR_Initialize:	
  7378                           ; 1 bytes @ 0x0
  7379                           
  7380  0070                     ?_WDT_Initialize:	
  7381                           ; 1 bytes @ 0x0
  7382                           
  7383  0070                     ?_TMR4_Initialize:	
  7384                           ; 1 bytes @ 0x0
  7385                           
  7386  0070                     ?_TMR2_Initialize:	
  7387                           ; 1 bytes @ 0x0
  7388                           
  7389  0070                     ?_TMR0_Initialize:	
  7390                           ; 1 bytes @ 0x0
  7391                           
  7392  0070                     ?_EUSART_Initialize:	
  7393                           ; 1 bytes @ 0x0
  7394                           
  7395  0070                     ?_TMR0_ISR:	
  7396                           ; 1 bytes @ 0x0
  7397                           
  7398  0070                     ?_TMR4_ISR:	
  7399                           ; 1 bytes @ 0x0
  7400                           
  7401  0070                     ?_TMR2_ISR:	
  7402                           ; 1 bytes @ 0x0
  7403                           
  7404  0070                     ?_EUSART_Receive_ISR:	
  7405                           ; 1 bytes @ 0x0
  7406                           
  7407  0070                     ??_EUSART_Receive_ISR:	
  7408                           ; 1 bytes @ 0x0
  7409                           
  7410  0070                     ?_EUSART_Transmit_ISR:	
  7411                           ; 1 bytes @ 0x0
  7412                           
  7413  0070                     ??_EUSART_Transmit_ISR:	
  7414                           ; 1 bytes @ 0x0
  7415                           
  7416  0070                     ?_i2c_busCollisionISR:	
  7417                           ; 1 bytes @ 0x0
  7418                           
  7419  0070                     ??_i2c_busCollisionISR:	
  7420                           ; 1 bytes @ 0x0
  7421                           
  7422  0070                     ?_i2c_ISR:	
  7423                           ; 1 bytes @ 0x0
  7424                           
  7425  0070                     ?_i2c_poller:	
  7426                           ; 1 bytes @ 0x0
  7427                           
  7428  0070                     ?_TMR0_DefaultInterruptHandler:	
  7429                           ; 1 bytes @ 0x0
  7430                           
  7431  0070                     ?_TMR2_DefaultInterruptHandler:	
  7432                           ; 1 bytes @ 0x0
  7433                           
  7434  0070                     ?_main_initialize:	
  7435                           ; 1 bytes @ 0x0
  7436                           
  7437  0070                     ?_doRelMove:	
  7438                           ; 1 bytes @ 0x0
  7439                           
  7440  0070                     ?_doAbsMove:	
  7441                           ; 1 bytes @ 0x0
  7442                           
  7443  0070                     ?_calcHeaterPins:	
  7444                           ; 1 bytes @ 0x0
  7445                           
  7446  0070                     ?_drv_write_wvfrm:	
  7447                           ; 1 bytes @ 0x0
  7448                           
  7449  0070                     ?_TMR4_StartTimer:	
  7450                           ; 1 bytes @ 0x0
  7451                           
  7452  0070                     ?_drv_reset:	
  7453                           ; 1 bytes @ 0x0
  7454                           
  7455  0070                     ?_TMR4_DefaultInterruptHandler:	
  7456                           ; 1 bytes @ 0x0
  7457                           
  7458  0070                     ?_toupper:	
  7459                           ; 1 bytes @ 0x0
  7460                           
  7461  0070                     ?_SYSTEM_Initialize:	
  7462                           ; 1 bytes @ 0x0
  7463                           
  7464  0070                     ?_INTERRUPT_InterruptManager:	
  7465                           ; 1 bytes @ 0x0
  7466                           
  7467  0070                     ?_EUSART_Read:	
  7468                           ; 1 bytes @ 0x0
  7469                           
  7470  0070                     ?_EUSART_Write:	
  7471                           ; 1 bytes @ 0x0
  7472                           
  7473  0070                     ?_putch:	
  7474                           ; 1 bytes @ 0x0
  7475                           
  7476  0070                     ?_mssp1_clearIRQ:	
  7477                           ; 1 bytes @ 0x0
  7478                           
  7479  0070                     ?_mssp1_setIRQ:	
  7480                           ; 1 bytes @ 0x0
  7481                           
  7482  0070                     ?_mssp1_waitForEvent:	
  7483                           ; 1 bytes @ 0x0
  7484                           
  7485  0070                     ?_i2c1_driver_resetBus:	
  7486                           ; 1 bytes @ 0x0
  7487                           
  7488  0070                     ?_i2c1_driver_start:	
  7489                           ; 1 bytes @ 0x0
  7490                           
  7491  0070                     ?_i2c1_driver_restart:	
  7492                           ; 1 bytes @ 0x0
  7493                           
  7494  0070                     ?_i2c1_driver_stop:	
  7495                           ; 1 bytes @ 0x0
  7496                           
  7497  0070                     ?_i2c1_driver_startRX:	
  7498                           ; 1 bytes @ 0x0
  7499                           
  7500  0070                     ?_i2c1_driver_getRXData:	
  7501                           ; 1 bytes @ 0x0
  7502                           
  7503  0070                     ?_i2c1_driver_TXData:	
  7504                           ; 1 bytes @ 0x0
  7505                           
  7506  0070                     ?_i2c1_driver_sendACK:	
  7507                           ; 1 bytes @ 0x0
  7508                           
  7509  0070                     ?_i2c1_driver_sendNACK:	
  7510                           ; 1 bytes @ 0x0
  7511                           
  7512  0070                     ?_i2c1_driver_clearBusCollision:	
  7513                           ; 1 bytes @ 0x0
  7514                           
  7515  0070                     ??_i2c1_driver_clearBusCollision:	
  7516                           ; 1 bytes @ 0x0
  7517                           
  7518  0070                     ?_i2c_open:	
  7519                           ; 1 bytes @ 0x0
  7520                           
  7521  0070                     ?_i2c_setAddress:	
  7522                           ; 1 bytes @ 0x0
  7523                           
  7524  0070                     ?_i2c_masterOperation:	
  7525                           ; 1 bytes @ 0x0
  7526                           
  7527  0070                     ?_do_I2C_RESET:	
  7528                           ; 1 bytes @ 0x0
  7529                           
  7530  0070                     ?_do_I2C_IDLE:	
  7531                           ; 1 bytes @ 0x0
  7532                           
  7533  0070                     ?_do_I2C_SEND_RESTART_READ:	
  7534                           ; 1 bytes @ 0x0
  7535                           
  7536  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  7537                           ; 1 bytes @ 0x0
  7538                           
  7539  0070                     ?_do_I2C_SEND_RESTART:	
  7540                           ; 1 bytes @ 0x0
  7541                           
  7542  0070                     ?_do_I2C_SEND_STOP:	
  7543                           ; 1 bytes @ 0x0
  7544                           
  7545  0070                     ?_do_I2C_SEND_ADR_READ:	
  7546                           ; 1 bytes @ 0x0
  7547                           
  7548  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  7549                           ; 1 bytes @ 0x0
  7550                           
  7551  0070                     ?_do_I2C_RCEN:	
  7552                           ; 1 bytes @ 0x0
  7553                           
  7554  0070                     ?_do_I2C_DO_ACK:	
  7555                           ; 1 bytes @ 0x0
  7556                           
  7557  0070                     ?_do_I2C_DO_NACK_STOP:	
  7558                           ; 1 bytes @ 0x0
  7559                           
  7560  0070                     ?_do_I2C_DO_NACK_RESTART:	
  7561                           ; 1 bytes @ 0x0
  7562                           
  7563  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  7564                           ; 1 bytes @ 0x0
  7565                           
  7566  0070                     ?_do_I2C_TX:	
  7567                           ; 1 bytes @ 0x0
  7568                           
  7569  0070                     ?_do_I2C_RX:	
  7570                           ; 1 bytes @ 0x0
  7571                           
  7572  0070                     ?_do_I2C_TX_EMPTY:	
  7573                           ; 1 bytes @ 0x0
  7574                           
  7575  0070                     ?_TMR0_StartTimer:	
  7576                           ; 1 bytes @ 0x0
  7577                           
  7578  0070                     ?_TMR0_StopTimer:	
  7579                           ; 1 bytes @ 0x0
  7580                           
  7581  0070                     ??_TMR0_StopTimer:	
  7582                           ; 1 bytes @ 0x0
  7583                           
  7584  0070                     ?_TMR0_Write8bitTimer:	
  7585                           ; 1 bytes @ 0x0
  7586                           
  7587  0070                     ??_TMR0_Write8bitTimer:	
  7588                           ; 1 bytes @ 0x0
  7589                           
  7590  0070                     ?_TMR0_Load8bitPeriod:	
  7591                           ; 1 bytes @ 0x0
  7592                           
  7593  0070                     ?_TMR2_StartTimer:	
  7594                           ; 1 bytes @ 0x0
  7595                           
  7596  0070                     ?_TMR2_StopTimer:	
  7597                           ; 1 bytes @ 0x0
  7598                           
  7599  0070                     ??_TMR2_StopTimer:	
  7600                           ; 1 bytes @ 0x0
  7601                           
  7602  0070                     ?_TMR2_WriteTimer:	
  7603                           ; 1 bytes @ 0x0
  7604                           
  7605  0070                     ??_TMR2_WriteTimer:	
  7606                           ; 1 bytes @ 0x0
  7607                           
  7608  0070                     ?_TMR2_LoadPeriodRegister:	
  7609                           ; 1 bytes @ 0x0
  7610                           
  7611  0070                     ?_main:	
  7612                           ; 1 bytes @ 0x0
  7613                           
  7614  0070                     ?_TMR4_StopTimer:	
  7615                           ; 1 bytes @ 0x0
  7616                           
  7617  0070                     ??_TMR4_StopTimer:	
  7618                           ; 1 bytes @ 0x0
  7619                           
  7620  0070                     ?_TMR4_WriteTimer:	
  7621                           ; 1 bytes @ 0x0
  7622                           
  7623  0070                     ??_TMR4_WriteTimer:	
  7624                           ; 1 bytes @ 0x0
  7625                           
  7626  0070                     ?i1_send_last_2bytes_IK:	
  7627                           ; 1 bytes @ 0x0
  7628                           
  7629  0070                     ?i1_send_2bytes_latchless_IK:	
  7630                           ; 1 bytes @ 0x0
  7631                           
  7632  0070                     ?i1_mssp1_clearIRQ:	
  7633                           ; 1 bytes @ 0x0
  7634                           
  7635  0070                     ??i1_mssp1_clearIRQ:	
  7636                           ; 1 bytes @ 0x0
  7637                           
  7638  0070                     ?i1_mssp1_setIRQ:	
  7639                           ; 1 bytes @ 0x0
  7640                           
  7641  0070                     ??i1_mssp1_setIRQ:	
  7642                           ; 1 bytes @ 0x0
  7643                           
  7644  0070                     ?i1_i2c1_driver_resetBus:	
  7645                           ; 1 bytes @ 0x0
  7646                           
  7647  0070                     ??i1_i2c1_driver_resetBus:	
  7648                           ; 1 bytes @ 0x0
  7649                           
  7650  0070                     ?i1_i2c1_driver_restart:	
  7651                           ; 1 bytes @ 0x0
  7652                           
  7653  0070                     ??i1_i2c1_driver_restart:	
  7654                           ; 1 bytes @ 0x0
  7655                           
  7656  0070                     ?i1_i2c1_driver_stop:	
  7657                           ; 1 bytes @ 0x0
  7658                           
  7659  0070                     ??i1_i2c1_driver_stop:	
  7660                           ; 1 bytes @ 0x0
  7661                           
  7662  0070                     ??i1_i2c1_driver_isNACK:	
  7663                           ; 1 bytes @ 0x0
  7664                           
  7665  0070                     ?i1_i2c1_driver_startRX:	
  7666                           ; 1 bytes @ 0x0
  7667                           
  7668  0070                     ??i1_i2c1_driver_startRX:	
  7669                           ; 1 bytes @ 0x0
  7670                           
  7671  0070                     ?i1_i2c1_driver_getRXData:	
  7672                           ; 1 bytes @ 0x0
  7673                           
  7674  0070                     ??i1_i2c1_driver_getRXData:	
  7675                           ; 1 bytes @ 0x0
  7676                           
  7677  0070                     ?i1_i2c1_driver_TXData:	
  7678                           ; 1 bytes @ 0x0
  7679                           
  7680  0070                     ??i1_i2c1_driver_TXData:	
  7681                           ; 1 bytes @ 0x0
  7682                           
  7683  0070                     ?i1_i2c1_driver_sendACK:	
  7684                           ; 1 bytes @ 0x0
  7685                           
  7686  0070                     ??i1_i2c1_driver_sendACK:	
  7687                           ; 1 bytes @ 0x0
  7688                           
  7689  0070                     ?i1_i2c1_driver_sendNACK:	
  7690                           ; 1 bytes @ 0x0
  7691                           
  7692  0070                     ??i1_i2c1_driver_sendNACK:	
  7693                           ; 1 bytes @ 0x0
  7694                           
  7695  0070                     ?i1_do_I2C_RESET:	
  7696                           ; 1 bytes @ 0x0
  7697                           
  7698  0070                     ??i1_do_I2C_RESET:	
  7699                           ; 1 bytes @ 0x0
  7700                           
  7701  0070                     ?i1_do_I2C_IDLE:	
  7702                           ; 1 bytes @ 0x0
  7703                           
  7704  0070                     ??i1_do_I2C_IDLE:	
  7705                           ; 1 bytes @ 0x0
  7706                           
  7707  0070                     ?i1_do_I2C_SEND_RESTART_READ:	
  7708                           ; 1 bytes @ 0x0
  7709                           
  7710  0070                     ??i1_do_I2C_SEND_RESTART_READ:	
  7711                           ; 1 bytes @ 0x0
  7712                           
  7713  0070                     ?i1_do_I2C_SEND_RESTART_WRITE:	
  7714                           ; 1 bytes @ 0x0
  7715                           
  7716  0070                     ??i1_do_I2C_SEND_RESTART_WRITE:	
  7717                           ; 1 bytes @ 0x0
  7718                           
  7719  0070                     ?i1_do_I2C_SEND_RESTART:	
  7720                           ; 1 bytes @ 0x0
  7721                           
  7722  0070                     ??i1_do_I2C_SEND_RESTART:	
  7723                           ; 1 bytes @ 0x0
  7724                           
  7725  0070                     ?i1_do_I2C_SEND_STOP:	
  7726                           ; 1 bytes @ 0x0
  7727                           
  7728  0070                     ??i1_do_I2C_SEND_STOP:	
  7729                           ; 1 bytes @ 0x0
  7730                           
  7731  0070                     ?i1_do_I2C_SEND_ADR_READ:	
  7732                           ; 1 bytes @ 0x0
  7733                           
  7734  0070                     ?i1_do_I2C_SEND_ADR_WRITE:	
  7735                           ; 1 bytes @ 0x0
  7736                           
  7737  0070                     ?i1_do_I2C_RCEN:	
  7738                           ; 1 bytes @ 0x0
  7739                           
  7740  0070                     ??i1_do_I2C_RCEN:	
  7741                           ; 1 bytes @ 0x0
  7742                           
  7743  0070                     ?i1_do_I2C_DO_ACK:	
  7744                           ; 1 bytes @ 0x0
  7745                           
  7746  0070                     ??i1_do_I2C_DO_ACK:	
  7747                           ; 1 bytes @ 0x0
  7748                           
  7749  0070                     ?i1_do_I2C_DO_NACK_STOP:	
  7750                           ; 1 bytes @ 0x0
  7751                           
  7752  0070                     ??i1_do_I2C_DO_NACK_STOP:	
  7753                           ; 1 bytes @ 0x0
  7754                           
  7755  0070                     ?i1_do_I2C_DO_NACK_RESTART:	
  7756                           ; 1 bytes @ 0x0
  7757                           
  7758  0070                     ??i1_do_I2C_DO_NACK_RESTART:	
  7759                           ; 1 bytes @ 0x0
  7760                           
  7761  0070                     ?i1_do_I2C_DO_ADDRESS_NACK:	
  7762                           ; 1 bytes @ 0x0
  7763                           
  7764  0070                     ??i1_do_I2C_DO_ADDRESS_NACK:	
  7765                           ; 1 bytes @ 0x0
  7766                           
  7767  0070                     ?i1_do_I2C_TX:	
  7768                           ; 1 bytes @ 0x0
  7769                           
  7770  0070                     ?i1_do_I2C_RX:	
  7771                           ; 1 bytes @ 0x0
  7772                           
  7773  0070                     ??i1_do_I2C_RX:	
  7774                           ; 1 bytes @ 0x0
  7775                           
  7776  0070                     ?i1_do_I2C_TX_EMPTY:	
  7777                           ; 1 bytes @ 0x0
  7778                           
  7779  0070                     ??i1_do_I2C_TX_EMPTY:	
  7780                           ; 1 bytes @ 0x0
  7781                           
  7782  0070                     ?i1_i2c_ISR:	
  7783                           ; 1 bytes @ 0x0
  7784                           
  7785  0070                     ?i1_returnStop:	
  7786                           ; 1 bytes @ 0x0
  7787                           
  7788  0070                     ?i1_returnReset:	
  7789                           ; 1 bytes @ 0x0
  7790                           
  7791  0070                     ?_execCmd:	
  7792                           ; 1 bytes @ 0x0
  7793                           
  7794  0070                     TMR0_Write8bitTimer@timerVal:	
  7795                           ; 2 bytes @ 0x0
  7796                           
  7797  0070                     TMR2_WriteTimer@timerVal:	
  7798                           ; 1 bytes @ 0x0
  7799                           
  7800  0070                     TMR4_WriteTimer@timerVal:	
  7801                           ; 1 bytes @ 0x0
  7802                           
  7803  0070                     i1i2c1_driver_TXData@d:	
  7804                           ; 1 bytes @ 0x0
  7805                           
  7806  0070                     i1returnStop@p:	
  7807                           ; 1 bytes @ 0x0
  7808                           
  7809  0070                     i1returnReset@p:	
  7810                           ; 1 bytes @ 0x0
  7811                           
  7812  0070                     i1send_last_2bytes_IK@data:	
  7813                           ; 1 bytes @ 0x0
  7814                           
  7815  0070                     i1send_2bytes_latchless_IK@data:	
  7816                           ; 2 bytes @ 0x0
  7817                           
  7818                           
  7819                           ; 2 bytes @ 0x0
  7820  0070                     	ds	1
  7821  0071                     ??_TMR4_ISR:	
  7822  0071                     ??_TMR2_ISR:	
  7823                           ; 1 bytes @ 0x1
  7824                           
  7825  0071                     ??_TMR2_DefaultInterruptHandler:	
  7826                           ; 1 bytes @ 0x1
  7827                           
  7828  0071                     ??_TMR4_DefaultInterruptHandler:	
  7829                           ; 1 bytes @ 0x1
  7830                           
  7831  0071                     ??i1_do_I2C_SEND_ADR_READ:	
  7832                           ; 1 bytes @ 0x1
  7833                           
  7834  0071                     ??i1_do_I2C_SEND_ADR_WRITE:	
  7835                           ; 1 bytes @ 0x1
  7836                           
  7837  0071                     ??i1_do_I2C_TX:	
  7838                           ; 1 bytes @ 0x1
  7839                           
  7840  0071                     ??i1_returnStop:	
  7841                           ; 1 bytes @ 0x1
  7842                           
  7843  0071                     ??i1_returnReset:	
  7844                           ; 1 bytes @ 0x1
  7845                           
  7846                           
  7847                           ; 1 bytes @ 0x1
  7848  0071                     	ds	1
  7849  0072                     ??i1_send_2bytes_latchless_IK:	
  7850  0072                     i1send_last_2bytes_IK@latch_start:	
  7851                           ; 1 bytes @ 0x2
  7852                           
  7853                           
  7854                           ; 1 bytes @ 0x2
  7855  0072                     	ds	1
  7856  0073                     i1send_last_2bytes_IK@topOrBottom:	
  7857  0073                     i1_do_I2C_TX$1204:	
  7858                           ; 2 bytes @ 0x3
  7859                           
  7860                           
  7861                           ; 2 bytes @ 0x3
  7862  0073                     	ds	2
  7863  0075                     ??i1_send_last_2bytes_IK:	
  7864  0075                     ??i1_i2c_ISR:	
  7865                           ; 1 bytes @ 0x5
  7866                           
  7867                           
  7868                           ; 1 bytes @ 0x5
  7869  0075                     	ds	1
  7870  0076                     i1send_2bytes_latchless_IK@j:	
  7871                           
  7872                           ; 2 bytes @ 0x6
  7873  0076                     	ds	3
  7874  0079                     i1send_last_2bytes_IK@j:	
  7875                           
  7876                           ; 2 bytes @ 0x9
  7877  0079                     	ds	2
  7878  007B                     ??i1_send_2length_2bytes_IK:	
  7879                           
  7880                           ; 1 bytes @ 0xB
  7881  007B                     	ds	1
  7882  007C                     ??_TMR0_ISR:	
  7883  007C                     ??_TMR0_DefaultInterruptHandler:	
  7884                           ; 1 bytes @ 0xC
  7885                           
  7886  007C                     ??_INTERRUPT_InterruptManager:	
  7887                           ; 1 bytes @ 0xC
  7888                           
  7889                           
  7890                           ; 1 bytes @ 0xC
  7891  007C                     	ds	1
  7892                           
  7893                           	psect	cstackBANK0
  7894  0020                     __pcstackBANK0:	
  7895  0020                     ?i1_send_2length_2bytes_IK:	
  7896  0020                     i1send_2length_2bytes_IK@data1:	
  7897                           ; 1 bytes @ 0x0
  7898                           
  7899                           
  7900                           ; 2 bytes @ 0x0
  7901  0020                     	ds	2
  7902  0022                     i1send_2length_2bytes_IK@data2:	
  7903                           
  7904                           ; 2 bytes @ 0x2
  7905  0022                     	ds	2
  7906  0024                     i1send_2length_2bytes_IK@latch_start:	
  7907                           
  7908                           ; 1 bytes @ 0x4
  7909  0024                     	ds	1
  7910  0025                     i1send_2length_2bytes_IK@topOrBottom:	
  7911                           
  7912                           ; 2 bytes @ 0x5
  7913  0025                     	ds	2
  7914  0027                     ?i1_LEDsOn:	
  7915  0027                     i1LEDsOn@LEDpins:	
  7916                           ; 1 bytes @ 0x7
  7917                           
  7918                           
  7919                           ; 4 bytes @ 0x7
  7920  0027                     	ds	4
  7921  002B                     i1LEDsOn@topOrBottom:	
  7922                           
  7923                           ; 2 bytes @ 0xB
  7924  002B                     	ds	2
  7925  002D                     ??i1_LEDsOn:	
  7926                           
  7927                           ; 1 bytes @ 0xD
  7928  002D                     	ds	4
  7929  0031                     ??_PMD_Initialize:	
  7930  0031                     ??_PIN_MANAGER_Initialize:	
  7931                           ; 1 bytes @ 0x11
  7932                           
  7933  0031                     ??_OSCILLATOR_Initialize:	
  7934                           ; 1 bytes @ 0x11
  7935                           
  7936  0031                     ??_WDT_Initialize:	
  7937                           ; 1 bytes @ 0x11
  7938                           
  7939  0031                     ??_EUSART_Initialize:	
  7940                           ; 1 bytes @ 0x11
  7941                           
  7942  0031                     ?_returnStop:	
  7943                           ; 1 bytes @ 0x11
  7944                           
  7945  0031                     ?_returnReset:	
  7946                           ; 1 bytes @ 0x11
  7947                           
  7948  0031                     ?_TMR0_SetInterruptHandler:	
  7949                           ; 1 bytes @ 0x11
  7950                           
  7951  0031                     ?_TMR2_SetInterruptHandler:	
  7952                           ; 1 bytes @ 0x11
  7953                           
  7954  0031                     ??_calcHeaterPins:	
  7955                           ; 1 bytes @ 0x11
  7956                           
  7957  0031                     ??_TMR4_StartTimer:	
  7958                           ; 1 bytes @ 0x11
  7959                           
  7960  0031                     ?_TMR4_SetInterruptHandler:	
  7961                           ; 1 bytes @ 0x11
  7962                           
  7963  0031                     ??_isdigit:	
  7964                           ; 1 bytes @ 0x11
  7965                           
  7966  0031                     ??_toupper:	
  7967                           ; 1 bytes @ 0x11
  7968                           
  7969  0031                     ?_send_last_2bytes_IK:	
  7970                           ; 1 bytes @ 0x11
  7971                           
  7972  0031                     ?_send_2bytes_latchless_IK:	
  7973                           ; 1 bytes @ 0x11
  7974                           
  7975  0031                     ??_EUSART_Read:	
  7976                           ; 1 bytes @ 0x11
  7977                           
  7978  0031                     ??_EUSART_Write:	
  7979                           ; 1 bytes @ 0x11
  7980                           
  7981  0031                     ??_mssp1_IRQisEnabled:	
  7982                           ; 1 bytes @ 0x11
  7983                           
  7984  0031                     ??_mssp1_clearIRQ:	
  7985                           ; 1 bytes @ 0x11
  7986                           
  7987  0031                     ??_mssp1_setIRQ:	
  7988                           ; 1 bytes @ 0x11
  7989                           
  7990  0031                     ??_mssp1_waitForEvent:	
  7991                           ; 1 bytes @ 0x11
  7992                           
  7993  0031                     ??_i2c1_driver_open:	
  7994                           ; 1 bytes @ 0x11
  7995                           
  7996  0031                     ??_i2c1_driver_resetBus:	
  7997                           ; 1 bytes @ 0x11
  7998                           
  7999  0031                     ??_i2c1_driver_start:	
  8000                           ; 1 bytes @ 0x11
  8001                           
  8002  0031                     ??_i2c1_driver_restart:	
  8003                           ; 1 bytes @ 0x11
  8004                           
  8005  0031                     ??_i2c1_driver_stop:	
  8006                           ; 1 bytes @ 0x11
  8007                           
  8008  0031                     ??_i2c1_driver_isNACK:	
  8009                           ; 1 bytes @ 0x11
  8010                           
  8011  0031                     ??_i2c1_driver_startRX:	
  8012                           ; 1 bytes @ 0x11
  8013                           
  8014  0031                     ??_i2c1_driver_getRXData:	
  8015                           ; 1 bytes @ 0x11
  8016                           
  8017  0031                     ??_i2c1_driver_TXData:	
  8018                           ; 1 bytes @ 0x11
  8019                           
  8020  0031                     ??_i2c1_driver_sendACK:	
  8021                           ; 1 bytes @ 0x11
  8022                           
  8023  0031                     ??_i2c1_driver_sendNACK:	
  8024                           ; 1 bytes @ 0x11
  8025                           
  8026  0031                     ?_i2c1_driver_setBusCollisionISR:	
  8027                           ; 1 bytes @ 0x11
  8028                           
  8029  0031                     ?_i2c1_driver_setI2cISR:	
  8030                           ; 1 bytes @ 0x11
  8031                           
  8032  0031                     ??_i2c_setAddress:	
  8033                           ; 1 bytes @ 0x11
  8034                           
  8035  0031                     ?_i2c_setBuffer:	
  8036                           ; 1 bytes @ 0x11
  8037                           
  8038  0031                     ??_do_I2C_RESET:	
  8039                           ; 1 bytes @ 0x11
  8040                           
  8041  0031                     ??_do_I2C_IDLE:	
  8042                           ; 1 bytes @ 0x11
  8043                           
  8044  0031                     ??_do_I2C_SEND_RESTART_READ:	
  8045                           ; 1 bytes @ 0x11
  8046                           
  8047  0031                     ??_do_I2C_SEND_RESTART_WRITE:	
  8048                           ; 1 bytes @ 0x11
  8049                           
  8050  0031                     ??_do_I2C_SEND_RESTART:	
  8051                           ; 1 bytes @ 0x11
  8052                           
  8053  0031                     ??_do_I2C_SEND_STOP:	
  8054                           ; 1 bytes @ 0x11
  8055                           
  8056  0031                     ??_do_I2C_RCEN:	
  8057                           ; 1 bytes @ 0x11
  8058                           
  8059  0031                     ??_do_I2C_DO_ACK:	
  8060                           ; 1 bytes @ 0x11
  8061                           
  8062  0031                     ??_do_I2C_DO_NACK_STOP:	
  8063                           ; 1 bytes @ 0x11
  8064                           
  8065  0031                     ??_do_I2C_DO_NACK_RESTART:	
  8066                           ; 1 bytes @ 0x11
  8067                           
  8068  0031                     ??_do_I2C_DO_ADDRESS_NACK:	
  8069                           ; 1 bytes @ 0x11
  8070                           
  8071  0031                     ??_do_I2C_RX:	
  8072                           ; 1 bytes @ 0x11
  8073                           
  8074  0031                     ??_do_I2C_TX_EMPTY:	
  8075                           ; 1 bytes @ 0x11
  8076                           
  8077  0031                     ??_TMR0_StartTimer:	
  8078                           ; 1 bytes @ 0x11
  8079                           
  8080  0031                     ??_TMR0_Load8bitPeriod:	
  8081                           ; 1 bytes @ 0x11
  8082                           
  8083  0031                     ??_TMR2_StartTimer:	
  8084                           ; 1 bytes @ 0x11
  8085                           
  8086  0031                     ??_TMR2_LoadPeriodRegister:	
  8087                           ; 1 bytes @ 0x11
  8088                           
  8089  0031                     ?_strchr:	
  8090                           ; 1 bytes @ 0x11
  8091                           
  8092  0031                     ?_startRelMove:	
  8093                           ; 2 bytes @ 0x11
  8094                           
  8095  0031                     ?_startAbsMove:	
  8096                           ; 2 bytes @ 0x11
  8097                           
  8098  0031                     ?___wmul:	
  8099                           ; 2 bytes @ 0x11
  8100                           
  8101  0031                     ?___ftpack:	
  8102                           ; 2 bytes @ 0x11
  8103                           
  8104  0031                     ?_frexp:	
  8105                           ; 3 bytes @ 0x11
  8106                           
  8107  0031                     ?___lldiv:	
  8108                           ; 3 bytes @ 0x11
  8109                           
  8110  0031                     mssp1_waitForEvent@timeout:	
  8111                           ; 4 bytes @ 0x11
  8112                           
  8113  0031                     i2c1_driver_TXData@d:	
  8114                           ; 1 bytes @ 0x11
  8115                           
  8116  0031                     returnStop@p:	
  8117                           ; 1 bytes @ 0x11
  8118                           
  8119  0031                     returnReset@p:	
  8120                           ; 1 bytes @ 0x11
  8121                           
  8122  0031                     TMR0_Load8bitPeriod@periodVal:	
  8123                           ; 1 bytes @ 0x11
  8124                           
  8125  0031                     TMR2_LoadPeriodRegister@periodVal:	
  8126                           ; 1 bytes @ 0x11
  8127                           
  8128  0031                     _isdigit$2365:	
  8129                           ; 1 bytes @ 0x11
  8130                           
  8131  0031                     send_last_2bytes_IK@data:	
  8132                           ; 1 bytes @ 0x11
  8133                           
  8134  0031                     send_2bytes_latchless_IK@data:	
  8135                           ; 2 bytes @ 0x11
  8136                           
  8137  0031                     i2c1_driver_setBusCollisionISR@f:	
  8138                           ; 2 bytes @ 0x11
  8139                           
  8140  0031                     i2c1_driver_setI2cISR@f:	
  8141                           ; 2 bytes @ 0x11
  8142                           
  8143  0031                     i2c_setBuffer@buffer:	
  8144                           ; 2 bytes @ 0x11
  8145                           
  8146  0031                     TMR0_SetInterruptHandler@InterruptHandler:	
  8147                           ; 2 bytes @ 0x11
  8148                           
  8149  0031                     TMR2_SetInterruptHandler@InterruptHandler:	
  8150                           ; 2 bytes @ 0x11
  8151                           
  8152  0031                     startRelMove@steps:	
  8153                           ; 2 bytes @ 0x11
  8154                           
  8155  0031                     startAbsMove@steps:	
  8156                           ; 2 bytes @ 0x11
  8157                           
  8158  0031                     TMR4_SetInterruptHandler@InterruptHandler:	
  8159                           ; 2 bytes @ 0x11
  8160                           
  8161  0031                     ___wmul@multiplier:	
  8162                           ; 2 bytes @ 0x11
  8163                           
  8164  0031                     strchr@ptr:	
  8165                           ; 2 bytes @ 0x11
  8166                           
  8167  0031                     ___ftpack@arg:	
  8168                           ; 2 bytes @ 0x11
  8169                           
  8170  0031                     frexp@value:	
  8171                           ; 3 bytes @ 0x11
  8172                           
  8173  0031                     ___lldiv@divisor:	
  8174                           ; 3 bytes @ 0x11
  8175                           
  8176                           
  8177                           ; 4 bytes @ 0x11
  8178  0031                     	ds	1
  8179  0032                     ??_returnStop:	
  8180  0032                     ??_returnReset:	
  8181                           ; 1 bytes @ 0x12
  8182                           
  8183  0032                     ??_do_I2C_SEND_ADR_READ:	
  8184                           ; 1 bytes @ 0x12
  8185                           
  8186  0032                     ??_do_I2C_SEND_ADR_WRITE:	
  8187                           ; 1 bytes @ 0x12
  8188                           
  8189  0032                     ??_do_I2C_TX:	
  8190                           ; 1 bytes @ 0x12
  8191                           
  8192  0032                     EUSART_Read@readValue:	
  8193                           ; 1 bytes @ 0x12
  8194                           
  8195  0032                     EUSART_Write@txData:	
  8196                           ; 1 bytes @ 0x12
  8197                           
  8198  0032                     i2c_setAddress@address:	
  8199                           ; 1 bytes @ 0x12
  8200                           
  8201  0032                     isdigit@c:	
  8202                           ; 1 bytes @ 0x12
  8203                           
  8204  0032                     toupper@c:	
  8205                           ; 1 bytes @ 0x12
  8206                           
  8207                           
  8208                           ; 1 bytes @ 0x12
  8209  0032                     	ds	1
  8210  0033                     ??_TMR4_Initialize:	
  8211  0033                     ??_TMR2_Initialize:	
  8212                           ; 1 bytes @ 0x13
  8213                           
  8214  0033                     ??_TMR0_Initialize:	
  8215                           ; 1 bytes @ 0x13
  8216                           
  8217  0033                     ??_TMR0_SetInterruptHandler:	
  8218                           ; 1 bytes @ 0x13
  8219                           
  8220  0033                     ??_TMR2_SetInterruptHandler:	
  8221                           ; 1 bytes @ 0x13
  8222                           
  8223  0033                     ??_TMR4_SetInterruptHandler:	
  8224                           ; 1 bytes @ 0x13
  8225                           
  8226  0033                     ??_SYSTEM_Initialize:	
  8227                           ; 1 bytes @ 0x13
  8228                           
  8229  0033                     ??_send_2bytes_latchless_IK:	
  8230                           ; 1 bytes @ 0x13
  8231                           
  8232  0033                     ??_putch:	
  8233                           ; 1 bytes @ 0x13
  8234                           
  8235  0033                     ??_i2c1_driver_setBusCollisionISR:	
  8236                           ; 1 bytes @ 0x13
  8237                           
  8238  0033                     ??_i2c1_driver_setI2cISR:	
  8239                           ; 1 bytes @ 0x13
  8240                           
  8241  0033                     ??_i2c_open:	
  8242                           ; 1 bytes @ 0x13
  8243                           
  8244  0033                     ??_startAbsMove:	
  8245                           ; 1 bytes @ 0x13
  8246                           
  8247  0033                     ?_stricmp:	
  8248                           ; 1 bytes @ 0x13
  8249                           
  8250  0033                     send_last_2bytes_IK@latch_start:	
  8251                           ; 2 bytes @ 0x13
  8252                           
  8253  0033                     putch@txData:	
  8254                           ; 1 bytes @ 0x13
  8255                           
  8256  0033                     i2c_setBuffer@bufferSize:	
  8257                           ; 1 bytes @ 0x13
  8258                           
  8259  0033                     startRelMove@verbose:	
  8260                           ; 2 bytes @ 0x13
  8261                           
  8262  0033                     ___wmul@multiplicand:	
  8263                           ; 2 bytes @ 0x13
  8264                           
  8265  0033                     stricmp@s2:	
  8266                           ; 2 bytes @ 0x13
  8267                           
  8268  0033                     strchr@chr:	
  8269                           ; 2 bytes @ 0x13
  8270                           
  8271                           
  8272                           ; 2 bytes @ 0x13
  8273  0033                     	ds	1
  8274  0034                     i2c_open@ret:	
  8275  0034                     ___ftpack@exp:	
  8276                           ; 1 bytes @ 0x14
  8277                           
  8278  0034                     frexp@eptr:	
  8279                           ; 1 bytes @ 0x14
  8280                           
  8281  0034                     send_last_2bytes_IK@topOrBottom:	
  8282                           ; 1 bytes @ 0x14
  8283                           
  8284  0034                     _do_I2C_TX$1204:	
  8285                           ; 2 bytes @ 0x14
  8286                           
  8287                           
  8288                           ; 2 bytes @ 0x14
  8289  0034                     	ds	1
  8290  0035                     ??_stricmp:	
  8291  0035                     ??_frexp:	
  8292                           ; 1 bytes @ 0x15
  8293                           
  8294  0035                     ??_strchr:	
  8295                           ; 1 bytes @ 0x15
  8296                           
  8297  0035                     ??_i2c_setBuffer:	
  8298                           ; 1 bytes @ 0x15
  8299                           
  8300  0035                     ??_startRelMove:	
  8301                           ; 1 bytes @ 0x15
  8302                           
  8303  0035                     ??___wmul:	
  8304                           ; 1 bytes @ 0x15
  8305                           
  8306  0035                     i2c_open@address:	
  8307                           ; 1 bytes @ 0x15
  8308                           
  8309  0035                     ___ftpack@sign:	
  8310                           ; 1 bytes @ 0x15
  8311                           
  8312  0035                     ___wmul@product:	
  8313                           ; 1 bytes @ 0x15
  8314                           
  8315  0035                     ___lldiv@dividend:	
  8316                           ; 2 bytes @ 0x15
  8317                           
  8318                           
  8319                           ; 4 bytes @ 0x15
  8320  0035                     	ds	1
  8321  0036                     ??_i2c_ISR:	
  8322  0036                     ??___ftpack:	
  8323                           ; 1 bytes @ 0x16
  8324                           
  8325  0036                     ??_send_last_2bytes_IK:	
  8326                           ; 1 bytes @ 0x16
  8327                           
  8328                           
  8329                           ; 1 bytes @ 0x16
  8330  0036                     	ds	1
  8331  0037                     ??_i2c_poller:	
  8332  0037                     ??_i2c_masterOperation:	
  8333                           ; 1 bytes @ 0x17
  8334                           
  8335  0037                     ?_atoi:	
  8336                           ; 1 bytes @ 0x17
  8337                           
  8338  0037                     ?___awdiv:	
  8339                           ; 2 bytes @ 0x17
  8340                           
  8341  0037                     stricmp@r:	
  8342                           ; 2 bytes @ 0x17
  8343                           
  8344  0037                     send_2bytes_latchless_IK@j:	
  8345                           ; 1 bytes @ 0x17
  8346                           
  8347  0037                     ___awdiv@divisor:	
  8348                           ; 2 bytes @ 0x17
  8349                           
  8350                           
  8351                           ; 2 bytes @ 0x17
  8352  0037                     	ds	1
  8353  0038                     ?_strspn:	
  8354  0038                     ?_strcspn:	
  8355                           ; 2 bytes @ 0x18
  8356                           
  8357  0038                     i2c_masterOperation@read:	
  8358                           ; 2 bytes @ 0x18
  8359                           
  8360  0038                     stricmp@s1:	
  8361                           ; 1 bytes @ 0x18
  8362                           
  8363  0038                     strcspn@s2:	
  8364                           ; 1 bytes @ 0x18
  8365                           
  8366  0038                     strspn@s2:	
  8367                           ; 2 bytes @ 0x18
  8368                           
  8369                           
  8370                           ; 2 bytes @ 0x18
  8371  0038                     	ds	1
  8372  0039                     ??_atoi:	
  8373  0039                     ??___lldiv:	
  8374                           ; 1 bytes @ 0x19
  8375                           
  8376  0039                     ?___altoft:	
  8377                           ; 1 bytes @ 0x19
  8378                           
  8379  0039                     i2c_masterOperation@ret:	
  8380                           ; 3 bytes @ 0x19
  8381                           
  8382  0039                     ___awdiv@dividend:	
  8383                           ; 1 bytes @ 0x19
  8384                           
  8385  0039                     ___altoft@c:	
  8386                           ; 2 bytes @ 0x19
  8387                           
  8388                           
  8389                           ; 4 bytes @ 0x19
  8390  0039                     	ds	1
  8391  003A                     ??_drv_write_wvfrm:	
  8392  003A                     ??_strspn:	
  8393                           ; 1 bytes @ 0x1A
  8394                           
  8395  003A                     ??_strcspn:	
  8396                           ; 1 bytes @ 0x1A
  8397                           
  8398  003A                     drv_write_wvfrm@upOrDown:	
  8399                           ; 1 bytes @ 0x1A
  8400                           
  8401  003A                     send_last_2bytes_IK@j:	
  8402                           ; 1 bytes @ 0x1A
  8403                           
  8404  003A                     ___lldiv@quotient:	
  8405                           ; 2 bytes @ 0x1A
  8406                           
  8407                           
  8408                           ; 4 bytes @ 0x1A
  8409  003A                     	ds	1
  8410  003B                     ??___awdiv:	
  8411  003B                     atoi@sign:	
  8412                           ; 1 bytes @ 0x1B
  8413                           
  8414                           
  8415                           ; 1 bytes @ 0x1B
  8416  003B                     	ds	1
  8417  003C                     ?_send_2length_2bytes_IK:	
  8418  003C                     ___awdiv@counter:	
  8419                           ; 1 bytes @ 0x1C
  8420                           
  8421  003C                     send_2length_2bytes_IK@data1:	
  8422                           ; 1 bytes @ 0x1C
  8423                           
  8424  003C                     atoi@a:	
  8425                           ; 2 bytes @ 0x1C
  8426                           
  8427  003C                     strcspn@i:	
  8428                           ; 2 bytes @ 0x1C
  8429                           
  8430  003C                     strspn@i:	
  8431                           ; 2 bytes @ 0x1C
  8432                           
  8433                           
  8434                           ; 2 bytes @ 0x1C
  8435  003C                     	ds	1
  8436  003D                     ??___altoft:	
  8437  003D                     ___awdiv@sign:	
  8438                           ; 1 bytes @ 0x1D
  8439                           
  8440                           
  8441                           ; 1 bytes @ 0x1D
  8442  003D                     	ds	1
  8443  003E                     atoi@s:	
  8444  003E                     ___lldiv@counter:	
  8445                           ; 1 bytes @ 0x1E
  8446                           
  8447  003E                     strcspn@s1:	
  8448                           ; 1 bytes @ 0x1E
  8449                           
  8450  003E                     strspn@s1:	
  8451                           ; 1 bytes @ 0x1E
  8452                           
  8453  003E                     send_2length_2bytes_IK@data2:	
  8454                           ; 1 bytes @ 0x1E
  8455                           
  8456  003E                     ___awdiv@quotient:	
  8457                           ; 2 bytes @ 0x1E
  8458                           
  8459                           
  8460                           ; 2 bytes @ 0x1E
  8461  003E                     	ds	1
  8462  003F                     ?_strtok:	
  8463  003F                     ?___llmod:	
  8464                           ; 1 bytes @ 0x1F
  8465                           
  8466  003F                     ___altoft@exp:	
  8467                           ; 4 bytes @ 0x1F
  8468                           
  8469  003F                     strtok@s2:	
  8470                           ; 1 bytes @ 0x1F
  8471                           
  8472  003F                     ___llmod@divisor:	
  8473                           ; 2 bytes @ 0x1F
  8474                           
  8475                           
  8476                           ; 4 bytes @ 0x1F
  8477  003F                     	ds	1
  8478  0040                     ?___awtoft:	
  8479  0040                     send_2length_2bytes_IK@latch_start:	
  8480                           ; 3 bytes @ 0x20
  8481                           
  8482  0040                     ___altoft@sign:	
  8483                           ; 1 bytes @ 0x20
  8484                           
  8485  0040                     ___awtoft@c:	
  8486                           ; 1 bytes @ 0x20
  8487                           
  8488                           
  8489                           ; 2 bytes @ 0x20
  8490  0040                     	ds	1
  8491  0041                     ??_strtok:	
  8492  0041                     send_2length_2bytes_IK@topOrBottom:	
  8493                           ; 1 bytes @ 0x21
  8494                           
  8495                           
  8496                           ; 2 bytes @ 0x21
  8497  0041                     	ds	2
  8498  0043                     ??_send_2length_2bytes_IK:	
  8499  0043                     ??___awtoft:	
  8500                           ; 1 bytes @ 0x23
  8501                           
  8502  0043                     ___llmod@dividend:	
  8503                           ; 1 bytes @ 0x23
  8504                           
  8505                           
  8506                           ; 4 bytes @ 0x23
  8507  0043                     	ds	1
  8508  0044                     ?_LEDsOn:	
  8509  0044                     ?_LEDsPwr:	
  8510                           ; 1 bytes @ 0x24
  8511                           
  8512  0044                     ?_LED_setBrightnessRange:	
  8513                           ; 1 bytes @ 0x24
  8514                           
  8515  0044                     strtok@s1:	
  8516                           ; 1 bytes @ 0x24
  8517                           
  8518  0044                     LEDsPwr@pwr:	
  8519                           ; 1 bytes @ 0x24
  8520                           
  8521  0044                     LED_setBrightnessRange@range:	
  8522                           ; 2 bytes @ 0x24
  8523                           
  8524  0044                     LEDsOn@LEDpins:	
  8525                           ; 2 bytes @ 0x24
  8526                           
  8527                           
  8528                           ; 4 bytes @ 0x24
  8529  0044                     	ds	1
  8530  0045                     ?_parseCmd:	
  8531  0045                     parseCmd@s:	
  8532                           ; 1 bytes @ 0x25
  8533                           
  8534  0045                     ___awtoft@sign:	
  8535                           ; 1 bytes @ 0x25
  8536                           
  8537                           
  8538                           ; 1 bytes @ 0x25
  8539  0045                     	ds	1
  8540  0046                     ??_parseCmd:	
  8541  0046                     ?___ftmul:	
  8542                           ; 1 bytes @ 0x26
  8543                           
  8544  0046                     ?___ftneg:	
  8545                           ; 3 bytes @ 0x26
  8546                           
  8547  0046                     LEDsPwr@topOrBottom:	
  8548                           ; 3 bytes @ 0x26
  8549                           
  8550  0046                     LED_setBrightnessRange@topOrBottom:	
  8551                           ; 2 bytes @ 0x26
  8552                           
  8553  0046                     ___ftmul@f1:	
  8554                           ; 2 bytes @ 0x26
  8555                           
  8556  0046                     ___ftneg@f1:	
  8557                           ; 3 bytes @ 0x26
  8558                           
  8559                           
  8560                           ; 3 bytes @ 0x26
  8561  0046                     	ds	1
  8562  0047                     ??___llmod:	
  8563  0047                     parseCmd@cmdString:	
  8564                           ; 1 bytes @ 0x27
  8565                           
  8566                           
  8567                           ; 1 bytes @ 0x27
  8568  0047                     	ds	1
  8569  0048                     ??_LEDsPwr:	
  8570  0048                     ??_LED_setBrightnessRange:	
  8571                           ; 1 bytes @ 0x28
  8572                           
  8573  0048                     ___llmod@counter:	
  8574                           ; 1 bytes @ 0x28
  8575                           
  8576  0048                     LEDsOn@topOrBottom:	
  8577                           ; 1 bytes @ 0x28
  8578                           
  8579  0048                     parseCmd@paramIter:	
  8580                           ; 2 bytes @ 0x28
  8581                           
  8582                           
  8583                           ; 2 bytes @ 0x28
  8584  0048                     	ds	1
  8585  0049                     ??_getMotionStatus:	
  8586  0049                     ?_drv_write:	
  8587                           ; 1 bytes @ 0x29
  8588                           
  8589  0049                     ??_drv_read:	
  8590                           ; 1 bytes @ 0x29
  8591                           
  8592  0049                     ??_LED_readConfig:	
  8593                           ; 1 bytes @ 0x29
  8594                           
  8595  0049                     ??_stop:	
  8596                           ; 1 bytes @ 0x29
  8597                           
  8598  0049                     ??_getPosition:	
  8599                           ; 1 bytes @ 0x29
  8600                           
  8601  0049                     ??_setHeaterPreTime:	
  8602                           ; 1 bytes @ 0x29
  8603                           
  8604  0049                     ??_setHeaterPostTime:	
  8605                           ; 1 bytes @ 0x29
  8606                           
  8607  0049                     ??_setMoveMask:	
  8608                           ; 1 bytes @ 0x29
  8609                           
  8610  0049                     ??_getActive:	
  8611                           ; 1 bytes @ 0x29
  8612                           
  8613  0049                     ??_getMoveMask:	
  8614                           ; 1 bytes @ 0x29
  8615                           
  8616  0049                     ??___ftneg:	
  8617                           ; 1 bytes @ 0x29
  8618                           
  8619  0049                     drv_write@data:	
  8620                           ; 1 bytes @ 0x29
  8621                           
  8622  0049                     zeroPosition@i:	
  8623                           ; 1 bytes @ 0x29
  8624                           
  8625  0049                     ___ftmul@f2:	
  8626                           ; 2 bytes @ 0x29
  8627                           
  8628                           
  8629                           ; 3 bytes @ 0x29
  8630  0049                     	ds	1
  8631  004A                     ??_drv_write:	
  8632  004A                     ??_LEDsOn:	
  8633                           ; 1 bytes @ 0x2A
  8634                           
  8635  004A                     parseCmd@p:	
  8636                           ; 1 bytes @ 0x2A
  8637                           
  8638                           
  8639                           ; 1 bytes @ 0x2A
  8640  004A                     	ds	1
  8641  004B                     drv_write@reg:	
  8642  004B                     drv_read@reg:	
  8643                           ; 1 bytes @ 0x2B
  8644                           
  8645                           
  8646                           ; 1 bytes @ 0x2B
  8647  004B                     	ds	1
  8648  004C                     ??_trunc:	
  8649  004C                     ??_setDrvPiezoOnTime:	
  8650                           ; 1 bytes @ 0x2C
  8651                           
  8652  004C                     ??_setH1OffTime:	
  8653                           ; 1 bytes @ 0x2C
  8654                           
  8655  004C                     ??_setH2OnTime:	
  8656                           ; 1 bytes @ 0x2C
  8657                           
  8658  004C                     drv_read@buff:	
  8659                           ; 1 bytes @ 0x2C
  8660                           
  8661  004C                     drv_write@buff:	
  8662                           ; 1 bytes @ 0x2C
  8663                           
  8664                           
  8665                           ; 2 bytes @ 0x2C
  8666  004C                     	ds	1
  8667  004D                     ??_calcUpstroke:	
  8668  004D                     ??_calcDownstroke:	
  8669                           ; 1 bytes @ 0x2D
  8670                           
  8671  004D                     ??_round:	
  8672                           ; 1 bytes @ 0x2D
  8673                           
  8674                           
  8675                           ; 1 bytes @ 0x2D
  8676  004D                     	ds	1
  8677  004E                     ??_main_initialize:	
  8678  004E                     ??_execCmd:	
  8679                           ; 1 bytes @ 0x2E
  8680                           
  8681  004E                     ??_setDrvPeak:	
  8682                           ; 1 bytes @ 0x2E
  8683                           
  8684  004E                     ??_setLEDBrightnessRange:	
  8685                           ; 1 bytes @ 0x2E
  8686                           
  8687  004E                     ??_setLEDPwr:	
  8688                           ; 1 bytes @ 0x2E
  8689                           
  8690                           
  8691                           	psect	maintext
  8692  12BE                     __pmaintext:	
  8693                           ; 1 bytes @ 0x2E
  8694 ;;
  8695 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  8696 ;;
  8697 ;; *************** function _main *****************
  8698 ;; Defined at:
  8699 ;;		line 131 in file "main.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;		None
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;		None
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  1    wreg      void 
  8706 ;; Registers used:
  8707 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : B1F/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8715 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8716 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8717 ;;Total ram usage:        1 bytes
  8718 ;; Hardware stack levels required when called:   16
  8719 ;; This function calls:
  8720 ;;		_EUSART_Read
  8721 ;;		_SYSTEM_Initialize
  8722 ;;		_doAbsMove
  8723 ;;		_doRelMove
  8724 ;;		_execCmd
  8725 ;;		_main_initialize
  8726 ;;		_parseCmd
  8727 ;; This function is called by:
  8728 ;;		Startup code after reset
  8729 ;; This function uses a non-reentrant model
  8730 ;;
  8731                           
  8732                           
  8733                           ;psect for function _main
  8734  12BE                     _main:	
  8735                           
  8736                           ;main.c: 134: SYSTEM_Initialize();
  8737                           
  8738                           ;incstack = 0
  8739                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8740  12BE  31A2  224E  3192   	fcall	_SYSTEM_Initialize
  8741                           
  8742                           ;main.c: 135: _delay((unsigned long)((500)*(1000000/4000.0)));
  8743  12C1  30A3               	movlw	163
  8744  12C2  0022               	movlb	2	; select bank2
  8745  12C3  00EC               	movwf	??_main^(0+256)
  8746  12C4  3055               	movlw	85
  8747  12C5                     u10027:	
  8748  12C5  0B89               	decfsz	9,f
  8749  12C6  2AC5               	goto	u10027
  8750  12C7  0BEC               	decfsz	??_main^(0+256),f
  8751  12C8  2AC5               	goto	u10027
  8752                           
  8753                           ;main.c: 141: (INTCONbits.GIE = 1);
  8754  12C9  178B               	bsf	11,7	;volatile
  8755                           
  8756                           ;main.c: 144: (INTCONbits.PEIE = 1);
  8757  12CA  170B               	bsf	11,6	;volatile
  8758                           
  8759                           ;main.c: 151: main_initialize();
  8760  12CB  318A  22DB  3192   	fcall	_main_initialize
  8761  12CE  2AD6               	goto	l9444
  8762  12CF                     l9468:	
  8763                           ;main.c: 182: case REL_MOVE: doRelMove(); break;
  8764                           
  8765                           ;main.c: 180: else{
  8766                           ;main.c: 181: switch(motionType){
  8767                           
  8768                           ;main.c: 179: }
  8769                           
  8770  12CF  318E  26C6  3192   	fcall	_doRelMove
  8771  12D2  2AD6               	goto	l9444
  8772  12D3                     l9470:	
  8773                           ;main.c: 183: case ABS_MOVE: doAbsMove(); break;
  8774                           
  8775  12D3  3180  20E0  3192   	fcall	_doAbsMove
  8776  12D6                     l9444:	
  8777                           ;main.c: 153: while (1)
  8778                           
  8779                           ;main.c: 185: }
  8780                           
  8781                           ;main.c: 184: default: break;
  8782                           
  8783                           
  8784                           ;main.c: 154: {
  8785                           ;main.c: 156: if (eusartRxCount!=0) {
  8786  12D6  0020               	movlb	0	; select bank0
  8787  12D7  0856               	movf	_eusartRxCount,w	;volatile
  8788  12D8  1903               	btfsc	3,2
  8789  12D9  2B02               	goto	l9456
  8790                           
  8791                           ;main.c: 157: readdata[readIdx] = EUSART_Read();
  8792  12DA  31A3  23B7  3192   	fcall	_EUSART_Read
  8793  12DD  0022               	movlb	2	; select bank2
  8794  12DE  00EC               	movwf	??_main^(0+256)
  8795  12DF  0020               	movlb	0	; select bank0
  8796  12E0  0852               	movf	_readIdx,w
  8797  12E1  3EC9               	addlw	(low (_readdata| (0+256)))& (0+255)
  8798  12E2  0086               	movwf	6
  8799  12E3  3001               	movlw	1	; select bank3/4
  8800  12E4  0087               	movwf	7
  8801  12E5  0022               	movlb	2	; select bank2
  8802  12E6  086C               	movf	??_main^(0+256),w
  8803  12E7  0081               	movwf	1
  8804                           
  8805                           ;main.c: 158: if(readdata[readIdx] == '\n'){
  8806  12E8  0020               	movlb	0	; select bank0
  8807  12E9  0852               	movf	_readIdx,w
  8808  12EA  3EC9               	addlw	(low (_readdata| (0+256)))& (0+255)
  8809  12EB  0086               	movwf	6
  8810  12EC  3001               	movlw	1	; select bank3/4
  8811  12ED  0087               	movwf	7
  8812  12EE  300A               	movlw	10
  8813  12EF  0601               	xorwf	1,w
  8814  12F0  1D03               	btfss	3,2
  8815  12F1  2AFD               	goto	l9454
  8816                           
  8817                           ;main.c: 159: readdata[readIdx] = 0;
  8818  12F2  0852               	movf	_readIdx,w
  8819  12F3  3EC9               	addlw	(low (_readdata| (0+256)))& (0+255)
  8820  12F4  0086               	movwf	6
  8821  12F5  3001               	movlw	1	; select bank3/4
  8822  12F6  0087               	movwf	7
  8823  12F7  0181               	clrf	1
  8824                           
  8825                           ;main.c: 160: cmdRead = 1;
  8826  12F8  3001               	movlw	1
  8827  12F9  0022               	movlb	2	; select bank2
  8828  12FA  00E2               	movwf	_cmdRead^(0+256)
  8829  12FB  3000               	movlw	0
  8830  12FC  00E3               	movwf	(_cmdRead^(0+256)+1)
  8831  12FD                     l9454:	
  8832                           
  8833                           ;main.c: 161: }
  8834                           ;main.c: 162: readIdx++;
  8835  12FD  3001               	movlw	1
  8836  12FE  0020               	movlb	0	; select bank0
  8837  12FF  07D2               	addwf	_readIdx,f
  8838  1300  3000               	movlw	0
  8839  1301  3DD3               	addwfc	_readIdx+1,f
  8840  1302                     l9456:	
  8841                           
  8842                           ;main.c: 163: }
  8843                           ;main.c: 166: if(cmdRead){
  8844  1302  0022               	movlb	2	; select bank2
  8845  1303  0862               	movf	_cmdRead^(0+256),w
  8846  1304  0463               	iorwf	(_cmdRead+1)^(0+256),w
  8847  1305  1903               	btfsc	3,2
  8848  1306  2B1A               	goto	l9464
  8849                           
  8850                           ;main.c: 168: parseCmd(readdata, &cmd_struct);
  8851  1307  30B4               	movlw	(low (_cmd_struct| (0+256)))& (0+255)
  8852  1308  00EC               	movwf	??_main^(0+256)
  8853  1309  086C               	movf	??_main^(0+256),w
  8854  130A  0020               	movlb	0	; select bank0
  8855  130B  00C5               	movwf	parseCmd@s
  8856  130C  30C9               	movlw	(low (_readdata| (0+256)))& (0+255)
  8857  130D  3185  2597  3192   	fcall	_parseCmd
  8858                           
  8859                           ;main.c: 170: cmdRead = 0;
  8860  1310  0022               	movlb	2	; select bank2
  8861  1311  01E2               	clrf	_cmdRead^(0+256)
  8862  1312  01E3               	clrf	(_cmdRead+1)^(0+256)
  8863                           
  8864                           ;main.c: 171: readIdx=0;
  8865  1313  0020               	movlb	0	; select bank0
  8866  1314  01D2               	clrf	_readIdx
  8867  1315  01D3               	clrf	_readIdx+1
  8868                           
  8869                           ;main.c: 172: execCmd(&cmd_struct);
  8870  1316  30B4               	movlw	(low (_cmd_struct| (0+256)))& (0+255)
  8871  1317  3183  2398  3192   	fcall	_execCmd
  8872  131A                     l9464:	
  8873                           
  8874                           ;main.c: 174: }
  8875                           ;main.c: 177: if (interpulseWait > 0){
  8876  131A  0022               	movlb	2	; select bank2
  8877  131B  0867               	movf	(_interpulseWait+1)^(0+256),w
  8878  131C  3A80               	xorlw	128
  8879  131D  00EC               	movwf	??_main^(0+256)
  8880  131E  3080               	movlw	128
  8881  131F  026C               	subwf	??_main^(0+256),w
  8882  1320  1D03               	skipz
  8883  1321  2B24               	goto	u9955
  8884  1322  3001               	movlw	1
  8885  1323  0266               	subwf	_interpulseWait^(0+256),w
  8886  1324                     u9955:	
  8887  1324  1803               	btfsc	3,0
  8888  1325  2AD6               	goto	l9444
  8889  1326  0020               	movlb	0	; select bank0
  8890  1327  0855               	movf	_motionType,w
  8891                           
  8892                           ; Switch size 1, requested type "space"
  8893                           ; Number of cases is 2, Range of values is 1 to 2
  8894                           ; switch strategies available:
  8895                           ; Name         Instructions Cycles
  8896                           ; simple_byte            7     4 (average)
  8897                           ; direct_byte           13     9 (fixed)
  8898                           ; jumptable            263     9 (fixed)
  8899                           ;	Chosen strategy is simple_byte
  8900  1328  3A01               	xorlw	1	; case 1
  8901  1329  1903               	skipnz
  8902  132A  2ACF               	goto	l9468
  8903  132B  3A03               	xorlw	3	; case 2
  8904  132C  1903               	skipnz
  8905  132D  2AD3               	goto	l9470
  8906  132E  2AD6               	goto	l9444
  8907  132F  2AD6               	goto	l9444
  8908  1330                     __end_of_main:	
  8909                           
  8910                           	psect	text1
  8911  0597                     __ptext1:	
  8912 ;; *************** function _parseCmd *****************
  8913 ;; Defined at:
  8914 ;;		line 5 in file "cmd_parser.c"
  8915 ;; Parameters:    Size  Location     Type
  8916 ;;  cmdString       1    wreg     PTR unsigned char 
  8917 ;;		 -> readdata(20), 
  8918 ;;  s               1   37[BANK0 ] PTR struct CMD_STRUCT
  8919 ;;		 -> cmd_struct(21), 
  8920 ;; Auto vars:     Size  Location     Type
  8921 ;;  cmdString       1   39[BANK0 ] PTR unsigned char 
  8922 ;;		 -> readdata(20), 
  8923 ;;  p               1   42[BANK0 ] PTR unsigned char 
  8924 ;;		 -> readdata(20), NULL(0), 
  8925 ;;  paramIter       2   40[BANK0 ] int 
  8926 ;; Return value:  Size  Location     Type
  8927 ;;                  1    wreg      void 
  8928 ;; Registers used:
  8929 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8930 ;; Tracked objects:
  8931 ;;		On entry : 0/0
  8932 ;;		On exit  : 0/0
  8933 ;;		Unchanged: 0/0
  8934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8935 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8936 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8937 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8938 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8939 ;;Total ram usage:        6 bytes
  8940 ;; Hardware stack levels used:    1
  8941 ;; Hardware stack levels required when called:    9
  8942 ;; This function calls:
  8943 ;;		_atoi
  8944 ;;		_stricmp
  8945 ;;		_strtok
  8946 ;; This function is called by:
  8947 ;;		_main
  8948 ;; This function uses a non-reentrant model
  8949 ;;
  8950                           
  8951                           
  8952                           ;psect for function _parseCmd
  8953  0597                     _parseCmd:	
  8954                           
  8955                           ;incstack = 0
  8956                           ; Regs used in _parseCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8957                           ;parseCmd@cmdString stored from wreg
  8958  0597  0020               	movlb	0	; select bank0
  8959  0598  00C7               	movwf	parseCmd@cmdString
  8960                           
  8961                           ;cmd_parser.c: 6: int paramIter = 0;
  8962  0599  01C8               	clrf	parseCmd@paramIter
  8963  059A  01C9               	clrf	parseCmd@paramIter+1
  8964                           
  8965                           ;cmd_parser.c: 7: for (char *p = strtok(cmdString," "); p != (0); p = strtok((0), " ")){
  8966  059B  30DC               	movlw	low ((STR_38+6)| (0+32768))
  8967  059C  00BF               	movwf	strtok@s2
  8968  059D  30A9               	movlw	high ((STR_38+6)| (0+32768))
  8969  059E  00C0               	movwf	strtok@s2+1
  8970  059F  0847               	movf	parseCmd@cmdString,w
  8971  05A0                     L23:	
  8972  05A0  319A  22B2  3185   	fcall	_strtok
  8973  05A3  0020               	movlb	0	; select bank0
  8974  05A4  00C6               	movwf	??_parseCmd
  8975  05A5  0846               	movf	??_parseCmd,w
  8976  05A6  00CA               	movwf	parseCmd@p
  8977  05A7  084A               	movf	parseCmd@p,w
  8978  05A8  1903               	btfsc	3,2
  8979  05A9  0008               	return
  8980                           
  8981                           ;cmd_parser.c: 9: if (paramIter == 0){
  8982  05AA  0848               	movf	parseCmd@paramIter,w
  8983  05AB  0449               	iorwf	parseCmd@paramIter+1,w
  8984  05AC  1D03               	btfss	3,2
  8985  05AD  2F38               	goto	l9170
  8986                           
  8987                           ;cmd_parser.c: 10: if(stricmp(p, "rel") == 0)
  8988  05AE  301E               	movlw	low (STR_54| (0+32768))
  8989  05AF  00B3               	movwf	stricmp@s2
  8990  05B0  30B0               	movlw	high (STR_54| (0+32768))
  8991  05B1  00B4               	movwf	stricmp@s2+1
  8992  05B2  084A               	movf	parseCmd@p,w
  8993  05B3  31A6  26AC  3185   	fcall	_stricmp
  8994  05B6  0020               	movlb	0	; select bank0
  8995  05B7  0833               	movf	?_stricmp,w
  8996  05B8  0434               	iorwf	?_stricmp+1,w
  8997  05B9  1D03               	btfss	3,2
  8998  05BA  2DBD               	goto	l9072
  8999                           
  9000                           ;cmd_parser.c: 11: s->c = CMD_REL;
  9001  05BB  3002               	movlw	2
  9002  05BC  2F1A               	goto	L22
  9003  05BD                     l9072:	
  9004                           
  9005                           ;cmd_parser.c: 12: else if(stricmp(p, "abs") == 0)
  9006  05BD  3022               	movlw	low (STR_55| (0+32768))
  9007  05BE  00B3               	movwf	stricmp@s2
  9008  05BF  30B0               	movlw	high (STR_55| (0+32768))
  9009  05C0  00B4               	movwf	stricmp@s2+1
  9010  05C1  084A               	movf	parseCmd@p,w
  9011  05C2  31A6  26AC  3185   	fcall	_stricmp
  9012  05C5  0020               	movlb	0	; select bank0
  9013  05C6  0833               	movf	?_stricmp,w
  9014  05C7  0434               	iorwf	?_stricmp+1,w
  9015  05C8  1D03               	btfss	3,2
  9016  05C9  2DD1               	goto	l9076
  9017                           
  9018                           ;cmd_parser.c: 13: s->c = CMD_ABS;
  9019  05CA  0845               	movf	parseCmd@s,w
  9020  05CB  0086               	movwf	6
  9021  05CC  3001               	movlw	1	; select bank2/3
  9022  05CD  0087               	movwf	7
  9023  05CE  0181               	clrf	1
  9024  05CF  0A81               	incf	1,f
  9025  05D0  2F5D               	goto	l9178
  9026  05D1                     l9076:	
  9027                           
  9028                           ;cmd_parser.c: 14: else if(stricmp(p, "pos") == 0)
  9029  05D1  3026               	movlw	low (STR_56| (0+32768))
  9030  05D2  00B3               	movwf	stricmp@s2
  9031  05D3  30B0               	movlw	high (STR_56| (0+32768))
  9032  05D4  00B4               	movwf	stricmp@s2+1
  9033  05D5  084A               	movf	parseCmd@p,w
  9034  05D6  31A6  26AC  3185   	fcall	_stricmp
  9035  05D9  0020               	movlb	0	; select bank0
  9036  05DA  0833               	movf	?_stricmp,w
  9037  05DB  0434               	iorwf	?_stricmp+1,w
  9038  05DC  1D03               	btfss	3,2
  9039  05DD  2DE0               	goto	l9080
  9040                           
  9041                           ;cmd_parser.c: 15: s->c = CMD_P;
  9042  05DE  3003               	movlw	3
  9043  05DF  2F1A               	goto	L22
  9044  05E0                     l9080:	
  9045                           
  9046                           ;cmd_parser.c: 16: else if(stricmp(p,"s") == 0)
  9047  05E0  3024               	movlw	low ((STR_55+2)| (0+32768))
  9048  05E1  00B3               	movwf	stricmp@s2
  9049  05E2  30B0               	movlw	high ((STR_55+2)| (0+32768))
  9050  05E3  00B4               	movwf	stricmp@s2+1
  9051  05E4  084A               	movf	parseCmd@p,w
  9052  05E5  31A6  26AC  3185   	fcall	_stricmp
  9053  05E8  0020               	movlb	0	; select bank0
  9054  05E9  0833               	movf	?_stricmp,w
  9055  05EA  0434               	iorwf	?_stricmp+1,w
  9056  05EB  1D03               	btfss	3,2
  9057  05EC  2DEF               	goto	l9084
  9058                           
  9059                           ;cmd_parser.c: 17: s->c = CMD_STOP;
  9060  05ED  3004               	movlw	4
  9061  05EE  2F1A               	goto	L22
  9062  05EF                     l9084:	
  9063                           
  9064                           ;cmd_parser.c: 18: else if(stricmp(p,"setA") == 0)
  9065  05EF  3005               	movlw	low (STR_58| (0+32768))
  9066  05F0  00B3               	movwf	stricmp@s2
  9067  05F1  30B0               	movlw	high (STR_58| (0+32768))
  9068  05F2  00B4               	movwf	stricmp@s2+1
  9069  05F3  084A               	movf	parseCmd@p,w
  9070  05F4  31A6  26AC  3185   	fcall	_stricmp
  9071  05F7  0020               	movlb	0	; select bank0
  9072  05F8  0833               	movf	?_stricmp,w
  9073  05F9  0434               	iorwf	?_stricmp+1,w
  9074  05FA  1D03               	btfss	3,2
  9075  05FB  2DFE               	goto	l9088
  9076                           
  9077                           ;cmd_parser.c: 19: s->c = CMD_SETA;
  9078  05FC  3006               	movlw	6
  9079  05FD  2F1A               	goto	L22
  9080  05FE                     l9088:	
  9081                           
  9082                           ;cmd_parser.c: 20: else if(stricmp(p,"setM") == 0)
  9083  05FE  300F               	movlw	low (STR_59| (0+32768))
  9084  05FF  00B3               	movwf	stricmp@s2
  9085  0600  30B0               	movlw	high (STR_59| (0+32768))
  9086  0601  00B4               	movwf	stricmp@s2+1
  9087  0602  084A               	movf	parseCmd@p,w
  9088  0603  31A6  26AC  3185   	fcall	_stricmp
  9089  0606  0020               	movlb	0	; select bank0
  9090  0607  0833               	movf	?_stricmp,w
  9091  0608  0434               	iorwf	?_stricmp+1,w
  9092  0609  1D03               	btfss	3,2
  9093  060A  2E0D               	goto	l9092
  9094                           
  9095                           ;cmd_parser.c: 21: s->c = CMD_SETM;
  9096  060B  3007               	movlw	7
  9097  060C  2F1A               	goto	L22
  9098  060D                     l9092:	
  9099                           
  9100                           ;cmd_parser.c: 22: else if(stricmp(p,"z") == 0)
  9101  060D  3046               	movlw	low (STR_60| (0+32768))
  9102  060E  00B3               	movwf	stricmp@s2
  9103  060F  30B0               	movlw	high (STR_60| (0+32768))
  9104  0610  00B4               	movwf	stricmp@s2+1
  9105  0611  084A               	movf	parseCmd@p,w
  9106  0612  31A6  26AC  3185   	fcall	_stricmp
  9107  0615  0020               	movlb	0	; select bank0
  9108  0616  0833               	movf	?_stricmp,w
  9109  0617  0434               	iorwf	?_stricmp+1,w
  9110  0618  1D03               	btfss	3,2
  9111  0619  2E1C               	goto	l9096
  9112                           
  9113                           ;cmd_parser.c: 23: s->c = CMD_ZERO;
  9114  061A  3008               	movlw	8
  9115  061B  2F1A               	goto	L22
  9116  061C                     l9096:	
  9117                           
  9118                           ;cmd_parser.c: 24: else if(stricmp(p,"drvPeak") == 0)
  9119  061C  30A6               	movlw	low (STR_61| (0+32768))
  9120  061D  00B3               	movwf	stricmp@s2
  9121  061E  30A9               	movlw	high (STR_61| (0+32768))
  9122  061F  00B4               	movwf	stricmp@s2+1
  9123  0620  084A               	movf	parseCmd@p,w
  9124  0621  31A6  26AC  3185   	fcall	_stricmp
  9125  0624  0020               	movlb	0	; select bank0
  9126  0625  0833               	movf	?_stricmp,w
  9127  0626  0434               	iorwf	?_stricmp+1,w
  9128  0627  1D03               	btfss	3,2
  9129  0628  2E2B               	goto	l9100
  9130                           
  9131                           ;cmd_parser.c: 25: s->c = CMD_DRV_PEAK;
  9132  0629  3009               	movlw	9
  9133  062A  2F1A               	goto	L22
  9134  062B                     l9100:	
  9135                           
  9136                           ;cmd_parser.c: 26: else if(stricmp(p,"drvGain") == 0)
  9137  062B  30AE               	movlw	low (STR_62| (0+32768))
  9138  062C  00B3               	movwf	stricmp@s2
  9139  062D  30A9               	movlw	high (STR_62| (0+32768))
  9140  062E  00B4               	movwf	stricmp@s2+1
  9141  062F  084A               	movf	parseCmd@p,w
  9142  0630  31A6  26AC  3185   	fcall	_stricmp
  9143  0633  0020               	movlb	0	; select bank0
  9144  0634  0833               	movf	?_stricmp,w
  9145  0635  0434               	iorwf	?_stricmp+1,w
  9146  0636  1D03               	btfss	3,2
  9147  0637  2E3A               	goto	l9104
  9148                           
  9149                           ;cmd_parser.c: 27: s->c = CMD_DRV_GAIN;
  9150  0638  300A               	movlw	10
  9151  0639  2F1A               	goto	L22
  9152  063A                     l9104:	
  9153                           
  9154                           ;cmd_parser.c: 28: else if(stricmp(p,"piezoontime") == 0)
  9155  063A  3053               	movlw	low (STR_63| (0+32768))
  9156  063B  00B3               	movwf	stricmp@s2
  9157  063C  30A9               	movlw	high (STR_63| (0+32768))
  9158  063D  00B4               	movwf	stricmp@s2+1
  9159  063E  084A               	movf	parseCmd@p,w
  9160  063F  31A6  26AC  3185   	fcall	_stricmp
  9161  0642  0020               	movlb	0	; select bank0
  9162  0643  0833               	movf	?_stricmp,w
  9163  0644  0434               	iorwf	?_stricmp+1,w
  9164  0645  1D03               	btfss	3,2
  9165  0646  2E49               	goto	l9108
  9166                           
  9167                           ;cmd_parser.c: 29: s->c = CMD_DRV_PIEZOONTIME;
  9168  0647  300B               	movlw	11
  9169  0648  2F1A               	goto	L22
  9170  0649                     l9108:	
  9171                           
  9172                           ;cmd_parser.c: 30: else if(stricmp(p,"heaterpretime") == 0)
  9173  0649  302C               	movlw	low (STR_64| (0+32768))
  9174  064A  00B3               	movwf	stricmp@s2
  9175  064B  30A9               	movlw	high (STR_64| (0+32768))
  9176  064C  00B4               	movwf	stricmp@s2+1
  9177  064D  084A               	movf	parseCmd@p,w
  9178  064E  31A6  26AC  3185   	fcall	_stricmp
  9179  0651  0020               	movlb	0	; select bank0
  9180  0652  0833               	movf	?_stricmp,w
  9181  0653  0434               	iorwf	?_stricmp+1,w
  9182  0654  1D03               	btfss	3,2
  9183  0655  2E58               	goto	l9112
  9184                           
  9185                           ;cmd_parser.c: 31: s->c = CMD_HEATER_PRETIME;
  9186  0656  300C               	movlw	12
  9187  0657  2F1A               	goto	L22
  9188  0658                     l9112:	
  9189                           
  9190                           ;cmd_parser.c: 32: else if(stricmp(p,"heaterposttime") == 0)
  9191  0658  301D               	movlw	low (STR_65| (0+32768))
  9192  0659  00B3               	movwf	stricmp@s2
  9193  065A  30A9               	movlw	high (STR_65| (0+32768))
  9194  065B  00B4               	movwf	stricmp@s2+1
  9195  065C  084A               	movf	parseCmd@p,w
  9196  065D  31A6  26AC  3185   	fcall	_stricmp
  9197  0660  0020               	movlb	0	; select bank0
  9198  0661  0833               	movf	?_stricmp,w
  9199  0662  0434               	iorwf	?_stricmp+1,w
  9200  0663  1D03               	btfss	3,2
  9201  0664  2E67               	goto	l9116
  9202                           
  9203                           ;cmd_parser.c: 33: s->c = CMD_HEATER_POSTTIME;
  9204  0665  300D               	movlw	13
  9205  0666  2F1A               	goto	L22
  9206  0667                     l9116:	
  9207                           
  9208                           ;cmd_parser.c: 34: else if(stricmp(p,"heater1off") == 0)
  9209  0667  305F               	movlw	low (STR_66| (0+32768))
  9210  0668  00B3               	movwf	stricmp@s2
  9211  0669  30A9               	movlw	high (STR_66| (0+32768))
  9212  066A  00B4               	movwf	stricmp@s2+1
  9213  066B  084A               	movf	parseCmd@p,w
  9214  066C  31A6  26AC  3185   	fcall	_stricmp
  9215  066F  0020               	movlb	0	; select bank0
  9216  0670  0833               	movf	?_stricmp,w
  9217  0671  0434               	iorwf	?_stricmp+1,w
  9218  0672  1D03               	btfss	3,2
  9219  0673  2E76               	goto	l9120
  9220                           
  9221                           ;cmd_parser.c: 35: s->c = CMD_HEATER_H1OFF;
  9222  0674  300E               	movlw	14
  9223  0675  2F1A               	goto	L22
  9224  0676                     l9120:	
  9225                           
  9226                           ;cmd_parser.c: 36: else if(stricmp(p,"heater2on") == 0)
  9227  0676  3080               	movlw	low (STR_67| (0+32768))
  9228  0677  00B3               	movwf	stricmp@s2
  9229  0678  30A9               	movlw	high (STR_67| (0+32768))
  9230  0679  00B4               	movwf	stricmp@s2+1
  9231  067A  084A               	movf	parseCmd@p,w
  9232  067B  31A6  26AC  3185   	fcall	_stricmp
  9233  067E  0020               	movlb	0	; select bank0
  9234  067F  0833               	movf	?_stricmp,w
  9235  0680  0434               	iorwf	?_stricmp+1,w
  9236  0681  1D03               	btfss	3,2
  9237  0682  2E85               	goto	l9124
  9238                           
  9239                           ;cmd_parser.c: 37: s->c = CMD_HEATER_H2ON;
  9240  0683  300F               	movlw	15
  9241  0684  2F1A               	goto	L22
  9242  0685                     l9124:	
  9243                           
  9244                           ;cmd_parser.c: 38: else if(stricmp(p,"ledgain") == 0)
  9245  0685  30B6               	movlw	low (STR_68| (0+32768))
  9246  0686  00B3               	movwf	stricmp@s2
  9247  0687  30A9               	movlw	high (STR_68| (0+32768))
  9248  0688  00B4               	movwf	stricmp@s2+1
  9249  0689  084A               	movf	parseCmd@p,w
  9250  068A  31A6  26AC  3185   	fcall	_stricmp
  9251  068D  0020               	movlb	0	; select bank0
  9252  068E  0833               	movf	?_stricmp,w
  9253  068F  0434               	iorwf	?_stricmp+1,w
  9254  0690  1D03               	btfss	3,2
  9255  0691  2E94               	goto	l9128
  9256                           
  9257                           ;cmd_parser.c: 39: s->c = CMD_HEATER_GAIN;
  9258  0692  3010               	movlw	16
  9259  0693  2F1A               	goto	L22
  9260  0694                     l9128:	
  9261                           
  9262                           ;cmd_parser.c: 40: else if(stricmp(p,"ledpwr") == 0)
  9263  0694  30E5               	movlw	low (STR_69| (0+32768))
  9264  0695  00B3               	movwf	stricmp@s2
  9265  0696  30A9               	movlw	high (STR_69| (0+32768))
  9266  0697  00B4               	movwf	stricmp@s2+1
  9267  0698  084A               	movf	parseCmd@p,w
  9268  0699  31A6  26AC  3185   	fcall	_stricmp
  9269  069C  0020               	movlb	0	; select bank0
  9270  069D  0833               	movf	?_stricmp,w
  9271  069E  0434               	iorwf	?_stricmp+1,w
  9272  069F  1D03               	btfss	3,2
  9273  06A0  2EA3               	goto	l9132
  9274                           
  9275                           ;cmd_parser.c: 41: s->c = CMD_HEATER_PWR;
  9276  06A1  3011               	movlw	17
  9277  06A2  2F1A               	goto	L22
  9278  06A3                     l9132:	
  9279                           
  9280                           ;cmd_parser.c: 42: else if(stricmp(p,"toggleheater") == 0)
  9281  06A3  303A               	movlw	low (STR_70| (0+32768))
  9282  06A4  00B3               	movwf	stricmp@s2
  9283  06A5  30A9               	movlw	high (STR_70| (0+32768))
  9284  06A6  00B4               	movwf	stricmp@s2+1
  9285  06A7  084A               	movf	parseCmd@p,w
  9286  06A8  31A6  26AC  3185   	fcall	_stricmp
  9287  06AB  0020               	movlb	0	; select bank0
  9288  06AC  0833               	movf	?_stricmp,w
  9289  06AD  0434               	iorwf	?_stricmp+1,w
  9290  06AE  1D03               	btfss	3,2
  9291  06AF  2EB2               	goto	l9136
  9292                           
  9293                           ;cmd_parser.c: 43: s->c = CMD_HEATER_TOGGLE;
  9294  06B0  3012               	movlw	18
  9295  06B1  2F1A               	goto	L22
  9296  06B2                     l9136:	
  9297                           
  9298                           ;cmd_parser.c: 44: else if(stricmp(p,"timeheater") == 0)
  9299  06B2  306A               	movlw	low (STR_71| (0+32768))
  9300  06B3  00B3               	movwf	stricmp@s2
  9301  06B4  30A9               	movlw	high (STR_71| (0+32768))
  9302  06B5  00B4               	movwf	stricmp@s2+1
  9303  06B6  084A               	movf	parseCmd@p,w
  9304  06B7  31A6  26AC  3185   	fcall	_stricmp
  9305  06BA  0020               	movlb	0	; select bank0
  9306  06BB  0833               	movf	?_stricmp,w
  9307  06BC  0434               	iorwf	?_stricmp+1,w
  9308  06BD  1D03               	btfss	3,2
  9309  06BE  2EC1               	goto	l9140
  9310                           
  9311                           ;cmd_parser.c: 45: s->c = CMD_HEATER_TIMED;
  9312  06BF  3013               	movlw	19
  9313  06C0  2F1A               	goto	L22
  9314  06C1                     l9140:	
  9315                           
  9316                           ;cmd_parser.c: 46: else if(stricmp(p,"getA") == 0)
  9317  06C1  3000               	movlw	low (STR_72| (0+32768))
  9318  06C2  00B3               	movwf	stricmp@s2
  9319  06C3  30B0               	movlw	high (STR_72| (0+32768))
  9320  06C4  00B4               	movwf	stricmp@s2+1
  9321  06C5  084A               	movf	parseCmd@p,w
  9322  06C6  31A6  26AC  3185   	fcall	_stricmp
  9323  06C9  0020               	movlb	0	; select bank0
  9324  06CA  0833               	movf	?_stricmp,w
  9325  06CB  0434               	iorwf	?_stricmp+1,w
  9326  06CC  1D03               	btfss	3,2
  9327  06CD  2ED0               	goto	l9144
  9328                           
  9329                           ;cmd_parser.c: 47: s->c = CMD_GET_ACTIVE;
  9330  06CE  3014               	movlw	20
  9331  06CF  2F1A               	goto	L22
  9332  06D0                     l9144:	
  9333                           
  9334                           ;cmd_parser.c: 48: else if(stricmp(p,"getM") == 0)
  9335  06D0  300A               	movlw	low (STR_73| (0+32768))
  9336  06D1  00B3               	movwf	stricmp@s2
  9337  06D2  30B0               	movlw	high (STR_73| (0+32768))
  9338  06D3  00B4               	movwf	stricmp@s2+1
  9339  06D4  084A               	movf	parseCmd@p,w
  9340  06D5  31A6  26AC  3185   	fcall	_stricmp
  9341  06D8  0020               	movlb	0	; select bank0
  9342  06D9  0833               	movf	?_stricmp,w
  9343  06DA  0434               	iorwf	?_stricmp+1,w
  9344  06DB  1D03               	btfss	3,2
  9345  06DC  2EDF               	goto	l9148
  9346                           
  9347                           ;cmd_parser.c: 49: s->c = CMD_GET_MOVABLE;
  9348  06DD  3015               	movlw	21
  9349  06DE  2F1A               	goto	L22
  9350  06DF                     l9148:	
  9351                           
  9352                           ;cmd_parser.c: 50: else if(stricmp(p,"mstatus") == 0)
  9353  06DF  30BE               	movlw	low (STR_74| (0+32768))
  9354  06E0  00B3               	movwf	stricmp@s2
  9355  06E1  30A9               	movlw	high (STR_74| (0+32768))
  9356  06E2  00B4               	movwf	stricmp@s2+1
  9357  06E3  084A               	movf	parseCmd@p,w
  9358  06E4  31A6  26AC  3185   	fcall	_stricmp
  9359  06E7  0020               	movlb	0	; select bank0
  9360  06E8  0833               	movf	?_stricmp,w
  9361  06E9  0434               	iorwf	?_stricmp+1,w
  9362  06EA  1D03               	btfss	3,2
  9363  06EB  2EEE               	goto	l9152
  9364                           
  9365                           ;cmd_parser.c: 51: s->c = CMD_MOTION_STATUS;
  9366  06EC  3016               	movlw	22
  9367  06ED  2F1A               	goto	L22
  9368  06EE                     l9152:	
  9369                           
  9370                           ;cmd_parser.c: 52: else if(stricmp(p,"domove") == 0)
  9371  06EE  30DE               	movlw	low (STR_75| (0+32768))
  9372  06EF  00B3               	movwf	stricmp@s2
  9373  06F0  30A9               	movlw	high (STR_75| (0+32768))
  9374  06F1  00B4               	movwf	stricmp@s2+1
  9375  06F2  084A               	movf	parseCmd@p,w
  9376  06F3  31A6  26AC  3185   	fcall	_stricmp
  9377  06F6  0020               	movlb	0	; select bank0
  9378  06F7  0833               	movf	?_stricmp,w
  9379  06F8  0434               	iorwf	?_stricmp+1,w
  9380  06F9  1D03               	btfss	3,2
  9381  06FA  2EFD               	goto	l9156
  9382                           
  9383                           ;cmd_parser.c: 53: s->c = CMD_DOMOVE;
  9384  06FB  3017               	movlw	23
  9385  06FC  2F1A               	goto	L22
  9386  06FD                     l9156:	
  9387                           
  9388                           ;cmd_parser.c: 54: else if(stricmp(p,"comm") == 0)
  9389  06FD  3019               	movlw	low (STR_76| (0+32768))
  9390  06FE  00B3               	movwf	stricmp@s2
  9391  06FF  30B0               	movlw	high (STR_76| (0+32768))
  9392  0700  00B4               	movwf	stricmp@s2+1
  9393  0701  084A               	movf	parseCmd@p,w
  9394  0702  31A6  26AC  3185   	fcall	_stricmp
  9395  0705  0020               	movlb	0	; select bank0
  9396  0706  0833               	movf	?_stricmp,w
  9397  0707  0434               	iorwf	?_stricmp+1,w
  9398  0708  1D03               	btfss	3,2
  9399  0709  2F0C               	goto	l9160
  9400                           
  9401                           ;cmd_parser.c: 55: s->c = CMD_COMM_CHECK;
  9402  070A  3018               	movlw	24
  9403  070B  2F1A               	goto	L22
  9404  070C                     l9160:	
  9405                           
  9406                           ;cmd_parser.c: 56: else if(stricmp(p,"ping") == 0)
  9407  070C  3014               	movlw	low (STR_77| (0+32768))
  9408  070D  00B3               	movwf	stricmp@s2
  9409  070E  30B0               	movlw	high (STR_77| (0+32768))
  9410  070F  00B4               	movwf	stricmp@s2+1
  9411  0710  084A               	movf	parseCmd@p,w
  9412  0711  31A6  26AC  3185   	fcall	_stricmp
  9413  0714  0020               	movlb	0	; select bank0
  9414  0715  0833               	movf	?_stricmp,w
  9415  0716  0434               	iorwf	?_stricmp+1,w
  9416  0717  1D03               	btfss	3,2
  9417  0718  2F22               	goto	l9164
  9418                           
  9419                           ;cmd_parser.c: 57: s->c = CMD_PING;
  9420  0719  3019               	movlw	25
  9421  071A                     L22:	
  9422  071A  00C6               	movwf	??_parseCmd
  9423  071B  0845               	movf	parseCmd@s,w
  9424  071C  0086               	movwf	6
  9425  071D  3001               	movlw	1	; select bank2/3
  9426  071E  0087               	movwf	7
  9427  071F  0846               	movf	??_parseCmd,w
  9428  0720  0081               	movwf	1
  9429  0721  2F5D               	goto	l9178
  9430  0722                     l9164:	
  9431                           
  9432                           ;cmd_parser.c: 58: else if(stricmp(p,"softreset") == 0)
  9433  0722  308A               	movlw	low (STR_78| (0+32768))
  9434  0723  00B3               	movwf	stricmp@s2
  9435  0724  30A9               	movlw	high (STR_78| (0+32768))
  9436  0725  00B4               	movwf	stricmp@s2+1
  9437  0726  084A               	movf	parseCmd@p,w
  9438  0727  31A6  26AC  3185   	fcall	_stricmp
  9439  072A  0020               	movlb	0	; select bank0
  9440  072B  0833               	movf	?_stricmp,w
  9441  072C  0434               	iorwf	?_stricmp+1,w
  9442  072D  1D03               	btfss	3,2
  9443  072E  2F31               	goto	l9168
  9444  072F  0001               	reset	;# 
  9445  0730  2F5D               	goto	l9178
  9446  0731                     l9168:	
  9447                           
  9448                           ;cmd_parser.c: 61: else
  9449                           ;cmd_parser.c: 62: s->c = CMD_NONE;
  9450  0731  0020               	movlb	0	; select bank0
  9451  0732  0845               	movf	parseCmd@s,w
  9452  0733  0086               	movwf	6
  9453  0734  3001               	movlw	1	; select bank2/3
  9454  0735  0087               	movwf	7
  9455  0736  0181               	clrf	1
  9456                           
  9457                           ;cmd_parser.c: 63: }
  9458  0737  2F5D               	goto	l9178
  9459  0738                     l9170:	
  9460                           
  9461                           ;cmd_parser.c: 64: else if(paramIter == 1){
  9462  0738  0348               	decf	parseCmd@paramIter,w
  9463  0739  0449               	iorwf	parseCmd@paramIter+1,w
  9464  073A  1D03               	btfss	3,2
  9465  073B  2F4A               	goto	l9174
  9466                           
  9467                           ;cmd_parser.c: 65: s->p1.paramI = atoi(p);
  9468  073C  084A               	movf	parseCmd@p,w
  9469  073D  3192  224D  3185   	fcall	_atoi
  9470  0740  0020               	movlb	0	; select bank0
  9471  0741  0A45               	incf	parseCmd@s,w
  9472  0742  0086               	movwf	6
  9473  0743  3001               	movlw	1	; select bank2/3
  9474  0744  0087               	movwf	7
  9475  0745  0837               	movf	?_atoi,w
  9476  0746  3FC0               	movwi [0]fsr1
  9477  0747  0838               	movf	?_atoi+1,w
  9478  0748  3FC1               	movwi [1]fsr1
  9479                           
  9480                           ;cmd_parser.c: 66: }
  9481  0749  2F5D               	goto	l9178
  9482  074A                     l9174:	
  9483                           
  9484                           ;cmd_parser.c: 67: else if(paramIter == 2){
  9485  074A  3002               	movlw	2
  9486  074B  0648               	xorwf	parseCmd@paramIter,w
  9487  074C  0449               	iorwf	parseCmd@paramIter+1,w
  9488  074D  1D03               	btfss	3,2
  9489  074E  2F5D               	goto	l9178
  9490                           
  9491                           ;cmd_parser.c: 69: s->p2.paramI = atoi(p);
  9492  074F  084A               	movf	parseCmd@p,w
  9493  0750  3192  224D  3185   	fcall	_atoi
  9494  0753  0020               	movlb	0	; select bank0
  9495  0754  0845               	movf	parseCmd@s,w
  9496  0755  3E0B               	addlw	11
  9497  0756  0086               	movwf	6
  9498  0757  3001               	movlw	1	; select bank2/3
  9499  0758  0087               	movwf	7
  9500  0759  0837               	movf	?_atoi,w
  9501  075A  3FC0               	movwi [0]fsr1
  9502  075B  0838               	movf	?_atoi+1,w
  9503  075C  3FC1               	movwi [1]fsr1
  9504  075D                     l9178:	
  9505                           
  9506                           ;cmd_parser.c: 70: }
  9507                           ;cmd_parser.c: 72: paramIter++;
  9508  075D  3001               	movlw	1
  9509  075E  0020               	movlb	0	; select bank0
  9510  075F  07C8               	addwf	parseCmd@paramIter,f
  9511  0760  3000               	movlw	0
  9512  0761  3DC9               	addwfc	parseCmd@paramIter+1,f
  9513  0762  30DC               	movlw	low ((STR_38+6)| (0+32768))
  9514  0763  00BF               	movwf	strtok@s2
  9515  0764  30A9               	movlw	high ((STR_38+6)| (0+32768))
  9516  0765  00C0               	movwf	strtok@s2+1
  9517  0766  3000               	movlw	0
  9518  0767  2DA0               	goto	L23
  9519  0768                     __end_of_parseCmd:	
  9520                           
  9521                           	psect	text2
  9522  1AB2                     __ptext2:	
  9523 ;; *************** function _strtok *****************
  9524 ;; Defined at:
  9525 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtok.c"
  9526 ;; Parameters:    Size  Location     Type
  9527 ;;  s1              1    wreg     PTR unsigned char 
  9528 ;;		 -> readdata(20), NULL(0), 
  9529 ;;  s2              2   31[BANK0 ] PTR const unsigned char 
  9530 ;;		 -> STR_53(2), STR_52(2), 
  9531 ;; Auto vars:     Size  Location     Type
  9532 ;;  s1              1   36[BANK0 ] PTR unsigned char 
  9533 ;;		 -> readdata(20), NULL(0), 
  9534 ;; Return value:  Size  Location     Type
  9535 ;;                  1    wreg      PTR unsigned char 
  9536 ;; Registers used:
  9537 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9538 ;; Tracked objects:
  9539 ;;		On entry : 0/0
  9540 ;;		On exit  : 0/0
  9541 ;;		Unchanged: 0/0
  9542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9543 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9544 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9545 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9546 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9547 ;;Total ram usage:        6 bytes
  9548 ;; Hardware stack levels used:    1
  9549 ;; Hardware stack levels required when called:    8
  9550 ;; This function calls:
  9551 ;;		_strcspn
  9552 ;;		_strspn
  9553 ;; This function is called by:
  9554 ;;		_parseCmd
  9555 ;; This function uses a non-reentrant model
  9556 ;;
  9557                           
  9558                           
  9559                           ;psect for function _strtok
  9560  1AB2                     _strtok:	
  9561                           
  9562                           ;incstack = 0
  9563                           ; Regs used in _strtok: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9564                           ;strtok@s1 stored from wreg
  9565  1AB2  0020               	movlb	0	; select bank0
  9566  1AB3  00C4               	movwf	strtok@s1
  9567  1AB4  0844               	movf	strtok@s1,w
  9568  1AB5  1D03               	btfss	3,2
  9569  1AB6  2ABB               	goto	l6678
  9570  1AB7  0854               	movf	strtok@sp,w
  9571  1AB8  00C1               	movwf	??_strtok
  9572  1AB9  0841               	movf	??_strtok,w
  9573  1ABA  00C4               	movwf	strtok@s1
  9574  1ABB                     l6678:	
  9575  1ABB  0844               	movf	strtok@s1,w
  9576  1ABC  1D03               	btfss	3,2
  9577  1ABD  2AC0               	goto	l6684
  9578  1ABE  3000               	movlw	0
  9579  1ABF  0008               	return
  9580  1AC0                     l6684:	
  9581  1AC0  0840               	movf	strtok@s2+1,w
  9582  1AC1  00B9               	movwf	strspn@s2+1
  9583  1AC2  083F               	movf	strtok@s2,w
  9584  1AC3  00B8               	movwf	strspn@s2
  9585  1AC4  0844               	movf	strtok@s1,w
  9586  1AC5  31A6  2649  319A   	fcall	_strspn
  9587  1AC8  0020               	movlb	0	; select bank0
  9588  1AC9  0838               	movf	?_strspn,w
  9589  1ACA  00C1               	movwf	??_strtok
  9590  1ACB  0841               	movf	??_strtok,w
  9591  1ACC  07C4               	addwf	strtok@s1,f
  9592  1ACD  0844               	movf	strtok@s1,w
  9593  1ACE  0086               	movwf	6
  9594  1ACF  3001               	movlw	1	; select bank2/3
  9595  1AD0  0087               	movwf	7
  9596  1AD1  0801               	movf	1,w
  9597  1AD2  1D03               	btfss	3,2
  9598  1AD3  2AD7               	goto	l6692
  9599  1AD4  01D4               	clrf	strtok@sp
  9600  1AD5  3000               	movlw	0
  9601  1AD6  0008               	return
  9602  1AD7                     l6692:	
  9603  1AD7  0840               	movf	strtok@s2+1,w
  9604  1AD8  00B9               	movwf	strcspn@s2+1
  9605  1AD9  083F               	movf	strtok@s2,w
  9606  1ADA  00B8               	movwf	strcspn@s2
  9607  1ADB  0844               	movf	strtok@s1,w
  9608  1ADC  31A6  2619  319A   	fcall	_strcspn
  9609  1ADF  0020               	movlb	0	; select bank0
  9610  1AE0  0838               	movf	?_strcspn,w
  9611  1AE1  00C1               	movwf	??_strtok
  9612  1AE2  0839               	movf	?_strcspn+1,w
  9613  1AE3  00C2               	movwf	??_strtok+1
  9614  1AE4  0844               	movf	strtok@s1,w
  9615  1AE5  0741               	addwf	??_strtok,w
  9616  1AE6  00C3               	movwf	??_strtok+2
  9617  1AE7  0843               	movf	??_strtok+2,w
  9618  1AE8  00D4               	movwf	strtok@sp
  9619  1AE9  0854               	movf	strtok@sp,w
  9620  1AEA  0086               	movwf	6
  9621  1AEB  3001               	movlw	1	; select bank2/3
  9622  1AEC  0087               	movwf	7
  9623  1AED  0801               	movf	1,w
  9624  1AEE  1903               	btfsc	3,2
  9625  1AEF  2AFA               	goto	l6700
  9626  1AF0  0854               	movf	strtok@sp,w
  9627  1AF1  0086               	movwf	6
  9628  1AF2  3001               	movlw	1	; select bank2/3
  9629  1AF3  0087               	movwf	7
  9630  1AF4  0181               	clrf	1
  9631  1AF5  3001               	movlw	1
  9632  1AF6  00C1               	movwf	??_strtok
  9633  1AF7  0841               	movf	??_strtok,w
  9634  1AF8  07D4               	addwf	strtok@sp,f
  9635  1AF9  2AFB               	goto	l6702
  9636  1AFA                     l6700:	
  9637  1AFA  01D4               	clrf	strtok@sp
  9638  1AFB                     l6702:	
  9639  1AFB  0844               	movf	strtok@s1,w
  9640  1AFC  0008               	return
  9641  1AFD                     __end_of_strtok:	
  9642                           
  9643                           	psect	text3
  9644  2649                     __ptext3:	
  9645 ;; *************** function _strspn *****************
  9646 ;; Defined at:
  9647 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strspn.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;  s1              1    wreg     PTR const unsigned char 
  9650 ;;		 -> readdata(20), NULL(0), 
  9651 ;;  s2              2   24[BANK0 ] PTR const unsigned char 
  9652 ;;		 -> STR_53(2), STR_52(2), 
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;  s1              1   30[BANK0 ] PTR const unsigned char 
  9655 ;;		 -> readdata(20), NULL(0), 
  9656 ;;  i               2   28[BANK0 ] unsigned int 
  9657 ;; Return value:  Size  Location     Type
  9658 ;;                  2   24[BANK0 ] unsigned int 
  9659 ;; Registers used:
  9660 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9661 ;; Tracked objects:
  9662 ;;		On entry : 0/0
  9663 ;;		On exit  : 0/0
  9664 ;;		Unchanged: 0/0
  9665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9666 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9667 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9668 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9669 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9670 ;;Total ram usage:        7 bytes
  9671 ;; Hardware stack levels used:    1
  9672 ;; Hardware stack levels required when called:    7
  9673 ;; This function calls:
  9674 ;;		_strchr
  9675 ;; This function is called by:
  9676 ;;		_strtok
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           
  9681                           ;psect for function _strspn
  9682  2649                     _strspn:	
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in _strspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9686                           ;strspn@s1 stored from wreg
  9687  2649  0020               	movlb	0	; select bank0
  9688  264A  00BE               	movwf	strspn@s1
  9689  264B  01BC               	clrf	strspn@i
  9690  264C  01BD               	clrf	strspn@i+1
  9691  264D  2E56               	goto	l6118
  9692  264E                     l6116:	
  9693  264E  3001               	movlw	1
  9694  264F  00BA               	movwf	??_strspn
  9695  2650  083A               	movf	??_strspn,w
  9696  2651  07BE               	addwf	strspn@s1,f
  9697  2652  3001               	movlw	1
  9698  2653  07BC               	addwf	strspn@i,f
  9699  2654  3000               	movlw	0
  9700  2655  3DBD               	addwfc	strspn@i+1,f
  9701  2656                     l6118:	
  9702  2656  083E               	movf	strspn@s1,w
  9703  2657  0086               	movwf	6
  9704  2658  3001               	movlw	1	; select bank2/3
  9705  2659  0087               	movwf	7
  9706  265A  0801               	movf	1,w
  9707  265B  1903               	btfsc	3,2
  9708  265C  2E74               	goto	l6122
  9709  265D  0839               	movf	strspn@s2+1,w
  9710  265E  00B2               	movwf	strchr@ptr+1
  9711  265F  0838               	movf	strspn@s2,w
  9712  2660  00B1               	movwf	strchr@ptr
  9713  2661  083E               	movf	strspn@s1,w
  9714  2662  0086               	movwf	6
  9715  2663  3001               	movlw	1	; select bank2/3
  9716  2664  0087               	movwf	7
  9717  2665  0801               	movf	1,w
  9718  2666  00BA               	movwf	??_strspn
  9719  2667  01BB               	clrf	??_strspn+1
  9720  2668  083A               	movf	??_strspn,w
  9721  2669  00B3               	movwf	strchr@chr
  9722  266A  083B               	movf	??_strspn+1,w
  9723  266B  00B4               	movwf	strchr@chr+1
  9724  266C  31A2  22B1  31A6   	fcall	_strchr
  9725  266F  0020               	movlb	0	; select bank0
  9726  2670  0831               	movf	?_strchr,w
  9727  2671  0432               	iorwf	?_strchr+1,w
  9728  2672  1D03               	btfss	3,2
  9729  2673  2E4E               	goto	l6116
  9730  2674                     l6122:	
  9731  2674  083D               	movf	strspn@i+1,w
  9732  2675  00B9               	movwf	?_strspn+1
  9733  2676  083C               	movf	strspn@i,w
  9734  2677  00B8               	movwf	?_strspn
  9735  2678  0008               	return
  9736  2679                     __end_of_strspn:	
  9737                           
  9738                           	psect	text4
  9739  2619                     __ptext4:	
  9740 ;; *************** function _strcspn *****************
  9741 ;; Defined at:
  9742 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcspn.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;  s1              1    wreg     PTR const unsigned char 
  9745 ;;		 -> readdata(20), NULL(0), 
  9746 ;;  s2              2   24[BANK0 ] PTR const unsigned char 
  9747 ;;		 -> STR_53(2), STR_52(2), 
  9748 ;; Auto vars:     Size  Location     Type
  9749 ;;  s1              1   30[BANK0 ] PTR const unsigned char 
  9750 ;;		 -> readdata(20), NULL(0), 
  9751 ;;  i               2   28[BANK0 ] unsigned int 
  9752 ;; Return value:  Size  Location     Type
  9753 ;;                  2   24[BANK0 ] unsigned int 
  9754 ;; Registers used:
  9755 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9756 ;; Tracked objects:
  9757 ;;		On entry : 0/0
  9758 ;;		On exit  : 0/0
  9759 ;;		Unchanged: 0/0
  9760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9761 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9762 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9763 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9764 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9765 ;;Total ram usage:        7 bytes
  9766 ;; Hardware stack levels used:    1
  9767 ;; Hardware stack levels required when called:    7
  9768 ;; This function calls:
  9769 ;;		_strchr
  9770 ;; This function is called by:
  9771 ;;		_strtok
  9772 ;; This function uses a non-reentrant model
  9773 ;;
  9774                           
  9775                           
  9776                           ;psect for function _strcspn
  9777  2619                     _strcspn:	
  9778                           
  9779                           ;incstack = 0
  9780                           ; Regs used in _strcspn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9781                           ;strcspn@s1 stored from wreg
  9782  2619  0020               	movlb	0	; select bank0
  9783  261A  00BE               	movwf	strcspn@s1
  9784  261B  01BC               	clrf	strcspn@i
  9785  261C  01BD               	clrf	strcspn@i+1
  9786  261D  2E26               	goto	l6130
  9787  261E                     l6128:	
  9788  261E  3001               	movlw	1
  9789  261F  00BA               	movwf	??_strcspn
  9790  2620  083A               	movf	??_strcspn,w
  9791  2621  07BE               	addwf	strcspn@s1,f
  9792  2622  3001               	movlw	1
  9793  2623  07BC               	addwf	strcspn@i,f
  9794  2624  3000               	movlw	0
  9795  2625  3DBD               	addwfc	strcspn@i+1,f
  9796  2626                     l6130:	
  9797  2626  083E               	movf	strcspn@s1,w
  9798  2627  0086               	movwf	6
  9799  2628  3001               	movlw	1	; select bank2/3
  9800  2629  0087               	movwf	7
  9801  262A  0801               	movf	1,w
  9802  262B  1903               	btfsc	3,2
  9803  262C  2E44               	goto	l6134
  9804  262D  0839               	movf	strcspn@s2+1,w
  9805  262E  00B2               	movwf	strchr@ptr+1
  9806  262F  0838               	movf	strcspn@s2,w
  9807  2630  00B1               	movwf	strchr@ptr
  9808  2631  083E               	movf	strcspn@s1,w
  9809  2632  0086               	movwf	6
  9810  2633  3001               	movlw	1	; select bank2/3
  9811  2634  0087               	movwf	7
  9812  2635  0801               	movf	1,w
  9813  2636  00BA               	movwf	??_strcspn
  9814  2637  01BB               	clrf	??_strcspn+1
  9815  2638  083A               	movf	??_strcspn,w
  9816  2639  00B3               	movwf	strchr@chr
  9817  263A  083B               	movf	??_strcspn+1,w
  9818  263B  00B4               	movwf	strchr@chr+1
  9819  263C  31A2  22B1  31A6   	fcall	_strchr
  9820  263F  0020               	movlb	0	; select bank0
  9821  2640  0831               	movf	?_strchr,w
  9822  2641  0432               	iorwf	?_strchr+1,w
  9823  2642  1903               	btfsc	3,2
  9824  2643  2E1E               	goto	l6128
  9825  2644                     l6134:	
  9826  2644  083D               	movf	strcspn@i+1,w
  9827  2645  00B9               	movwf	?_strcspn+1
  9828  2646  083C               	movf	strcspn@i,w
  9829  2647  00B8               	movwf	?_strcspn
  9830  2648  0008               	return
  9831  2649                     __end_of_strcspn:	
  9832                           
  9833                           	psect	text5
  9834  22B1                     __ptext5:	
  9835 ;; *************** function _strchr *****************
  9836 ;; Defined at:
  9837 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  9838 ;; Parameters:    Size  Location     Type
  9839 ;;  ptr             2   17[BANK0 ] PTR const unsigned char 
  9840 ;;		 -> STR_53(2), STR_52(2), 
  9841 ;;  chr             2   19[BANK0 ] int 
  9842 ;; Auto vars:     Size  Location     Type
  9843 ;;		None
  9844 ;; Return value:  Size  Location     Type
  9845 ;;                  2   17[BANK0 ] PTR unsigned char 
  9846 ;; Registers used:
  9847 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  9848 ;; Tracked objects:
  9849 ;;		On entry : 0/0
  9850 ;;		On exit  : 0/0
  9851 ;;		Unchanged: 0/0
  9852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9853 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9855 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9856 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9857 ;;Total ram usage:        7 bytes
  9858 ;; Hardware stack levels used:    1
  9859 ;; Hardware stack levels required when called:    6
  9860 ;; This function calls:
  9861 ;;		Nothing
  9862 ;; This function is called by:
  9863 ;;		_strcspn
  9864 ;;		_strspn
  9865 ;; This function uses a non-reentrant model
  9866 ;;
  9867                           
  9868                           
  9869                           ;psect for function _strchr
  9870  22B1                     _strchr:	
  9871  22B1                     l2207:	
  9872                           ;incstack = 0
  9873                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0+pclath]
  9874                           
  9875  22B1  0020               	movlb	0	; select bank0
  9876  22B2  0831               	movf	strchr@ptr,w
  9877  22B3  0084               	movwf	4
  9878  22B4  0832               	movf	strchr@ptr+1,w
  9879  22B5  0085               	movwf	5
  9880  22B6  0800               	movf	0,w	;code access
  9881  22B7  0633               	xorwf	strchr@chr,w
  9882  22B8  1903               	btfsc	3,2
  9883  22B9  0008               	return
  9884  22BA  0832               	movf	strchr@ptr+1,w
  9885  22BB  00B6               	movwf	??_strchr+1
  9886  22BC  0831               	movf	strchr@ptr,w
  9887  22BD  00B5               	movwf	??_strchr
  9888  22BE  0AB1               	incf	strchr@ptr,f
  9889  22BF  1903               	skipnz
  9890  22C0  0AB2               	incf	strchr@ptr+1,f
  9891  22C1  0835               	movf	??_strchr,w
  9892  22C2  0084               	movwf	4
  9893  22C3  0836               	movf	??_strchr+1,w
  9894  22C4  0085               	movwf	5
  9895  22C5  0012               	moviw fsr0++
  9896  22C6  1D03               	btfss	3,2
  9897  22C7  2AB1               	goto	l2207
  9898  22C8  01B1               	clrf	?_strchr
  9899  22C9  01B2               	clrf	?_strchr+1
  9900  22CA  0008               	return
  9901  22CB                     __end_of_strchr:	
  9902                           
  9903                           	psect	text6
  9904  26AC                     __ptext6:	
  9905 ;; *************** function _stricmp *****************
  9906 ;; Defined at:
  9907 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\stricmp.c"
  9908 ;; Parameters:    Size  Location     Type
  9909 ;;  s1              1    wreg     PTR const unsigned char 
  9910 ;;		 -> readdata(20), NULL(0), 
  9911 ;;  s2              2   19[BANK0 ] PTR const unsigned char 
  9912 ;;		 -> STR_78(10), STR_77(5), STR_76(5), STR_75(7), 
  9913 ;;		 -> STR_74(8), STR_73(5), STR_72(5), STR_71(11), 
  9914 ;;		 -> STR_70(13), STR_69(7), STR_68(8), STR_67(10), 
  9915 ;;		 -> STR_66(11), STR_65(15), STR_64(14), STR_63(12), 
  9916 ;;		 -> STR_62(8), STR_61(8), STR_60(2), STR_59(5), 
  9917 ;;		 -> STR_58(5), STR_57(2), STR_56(4), STR_55(4), 
  9918 ;;		 -> STR_54(4), 
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;  s1              1   24[BANK0 ] PTR const unsigned char 
  9921 ;;		 -> readdata(20), NULL(0), 
  9922 ;;  r               1   23[BANK0 ] char 
  9923 ;; Return value:  Size  Location     Type
  9924 ;;                  2   19[BANK0 ] int 
  9925 ;; Registers used:
  9926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9927 ;; Tracked objects:
  9928 ;;		On entry : 0/0
  9929 ;;		On exit  : 0/0
  9930 ;;		Unchanged: 0/0
  9931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9932 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9933 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9934 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9935 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9936 ;;Total ram usage:        6 bytes
  9937 ;; Hardware stack levels used:    1
  9938 ;; Hardware stack levels required when called:    7
  9939 ;; This function calls:
  9940 ;;		_toupper
  9941 ;; This function is called by:
  9942 ;;		_parseCmd
  9943 ;; This function uses a non-reentrant model
  9944 ;;
  9945                           
  9946                           
  9947                           ;psect for function _stricmp
  9948  26AC                     _stricmp:	
  9949                           
  9950                           ;incstack = 0
  9951                           ; Regs used in _stricmp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9952                           ;stricmp@s1 stored from wreg
  9953  26AC  0020               	movlb	0	; select bank0
  9954  26AD  00B8               	movwf	stricmp@s1
  9955  26AE  2EB7               	goto	l6710
  9956  26AF                     l6708:	
  9957  26AF  3001               	movlw	1
  9958  26B0  00B5               	movwf	??_stricmp
  9959  26B1  0835               	movf	??_stricmp,w
  9960  26B2  07B8               	addwf	stricmp@s1,f
  9961  26B3  3001               	movlw	1
  9962  26B4  07B3               	addwf	stricmp@s2,f
  9963  26B5  3000               	movlw	0
  9964  26B6  3DB4               	addwfc	stricmp@s2+1,f
  9965  26B7                     l6710:	
  9966  26B7  0833               	movf	stricmp@s2,w
  9967  26B8  0084               	movwf	4
  9968  26B9  0834               	movf	stricmp@s2+1,w
  9969  26BA  0085               	movwf	5
  9970  26BB  0800               	movf	0,w	;code access
  9971  26BC  31A1  21B4  31A6   	fcall	_toupper
  9972  26BF  3AFF               	xorlw	255
  9973  26C0  3E01               	addlw	1
  9974  26C1  0020               	movlb	0	; select bank0
  9975  26C2  00B5               	movwf	??_stricmp
  9976  26C3  0838               	movf	stricmp@s1,w
  9977  26C4  0086               	movwf	6
  9978  26C5  3001               	movlw	1	; select bank2/3
  9979  26C6  0087               	movwf	7
  9980  26C7  0801               	movf	1,w
  9981  26C8  31A1  21B4  31A6   	fcall	_toupper
  9982  26CB  0020               	movlb	0	; select bank0
  9983  26CC  0735               	addwf	??_stricmp,w
  9984  26CD  00B6               	movwf	??_stricmp+1
  9985  26CE  0836               	movf	??_stricmp+1,w
  9986  26CF  00B7               	movwf	stricmp@r
  9987  26D0  0837               	movf	stricmp@r,w
  9988  26D1  1D03               	btfss	3,2
  9989  26D2  2EDA               	goto	l6714
  9990  26D3  0838               	movf	stricmp@s1,w
  9991  26D4  0086               	movwf	6
  9992  26D5  3001               	movlw	1	; select bank2/3
  9993  26D6  0087               	movwf	7
  9994  26D7  0801               	movf	1,w
  9995  26D8  1D03               	btfss	3,2
  9996  26D9  2EAF               	goto	l6708
  9997  26DA                     l6714:	
  9998  26DA  0837               	movf	stricmp@r,w
  9999  26DB  00B3               	movwf	?_stricmp
 10000  26DC  01B4               	clrf	?_stricmp+1
 10001  26DD  1BB3               	btfsc	?_stricmp,7
 10002  26DE  03B4               	decf	?_stricmp+1,f
 10003  26DF  0008               	return
 10004  26E0                     __end_of_stricmp:	
 10005                           
 10006                           	psect	text7
 10007  21B4                     __ptext7:	
 10008 ;; *************** function _toupper *****************
 10009 ;; Defined at:
 10010 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
 10011 ;; Parameters:    Size  Location     Type
 10012 ;;  c               1    wreg     unsigned char 
 10013 ;; Auto vars:     Size  Location     Type
 10014 ;;  c               1   18[BANK0 ] unsigned char 
 10015 ;; Return value:  Size  Location     Type
 10016 ;;                  1    wreg      unsigned char 
 10017 ;; Registers used:
 10018 ;;		wreg, status,2, status,0
 10019 ;; Tracked objects:
 10020 ;;		On entry : 0/0
 10021 ;;		On exit  : 0/0
 10022 ;;		Unchanged: 0/0
 10023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10027 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10028 ;;Total ram usage:        2 bytes
 10029 ;; Hardware stack levels used:    1
 10030 ;; Hardware stack levels required when called:    6
 10031 ;; This function calls:
 10032 ;;		Nothing
 10033 ;; This function is called by:
 10034 ;;		_stricmp
 10035 ;; This function uses a non-reentrant model
 10036 ;;
 10037                           
 10038                           
 10039                           ;psect for function _toupper
 10040  21B4                     _toupper:	
 10041                           
 10042                           ;incstack = 0
 10043                           ; Regs used in _toupper: [wreg+status,2+status,0]
 10044                           ;toupper@c stored from wreg
 10045  21B4  0020               	movlb	0	; select bank0
 10046  21B5  00B2               	movwf	toupper@c
 10047  21B6  307B               	movlw	123
 10048  21B7  0232               	subwf	toupper@c,w
 10049  21B8  1803               	skipnc
 10050  21B9  29C2               	goto	l6110
 10051  21BA  3061               	movlw	97
 10052  21BB  0232               	subwf	toupper@c,w
 10053  21BC  1C03               	skipc
 10054  21BD  29C2               	goto	l6110
 10055  21BE  30DF               	movlw	223
 10056  21BF  00B1               	movwf	??_toupper
 10057  21C0  0831               	movf	??_toupper,w
 10058  21C1  05B2               	andwf	toupper@c,f
 10059  21C2                     l6110:	
 10060  21C2  0832               	movf	toupper@c,w
 10061  21C3  0008               	return
 10062  21C4                     __end_of_toupper:	
 10063                           
 10064                           	psect	text8
 10065  124D                     __ptext8:	
 10066 ;; *************** function _atoi *****************
 10067 ;; Defined at:
 10068 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
 10069 ;; Parameters:    Size  Location     Type
 10070 ;;  s               1    wreg     PTR const unsigned char 
 10071 ;;		 -> readdata(20), NULL(0), 
 10072 ;; Auto vars:     Size  Location     Type
 10073 ;;  s               1   30[BANK0 ] PTR const unsigned char 
 10074 ;;		 -> readdata(20), NULL(0), 
 10075 ;;  a               2   28[BANK0 ] int 
 10076 ;;  sign            1   27[BANK0 ] unsigned char 
 10077 ;; Return value:  Size  Location     Type
 10078 ;;                  2   23[BANK0 ] int 
 10079 ;; Registers used:
 10080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10081 ;; Tracked objects:
 10082 ;;		On entry : 0/0
 10083 ;;		On exit  : 0/0
 10084 ;;		Unchanged: 0/0
 10085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10086 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10087 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10088 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10089 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10090 ;;Total ram usage:        8 bytes
 10091 ;; Hardware stack levels used:    1
 10092 ;; Hardware stack levels required when called:    7
 10093 ;; This function calls:
 10094 ;;		___wmul
 10095 ;;		_isdigit
 10096 ;; This function is called by:
 10097 ;;		_parseCmd
 10098 ;; This function uses a non-reentrant model
 10099 ;;
 10100                           
 10101                           
 10102                           ;psect for function _atoi
 10103  124D                     _atoi:	
 10104                           
 10105                           ;incstack = 0
 10106                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10107                           ;atoi@s stored from wreg
 10108  124D  0020               	movlb	0	; select bank0
 10109  124E  00BE               	movwf	atoi@s
 10110  124F                     l8904:	
 10111  124F  083E               	movf	atoi@s,w
 10112  1250  0086               	movwf	6
 10113  1251  3001               	movlw	1	; select bank2/3
 10114  1252  0087               	movwf	7
 10115  1253  3020               	movlw	32
 10116  1254  0601               	xorwf	1,w
 10117  1255  1D03               	btfss	3,2
 10118  1256  2A5C               	goto	l8906
 10119  1257                     l8902:	
 10120  1257  3001               	movlw	1
 10121  1258  00B9               	movwf	??_atoi
 10122  1259  0839               	movf	??_atoi,w
 10123  125A  07BE               	addwf	atoi@s,f
 10124  125B  2A4F               	goto	l8904
 10125  125C                     l8906:	
 10126  125C  083E               	movf	atoi@s,w
 10127  125D  0086               	movwf	6
 10128  125E  3001               	movlw	1	; select bank2/3
 10129  125F  0087               	movwf	7
 10130  1260  3009               	movlw	9
 10131  1261  0601               	xorwf	1,w
 10132  1262  1903               	btfsc	3,2
 10133  1263  2A57               	goto	l8902
 10134  1264  01BC               	clrf	atoi@a
 10135  1265  01BD               	clrf	atoi@a+1
 10136  1266  01BB               	clrf	atoi@sign
 10137  1267  083E               	movf	atoi@s,w
 10138  1268  0086               	movwf	6
 10139  1269  3001               	movlw	1	; select bank2/3
 10140  126A  0087               	movwf	7
 10141  126B  302D               	movlw	45
 10142  126C  0601               	xorwf	1,w
 10143  126D  1D03               	btfss	3,2
 10144  126E  2A74               	goto	l8914
 10145  126F  3001               	movlw	1
 10146  1270  00B9               	movwf	??_atoi
 10147  1271  0839               	movf	??_atoi,w
 10148  1272  07BB               	addwf	atoi@sign,f
 10149  1273  2A7C               	goto	l8920
 10150  1274                     l8914:	
 10151  1274  083E               	movf	atoi@s,w
 10152  1275  0086               	movwf	6
 10153  1276  3001               	movlw	1	; select bank2/3
 10154  1277  0087               	movwf	7
 10155  1278  302B               	movlw	43
 10156  1279  0601               	xorwf	1,w
 10157  127A  1D03               	btfss	3,2
 10158  127B  2A80               	goto	l8922
 10159  127C                     l8920:	
 10160  127C  3001               	movlw	1
 10161  127D  00B9               	movwf	??_atoi
 10162  127E  0839               	movf	??_atoi,w
 10163  127F  07BE               	addwf	atoi@s,f
 10164  1280                     l8922:	
 10165  1280  083E               	movf	atoi@s,w
 10166  1281  0086               	movwf	6
 10167  1282  3001               	movlw	1	; select bank2/3
 10168  1283  0087               	movwf	7
 10169  1284  0801               	movf	1,w
 10170  1285  31A1  21A5  3192   	fcall	_isdigit
 10171  1288  1C03               	btfss	3,0
 10172  1289  2AA9               	goto	l8924
 10173  128A  0020               	movlb	0	; select bank0
 10174  128B  083D               	movf	atoi@a+1,w
 10175  128C  00B2               	movwf	___wmul@multiplier+1
 10176  128D  083C               	movf	atoi@a,w
 10177  128E  00B1               	movwf	___wmul@multiplier
 10178  128F  300A               	movlw	10
 10179  1290  00B3               	movwf	___wmul@multiplicand
 10180  1291  3000               	movlw	0
 10181  1292  00B4               	movwf	___wmul@multiplicand+1
 10182  1293  31A3  2302  3192   	fcall	___wmul
 10183  1296  0020               	movlb	0	; select bank0
 10184  1297  083E               	movf	atoi@s,w
 10185  1298  0086               	movwf	6
 10186  1299  3001               	movlw	1	; select bank2/3
 10187  129A  0087               	movwf	7
 10188  129B  0801               	movf	1,w
 10189  129C  0731               	addwf	?___wmul,w
 10190  129D  00B9               	movwf	??_atoi
 10191  129E  0832               	movf	?___wmul+1,w
 10192  129F  1803               	skipnc
 10193  12A0  0A32               	incf	?___wmul+1,w
 10194  12A1  00BA               	movwf	??_atoi+1
 10195  12A2  0839               	movf	??_atoi,w
 10196  12A3  3ED0               	addlw	208
 10197  12A4  00BC               	movwf	atoi@a
 10198  12A5  30FF               	movlw	255
 10199  12A6  3D3A               	addwfc	??_atoi+1,w
 10200  12A7  00BD               	movwf	atoi@a+1
 10201  12A8  2A7C               	goto	l8920
 10202  12A9                     l8924:	
 10203  12A9  0020               	movlb	0	; select bank0
 10204  12AA  083B               	movf	atoi@sign,w
 10205  12AB  1903               	btfsc	3,2
 10206  12AC  2AB9               	goto	l8930
 10207  12AD  093C               	comf	atoi@a,w
 10208  12AE  00B9               	movwf	??_atoi
 10209  12AF  093D               	comf	atoi@a+1,w
 10210  12B0  00BA               	movwf	??_atoi+1
 10211  12B1  0AB9               	incf	??_atoi,f
 10212  12B2  1903               	skipnz
 10213  12B3  0ABA               	incf	??_atoi+1,f
 10214  12B4  0839               	movf	??_atoi,w
 10215  12B5  00B7               	movwf	?_atoi
 10216  12B6  083A               	movf	??_atoi+1,w
 10217  12B7  00B8               	movwf	?_atoi+1
 10218  12B8  0008               	return
 10219  12B9                     l8930:	
 10220  12B9  083D               	movf	atoi@a+1,w
 10221  12BA  00B8               	movwf	?_atoi+1
 10222  12BB  083C               	movf	atoi@a,w
 10223  12BC  00B7               	movwf	?_atoi
 10224  12BD  0008               	return
 10225  12BE                     __end_of_atoi:	
 10226                           
 10227                           	psect	text9
 10228  21A5                     __ptext9:	
 10229 ;; *************** function _isdigit *****************
 10230 ;; Defined at:
 10231 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 10232 ;; Parameters:    Size  Location     Type
 10233 ;;  c               1    wreg     unsigned char 
 10234 ;; Auto vars:     Size  Location     Type
 10235 ;;  c               1   18[BANK0 ] unsigned char 
 10236 ;; Return value:  Size  Location     Type
 10237 ;;		None               void
 10238 ;; Registers used:
 10239 ;;		wreg, status,2, status,0
 10240 ;; Tracked objects:
 10241 ;;		On entry : 0/0
 10242 ;;		On exit  : 0/0
 10243 ;;		Unchanged: 0/0
 10244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10246 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10248 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10249 ;;Total ram usage:        2 bytes
 10250 ;; Hardware stack levels used:    1
 10251 ;; Hardware stack levels required when called:    6
 10252 ;; This function calls:
 10253 ;;		Nothing
 10254 ;; This function is called by:
 10255 ;;		_atoi
 10256 ;; This function uses a non-reentrant model
 10257 ;;
 10258                           
 10259                           
 10260                           ;psect for function _isdigit
 10261  21A5                     _isdigit:	
 10262                           
 10263                           ;incstack = 0
 10264                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 10265                           ;isdigit@c stored from wreg
 10266  21A5  0020               	movlb	0	; select bank0
 10267  21A6  00B2               	movwf	isdigit@c
 10268  21A7  01B1               	clrf	_isdigit$2365
 10269  21A8  303A               	movlw	58
 10270  21A9  0232               	subwf	isdigit@c,w
 10271  21AA  1803               	skipnc
 10272  21AB  29B2               	goto	l6050
 10273  21AC  3030               	movlw	48
 10274  21AD  0232               	subwf	isdigit@c,w
 10275  21AE  1C03               	skipc
 10276  21AF  29B2               	goto	l6050
 10277  21B0  01B1               	clrf	_isdigit$2365
 10278  21B1  0AB1               	incf	_isdigit$2365,f
 10279  21B2                     l6050:	
 10280  21B2  0C31               	rrf	_isdigit$2365,w
 10281  21B3  0008               	return
 10282  21B4                     __end_of_isdigit:	
 10283                           
 10284                           	psect	text10
 10285  0ADB                     __ptext10:	
 10286 ;; *************** function _main_initialize *****************
 10287 ;; Defined at:
 10288 ;;		line 192 in file "main.c"
 10289 ;; Parameters:    Size  Location     Type
 10290 ;;		None
 10291 ;; Auto vars:     Size  Location     Type
 10292 ;;		None
 10293 ;; Return value:  Size  Location     Type
 10294 ;;                  1    wreg      void 
 10295 ;; Registers used:
 10296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10297 ;; Tracked objects:
 10298 ;;		On entry : 0/0
 10299 ;;		On exit  : 0/0
 10300 ;;		Unchanged: 0/0
 10301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10306 ;;Total ram usage:        0 bytes
 10307 ;; Hardware stack levels used:    1
 10308 ;; Hardware stack levels required when called:   15
 10309 ;; This function calls:
 10310 ;;		_LED_setBrightnessRange
 10311 ;;		_LEDsPwr
 10312 ;;		_TMR0_Load8bitPeriod
 10313 ;;		_TMR2_LoadPeriodRegister
 10314 ;;		___awtoft
 10315 ;;		___ftadd
 10316 ;;		___ftmul
 10317 ;;		___fttol
 10318 ;;		_drv_init
 10319 ;; This function is called by:
 10320 ;;		_main
 10321 ;; This function uses a non-reentrant model
 10322 ;;
 10323                           
 10324                           
 10325                           ;psect for function _main_initialize
 10326  0ADB                     _main_initialize:	
 10327                           
 10328                           ;main.c: 194: LEDsPwr(LEDpower, 1);
 10329                           
 10330                           ;incstack = 0
 10331                           ; Regs used in _main_initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10332  0ADB  3044               	movlw	low (_LEDpower| (0+32768))
 10333  0ADC  0084               	movwf	4
 10334  0ADD  30B0               	movlw	high (_LEDpower| (0+32768))
 10335  0ADE  0085               	movwf	5
 10336  0ADF  3F00               	moviw [0]fsr0
 10337  0AE0  0020               	movlb	0	; select bank0
 10338  0AE1  00C4               	movwf	LEDsPwr@pwr
 10339  0AE2  3F01               	moviw [1]fsr0
 10340  0AE3  00C5               	movwf	LEDsPwr@pwr+1
 10341  0AE4  3001               	movlw	1
 10342  0AE5  00C6               	movwf	LEDsPwr@topOrBottom
 10343  0AE6  3000               	movlw	0
 10344  0AE7  00C7               	movwf	LEDsPwr@topOrBottom+1
 10345  0AE8  319F  272F  318A   	fcall	_LEDsPwr
 10346                           
 10347                           ;main.c: 195: LEDsPwr(LEDpower, 2);
 10348  0AEB  3044               	movlw	low (_LEDpower| (0+32768))
 10349  0AEC  0084               	movwf	4
 10350  0AED  30B0               	movlw	high (_LEDpower| (0+32768))
 10351  0AEE  0085               	movwf	5
 10352  0AEF  3F00               	moviw [0]fsr0
 10353  0AF0  0020               	movlb	0	; select bank0
 10354  0AF1  00C4               	movwf	LEDsPwr@pwr
 10355  0AF2  3F01               	moviw [1]fsr0
 10356  0AF3  00C5               	movwf	LEDsPwr@pwr+1
 10357  0AF4  3002               	movlw	2
 10358  0AF5  00C6               	movwf	LEDsPwr@topOrBottom
 10359  0AF6  3000               	movlw	0
 10360  0AF7  00C7               	movwf	LEDsPwr@topOrBottom+1
 10361  0AF8  319F  272F  318A   	fcall	_LEDsPwr
 10362                           
 10363                           ;main.c: 197: LED_setBrightnessRange(1, 1);
 10364  0AFB  3001               	movlw	1
 10365  0AFC  0020               	movlb	0	; select bank0
 10366  0AFD  00C4               	movwf	LED_setBrightnessRange@range
 10367  0AFE  3000               	movlw	0
 10368  0AFF  00C5               	movwf	LED_setBrightnessRange@range+1
 10369  0B00  3001               	movlw	1
 10370  0B01  00C6               	movwf	LED_setBrightnessRange@topOrBottom
 10371  0B02  3000               	movlw	0
 10372  0B03  00C7               	movwf	LED_setBrightnessRange@topOrBottom+1
 10373  0B04  3187  2768  318A   	fcall	_LED_setBrightnessRange
 10374                           
 10375                           ;main.c: 198: LED_setBrightnessRange(1, 2);
 10376  0B07  3001               	movlw	1
 10377  0B08  0020               	movlb	0	; select bank0
 10378  0B09  00C4               	movwf	LED_setBrightnessRange@range
 10379  0B0A  3000               	movlw	0
 10380  0B0B  00C5               	movwf	LED_setBrightnessRange@range+1
 10381  0B0C  3002               	movlw	2
 10382  0B0D  00C6               	movwf	LED_setBrightnessRange@topOrBottom
 10383  0B0E  3000               	movlw	0
 10384  0B0F  00C7               	movwf	LED_setBrightnessRange@topOrBottom+1
 10385  0B10  3187  2768  318A   	fcall	_LED_setBrightnessRange
 10386                           
 10387                           ;main.c: 199: do { LATCbits.LATC1 = 1; } while(0);
 10388  0B13  0022               	movlb	2	; select bank2
 10389  0B14  148E               	bsf	14,1	;volatile
 10390                           
 10391                           ;main.c: 202: TMR2_LoadPeriodRegister((heater_pre_time_ms*TMR2_RANGE)-1);
 10392  0B15  0021               	movlb	1	; select bank1
 10393  0B16  086D               	movf	(_heater_pre_time_ms+1)^(0+128),w
 10394  0B17  0020               	movlb	0	; select bank0
 10395  0B18  00C1               	movwf	___awtoft@c+1
 10396  0B19  0021               	movlb	1	; select bank1
 10397  0B1A  086C               	movf	_heater_pre_time_ms^(0+128),w
 10398  0B1B  0020               	movlb	0	; select bank0
 10399  0B1C  00C0               	movwf	___awtoft@c
 10400  0B1D  31A4  2419  318A   	fcall	___awtoft
 10401  0B20  0020               	movlb	0	; select bank0
 10402  0B21  0840               	movf	?___awtoft,w
 10403  0B22  00C9               	movwf	___ftmul@f2
 10404  0B23  0841               	movf	?___awtoft+1,w
 10405  0B24  00CA               	movwf	___ftmul@f2+1
 10406  0B25  0842               	movf	?___awtoft+2,w
 10407  0B26  00CB               	movwf	___ftmul@f2+2
 10408  0B27  3032               	movlw	low (_TMR2_RANGE| (0+32768))
 10409  0B28  0084               	movwf	4
 10410  0B29  30B0               	movlw	high (_TMR2_RANGE| (0+32768))
 10411  0B2A  0085               	movwf	5
 10412  0B2B  3F00               	moviw [0]fsr0
 10413  0B2C  00C6               	movwf	___ftmul@f1
 10414  0B2D  3F01               	moviw [1]fsr0
 10415  0B2E  00C7               	movwf	___ftmul@f1+1
 10416  0B2F  3F02               	moviw [2]fsr0
 10417  0B30  00C8               	movwf	___ftmul@f1+2
 10418  0B31  318B  23A7  318A   	fcall	___ftmul
 10419  0B34  0020               	movlb	0	; select bank0
 10420  0B35  0846               	movf	?___ftmul,w
 10421  0B36  0021               	movlb	1	; select bank1
 10422  0B37  00AD               	movwf	___ftadd@f2^(0+128)
 10423  0B38  0020               	movlb	0	; select bank0
 10424  0B39  0847               	movf	?___ftmul+1,w
 10425  0B3A  0021               	movlb	1	; select bank1
 10426  0B3B  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 10427  0B3C  0020               	movlb	0	; select bank0
 10428  0B3D  0848               	movf	?___ftmul+2,w
 10429  0B3E  0021               	movlb	1	; select bank1
 10430  0B3F  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 10431  0B40  3000               	movlw	0
 10432  0B41  00AA               	movwf	___ftadd@f1^(0+128)
 10433  0B42  3080               	movlw	128
 10434  0B43  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 10435  0B44  30BF               	movlw	191
 10436  0B45  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 10437  0B46  318C  2490  318A   	fcall	___ftadd
 10438  0B49  0021               	movlb	1	; select bank1
 10439  0B4A  082A               	movf	?___ftadd^(0+128),w
 10440  0B4B  00B7               	movwf	___fttol@f1^(0+128)
 10441  0B4C  082B               	movf	(?___ftadd+1)^(0+128),w
 10442  0B4D  00B8               	movwf	(___fttol@f1+1)^(0+128)
 10443  0B4E  082C               	movf	(?___ftadd+2)^(0+128),w
 10444  0B4F  00B9               	movwf	(___fttol@f1+2)^(0+128)
 10445  0B50  3197  2779  318A   	fcall	___fttol
 10446  0B53  0021               	movlb	1	; select bank1
 10447  0B54  0837               	movf	?___fttol^(0+128),w
 10448  0B55  31AF  27C9  318A   	fcall	_TMR2_LoadPeriodRegister
 10449                           
 10450                           ;main.c: 203: TMR0_Load8bitPeriod(((piezo_on_time_ms)*TMR0_RANGE)-1);
 10451  0B58  0021               	movlb	1	; select bank1
 10452  0B59  086B               	movf	(_piezo_on_time_ms+1)^(0+128),w
 10453  0B5A  0020               	movlb	0	; select bank0
 10454  0B5B  00C1               	movwf	___awtoft@c+1
 10455  0B5C  0021               	movlb	1	; select bank1
 10456  0B5D  086A               	movf	_piezo_on_time_ms^(0+128),w
 10457  0B5E  0020               	movlb	0	; select bank0
 10458  0B5F  00C0               	movwf	___awtoft@c
 10459  0B60  31A4  2419  318A   	fcall	___awtoft
 10460  0B63  0020               	movlb	0	; select bank0
 10461  0B64  0840               	movf	?___awtoft,w
 10462  0B65  00C9               	movwf	___ftmul@f2
 10463  0B66  0841               	movf	?___awtoft+1,w
 10464  0B67  00CA               	movwf	___ftmul@f2+1
 10465  0B68  0842               	movf	?___awtoft+2,w
 10466  0B69  00CB               	movwf	___ftmul@f2+2
 10467  0B6A  3035               	movlw	low (_TMR0_RANGE| (0+32768))
 10468  0B6B  0084               	movwf	4
 10469  0B6C  30B0               	movlw	high (_TMR0_RANGE| (0+32768))
 10470  0B6D  0085               	movwf	5
 10471  0B6E  3F00               	moviw [0]fsr0
 10472  0B6F  00C6               	movwf	___ftmul@f1
 10473  0B70  3F01               	moviw [1]fsr0
 10474  0B71  00C7               	movwf	___ftmul@f1+1
 10475  0B72  3F02               	moviw [2]fsr0
 10476  0B73  00C8               	movwf	___ftmul@f1+2
 10477  0B74  318B  23A7  318A   	fcall	___ftmul
 10478  0B77  0020               	movlb	0	; select bank0
 10479  0B78  0846               	movf	?___ftmul,w
 10480  0B79  0021               	movlb	1	; select bank1
 10481  0B7A  00AD               	movwf	___ftadd@f2^(0+128)
 10482  0B7B  0020               	movlb	0	; select bank0
 10483  0B7C  0847               	movf	?___ftmul+1,w
 10484  0B7D  0021               	movlb	1	; select bank1
 10485  0B7E  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 10486  0B7F  0020               	movlb	0	; select bank0
 10487  0B80  0848               	movf	?___ftmul+2,w
 10488  0B81  0021               	movlb	1	; select bank1
 10489  0B82  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 10490  0B83  3000               	movlw	0
 10491  0B84  00AA               	movwf	___ftadd@f1^(0+128)
 10492  0B85  3080               	movlw	128
 10493  0B86  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 10494  0B87  30BF               	movlw	191
 10495  0B88  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 10496  0B89  318C  2490  318A   	fcall	___ftadd
 10497  0B8C  0021               	movlb	1	; select bank1
 10498  0B8D  082A               	movf	?___ftadd^(0+128),w
 10499  0B8E  00B7               	movwf	___fttol@f1^(0+128)
 10500  0B8F  082B               	movf	(?___ftadd+1)^(0+128),w
 10501  0B90  00B8               	movwf	(___fttol@f1+1)^(0+128)
 10502  0B91  082C               	movf	(?___ftadd+2)^(0+128),w
 10503  0B92  00B9               	movwf	(___fttol@f1+2)^(0+128)
 10504  0B93  3197  2779  318A   	fcall	___fttol
 10505  0B96  0021               	movlb	1	; select bank1
 10506  0B97  0837               	movf	?___fttol^(0+128),w
 10507  0B98  31AF  27C4  318A   	fcall	_TMR0_Load8bitPeriod
 10508                           
 10509                           ;main.c: 206: drv_init(0x03, 0x0c);
 10510  0B9B  3003               	movlw	3
 10511  0B9C  0023               	movlb	3	; select bank3
 10512  0B9D  00E2               	movwf	drv_init@output_gain^(0+384)
 10513  0B9E  3000               	movlw	0
 10514  0B9F  00E3               	movwf	(drv_init@output_gain^(0+384)+1)
 10515  0BA0  300C               	movlw	12
 10516  0BA1  00E4               	movwf	drv_init@idle_timeout^(0+384)
 10517  0BA2  3000               	movlw	0
 10518  0BA3  00E5               	movwf	(drv_init@idle_timeout^(0+384)+1)
 10519  0BA4  319F  2793         	fcall	_drv_init
 10520  0BA6  0008               	return
 10521  0BA7                     __end_of_main_initialize:	
 10522                           
 10523                           	psect	text11
 10524  1F93                     __ptext11:	
 10525 ;; *************** function _drv_init *****************
 10526 ;; Defined at:
 10527 ;;		line 4 in file "drv2665.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;  output_gain     2    5[BANK3 ] int 
 10530 ;;  idle_timeout    2    7[BANK3 ] int 
 10531 ;; Auto vars:     Size  Location     Type
 10532 ;;		None
 10533 ;; Return value:  Size  Location     Type
 10534 ;;                  1    wreg      void 
 10535 ;; Registers used:
 10536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10537 ;; Tracked objects:
 10538 ;;		On entry : 0/0
 10539 ;;		On exit  : 0/0
 10540 ;;		Unchanged: 0/0
 10541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10542 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10544 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10545 ;;      Totals:         0       0       1       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10546 ;;Total ram usage:        5 bytes
 10547 ;; Hardware stack levels used:    1
 10548 ;; Hardware stack levels required when called:   14
 10549 ;; This function calls:
 10550 ;;		_calcDownstroke
 10551 ;;		_calcUpstroke
 10552 ;;		_drv_reset
 10553 ;;		_drv_write
 10554 ;;		_i2c_open
 10555 ;;		_i2c_setAddress
 10556 ;; This function is called by:
 10557 ;;		_main_initialize
 10558 ;; This function uses a non-reentrant model
 10559 ;;
 10560                           
 10561                           
 10562                           ;psect for function _drv_init
 10563  1F93                     _drv_init:	
 10564                           
 10565                           ;drv2665.c: 6: i2c_setAddress(drv_address);
 10566                           
 10567                           ;incstack = 0
 10568                           ; Regs used in _drv_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10569  1F93  3048               	movlw	low (_drv_address| (0+32768))
 10570  1F94  0084               	movwf	4
 10571  1F95  30B0               	movlw	high (_drv_address| (0+32768))
 10572  1F96  0085               	movwf	5
 10573  1F97  0800               	movf	0,w	;code access
 10574  1F98  31A0  207A  319F   	fcall	_i2c_setAddress
 10575                           
 10576                           ;drv2665.c: 7: i2c_open(drv_address);
 10577  1F9B  3048               	movlw	low (_drv_address| (0+32768))
 10578  1F9C  0084               	movwf	4
 10579  1F9D  30B0               	movlw	high (_drv_address| (0+32768))
 10580  1F9E  0085               	movwf	5
 10581  1F9F  0800               	movf	0,w	;code access
 10582  1FA0  319A  22FD  319F   	fcall	_i2c_open
 10583                           
 10584                           ;drv2665.c: 8: _delay((unsigned long)((10)*(1000000/4000.0)));
 10585  1FA3  3004               	movlw	4
 10586  1FA4  0021               	movlb	1	; select bank1
 10587  1FA5  00D5               	movwf	??_drv_init^(0+128)
 10588  1FA6  303D               	movlw	61
 10589  1FA7                     u10037:	
 10590  1FA7  0B89               	decfsz	9,f
 10591  1FA8  2FA7               	goto	u10037
 10592  1FA9  0BD5               	decfsz	??_drv_init^(0+128),f
 10593  1FAA  2FA7               	goto	u10037
 10594  1FAB  3200               	nop2
 10595                           
 10596                           ;drv2665.c: 10: drv_reset();
 10597  1FAC  31A0  20F2  319F   	fcall	_drv_reset
 10598                           
 10599                           ;drv2665.c: 11: _delay((unsigned long)((10)*(1000000/4000.0)));
 10600  1FAF  3004               	movlw	4
 10601  1FB0  0021               	movlb	1	; select bank1
 10602  1FB1  00D5               	movwf	??_drv_init^(0+128)
 10603  1FB2  303D               	movlw	61
 10604  1FB3                     u10047:	
 10605  1FB3  0B89               	decfsz	9,f
 10606  1FB4  2FB3               	goto	u10047
 10607  1FB5  0BD5               	decfsz	??_drv_init^(0+128),f
 10608  1FB6  2FB3               	goto	u10047
 10609  1FB7  3200               	nop2
 10610                           
 10611                           ;drv2665.c: 12: drv_write(0x02, 0);
 10612  1FB8  0020               	movlb	0	; select bank0
 10613  1FB9  01C9               	clrf	drv_write@data
 10614  1FBA  3002               	movlw	2
 10615  1FBB  31A4  2483  319F   	fcall	_drv_write
 10616                           
 10617                           ;drv2665.c: 13: _delay((unsigned long)((10)*(1000000/4000.0)));
 10618  1FBE  3004               	movlw	4
 10619  1FBF  0021               	movlb	1	; select bank1
 10620  1FC0  00D5               	movwf	??_drv_init^(0+128)
 10621  1FC1  303D               	movlw	61
 10622  1FC2                     u10057:	
 10623  1FC2  0B89               	decfsz	9,f
 10624  1FC3  2FC2               	goto	u10057
 10625  1FC4  0BD5               	decfsz	??_drv_init^(0+128),f
 10626  1FC5  2FC2               	goto	u10057
 10627  1FC6  3200               	nop2
 10628                           
 10629                           ;drv2665.c: 14: drv_write(0x01, 0x38 | output_gain);
 10630  1FC7  0023               	movlb	3	; select bank3
 10631  1FC8  0862               	movf	drv_init@output_gain^(0+384),w
 10632  1FC9  3838               	iorlw	56
 10633  1FCA  0021               	movlb	1	; select bank1
 10634  1FCB  00D5               	movwf	??_drv_init^(0+128)
 10635  1FCC  0855               	movf	??_drv_init^(0+128),w
 10636  1FCD  0020               	movlb	0	; select bank0
 10637  1FCE  00C9               	movwf	drv_write@data
 10638  1FCF  3001               	movlw	1
 10639  1FD0  31A4  2483  319F   	fcall	_drv_write
 10640                           
 10641                           ;drv2665.c: 16: _delay((unsigned long)((10)*(1000000/4000.0)));
 10642  1FD3  3004               	movlw	4
 10643  1FD4  0021               	movlb	1	; select bank1
 10644  1FD5  00D5               	movwf	??_drv_init^(0+128)
 10645  1FD6  303D               	movlw	61
 10646  1FD7                     u10067:	
 10647  1FD7  0B89               	decfsz	9,f
 10648  1FD8  2FD7               	goto	u10067
 10649  1FD9  0BD5               	decfsz	??_drv_init^(0+128),f
 10650  1FDA  2FD7               	goto	u10067
 10651  1FDB  3200               	nop2
 10652                           
 10653                           ;drv2665.c: 17: drv_write(0x02, idle_timeout);
 10654  1FDC  0023               	movlb	3	; select bank3
 10655  1FDD  0864               	movf	drv_init@idle_timeout^(0+384),w
 10656  1FDE  0021               	movlb	1	; select bank1
 10657  1FDF  00D5               	movwf	??_drv_init^(0+128)
 10658  1FE0  0855               	movf	??_drv_init^(0+128),w
 10659  1FE1  0020               	movlb	0	; select bank0
 10660  1FE2  00C9               	movwf	drv_write@data
 10661  1FE3  3002               	movlw	2
 10662  1FE4  31A4  2483  319F   	fcall	_drv_write
 10663                           
 10664                           ;drv2665.c: 19: _delay((unsigned long)((10)*(1000000/4000.0)));
 10665  1FE7  3004               	movlw	4
 10666  1FE8  0021               	movlb	1	; select bank1
 10667  1FE9  00D5               	movwf	??_drv_init^(0+128)
 10668  1FEA  303D               	movlw	61
 10669  1FEB                     u10077:	
 10670  1FEB  0B89               	decfsz	9,f
 10671  1FEC  2FEB               	goto	u10077
 10672  1FED  0BD5               	decfsz	??_drv_init^(0+128),f
 10673  1FEE  2FEB               	goto	u10077
 10674  1FEF  3200               	nop2
 10675                           
 10676                           ;drv2665.c: 20: calcUpstroke(drv_peak_val);
 10677  1FF0  0021               	movlb	1	; select bank1
 10678  1FF1  086F               	movf	(_drv_peak_val+1)^(0+128),w
 10679  1FF2  00D4               	movwf	(calcUpstroke@maxVal+1)^(0+128)
 10680  1FF3  086E               	movf	_drv_peak_val^(0+128),w
 10681  1FF4  00D3               	movwf	calcUpstroke@maxVal^(0+128)
 10682  1FF5  3195  257E  319F   	fcall	_calcUpstroke
 10683                           
 10684                           ;drv2665.c: 21: calcDownstroke(drv_peak_val);
 10685  1FF8  0021               	movlb	1	; select bank1
 10686  1FF9  086F               	movf	(_drv_peak_val+1)^(0+128),w
 10687  1FFA  00D4               	movwf	(calcDownstroke@maxVal+1)^(0+128)
 10688  1FFB  086E               	movf	_drv_peak_val^(0+128),w
 10689  1FFC  00D3               	movwf	calcDownstroke@maxVal^(0+128)
 10690  1FFD  3189  2168         	fcall	_calcDownstroke
 10691  1FFF  0008               	return
 10692  2000                     __end_of_drv_init:	
 10693                           
 10694                           	psect	text12
 10695  207A                     __ptext12:	
 10696 ;; *************** function _i2c_setAddress *****************
 10697 ;; Defined at:
 10698 ;;		line 156 in file "mcc_generated_files/drivers/i2c_master.c"
 10699 ;; Parameters:    Size  Location     Type
 10700 ;;  address         1    wreg     unsigned char 
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;  address         1   18[BANK0 ] unsigned char 
 10703 ;; Return value:  Size  Location     Type
 10704 ;;                  1    wreg      void 
 10705 ;; Registers used:
 10706 ;;		wreg
 10707 ;; Tracked objects:
 10708 ;;		On entry : 0/0
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10713 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10714 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10715 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10716 ;;Total ram usage:        2 bytes
 10717 ;; Hardware stack levels used:    1
 10718 ;; Hardware stack levels required when called:    6
 10719 ;; This function calls:
 10720 ;;		Nothing
 10721 ;; This function is called by:
 10722 ;;		_drv_init
 10723 ;; This function uses a non-reentrant model
 10724 ;;
 10725                           
 10726                           
 10727                           ;psect for function _i2c_setAddress
 10728  207A                     _i2c_setAddress:	
 10729                           
 10730                           ;incstack = 0
 10731                           ; Regs used in _i2c_setAddress: [wreg]
 10732                           ;i2c_setAddress@address stored from wreg
 10733  207A  0020               	movlb	0	; select bank0
 10734  207B  00B2               	movwf	i2c_setAddress@address
 10735                           
 10736                           ;i2c_master.c: 158: i2c_status.address = address;
 10737  207C  0832               	movf	i2c_setAddress@address,w
 10738  207D  00B1               	movwf	??_i2c_setAddress
 10739  207E  0831               	movf	??_i2c_setAddress,w
 10740  207F  0022               	movlb	2	; select bank2
 10741  2080  00A1               	movwf	(_i2c_status^(0+256)+1)
 10742  2081  0008               	return
 10743  2082                     __end_of_i2c_setAddress:	
 10744                           
 10745                           	psect	text13
 10746  1AFD                     __ptext13:	
 10747 ;; *************** function _i2c_open *****************
 10748 ;; Defined at:
 10749 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;  address         1    wreg     unsigned char 
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;  address         1   21[BANK0 ] unsigned char 
 10754 ;;  ret             1   20[BANK0 ] enum E8193
 10755 ;; Return value:  Size  Location     Type
 10756 ;;                  1    wreg      enum E8193
 10757 ;; Registers used:
 10758 ;;		wreg, status,2, status,0, pclath, cstack
 10759 ;; Tracked objects:
 10760 ;;		On entry : 0/0
 10761 ;;		On exit  : 0/0
 10762 ;;		Unchanged: 0/0
 10763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10765 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10766 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10767 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10768 ;;Total ram usage:        3 bytes
 10769 ;; Hardware stack levels used:    1
 10770 ;; Hardware stack levels required when called:    7
 10771 ;; This function calls:
 10772 ;;		_i2c1_driver_open
 10773 ;;		_i2c1_driver_setBusCollisionISR
 10774 ;;		_i2c1_driver_setI2cISR
 10775 ;;		_mssp1_clearIRQ
 10776 ;; This function is called by:
 10777 ;;		_drv_init
 10778 ;; This function uses a non-reentrant model
 10779 ;;
 10780                           
 10781                           
 10782                           ;psect for function _i2c_open
 10783  1AFD                     _i2c_open:	
 10784                           
 10785                           ;incstack = 0
 10786                           ; Regs used in _i2c_open: [wreg+status,2+status,0+pclath+cstack]
 10787                           ;i2c_open@address stored from wreg
 10788  1AFD  0020               	movlb	0	; select bank0
 10789  1AFE  00B5               	movwf	i2c_open@address
 10790                           
 10791                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
 10792  1AFF  01B4               	clrf	i2c_open@ret
 10793  1B00  0AB4               	incf	i2c_open@ret,f
 10794                           
 10795                           ;i2c_master.c: 120: if(!i2c_status.inUse)
 10796  1B01  0022               	movlb	2	; select bank2
 10797  1B02  18A0               	btfsc	_i2c_status^(0+256),1
 10798  1B03  0008               	return
 10799                           
 10800                           ;i2c_master.c: 121: {
 10801                           ;i2c_master.c: 122: i2c_status.address = address;
 10802  1B04  0020               	movlb	0	; select bank0
 10803  1B05  0835               	movf	i2c_open@address,w
 10804  1B06  00B3               	movwf	??_i2c_open
 10805  1B07  0833               	movf	??_i2c_open,w
 10806  1B08  0022               	movlb	2	; select bank2
 10807  1B09  00A1               	movwf	(_i2c_status^(0+256)+1)
 10808                           
 10809                           ;i2c_master.c: 123: i2c_status.busy = 0;
 10810  1B0A  1020               	bcf	_i2c_status^(0+256),0
 10811                           
 10812                           ;i2c_master.c: 124: i2c_status.inUse = 1;
 10813  1B0B  14A0               	bsf	_i2c_status^(0+256),1
 10814                           
 10815                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
 10816  1B0C  11A0               	bcf	_i2c_status^(0+256),3
 10817                           
 10818                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
 10819  1B0D  300E               	movlw	14
 10820  1B0E  0020               	movlb	0	; select bank0
 10821  1B0F  00B3               	movwf	??_i2c_open
 10822  1B10  0833               	movf	??_i2c_open,w
 10823  1B11  0022               	movlb	2	; select bank2
 10824  1B12  00AA               	movwf	(_i2c_status^(0+256)+10)
 10825                           
 10826                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
 10827  1B13  30F4               	movlw	244
 10828  1B14  00A8               	movwf	(_i2c_status^(0+256)+8)
 10829  1B15  3001               	movlw	1
 10830  1B16  00A9               	movwf	(_i2c_status^(0+256)+9)
 10831                           
 10832                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
 10833  1B17  1520               	bsf	_i2c_status^(0+256),2
 10834                           
 10835                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
 10836  1B18  30D4               	movlw	low _returnStop
 10837  1B19  00AC               	movwf	(low ((_i2c_status| (0+256)+12)))^0
 10838  1B1A  302F               	movlw	high _returnStop
 10839  1B1B  00AD               	movwf	((low ((_i2c_status| (0+256)+12)))^0+1)
 10840                           
 10841                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
 10842  1B1C  01B8               	clrf	(low ((_i2c_status| (0+256)+24)))^0
 10843                           
 10844                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
 10845  1B1D  30D4               	movlw	low _returnStop
 10846  1B1E  00AE               	movwf	(low ((_i2c_status| (0+256)+14)))^0
 10847  1B1F  302F               	movlw	high _returnStop
 10848  1B20  00AF               	movwf	((low ((_i2c_status| (0+256)+14)))^0+1)
 10849                           
 10850                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
 10851  1B21  01B9               	clrf	(low ((_i2c_status| (0+256)+25)))^0
 10852                           
 10853                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
 10854  1B22  30D4               	movlw	low _returnStop
 10855  1B23  00B0               	movwf	(low ((_i2c_status| (0+256)+16)))^0
 10856  1B24  302F               	movlw	high _returnStop
 10857  1B25  00B1               	movwf	((low ((_i2c_status| (0+256)+16)))^0+1)
 10858                           
 10859                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
 10860  1B26  01BA               	clrf	(low ((_i2c_status| (0+256)+26)))^0
 10861                           
 10862                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
 10863  1B27  30D4               	movlw	low _returnStop
 10864  1B28  00B2               	movwf	(low ((_i2c_status| (0+256)+18)))^0
 10865  1B29  302F               	movlw	high _returnStop
 10866  1B2A  00B3               	movwf	((low ((_i2c_status| (0+256)+18)))^0+1)
 10867                           
 10868                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
 10869  1B2B  01BB               	clrf	(low ((_i2c_status| (0+256)+27)))^0
 10870                           
 10871                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
 10872  1B2C  30DA               	movlw	low _returnReset
 10873  1B2D  00B4               	movwf	(low ((_i2c_status| (0+256)+20)))^0
 10874  1B2E  302F               	movlw	high _returnReset
 10875  1B2F  00B5               	movwf	((low ((_i2c_status| (0+256)+20)))^0+1)
 10876                           
 10877                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
 10878  1B30  01BC               	clrf	(low ((_i2c_status| (0+256)+28)))^0
 10879                           
 10880                           ;i2c_master.c: 142: i2c1_driver_open();
 10881  1B31  31A0  20FC  319A   	fcall	_i2c1_driver_open
 10882                           
 10883                           ;i2c_master.c: 143: mssp1_clearIRQ();
 10884  1B34  31AF  2778  319A   	fcall	_mssp1_clearIRQ
 10885                           
 10886                           ;i2c_master.c: 145: i2c1_driver_setBusCollisionISR(i2c_busCollisionISR);
 10887  1B37  3048               	movlw	low _i2c_busCollisionISR
 10888  1B38  0020               	movlb	0	; select bank0
 10889  1B39  00B1               	movwf	i2c1_driver_setBusCollisionISR@f
 10890  1B3A  302F               	movlw	high _i2c_busCollisionISR
 10891  1B3B  00B2               	movwf	i2c1_driver_setBusCollisionISR@f+1
 10892  1B3C  31A0  20B8  319A   	fcall	_i2c1_driver_setBusCollisionISR
 10893                           
 10894                           ;i2c_master.c: 146: i2c1_driver_setI2cISR(i2c_ISR);
 10895  1B3F  30CC               	movlw	low _i2c_ISR
 10896  1B40  0020               	movlb	0	; select bank0
 10897  1B41  00B1               	movwf	i2c1_driver_setI2cISR@f
 10898  1B42  3024               	movlw	high _i2c_ISR
 10899  1B43  00B2               	movwf	i2c1_driver_setI2cISR@f+1
 10900  1B44  31A0  20C1         	fcall	_i2c1_driver_setI2cISR
 10901                           
 10902                           ;i2c_master.c: 151: ret = I2C_NOERR;
 10903  1B46  0020               	movlb	0	; select bank0
 10904  1B47  01B4               	clrf	i2c_open@ret
 10905  1B48  0008               	return
 10906  1B49                     __end_of_i2c_open:	
 10907                           ;i2c_master.c: 152: }
 10908                           ;i2c_master.c: 153: return ret;
 10909                           ;	Return value of _i2c_open is never used
 10910                           
 10911                           
 10912                           	psect	text14
 10913  20C1                     __ptext14:	
 10914 ;; *************** function _i2c1_driver_setI2cISR *****************
 10915 ;; Defined at:
 10916 ;;		line 262 in file "mcc_generated_files/i2c1_driver.c"
 10917 ;; Parameters:    Size  Location     Type
 10918 ;;  f               2   17[BANK0 ] PTR void 
 10919 ;;		 -> i2c_ISR(1), 
 10920 ;; Auto vars:     Size  Location     Type
 10921 ;;		None
 10922 ;; Return value:  Size  Location     Type
 10923 ;;                  1    wreg      void 
 10924 ;; Registers used:
 10925 ;;		wreg
 10926 ;; Tracked objects:
 10927 ;;		On entry : 0/0
 10928 ;;		On exit  : 0/0
 10929 ;;		Unchanged: 0/0
 10930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10931 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10935 ;;Total ram usage:        2 bytes
 10936 ;; Hardware stack levels used:    1
 10937 ;; Hardware stack levels required when called:    6
 10938 ;; This function calls:
 10939 ;;		Nothing
 10940 ;; This function is called by:
 10941 ;;		_i2c_open
 10942 ;; This function uses a non-reentrant model
 10943 ;;
 10944                           
 10945                           
 10946                           ;psect for function _i2c1_driver_setI2cISR
 10947  20C1                     _i2c1_driver_setI2cISR:	
 10948                           
 10949                           ;i2c1_driver.c: 263: i2c1_driver_i2cISR = f;
 10950                           
 10951                           ;incstack = 0
 10952                           ; Regs used in _i2c1_driver_setI2cISR: [wreg]
 10953  20C1  0020               	movlb	0	; select bank0
 10954  20C2  0832               	movf	i2c1_driver_setI2cISR@f+1,w
 10955  20C3  0022               	movlb	2	; select bank2
 10956  20C4  00E9               	movwf	(_i2c1_driver_i2cISR+1)^(0+256)
 10957  20C5  0020               	movlb	0	; select bank0
 10958  20C6  0831               	movf	i2c1_driver_setI2cISR@f,w
 10959  20C7  0022               	movlb	2	; select bank2
 10960  20C8  00E8               	movwf	_i2c1_driver_i2cISR^(0+256)
 10961  20C9  0008               	return
 10962  20CA                     __end_of_i2c1_driver_setI2cISR:	
 10963                           
 10964                           	psect	text15
 10965  20B8                     __ptext15:	
 10966 ;; *************** function _i2c1_driver_setBusCollisionISR *****************
 10967 ;; Defined at:
 10968 ;;		line 258 in file "mcc_generated_files/i2c1_driver.c"
 10969 ;; Parameters:    Size  Location     Type
 10970 ;;  f               2   17[BANK0 ] PTR void 
 10971 ;;		 -> i2c_busCollisionISR(1), 
 10972 ;; Auto vars:     Size  Location     Type
 10973 ;;		None
 10974 ;; Return value:  Size  Location     Type
 10975 ;;                  1    wreg      void 
 10976 ;; Registers used:
 10977 ;;		wreg
 10978 ;; Tracked objects:
 10979 ;;		On entry : 0/0
 10980 ;;		On exit  : 0/0
 10981 ;;		Unchanged: 0/0
 10982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10983 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10986 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10987 ;;Total ram usage:        2 bytes
 10988 ;; Hardware stack levels used:    1
 10989 ;; Hardware stack levels required when called:    6
 10990 ;; This function calls:
 10991 ;;		Nothing
 10992 ;; This function is called by:
 10993 ;;		_i2c_open
 10994 ;; This function uses a non-reentrant model
 10995 ;;
 10996                           
 10997                           
 10998                           ;psect for function _i2c1_driver_setBusCollisionISR
 10999  20B8                     _i2c1_driver_setBusCollisionISR:	
 11000                           
 11001                           ;i2c1_driver.c: 259: i2c1_driver_busCollisionISR = f;
 11002                           
 11003                           ;incstack = 0
 11004                           ; Regs used in _i2c1_driver_setBusCollisionISR: [wreg]
 11005  20B8  0020               	movlb	0	; select bank0
 11006  20B9  0832               	movf	i2c1_driver_setBusCollisionISR@f+1,w
 11007  20BA  0021               	movlb	1	; select bank1
 11008  20BB  00E9               	movwf	(_i2c1_driver_busCollisionISR+1)^(0+128)
 11009  20BC  0020               	movlb	0	; select bank0
 11010  20BD  0831               	movf	i2c1_driver_setBusCollisionISR@f,w
 11011  20BE  0021               	movlb	1	; select bank1
 11012  20BF  00E8               	movwf	_i2c1_driver_busCollisionISR^(0+128)
 11013  20C0  0008               	return
 11014  20C1                     __end_of_i2c1_driver_setBusCollisionISR:	
 11015                           
 11016                           	psect	text16
 11017  20FC                     __ptext16:	
 11018 ;; *************** function _i2c1_driver_open *****************
 11019 ;; Defined at:
 11020 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;		None
 11023 ;; Auto vars:     Size  Location     Type
 11024 ;;		None
 11025 ;; Return value:  Size  Location     Type
 11026 ;;		None               void
 11027 ;; Registers used:
 11028 ;;		wreg, status,2
 11029 ;; Tracked objects:
 11030 ;;		On entry : 0/0
 11031 ;;		On exit  : 0/0
 11032 ;;		Unchanged: 0/0
 11033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11038 ;;Total ram usage:        0 bytes
 11039 ;; Hardware stack levels used:    1
 11040 ;; Hardware stack levels required when called:    6
 11041 ;; This function calls:
 11042 ;;		Nothing
 11043 ;; This function is called by:
 11044 ;;		_i2c_open
 11045 ;; This function uses a non-reentrant model
 11046 ;;
 11047                           
 11048                           
 11049                           ;psect for function _i2c1_driver_open
 11050  20FC                     _i2c1_driver_open:	
 11051                           
 11052                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
 11053                           
 11054                           ;incstack = 0
 11055                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
 11056  20FC  0024               	movlb	4	; select bank4
 11057  20FD  1A95               	btfsc	21,5	;volatile
 11058  20FE  0008               	return
 11059                           
 11060                           ;i2c1_driver.c: 86: {
 11061                           ;i2c1_driver.c: 87: SSP1STAT = 0x00;
 11062  20FF  0194               	clrf	20	;volatile
 11063                           
 11064                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
 11065  2100  3028               	movlw	40
 11066  2101  0095               	movwf	21	;volatile
 11067                           
 11068                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
 11069  2102  0196               	clrf	22	;volatile
 11070                           
 11071                           ;i2c1_driver.c: 90: SSP1ADD = 0x3;
 11072  2103  3003               	movlw	3
 11073  2104  0092               	movwf	18	;volatile
 11074                           
 11075                           ;i2c1_driver.c: 93: else
 11076                           ;i2c1_driver.c: 94: return 0;
 11077                           ;	Return value of _i2c1_driver_open is never used
 11078                           
 11079                           ;i2c1_driver.c: 92: }
 11080                           
 11081                           ;i2c1_driver.c: 91: return 1;
 11082                           ;	Return value of _i2c1_driver_open is never used
 11083  2105  0008               	return
 11084  2106                     __end_of_i2c1_driver_open:	
 11085                           
 11086                           	psect	text17
 11087  20F2                     __ptext17:	
 11088 ;; *************** function _drv_reset *****************
 11089 ;; Defined at:
 11090 ;;		line 25 in file "drv2665.c"
 11091 ;; Parameters:    Size  Location     Type
 11092 ;;		None
 11093 ;; Auto vars:     Size  Location     Type
 11094 ;;		None
 11095 ;; Return value:  Size  Location     Type
 11096 ;;                  1    wreg      void 
 11097 ;; Registers used:
 11098 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11099 ;; Tracked objects:
 11100 ;;		On entry : 0/0
 11101 ;;		On exit  : 0/0
 11102 ;;		Unchanged: 0/0
 11103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11106 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11107 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11108 ;;Total ram usage:        1 bytes
 11109 ;; Hardware stack levels used:    1
 11110 ;; Hardware stack levels required when called:   13
 11111 ;; This function calls:
 11112 ;;		_drv_write
 11113 ;; This function is called by:
 11114 ;;		_drv_init
 11115 ;; This function uses a non-reentrant model
 11116 ;;
 11117                           
 11118                           
 11119                           ;psect for function _drv_reset
 11120  20F2                     _drv_reset:	
 11121                           
 11122                           ;drv2665.c: 26: drv_write(0x02, 0x80);
 11123                           
 11124                           ;incstack = 0
 11125                           ; Regs used in _drv_reset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11126  20F2  3080               	movlw	128
 11127  20F3  0021               	movlb	1	; select bank1
 11128  20F4  00B5               	movwf	??_drv_reset^(0+128)
 11129  20F5  0835               	movf	??_drv_reset^(0+128),w
 11130  20F6  0020               	movlb	0	; select bank0
 11131  20F7  00C9               	movwf	drv_write@data
 11132  20F8  3002               	movlw	2
 11133  20F9  31A4  2483         	fcall	_drv_write
 11134  20FB  0008               	return
 11135  20FC                     __end_of_drv_reset:	
 11136                           
 11137                           	psect	text18
 11138  0398                     __ptext18:	
 11139 ;; *************** function _execCmd *****************
 11140 ;; Defined at:
 11141 ;;		line 77 in file "cmd_parser.c"
 11142 ;; Parameters:    Size  Location     Type
 11143 ;;  s               1    wreg     PTR struct CMD_STRUCT
 11144 ;;		 -> cmd_struct(21), 
 11145 ;; Auto vars:     Size  Location     Type
 11146 ;;  s               1   55[BANK1 ] PTR struct CMD_STRUCT
 11147 ;;		 -> cmd_struct(21), 
 11148 ;; Return value:  Size  Location     Type
 11149 ;;                  2  985[None  ] int 
 11150 ;; Registers used:
 11151 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11152 ;; Tracked objects:
 11153 ;;		On entry : 0/0
 11154 ;;		On exit  : 0/0
 11155 ;;		Unchanged: 0/0
 11156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11158 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11160 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11161 ;;Total ram usage:        1 bytes
 11162 ;; Hardware stack levels used:    1
 11163 ;; Hardware stack levels required when called:   15
 11164 ;; This function calls:
 11165 ;;		_commCheck
 11166 ;;		_doMove
 11167 ;;		_getActive
 11168 ;;		_getMotionStatus
 11169 ;;		_getMoveMask
 11170 ;;		_getPosition
 11171 ;;		_printf
 11172 ;;		_setActive
 11173 ;;		_setDrvGain
 11174 ;;		_setDrvPeak
 11175 ;;		_setDrvPiezoOnTime
 11176 ;;		_setH1OffTime
 11177 ;;		_setH2OnTime
 11178 ;;		_setHeaterPostTime
 11179 ;;		_setHeaterPreTime
 11180 ;;		_setHeaterToggle
 11181 ;;		_setLEDBrightnessRange
 11182 ;;		_setLEDPwr
 11183 ;;		_setMoveMask
 11184 ;;		_startAbsMove
 11185 ;;		_startRelMove
 11186 ;;		_stop
 11187 ;;		_timedActiveHeatOn
 11188 ;;		_zeroPosition
 11189 ;; This function is called by:
 11190 ;;		_main
 11191 ;; This function uses a non-reentrant model
 11192 ;;
 11193                           
 11194                           
 11195                           ;psect for function _execCmd
 11196  0398                     _execCmd:	
 11197                           
 11198                           ;incstack = 0
 11199                           ; Regs used in _execCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11200                           ;execCmd@s stored from wreg
 11201  0398  0021               	movlb	1	; select bank1
 11202  0399  00D7               	movwf	execCmd@s^(0+128)
 11203                           
 11204                           ;cmd_parser.c: 78: errorOut = 1;
 11205  039A  3001               	movlw	1
 11206  039B  0022               	movlb	2	; select bank2
 11207  039C  00E4               	movwf	_errorOut^(0+256)
 11208  039D  3000               	movlw	0
 11209  039E  00E5               	movwf	(_errorOut^(0+256)+1)
 11210                           
 11211                           ;cmd_parser.c: 80: switch(s->c){
 11212  039F  2D84               	goto	l9236
 11213  03A0                     l9186:	
 11214                           ;cmd_parser.c: 81: case CMD_REL: errorOut = startRelMove(s->p1.paramI, s->p2.paramI); br
      +                          eak;
 11215                           
 11216  03A0  0021               	movlb	1	; select bank1
 11217  03A1  0A57               	incf	execCmd@s^(0+128),w
 11218  03A2  0086               	movwf	6
 11219  03A3  3001               	movlw	1	; select bank2/3
 11220  03A4  0087               	movwf	7
 11221  03A5  3F40               	moviw [0]fsr1
 11222  03A6  0020               	movlb	0	; select bank0
 11223  03A7  00B1               	movwf	startRelMove@steps
 11224  03A8  3F41               	moviw [1]fsr1
 11225  03A9  00B2               	movwf	startRelMove@steps+1
 11226  03AA  0021               	movlb	1	; select bank1
 11227  03AB  0857               	movf	execCmd@s^(0+128),w
 11228  03AC  3E0B               	addlw	11
 11229  03AD  0086               	movwf	6
 11230  03AE  3001               	movlw	1	; select bank2/3
 11231  03AF  0087               	movwf	7
 11232  03B0  3F40               	moviw [0]fsr1
 11233  03B1  0020               	movlb	0	; select bank0
 11234  03B2  00B3               	movwf	startRelMove@verbose
 11235  03B3  3F41               	moviw [1]fsr1
 11236  03B4  00B4               	movwf	startRelMove@verbose+1
 11237  03B5  31A2  22CB         	fcall	_startRelMove
 11238  03B7  0020               	movlb	0	; select bank0
 11239  03B8  0832               	movf	?_startRelMove+1,w
 11240  03B9  0022               	movlb	2	; select bank2
 11241  03BA  00E5               	movwf	(_errorOut+1)^(0+256)
 11242  03BB  0020               	movlb	0	; select bank0
 11243  03BC  0831               	movf	?_startRelMove,w
 11244  03BD  0022               	movlb	2	; select bank2
 11245  03BE  00E4               	movwf	_errorOut^(0+256)
 11246  03BF  0008               	return
 11247  03C0                     l9188:	
 11248                           ;cmd_parser.c: 82: case CMD_ABS: errorOut = startAbsMove(s->p1.paramI); break;
 11249                           
 11250  03C0  0021               	movlb	1	; select bank1
 11251  03C1  0A57               	incf	execCmd@s^(0+128),w
 11252  03C2  0086               	movwf	6
 11253  03C3  3001               	movlw	1	; select bank2/3
 11254  03C4  0087               	movwf	7
 11255  03C5  3F40               	moviw [0]fsr1
 11256  03C6  0020               	movlb	0	; select bank0
 11257  03C7  00B1               	movwf	startAbsMove@steps
 11258  03C8  3F41               	moviw [1]fsr1
 11259  03C9  00B2               	movwf	startAbsMove@steps+1
 11260  03CA  31A1  21C4         	fcall	_startAbsMove
 11261  03CC  0020               	movlb	0	; select bank0
 11262  03CD  0832               	movf	?_startAbsMove+1,w
 11263  03CE  0022               	movlb	2	; select bank2
 11264  03CF  00E5               	movwf	(_errorOut+1)^(0+256)
 11265  03D0  0020               	movlb	0	; select bank0
 11266  03D1  0831               	movf	?_startAbsMove,w
 11267  03D2  0022               	movlb	2	; select bank2
 11268  03D3  00E4               	movwf	_errorOut^(0+256)
 11269  03D4  0008               	return
 11270  03D5                     l9190:	
 11271                           ;cmd_parser.c: 83: case CMD_P: errorOut = getPosition(s->p1.paramI); break;
 11272                           
 11273  03D5  0021               	movlb	1	; select bank1
 11274  03D6  0A57               	incf	execCmd@s^(0+128),w
 11275  03D7  0086               	movwf	6
 11276  03D8  3001               	movlw	1	; select bank2/3
 11277  03D9  0087               	movwf	7
 11278  03DA  3F40               	moviw [0]fsr1
 11279  03DB  00B5               	movwf	getPosition@a^(0+128)
 11280  03DC  3F41               	moviw [1]fsr1
 11281  03DD  00B6               	movwf	(getPosition@a+1)^(0+128)
 11282  03DE  31A7  27C1         	fcall	_getPosition
 11283  03E0  0021               	movlb	1	; select bank1
 11284  03E1  0836               	movf	(?_getPosition+1)^(0+128),w
 11285  03E2  0022               	movlb	2	; select bank2
 11286  03E3  00E5               	movwf	(_errorOut+1)^(0+256)
 11287  03E4  0021               	movlb	1	; select bank1
 11288  03E5  0835               	movf	?_getPosition^(0+128),w
 11289  03E6  0022               	movlb	2	; select bank2
 11290  03E7  00E4               	movwf	_errorOut^(0+256)
 11291  03E8  0008               	return
 11292  03E9                     l9192:	
 11293                           ;cmd_parser.c: 84: case CMD_STOP: errorOut = stop(); break;
 11294                           
 11295  03E9  31A4  24F2         	fcall	_stop
 11296  03EB  0021               	movlb	1	; select bank1
 11297  03EC  0836               	movf	(?_stop+1)^(0+128),w
 11298  03ED  0022               	movlb	2	; select bank2
 11299  03EE  00E5               	movwf	(_errorOut+1)^(0+256)
 11300  03EF  0021               	movlb	1	; select bank1
 11301  03F0  0835               	movf	?_stop^(0+128),w
 11302  03F1  0022               	movlb	2	; select bank2
 11303  03F2  00E4               	movwf	_errorOut^(0+256)
 11304  03F3  0008               	return
 11305  03F4                     l9194:	
 11306                           ;cmd_parser.c: 85: case CMD_ZERO: errorOut = zeroPosition(); break;
 11307                           
 11308  03F4  3193  23A3         	fcall	_zeroPosition
 11309  03F6  0021               	movlb	1	; select bank1
 11310  03F7  0836               	movf	(?_zeroPosition+1)^(0+128),w
 11311  03F8  0022               	movlb	2	; select bank2
 11312  03F9  00E5               	movwf	(_errorOut+1)^(0+256)
 11313  03FA  0021               	movlb	1	; select bank1
 11314  03FB  0835               	movf	?_zeroPosition^(0+128),w
 11315  03FC  0022               	movlb	2	; select bank2
 11316  03FD  00E4               	movwf	_errorOut^(0+256)
 11317  03FE  0008               	return
 11318  03FF                     l9196:	
 11319                           ;cmd_parser.c: 88: case CMD_DRV_PEAK: errorOut = setDrvPeak(s->p1.paramI); break;
 11320                           
 11321  03FF  0021               	movlb	1	; select bank1
 11322  0400  0A57               	incf	execCmd@s^(0+128),w
 11323  0401  0086               	movwf	6
 11324  0402  3001               	movlw	1	; select bank2/3
 11325  0403  0087               	movwf	7
 11326  0404  3F40               	moviw [0]fsr1
 11327  0405  00D5               	movwf	setDrvPeak@pk^(0+128)
 11328  0406  3F41               	moviw [1]fsr1
 11329  0407  00D6               	movwf	(setDrvPeak@pk+1)^(0+128)
 11330  0408  31A3  2378         	fcall	_setDrvPeak
 11331  040A  0021               	movlb	1	; select bank1
 11332  040B  0856               	movf	(?_setDrvPeak+1)^(0+128),w
 11333  040C  0022               	movlb	2	; select bank2
 11334  040D  00E5               	movwf	(_errorOut+1)^(0+256)
 11335  040E  0021               	movlb	1	; select bank1
 11336  040F  0855               	movf	?_setDrvPeak^(0+128),w
 11337  0410  0022               	movlb	2	; select bank2
 11338  0411  00E4               	movwf	_errorOut^(0+256)
 11339  0412  0008               	return
 11340  0413                     l9198:	
 11341                           ;cmd_parser.c: 89: case CMD_DRV_GAIN: errorOut = setDrvGain(s->p1.paramI); break;
 11342                           
 11343  0413  0021               	movlb	1	; select bank1
 11344  0414  0A57               	incf	execCmd@s^(0+128),w
 11345  0415  0086               	movwf	6
 11346  0416  3001               	movlw	1	; select bank2/3
 11347  0417  0087               	movwf	7
 11348  0418  3F40               	moviw [0]fsr1
 11349  0419  00B5               	movwf	setDrvGain@gain^(0+128)
 11350  041A  3F41               	moviw [1]fsr1
 11351  041B  00B6               	movwf	(setDrvGain@gain+1)^(0+128)
 11352  041C  3199  2197         	fcall	_setDrvGain
 11353  041E  0021               	movlb	1	; select bank1
 11354  041F  0836               	movf	(?_setDrvGain+1)^(0+128),w
 11355  0420  0022               	movlb	2	; select bank2
 11356  0421  00E5               	movwf	(_errorOut+1)^(0+256)
 11357  0422  0021               	movlb	1	; select bank1
 11358  0423  0835               	movf	?_setDrvGain^(0+128),w
 11359  0424  0022               	movlb	2	; select bank2
 11360  0425  00E4               	movwf	_errorOut^(0+256)
 11361  0426  0008               	return
 11362  0427                     l9200:	
 11363                           ;cmd_parser.c: 90: case CMD_DRV_PIEZOONTIME: errorOut = setDrvPiezoOnTime(s->p1.paramI);
      +                           break;
 11364                           
 11365  0427  0021               	movlb	1	; select bank1
 11366  0428  0A57               	incf	execCmd@s^(0+128),w
 11367  0429  0086               	movwf	6
 11368  042A  3001               	movlw	1	; select bank2/3
 11369  042B  0087               	movwf	7
 11370  042C  3F40               	moviw [0]fsr1
 11371  042D  00C5               	movwf	setDrvPiezoOnTime@t^(0+128)
 11372  042E  3F41               	moviw [1]fsr1
 11373  042F  00C6               	movwf	(setDrvPiezoOnTime@t+1)^(0+128)
 11374  0430  319E  26D0         	fcall	_setDrvPiezoOnTime
 11375  0432  0021               	movlb	1	; select bank1
 11376  0433  0846               	movf	(?_setDrvPiezoOnTime+1)^(0+128),w
 11377  0434  0022               	movlb	2	; select bank2
 11378  0435  00E5               	movwf	(_errorOut+1)^(0+256)
 11379  0436  0021               	movlb	1	; select bank1
 11380  0437  0845               	movf	?_setDrvPiezoOnTime^(0+128),w
 11381  0438  0022               	movlb	2	; select bank2
 11382  0439  00E4               	movwf	_errorOut^(0+256)
 11383  043A  0008               	return
 11384  043B                     l9202:	
 11385                           ;cmd_parser.c: 93: case CMD_HEATER_PRETIME: errorOut = setHeaterPreTime(s->p1.paramI); b
      +                          reak;
 11386                           
 11387  043B  0021               	movlb	1	; select bank1
 11388  043C  0A57               	incf	execCmd@s^(0+128),w
 11389  043D  0086               	movwf	6
 11390  043E  3001               	movlw	1	; select bank2/3
 11391  043F  0087               	movwf	7
 11392  0440  3F40               	moviw [0]fsr1
 11393  0441  00B5               	movwf	setHeaterPreTime@t^(0+128)
 11394  0442  3F41               	moviw [1]fsr1
 11395  0443  00B6               	movwf	(setHeaterPreTime@t+1)^(0+128)
 11396  0444  31A1  2196         	fcall	_setHeaterPreTime
 11397  0446  0021               	movlb	1	; select bank1
 11398  0447  0836               	movf	(?_setHeaterPreTime+1)^(0+128),w
 11399  0448  0022               	movlb	2	; select bank2
 11400  0449  00E5               	movwf	(_errorOut+1)^(0+256)
 11401  044A  0021               	movlb	1	; select bank1
 11402  044B  0835               	movf	?_setHeaterPreTime^(0+128),w
 11403  044C  0022               	movlb	2	; select bank2
 11404  044D  00E4               	movwf	_errorOut^(0+256)
 11405  044E  0008               	return
 11406  044F                     l9204:	
 11407                           ;cmd_parser.c: 94: case CMD_HEATER_POSTTIME: errorOut = setHeaterPostTime(s->p1.paramI);
      +                           break;
 11408                           
 11409  044F  0021               	movlb	1	; select bank1
 11410  0450  0A57               	incf	execCmd@s^(0+128),w
 11411  0451  0086               	movwf	6
 11412  0452  3001               	movlw	1	; select bank2/3
 11413  0453  0087               	movwf	7
 11414  0454  3F40               	moviw [0]fsr1
 11415  0455  00B5               	movwf	setHeaterPostTime@t^(0+128)
 11416  0456  3F41               	moviw [1]fsr1
 11417  0457  00B6               	movwf	(setHeaterPostTime@t+1)^(0+128)
 11418  0458  31A1  21FA         	fcall	_setHeaterPostTime
 11419  045A  0021               	movlb	1	; select bank1
 11420  045B  0836               	movf	(?_setHeaterPostTime+1)^(0+128),w
 11421  045C  0022               	movlb	2	; select bank2
 11422  045D  00E5               	movwf	(_errorOut+1)^(0+256)
 11423  045E  0021               	movlb	1	; select bank1
 11424  045F  0835               	movf	?_setHeaterPostTime^(0+128),w
 11425  0460  0022               	movlb	2	; select bank2
 11426  0461  00E4               	movwf	_errorOut^(0+256)
 11427  0462  0008               	return
 11428  0463                     l9206:	
 11429                           ;cmd_parser.c: 95: case CMD_HEATER_H1OFF: errorOut = setH1OffTime(s->p1.paramI); break;
 11430                           
 11431  0463  0021               	movlb	1	; select bank1
 11432  0464  0A57               	incf	execCmd@s^(0+128),w
 11433  0465  0086               	movwf	6
 11434  0466  3001               	movlw	1	; select bank2/3
 11435  0467  0087               	movwf	7
 11436  0468  3F40               	moviw [0]fsr1
 11437  0469  00C5               	movwf	setH1OffTime@t^(0+128)
 11438  046A  3F41               	moviw [1]fsr1
 11439  046B  00C6               	movwf	(setH1OffTime@t+1)^(0+128)
 11440  046C  319C  2431         	fcall	_setH1OffTime
 11441  046E  0021               	movlb	1	; select bank1
 11442  046F  0846               	movf	(?_setH1OffTime+1)^(0+128),w
 11443  0470  0022               	movlb	2	; select bank2
 11444  0471  00E5               	movwf	(_errorOut+1)^(0+256)
 11445  0472  0021               	movlb	1	; select bank1
 11446  0473  0845               	movf	?_setH1OffTime^(0+128),w
 11447  0474  0022               	movlb	2	; select bank2
 11448  0475  00E4               	movwf	_errorOut^(0+256)
 11449  0476  0008               	return
 11450  0477                     l9208:	
 11451                           ;cmd_parser.c: 96: case CMD_HEATER_H2ON: errorOut = setH2OnTime(s->p1.paramI); break;
 11452                           
 11453  0477  0021               	movlb	1	; select bank1
 11454  0478  0A57               	incf	execCmd@s^(0+128),w
 11455  0479  0086               	movwf	6
 11456  047A  3001               	movlw	1	; select bank2/3
 11457  047B  0087               	movwf	7
 11458  047C  3F40               	moviw [0]fsr1
 11459  047D  00C5               	movwf	setH2OnTime@t^(0+128)
 11460  047E  3F41               	moviw [1]fsr1
 11461  047F  00C6               	movwf	(setH2OnTime@t+1)^(0+128)
 11462  0480  319C  247F         	fcall	_setH2OnTime
 11463  0482  0021               	movlb	1	; select bank1
 11464  0483  0846               	movf	(?_setH2OnTime+1)^(0+128),w
 11465  0484  0022               	movlb	2	; select bank2
 11466  0485  00E5               	movwf	(_errorOut+1)^(0+256)
 11467  0486  0021               	movlb	1	; select bank1
 11468  0487  0845               	movf	?_setH2OnTime^(0+128),w
 11469  0488  0022               	movlb	2	; select bank2
 11470  0489  00E4               	movwf	_errorOut^(0+256)
 11471  048A  0008               	return
 11472  048B                     l9210:	
 11473                           ;cmd_parser.c: 97: case CMD_HEATER_GAIN: errorOut = setLEDBrightnessRange(s->p1.paramI, 
      +                          s->p2.paramI); break;
 11474                           
 11475  048B  0021               	movlb	1	; select bank1
 11476  048C  0A57               	incf	execCmd@s^(0+128),w
 11477  048D  0086               	movwf	6
 11478  048E  3001               	movlw	1	; select bank2/3
 11479  048F  0087               	movwf	7
 11480  0490  3F40               	moviw [0]fsr1
 11481  0491  00B5               	movwf	setLEDBrightnessRange@r^(0+128)
 11482  0492  3F41               	moviw [1]fsr1
 11483  0493  00B6               	movwf	(setLEDBrightnessRange@r+1)^(0+128)
 11484  0494  0857               	movf	execCmd@s^(0+128),w
 11485  0495  3E0B               	addlw	11
 11486  0496  0086               	movwf	6
 11487  0497  3001               	movlw	1	; select bank2/3
 11488  0498  0087               	movwf	7
 11489  0499  3F40               	moviw [0]fsr1
 11490  049A  00B7               	movwf	setLEDBrightnessRange@tOB^(0+128)
 11491  049B  3F41               	moviw [1]fsr1
 11492  049C  00B8               	movwf	(setLEDBrightnessRange@tOB+1)^(0+128)
 11493  049D  31A3  233C         	fcall	_setLEDBrightnessRange
 11494  049F  0021               	movlb	1	; select bank1
 11495  04A0  0836               	movf	(?_setLEDBrightnessRange+1)^(0+128),w
 11496  04A1  0022               	movlb	2	; select bank2
 11497  04A2  00E5               	movwf	(_errorOut+1)^(0+256)
 11498  04A3  0021               	movlb	1	; select bank1
 11499  04A4  0835               	movf	?_setLEDBrightnessRange^(0+128),w
 11500  04A5  0022               	movlb	2	; select bank2
 11501  04A6  00E4               	movwf	_errorOut^(0+256)
 11502  04A7  0008               	return
 11503  04A8                     l9212:	
 11504                           ;cmd_parser.c: 98: case CMD_HEATER_PWR: errorOut = setLEDPwr(s->p1.paramI, s->p2.paramI)
      +                          ; break;
 11505                           
 11506  04A8  0021               	movlb	1	; select bank1
 11507  04A9  0A57               	incf	execCmd@s^(0+128),w
 11508  04AA  0086               	movwf	6
 11509  04AB  3001               	movlw	1	; select bank2/3
 11510  04AC  0087               	movwf	7
 11511  04AD  3F40               	moviw [0]fsr1
 11512  04AE  00B5               	movwf	setLEDPwr@pwr^(0+128)
 11513  04AF  3F41               	moviw [1]fsr1
 11514  04B0  00B6               	movwf	(setLEDPwr@pwr+1)^(0+128)
 11515  04B1  0857               	movf	execCmd@s^(0+128),w
 11516  04B2  3E0B               	addlw	11
 11517  04B3  0086               	movwf	6
 11518  04B4  3001               	movlw	1	; select bank2/3
 11519  04B5  0087               	movwf	7
 11520  04B6  3F40               	moviw [0]fsr1
 11521  04B7  00B7               	movwf	setLEDPwr@topOrBottom^(0+128)
 11522  04B8  3F41               	moviw [1]fsr1
 11523  04B9  00B8               	movwf	(setLEDPwr@topOrBottom+1)^(0+128)
 11524  04BA  31A3  235A         	fcall	_setLEDPwr
 11525  04BC  0021               	movlb	1	; select bank1
 11526  04BD  0836               	movf	(?_setLEDPwr+1)^(0+128),w
 11527  04BE  0022               	movlb	2	; select bank2
 11528  04BF  00E5               	movwf	(_errorOut+1)^(0+256)
 11529  04C0  0021               	movlb	1	; select bank1
 11530  04C1  0835               	movf	?_setLEDPwr^(0+128),w
 11531  04C2  0022               	movlb	2	; select bank2
 11532  04C3  00E4               	movwf	_errorOut^(0+256)
 11533  04C4  0008               	return
 11534  04C5                     l9214:	
 11535                           ;cmd_parser.c: 99: case CMD_HEATER_TOGGLE: errorOut = setHeaterToggle(s->p1.paramI, s->p
      +                          2.paramI); break;
 11536                           
 11537  04C5  0021               	movlb	1	; select bank1
 11538  04C6  0A57               	incf	execCmd@s^(0+128),w
 11539  04C7  0086               	movwf	6
 11540  04C8  3001               	movlw	1	; select bank2/3
 11541  04C9  0087               	movwf	7
 11542  04CA  3F40               	moviw [0]fsr1
 11543  04CB  00B5               	movwf	setHeaterToggle@num^(0+128)
 11544  04CC  3F41               	moviw [1]fsr1
 11545  04CD  00B6               	movwf	(setHeaterToggle@num+1)^(0+128)
 11546  04CE  0857               	movf	execCmd@s^(0+128),w
 11547  04CF  3E0B               	addlw	11
 11548  04D0  0086               	movwf	6
 11549  04D1  3001               	movlw	1	; select bank2/3
 11550  04D2  0087               	movwf	7
 11551  04D3  3F40               	moviw [0]fsr1
 11552  04D4  00B7               	movwf	setHeaterToggle@topOrB^(0+128)
 11553  04D5  3F41               	moviw [1]fsr1
 11554  04D6  00B8               	movwf	(setHeaterToggle@topOrB+1)^(0+128)
 11555  04D7  3196  2675         	fcall	_setHeaterToggle
 11556  04D9  0021               	movlb	1	; select bank1
 11557  04DA  0836               	movf	(?_setHeaterToggle+1)^(0+128),w
 11558  04DB  0022               	movlb	2	; select bank2
 11559  04DC  00E5               	movwf	(_errorOut+1)^(0+256)
 11560  04DD  0021               	movlb	1	; select bank1
 11561  04DE  0835               	movf	?_setHeaterToggle^(0+128),w
 11562  04DF  0022               	movlb	2	; select bank2
 11563  04E0  00E4               	movwf	_errorOut^(0+256)
 11564  04E1  0008               	return
 11565  04E2                     l9216:	
 11566                           ;cmd_parser.c: 100: case CMD_HEATER_TIMED: errorOut = timedActiveHeatOn(s->p1.paramL, s-
      +                          >p2.paramI); break;
 11567                           
 11568  04E2  0021               	movlb	1	; select bank1
 11569  04E3  0A57               	incf	execCmd@s^(0+128),w
 11570  04E4  0086               	movwf	6
 11571  04E5  3001               	movlw	1	; select bank2/3
 11572  04E6  0087               	movwf	7
 11573  04E7  3F40               	moviw [0]fsr1
 11574  04E8  00B5               	movwf	timedActiveHeatOn@onTime^(0+128)
 11575  04E9  3F41               	moviw [1]fsr1
 11576  04EA  00B6               	movwf	(timedActiveHeatOn@onTime+1)^(0+128)
 11577  04EB  3F42               	moviw [2]fsr1
 11578  04EC  00B7               	movwf	(timedActiveHeatOn@onTime+2)^(0+128)
 11579  04ED  3F43               	moviw [3]fsr1
 11580  04EE  00B8               	movwf	(timedActiveHeatOn@onTime+3)^(0+128)
 11581  04EF  0857               	movf	execCmd@s^(0+128),w
 11582  04F0  3E0B               	addlw	11
 11583  04F1  0086               	movwf	6
 11584  04F2  3001               	movlw	1	; select bank2/3
 11585  04F3  0087               	movwf	7
 11586  04F4  3F40               	moviw [0]fsr1
 11587  04F5  00B9               	movwf	timedActiveHeatOn@topOrBorBoth^(0+128)
 11588  04F6  3F41               	moviw [1]fsr1
 11589  04F7  00BA               	movwf	(timedActiveHeatOn@topOrBorBoth+1)^(0+128)
 11590  04F8  3188  20C0         	fcall	_timedActiveHeatOn
 11591  04FA  0021               	movlb	1	; select bank1
 11592  04FB  0836               	movf	(?_timedActiveHeatOn+1)^(0+128),w
 11593  04FC  0022               	movlb	2	; select bank2
 11594  04FD  00E5               	movwf	(_errorOut+1)^(0+256)
 11595  04FE  0021               	movlb	1	; select bank1
 11596  04FF  0835               	movf	?_timedActiveHeatOn^(0+128),w
 11597  0500  0022               	movlb	2	; select bank2
 11598  0501  00E4               	movwf	_errorOut^(0+256)
 11599  0502  0008               	return
 11600  0503                     l9218:	
 11601                           ;cmd_parser.c: 103: case CMD_SETA: errorOut = setActive(s->p1.paramI, s->p2.paramI); bre
      +                          ak;
 11602                           
 11603  0503  0021               	movlb	1	; select bank1
 11604  0504  0A57               	incf	execCmd@s^(0+128),w
 11605  0505  0086               	movwf	6
 11606  0506  3001               	movlw	1	; select bank2/3
 11607  0507  0087               	movwf	7
 11608  0508  3F40               	moviw [0]fsr1
 11609  0509  00B5               	movwf	setActive@probeNum^(0+128)
 11610  050A  3F41               	moviw [1]fsr1
 11611  050B  00B6               	movwf	(setActive@probeNum+1)^(0+128)
 11612  050C  0857               	movf	execCmd@s^(0+128),w
 11613  050D  3E0B               	addlw	11
 11614  050E  0086               	movwf	6
 11615  050F  3001               	movlw	1	; select bank2/3
 11616  0510  0087               	movwf	7
 11617  0511  3F40               	moviw [0]fsr1
 11618  0512  00B7               	movwf	setActive@onOff^(0+128)
 11619  0513  3F41               	moviw [1]fsr1
 11620  0514  00B8               	movwf	(setActive@onOff+1)^(0+128)
 11621  0515  3194  2418         	fcall	_setActive
 11622  0517  0021               	movlb	1	; select bank1
 11623  0518  0836               	movf	(?_setActive+1)^(0+128),w
 11624  0519  0022               	movlb	2	; select bank2
 11625  051A  00E5               	movwf	(_errorOut+1)^(0+256)
 11626  051B  0021               	movlb	1	; select bank1
 11627  051C  0835               	movf	?_setActive^(0+128),w
 11628  051D  0022               	movlb	2	; select bank2
 11629  051E  00E4               	movwf	_errorOut^(0+256)
 11630  051F  0008               	return
 11631  0520                     l9220:	
 11632                           ;cmd_parser.c: 104: case CMD_SETM: errorOut = setMoveMask(s->p1.paramI, s->p2.paramI); b
      +                          reak;
 11633                           
 11634  0520  0021               	movlb	1	; select bank1
 11635  0521  0A57               	incf	execCmd@s^(0+128),w
 11636  0522  0086               	movwf	6
 11637  0523  3001               	movlw	1	; select bank2/3
 11638  0524  0087               	movwf	7
 11639  0525  3F40               	moviw [0]fsr1
 11640  0526  00B5               	movwf	setMoveMask@probeNum^(0+128)
 11641  0527  3F41               	moviw [1]fsr1
 11642  0528  00B6               	movwf	(setMoveMask@probeNum+1)^(0+128)
 11643  0529  0857               	movf	execCmd@s^(0+128),w
 11644  052A  3E0B               	addlw	11
 11645  052B  0086               	movwf	6
 11646  052C  3001               	movlw	1	; select bank2/3
 11647  052D  0087               	movwf	7
 11648  052E  3F40               	moviw [0]fsr1
 11649  052F  00B7               	movwf	setMoveMask@onOff^(0+128)
 11650  0530  3F41               	moviw [1]fsr1
 11651  0531  00B8               	movwf	(setMoveMask@onOff+1)^(0+128)
 11652  0532  3193  2330         	fcall	_setMoveMask
 11653  0534  0021               	movlb	1	; select bank1
 11654  0535  0836               	movf	(?_setMoveMask+1)^(0+128),w
 11655  0536  0022               	movlb	2	; select bank2
 11656  0537  00E5               	movwf	(_errorOut+1)^(0+256)
 11657  0538  0021               	movlb	1	; select bank1
 11658  0539  0835               	movf	?_setMoveMask^(0+128),w
 11659  053A  0022               	movlb	2	; select bank2
 11660  053B  00E4               	movwf	_errorOut^(0+256)
 11661  053C  0008               	return
 11662  053D                     l9222:	
 11663                           ;cmd_parser.c: 105: case CMD_GET_ACTIVE: errorOut = getActive(); break;
 11664                           
 11665  053D  319B  2349         	fcall	_getActive
 11666  053F  0021               	movlb	1	; select bank1
 11667  0540  0836               	movf	(?_getActive+1)^(0+128),w
 11668  0541  0022               	movlb	2	; select bank2
 11669  0542  00E5               	movwf	(_errorOut+1)^(0+256)
 11670  0543  0021               	movlb	1	; select bank1
 11671  0544  0835               	movf	?_getActive^(0+128),w
 11672  0545  0022               	movlb	2	; select bank2
 11673  0546  00E4               	movwf	_errorOut^(0+256)
 11674  0547  0008               	return
 11675  0548                     l9224:	
 11676                           ;cmd_parser.c: 106: case CMD_GET_MOVABLE: errorOut = getMoveMask(); break;
 11677                           
 11678  0548  319B  2396         	fcall	_getMoveMask
 11679  054A  0021               	movlb	1	; select bank1
 11680  054B  0836               	movf	(?_getMoveMask+1)^(0+128),w
 11681  054C  0022               	movlb	2	; select bank2
 11682  054D  00E5               	movwf	(_errorOut+1)^(0+256)
 11683  054E  0021               	movlb	1	; select bank1
 11684  054F  0835               	movf	?_getMoveMask^(0+128),w
 11685  0550  0022               	movlb	2	; select bank2
 11686  0551  00E4               	movwf	_errorOut^(0+256)
 11687  0552  0008               	return
 11688  0553                     l9226:	
 11689                           ;cmd_parser.c: 107: case CMD_MOTION_STATUS: errorOut = getMotionStatus(); break;
 11690                           
 11691  0553  31A5  2542         	fcall	_getMotionStatus
 11692  0555  0021               	movlb	1	; select bank1
 11693  0556  0836               	movf	(?_getMotionStatus+1)^(0+128),w
 11694  0557  0022               	movlb	2	; select bank2
 11695  0558  00E5               	movwf	(_errorOut+1)^(0+256)
 11696  0559  0021               	movlb	1	; select bank1
 11697  055A  0835               	movf	?_getMotionStatus^(0+128),w
 11698  055B  0022               	movlb	2	; select bank2
 11699  055C  00E4               	movwf	_errorOut^(0+256)
 11700  055D  0008               	return
 11701  055E                     l9228:	
 11702                           ;cmd_parser.c: 108: case CMD_DOMOVE: errorOut = doMove(); break;
 11703                           
 11704  055E  3188  202F         	fcall	_doMove
 11705  0560  0021               	movlb	1	; select bank1
 11706  0561  083D               	movf	(?_doMove+1)^(0+128),w
 11707  0562  0022               	movlb	2	; select bank2
 11708  0563  00E5               	movwf	(_errorOut+1)^(0+256)
 11709  0564  0021               	movlb	1	; select bank1
 11710  0565  083C               	movf	?_doMove^(0+128),w
 11711  0566  0022               	movlb	2	; select bank2
 11712  0567  00E4               	movwf	_errorOut^(0+256)
 11713  0568  0008               	return
 11714  0569                     l9230:	
 11715                           ;cmd_parser.c: 109: case CMD_COMM_CHECK: errorOut = commCheck(); break;
 11716                           
 11717  0569  318A  2214         	fcall	_commCheck
 11718  056B  0021               	movlb	1	; select bank1
 11719  056C  0855               	movf	(?_commCheck+1)^(0+128),w
 11720  056D  0022               	movlb	2	; select bank2
 11721  056E  00E5               	movwf	(_errorOut+1)^(0+256)
 11722  056F  0021               	movlb	1	; select bank1
 11723  0570  0854               	movf	?_commCheck^(0+128),w
 11724  0571  0022               	movlb	2	; select bank2
 11725  0572  00E4               	movwf	_errorOut^(0+256)
 11726  0573  0008               	return
 11727  0574                     l9232:	
 11728                           ;cmd_parser.c: 110: case CMD_PING: printf("!\n"); break;
 11729                           
 11730  0574  30C8               	movlw	low ((STR_80+20)| (0+32768))
 11731  0575  0021               	movlb	1	; select bank1
 11732  0576  00A0               	movwf	printf@f^(0+128)
 11733  0577  30A8               	movlw	high ((STR_80+20)| (0+32768))
 11734  0578  00A1               	movwf	(printf@f^(0+128)+1)
 11735  0579  318D  2594         	fcall	_printf
 11736  057B  0008               	return
 11737  057C                     l9234:	
 11738                           ;cmd_parser.c: 111: default: printf("UNRECOGNIZED COMMAND!\n");
 11739                           
 11740  057C  30B4               	movlw	low (STR_80| (0+32768))
 11741  057D  0021               	movlb	1	; select bank1
 11742  057E  00A0               	movwf	printf@f^(0+128)
 11743  057F  30A8               	movlw	high (STR_80| (0+32768))
 11744  0580  00A1               	movwf	(printf@f^(0+128)+1)
 11745  0581  318D  2594         	fcall	_printf
 11746                           
 11747                           ;cmd_parser.c: 118: }
 11748  0583  0008               	return
 11749  0584                     l9236:	
 11750  0584  0021               	movlb	1	; select bank1
 11751  0585  0857               	movf	execCmd@s^(0+128),w
 11752  0586  0086               	movwf	6
 11753  0587  3001               	movlw	1	; select bank2/3
 11754  0588  0087               	movwf	7
 11755  0589  0801               	movf	1,w
 11756                           
 11757                           ; Switch size 1, requested type "space"
 11758                           ; Number of cases is 24, Range of values is 1 to 25
 11759                           ; switch strategies available:
 11760                           ; Name         Instructions Cycles
 11761                           ; direct_byte           59     9 (fixed)
 11762                           ; simple_byte           73    37 (average)
 11763                           ; jumptable            263     9 (fixed)
 11764                           ;	Chosen strategy is direct_byte
 11765  058A  3EFF               	addlw	-1
 11766  058B  1C03               	skipc
 11767  058C  2D7C               	goto	l9234
 11768  058D  0084               	movwf	4
 11769  058E  3019               	movlw	25
 11770  058F  0204               	subwf	4,w
 11771  0590  1803               	skipnc
 11772  0591  2D7C               	goto	l9234
 11773  0592  31A0               	movlp	high S9572
 11774  0593  3504               	lslf	4,w
 11775  0594  3E00               	addlw	low S9572
 11776  0595  0082               	movwf	2
 11777                           
 11778                           ;cmd_parser.c: 120: return errorOut;
 11779                           ;	Return value of _execCmd is never used
 11780  0596  0008               	return
 11781  0597                     __end_of_execCmd:	
 11782                           
 11783                           	psect	swtext1
 11784  2000                     __pswtext1:	
 11785  2000                     S9572:	
 11786  2000  3183  2BC0         	ljmp	l9188
 11787  2002  3183  2BA0         	ljmp	l9186
 11788  2004  3183  2BD5         	ljmp	l9190
 11789  2006  3183  2BE9         	ljmp	l9192
 11790  2008  3185  2D7C         	ljmp	l9234
 11791  200A  3185  2D03         	ljmp	l9218
 11792  200C  3185  2D20         	ljmp	l9220
 11793  200E  3183  2BF4         	ljmp	l9194
 11794  2010  3183  2BFF         	ljmp	l9196
 11795  2012  3184  2C13         	ljmp	l9198
 11796  2014  3184  2C27         	ljmp	l9200
 11797  2016  3184  2C3B         	ljmp	l9202
 11798  2018  3184  2C4F         	ljmp	l9204
 11799  201A  3184  2C63         	ljmp	l9206
 11800  201C  3184  2C77         	ljmp	l9208
 11801  201E  3184  2C8B         	ljmp	l9210
 11802  2020  3184  2CA8         	ljmp	l9212
 11803  2022  3184  2CC5         	ljmp	l9214
 11804  2024  3184  2CE2         	ljmp	l9216
 11805  2026  3185  2D3D         	ljmp	l9222
 11806  2028  3185  2D48         	ljmp	l9224
 11807  202A  3185  2D53         	ljmp	l9226
 11808  202C  3185  2D5E         	ljmp	l9228
 11809  202E  3185  2D69         	ljmp	l9230
 11810  2030  3185  2D74         	ljmp	l9232
 11811                           
 11812                           	psect	text19
 11813  13A3                     __ptext19:	
 11814 ;; *************** function _zeroPosition *****************
 11815 ;; Defined at:
 11816 ;;		line 360 in file "main.c"
 11817 ;; Parameters:    Size  Location     Type
 11818 ;;		None
 11819 ;; Auto vars:     Size  Location     Type
 11820 ;;  i               2   41[BANK0 ] int 
 11821 ;; Return value:  Size  Location     Type
 11822 ;;                  2   21[BANK1 ] int 
 11823 ;; Registers used:
 11824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11825 ;; Tracked objects:
 11826 ;;		On entry : 0/0
 11827 ;;		On exit  : 0/0
 11828 ;;		Unchanged: 0/0
 11829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11830 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11831 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11832 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11833 ;;      Totals:         0       2      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11834 ;;Total ram usage:       12 bytes
 11835 ;; Hardware stack levels used:    1
 11836 ;; Hardware stack levels required when called:    9
 11837 ;; This function calls:
 11838 ;;		_printf
 11839 ;; This function is called by:
 11840 ;;		_execCmd
 11841 ;; This function uses a non-reentrant model
 11842 ;;
 11843                           
 11844                           
 11845                           ;psect for function _zeroPosition
 11846  13A3                     _zeroPosition:	
 11847                           
 11848                           ;main.c: 361: for(int i = 0; i<24; i++){
 11849                           
 11850                           ;incstack = 0
 11851                           ; Regs used in _zeroPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11852  13A3  0020               	movlb	0	; select bank0
 11853  13A4  01C9               	clrf	zeroPosition@i
 11854  13A5  01CA               	clrf	zeroPosition@i+1
 11855  13A6  084A               	movf	zeroPosition@i+1,w
 11856  13A7  3A80               	xorlw	128
 11857  13A8  0021               	movlb	1	; select bank1
 11858  13A9  00B7               	movwf	??_zeroPosition^(0+128)
 11859  13AA  3080               	movlw	128
 11860  13AB  0237               	subwf	??_zeroPosition^(0+128),w
 11861  13AC  1D03               	skipz
 11862  13AD  2BB1               	goto	u8645
 11863  13AE  3018               	movlw	24
 11864  13AF  0020               	movlb	0	; select bank0
 11865  13B0  0249               	subwf	zeroPosition@i,w
 11866  13B1                     u8645:	
 11867  13B1  1803               	btfsc	3,0
 11868  13B2  2C0D               	goto	l8648
 11869  13B3                     l8640:	
 11870                           
 11871                           ;main.c: 362: if((activeMask & (1UL << i)) > 0)
 11872  13B3  0021               	movlb	1	; select bank1
 11873  13B4  085C               	movf	_activeMask^(0+128),w
 11874  13B5  00B7               	movwf	??_zeroPosition^(0+128)
 11875  13B6  085D               	movf	(_activeMask+1)^(0+128),w
 11876  13B7  00B8               	movwf	(??_zeroPosition^(0+128)+1)
 11877  13B8  085E               	movf	(_activeMask+2)^(0+128),w
 11878  13B9  00B9               	movwf	(??_zeroPosition^(0+128)+2)
 11879  13BA  085F               	movf	(_activeMask+3)^(0+128),w
 11880  13BB  00BA               	movwf	(??_zeroPosition^(0+128)+3)
 11881  13BC  3001               	movlw	1
 11882  13BD  00BB               	movwf	(??_zeroPosition+4)^(0+128)
 11883  13BE  3000               	movlw	0
 11884  13BF  00BC               	movwf	((??_zeroPosition+4)^(0+128)+1)
 11885  13C0  3000               	movlw	0
 11886  13C1  00BD               	movwf	((??_zeroPosition+4)^(0+128)+2)
 11887  13C2  3000               	movlw	0
 11888  13C3  00BE               	movwf	((??_zeroPosition+4)^(0+128)+3)
 11889  13C4  0020               	movlb	0	; select bank0
 11890  13C5  0A49               	incf	zeroPosition@i,w
 11891  13C6  0021               	movlb	1	; select bank1
 11892  13C7  2BCC               	goto	u8650
 11893  13C8                     u8655:	
 11894  13C8  35BB               	lslf	(??_zeroPosition+4)^(0+128),f
 11895  13C9  0DBC               	rlf	((??_zeroPosition+4)^(0+128)+1),f
 11896  13CA  0DBD               	rlf	((??_zeroPosition+4)^(0+128)+2),f
 11897  13CB  0DBE               	rlf	((??_zeroPosition+4)^(0+128)+3),f
 11898  13CC                     u8650:	
 11899  13CC  0B89               	decfsz	9,f
 11900  13CD  2BC8               	goto	u8655
 11901  13CE  083B               	movf	(??_zeroPosition+4)^(0+128),w
 11902  13CF  05B7               	andwf	??_zeroPosition^(0+128),f
 11903  13D0  083C               	movf	(??_zeroPosition+5)^(0+128),w
 11904  13D1  05B8               	andwf	(??_zeroPosition^(0+128)+1),f
 11905  13D2  083D               	movf	(??_zeroPosition+6)^(0+128),w
 11906  13D3  05B9               	andwf	(??_zeroPosition^(0+128)+2),f
 11907  13D4  083E               	movf	(??_zeroPosition+7)^(0+128),w
 11908  13D5  05BA               	andwf	(??_zeroPosition^(0+128)+3),f
 11909  13D6  083A               	movf	(??_zeroPosition+3)^(0+128),w
 11910  13D7  0439               	iorwf	(??_zeroPosition+2)^(0+128),w
 11911  13D8  0438               	iorwf	(??_zeroPosition+1)^(0+128),w
 11912  13D9  0437               	iorwf	??_zeroPosition^(0+128),w
 11913  13DA  1903               	skipnz
 11914  13DB  2BFB               	goto	l8644
 11915                           
 11916                           ;main.c: 363: currentPositions_steps[i]=0;
 11917  13DC  0020               	movlb	0	; select bank0
 11918  13DD  084A               	movf	zeroPosition@i+1,w
 11919  13DE  0021               	movlb	1	; select bank1
 11920  13DF  00B8               	movwf	(??_zeroPosition^(0+128)+1)
 11921  13E0  0020               	movlb	0	; select bank0
 11922  13E1  0849               	movf	zeroPosition@i,w
 11923  13E2  0021               	movlb	1	; select bank1
 11924  13E3  00B7               	movwf	??_zeroPosition^(0+128)
 11925  13E4  35B7               	lslf	??_zeroPosition^(0+128),f
 11926  13E5  0DB8               	rlf	(??_zeroPosition^(0+128)+1),f
 11927  13E6  35B7               	lslf	??_zeroPosition^(0+128),f
 11928  13E7  0DB8               	rlf	(??_zeroPosition^(0+128)+1),f
 11929  13E8  3090               	movlw	144
 11930  13E9  00B9               	movwf	(??_zeroPosition+2)^(0+128)
 11931  13EA  3027               	movlw	39
 11932  13EB  00BA               	movwf	((??_zeroPosition+2)^(0+128)+1)
 11933  13EC  0837               	movf	??_zeroPosition^(0+128),w
 11934  13ED  0739               	addwf	(??_zeroPosition+2)^(0+128),w
 11935  13EE  00BB               	movwf	(??_zeroPosition+4)^(0+128)
 11936  13EF  0838               	movf	(??_zeroPosition+1)^(0+128),w
 11937  13F0  3D3A               	addwfc	(??_zeroPosition+3)^(0+128),w
 11938  13F1  00BC               	movwf	(??_zeroPosition+5)^(0+128)
 11939  13F2  083B               	movf	(??_zeroPosition+4)^(0+128),w
 11940  13F3  0086               	movwf	6
 11941  13F4  083C               	movf	(??_zeroPosition+5)^(0+128),w
 11942  13F5  0087               	movwf	7
 11943  13F6  3000               	movlw	0
 11944  13F7  3FC0               	movwi [0]fsr1
 11945  13F8  3FC1               	movwi [1]fsr1
 11946  13F9  3FC2               	movwi [2]fsr1
 11947  13FA  3FC3               	movwi [3]fsr1
 11948  13FB                     l8644:	
 11949  13FB  3001               	movlw	1
 11950  13FC  0020               	movlb	0	; select bank0
 11951  13FD  07C9               	addwf	zeroPosition@i,f
 11952  13FE  3000               	movlw	0
 11953  13FF  3DCA               	addwfc	zeroPosition@i+1,f
 11954  1400  084A               	movf	zeroPosition@i+1,w
 11955  1401  3A80               	xorlw	128
 11956  1402  0021               	movlb	1	; select bank1
 11957  1403  00B7               	movwf	??_zeroPosition^(0+128)
 11958  1404  3080               	movlw	128
 11959  1405  0237               	subwf	??_zeroPosition^(0+128),w
 11960  1406  1D03               	skipz
 11961  1407  2C0B               	goto	u8675
 11962  1408  3018               	movlw	24
 11963  1409  0020               	movlb	0	; select bank0
 11964  140A  0249               	subwf	zeroPosition@i,w
 11965  140B                     u8675:	
 11966  140B  1C03               	skipc
 11967  140C  2BB3               	goto	l8640
 11968  140D                     l8648:	
 11969                           
 11970                           ;main.c: 364: }
 11971                           ;main.c: 365: printf("A\n");
 11972  140D  3038               	movlw	low (STR_5| (0+32768))
 11973  140E  0021               	movlb	1	; select bank1
 11974  140F  00A0               	movwf	printf@f^(0+128)
 11975  1410  30B0               	movlw	high (STR_5| (0+32768))
 11976  1411  00A1               	movwf	(printf@f^(0+128)+1)
 11977  1412  318D  2594         	fcall	_printf
 11978                           
 11979                           ;main.c: 366: return 0;
 11980  1414  0021               	movlb	1	; select bank1
 11981  1415  01B5               	clrf	?_zeroPosition^(0+128)
 11982  1416  01B6               	clrf	(?_zeroPosition+1)^(0+128)
 11983  1417  0008               	return
 11984  1418                     __end_of_zeroPosition:	
 11985                           
 11986                           	psect	text20
 11987  08C0                     __ptext20:	
 11988 ;; *************** function _timedActiveHeatOn *****************
 11989 ;; Defined at:
 11990 ;;		line 480 in file "main.c"
 11991 ;; Parameters:    Size  Location     Type
 11992 ;;  onTime          4   21[BANK1 ] long 
 11993 ;;  topOrBorBoth    2   25[BANK1 ] int 
 11994 ;; Auto vars:     Size  Location     Type
 11995 ;;  t               2   32[BANK1 ] int 
 11996 ;; Return value:  Size  Location     Type
 11997 ;;                  2   21[BANK1 ] int 
 11998 ;; Registers used:
 11999 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12000 ;; Tracked objects:
 12001 ;;		On entry : 0/0
 12002 ;;		On exit  : 0/0
 12003 ;;		Unchanged: 0/0
 12004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12005 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12006 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12007 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12008 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12009 ;;Total ram usage:       13 bytes
 12010 ;; Hardware stack levels used:    1
 12011 ;; Hardware stack levels required when called:    9
 12012 ;; This function calls:
 12013 ;;		_LEDsOn
 12014 ;;		_printf
 12015 ;; This function is called by:
 12016 ;;		_execCmd
 12017 ;; This function uses a non-reentrant model
 12018 ;;
 12019                           
 12020                           
 12021                           ;psect for function _timedActiveHeatOn
 12022  08C0                     _timedActiveHeatOn:	
 12023                           
 12024                           ;incstack = 0
 12025                           ; Regs used in _timedActiveHeatOn: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12026                           ;main.c: 482: do { LATCbits.LATC1 = 0; } while(0);
 12027  08C0  0022               	movlb	2	; select bank2
 12028  08C1  108E               	bcf	14,1	;volatile
 12029                           
 12030                           ;main.c: 483: if(topOrBorBoth == 1){
 12031  08C2  0021               	movlb	1	; select bank1
 12032  08C3  0339               	decf	timedActiveHeatOn@topOrBorBoth^(0+128),w
 12033  08C4  043A               	iorwf	(timedActiveHeatOn@topOrBorBoth+1)^(0+128),w
 12034  08C5  1D03               	btfss	3,2
 12035  08C6  28D8               	goto	l8790
 12036                           
 12037                           ;main.c: 484: LEDsOn(activeMask, 1);
 12038  08C7  085F               	movf	(_activeMask+3)^(0+128),w
 12039  08C8  0020               	movlb	0	; select bank0
 12040  08C9  00C7               	movwf	LEDsOn@LEDpins+3
 12041  08CA  0021               	movlb	1	; select bank1
 12042  08CB  085E               	movf	(_activeMask+2)^(0+128),w
 12043  08CC  0020               	movlb	0	; select bank0
 12044  08CD  00C6               	movwf	LEDsOn@LEDpins+2
 12045  08CE  0021               	movlb	1	; select bank1
 12046  08CF  085D               	movf	(_activeMask+1)^(0+128),w
 12047  08D0  0020               	movlb	0	; select bank0
 12048  08D1  00C5               	movwf	LEDsOn@LEDpins+1
 12049  08D2  0021               	movlb	1	; select bank1
 12050  08D3  085C               	movf	_activeMask^(0+128),w
 12051  08D4  0020               	movlb	0	; select bank0
 12052  08D5  00C4               	movwf	LEDsOn@LEDpins
 12053  08D6  3001               	movlw	1
 12054  08D7  290B               	goto	L24
 12055  08D8                     l8790:	
 12056                           ;main.c: 485: }
 12057                           
 12058                           
 12059                           ;main.c: 486: else if (topOrBorBoth == 2){
 12060  08D8  3002               	movlw	2
 12061  08D9  0021               	movlb	1	; select bank1
 12062  08DA  0639               	xorwf	timedActiveHeatOn@topOrBorBoth^(0+128),w
 12063  08DB  043A               	iorwf	(timedActiveHeatOn@topOrBorBoth+1)^(0+128),w
 12064  08DC  1903               	btfsc	3,2
 12065  08DD  28FB               	goto	L25
 12066                           
 12067                           ;main.c: 489: else if (topOrBorBoth == 3){
 12068                           
 12069                           ;main.c: 488: }
 12070                           
 12071                           ;main.c: 487: LEDsOn(activeMask, 2);
 12072  08DE  3003               	movlw	3
 12073  08DF  0021               	movlb	1	; select bank1
 12074  08E0  0639               	xorwf	timedActiveHeatOn@topOrBorBoth^(0+128),w
 12075  08E1  043A               	iorwf	(timedActiveHeatOn@topOrBorBoth+1)^(0+128),w
 12076  08E2  1D03               	btfss	3,2
 12077  08E3  2911               	goto	l8798
 12078                           
 12079                           ;main.c: 490: LEDsOn(activeMask, 1);
 12080  08E4  085F               	movf	(_activeMask+3)^(0+128),w
 12081  08E5  0020               	movlb	0	; select bank0
 12082  08E6  00C7               	movwf	LEDsOn@LEDpins+3
 12083  08E7  0021               	movlb	1	; select bank1
 12084  08E8  085E               	movf	(_activeMask+2)^(0+128),w
 12085  08E9  0020               	movlb	0	; select bank0
 12086  08EA  00C6               	movwf	LEDsOn@LEDpins+2
 12087  08EB  0021               	movlb	1	; select bank1
 12088  08EC  085D               	movf	(_activeMask+1)^(0+128),w
 12089  08ED  0020               	movlb	0	; select bank0
 12090  08EE  00C5               	movwf	LEDsOn@LEDpins+1
 12091  08EF  0021               	movlb	1	; select bank1
 12092  08F0  085C               	movf	_activeMask^(0+128),w
 12093  08F1  0020               	movlb	0	; select bank0
 12094  08F2  00C4               	movwf	LEDsOn@LEDpins
 12095  08F3  3001               	movlw	1
 12096  08F4  00C8               	movwf	LEDsOn@topOrBottom
 12097  08F5  3000               	movlw	0
 12098  08F6  00C9               	movwf	LEDsOn@topOrBottom+1
 12099  08F7  31A3  23F8  3188   	fcall	_LEDsOn
 12100                           
 12101                           ;main.c: 491: LEDsOn(activeMask, 2);
 12102  08FA  0021               	movlb	1	; select bank1
 12103  08FB                     L25:	
 12104  08FB  085F               	movf	(_activeMask+3)^(0+128),w
 12105  08FC  0020               	movlb	0	; select bank0
 12106  08FD  00C7               	movwf	LEDsOn@LEDpins+3
 12107  08FE  0021               	movlb	1	; select bank1
 12108  08FF  085E               	movf	(_activeMask+2)^(0+128),w
 12109  0900  0020               	movlb	0	; select bank0
 12110  0901  00C6               	movwf	LEDsOn@LEDpins+2
 12111  0902  0021               	movlb	1	; select bank1
 12112  0903  085D               	movf	(_activeMask+1)^(0+128),w
 12113  0904  0020               	movlb	0	; select bank0
 12114  0905  00C5               	movwf	LEDsOn@LEDpins+1
 12115  0906  0021               	movlb	1	; select bank1
 12116  0907  085C               	movf	_activeMask^(0+128),w
 12117  0908  0020               	movlb	0	; select bank0
 12118  0909  00C4               	movwf	LEDsOn@LEDpins
 12119  090A  3002               	movlw	2
 12120  090B                     L24:	
 12121  090B  00C8               	movwf	LEDsOn@topOrBottom
 12122  090C  3000               	movlw	0
 12123  090D  00C9               	movwf	LEDsOn@topOrBottom+1
 12124  090E  31A3  23F8  3188   	fcall	_LEDsOn
 12125  0911                     l8798:	
 12126                           
 12127                           ;main.c: 492: }
 12128                           ;main.c: 494: for(int t=0; t<onTime; t++) _delay((unsigned long)((1)*(1000000/4000.0)));
 12129  0911  0021               	movlb	1	; select bank1
 12130  0912  01C0               	clrf	timedActiveHeatOn@t^(0+128)
 12131  0913  01C1               	clrf	(timedActiveHeatOn@t+1)^(0+128)
 12132  0914                     l1252:	
 12133  0914  0840               	movf	timedActiveHeatOn@t^(0+128),w
 12134  0915  00BB               	movwf	??_timedActiveHeatOn^(0+128)
 12135  0916  0841               	movf	(timedActiveHeatOn@t+1)^(0+128),w
 12136  0917  00BC               	movwf	(??_timedActiveHeatOn^(0+128)+1)
 12137  0918  3000               	movlw	0
 12138  0919  1BBC               	btfsc	(??_timedActiveHeatOn^(0+128)+1),7
 12139  091A  30FF               	movlw	255
 12140  091B  00BD               	movwf	(??_timedActiveHeatOn^(0+128)+2)
 12141  091C  00BE               	movwf	(??_timedActiveHeatOn^(0+128)+3)
 12142  091D  083E               	movf	(??_timedActiveHeatOn+3)^(0+128),w
 12143  091E  3A80               	xorlw	128
 12144  091F  00BF               	movwf	(??_timedActiveHeatOn+4)^(0+128)
 12145  0920  0838               	movf	(timedActiveHeatOn@onTime+3)^(0+128),w
 12146  0921  3A80               	xorlw	128
 12147  0922  023F               	subwf	(??_timedActiveHeatOn+4)^(0+128),w
 12148  0923  1D03               	skipz
 12149  0924  292F               	goto	u8773
 12150  0925  0837               	movf	(timedActiveHeatOn@onTime+2)^(0+128),w
 12151  0926  023D               	subwf	(??_timedActiveHeatOn+2)^(0+128),w
 12152  0927  1D03               	skipz
 12153  0928  292F               	goto	u8773
 12154  0929  0836               	movf	(timedActiveHeatOn@onTime+1)^(0+128),w
 12155  092A  023C               	subwf	(??_timedActiveHeatOn+1)^(0+128),w
 12156  092B  1D03               	skipz
 12157  092C  292F               	goto	u8773
 12158  092D  0835               	movf	timedActiveHeatOn@onTime^(0+128),w
 12159  092E  023B               	subwf	??_timedActiveHeatOn^(0+128),w
 12160  092F                     u8773:	
 12161  092F  1803               	btfsc	3,0
 12162  0930  293B               	goto	l1255
 12163  0931  3053               	movlw	83
 12164  0932                     u10087:	
 12165  0932  0B89               	decfsz	9,f
 12166  0933  2932               	goto	u10087
 12167  0934  0000               	nop
 12168  0935  3001               	movlw	1
 12169  0936  0021               	movlb	1	; select bank1
 12170  0937  07C0               	addwf	timedActiveHeatOn@t^(0+128),f
 12171  0938  3000               	movlw	0
 12172  0939  3DC1               	addwfc	(timedActiveHeatOn@t+1)^(0+128),f
 12173  093A  2914               	goto	l1252
 12174  093B                     l1255:	
 12175                           ;main.c: 495: do { LATCbits.LATC1 = 1; } while(0);
 12176                           
 12177  093B  0022               	movlb	2	; select bank2
 12178  093C  148E               	bsf	14,1	;volatile
 12179                           
 12180                           ;main.c: 496: LEDsOn(0, 1);
 12181  093D  3000               	movlw	0
 12182  093E  0020               	movlb	0	; select bank0
 12183  093F  00C7               	movwf	LEDsOn@LEDpins+3
 12184  0940  3000               	movlw	0
 12185  0941  00C6               	movwf	LEDsOn@LEDpins+2
 12186  0942  3000               	movlw	0
 12187  0943  00C5               	movwf	LEDsOn@LEDpins+1
 12188  0944  3000               	movlw	0
 12189  0945  00C4               	movwf	LEDsOn@LEDpins
 12190  0946  3001               	movlw	1
 12191  0947  00C8               	movwf	LEDsOn@topOrBottom
 12192  0948  3000               	movlw	0
 12193  0949  00C9               	movwf	LEDsOn@topOrBottom+1
 12194  094A  31A3  23F8  3188   	fcall	_LEDsOn
 12195                           
 12196                           ;main.c: 497: LEDsOn(0, 2);
 12197  094D  3000               	movlw	0
 12198  094E  0020               	movlb	0	; select bank0
 12199  094F  00C7               	movwf	LEDsOn@LEDpins+3
 12200  0950  3000               	movlw	0
 12201  0951  00C6               	movwf	LEDsOn@LEDpins+2
 12202  0952  3000               	movlw	0
 12203  0953  00C5               	movwf	LEDsOn@LEDpins+1
 12204  0954  3000               	movlw	0
 12205  0955  00C4               	movwf	LEDsOn@LEDpins
 12206  0956  3002               	movlw	2
 12207  0957  00C8               	movwf	LEDsOn@topOrBottom
 12208  0958  3000               	movlw	0
 12209  0959  00C9               	movwf	LEDsOn@topOrBottom+1
 12210  095A  31A3  23F8  3188   	fcall	_LEDsOn
 12211                           
 12212                           ;main.c: 498: printf("A\n");
 12213  095D  3038               	movlw	low (STR_5| (0+32768))
 12214  095E  0021               	movlb	1	; select bank1
 12215  095F  00A0               	movwf	printf@f^(0+128)
 12216  0960  30B0               	movlw	high (STR_5| (0+32768))
 12217  0961  00A1               	movwf	(printf@f^(0+128)+1)
 12218  0962  318D  2594         	fcall	_printf
 12219                           
 12220                           ;main.c: 499: return 0;
 12221  0964  0021               	movlb	1	; select bank1
 12222  0965  01B5               	clrf	?_timedActiveHeatOn^(0+128)
 12223  0966  01B6               	clrf	(?_timedActiveHeatOn+1)^(0+128)
 12224  0967  0008               	return
 12225  0968                     __end_of_timedActiveHeatOn:	
 12226                           
 12227                           	psect	text21
 12228  24F2                     __ptext21:	
 12229 ;; *************** function _stop *****************
 12230 ;; Defined at:
 12231 ;;		line 278 in file "main.c"
 12232 ;; Parameters:    Size  Location     Type
 12233 ;;		None
 12234 ;; Auto vars:     Size  Location     Type
 12235 ;;		None
 12236 ;; Return value:  Size  Location     Type
 12237 ;;                  2   21[BANK1 ] int 
 12238 ;; Registers used:
 12239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12240 ;; Tracked objects:
 12241 ;;		On entry : 0/0
 12242 ;;		On exit  : 0/0
 12243 ;;		Unchanged: 0/0
 12244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12245 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12248 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12249 ;;Total ram usage:        2 bytes
 12250 ;; Hardware stack levels used:    1
 12251 ;; Hardware stack levels required when called:    9
 12252 ;; This function calls:
 12253 ;;		_printf
 12254 ;; This function is called by:
 12255 ;;		_execCmd
 12256 ;; This function uses a non-reentrant model
 12257 ;;
 12258                           
 12259                           
 12260                           ;psect for function _stop
 12261  24F2                     _stop:	
 12262                           
 12263                           ;main.c: 279: motionType = NONE;
 12264                           
 12265                           ;incstack = 0
 12266                           ; Regs used in _stop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12267  24F2  0020               	movlb	0	; select bank0
 12268  24F3  01D5               	clrf	_motionType
 12269                           
 12270                           ;main.c: 280: moveVector_ups = 0;
 12271  24F4  3000               	movlw	0
 12272  24F5  0021               	movlb	1	; select bank1
 12273  24F6  00E7               	movwf	(_moveVector_ups+3)^(0+128)
 12274  24F7  3000               	movlw	0
 12275  24F8  00E6               	movwf	(_moveVector_ups+2)^(0+128)
 12276  24F9  3000               	movlw	0
 12277  24FA  00E5               	movwf	(_moveVector_ups+1)^(0+128)
 12278  24FB  3000               	movlw	0
 12279  24FC  00E4               	movwf	_moveVector_ups^(0+128)
 12280                           
 12281                           ;main.c: 281: moveVector_downs = 0;
 12282  24FD  3000               	movlw	0
 12283  24FE  00E3               	movwf	(_moveVector_downs+3)^(0+128)
 12284  24FF  3000               	movlw	0
 12285  2500  00E2               	movwf	(_moveVector_downs+2)^(0+128)
 12286  2501  3000               	movlw	0
 12287  2502  00E1               	movwf	(_moveVector_downs+1)^(0+128)
 12288  2503  3000               	movlw	0
 12289  2504  00E0               	movwf	_moveVector_downs^(0+128)
 12290                           
 12291                           ;main.c: 282: remainingSteps = 0;
 12292  2505  3000               	movlw	0
 12293  2506  0022               	movlb	2	; select bank2
 12294  2507  00C1               	movwf	(_remainingSteps+3)^(0+256)
 12295  2508  3000               	movlw	0
 12296  2509  00C0               	movwf	(_remainingSteps+2)^(0+256)
 12297  250A  3000               	movlw	0
 12298  250B  00BF               	movwf	(_remainingSteps+1)^(0+256)
 12299  250C  3000               	movlw	0
 12300  250D  00BE               	movwf	_remainingSteps^(0+256)
 12301                           
 12302                           ;main.c: 283: printf("A\n");
 12303  250E  3038               	movlw	low (STR_5| (0+32768))
 12304  250F  0021               	movlb	1	; select bank1
 12305  2510  00A0               	movwf	printf@f^(0+128)
 12306  2511  30B0               	movlw	high (STR_5| (0+32768))
 12307  2512  00A1               	movwf	(printf@f^(0+128)+1)
 12308  2513  318D  2594         	fcall	_printf
 12309                           
 12310                           ;main.c: 284: return 0;
 12311  2515  0021               	movlb	1	; select bank1
 12312  2516  01B5               	clrf	?_stop^(0+128)
 12313  2517  01B6               	clrf	(?_stop+1)^(0+128)
 12314  2518  0008               	return
 12315  2519                     __end_of_stop:	
 12316                           
 12317                           	psect	text22
 12318  22CB                     __ptext22:	
 12319 ;; *************** function _startRelMove *****************
 12320 ;; Defined at:
 12321 ;;		line 261 in file "main.c"
 12322 ;; Parameters:    Size  Location     Type
 12323 ;;  steps           2   17[BANK0 ] int 
 12324 ;;  verbose         2   19[BANK0 ] int 
 12325 ;; Auto vars:     Size  Location     Type
 12326 ;;		None
 12327 ;; Return value:  Size  Location     Type
 12328 ;;                  2   17[BANK0 ] int 
 12329 ;; Registers used:
 12330 ;;		wreg, status,2
 12331 ;; Tracked objects:
 12332 ;;		On entry : 0/0
 12333 ;;		On exit  : 0/0
 12334 ;;		Unchanged: 0/0
 12335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12336 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12339 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12340 ;;Total ram usage:        4 bytes
 12341 ;; Hardware stack levels used:    1
 12342 ;; Hardware stack levels required when called:    6
 12343 ;; This function calls:
 12344 ;;		Nothing
 12345 ;; This function is called by:
 12346 ;;		_execCmd
 12347 ;; This function uses a non-reentrant model
 12348 ;;
 12349                           
 12350                           
 12351                           ;psect for function _startRelMove
 12352  22CB                     _startRelMove:	
 12353                           
 12354                           ;main.c: 262: motionType = REL_MOVE;
 12355                           
 12356                           ;incstack = 0
 12357                           ; Regs used in _startRelMove: [wreg+status,2]
 12358  22CB  0020               	movlb	0	; select bank0
 12359  22CC  01D5               	clrf	_motionType
 12360  22CD  0AD5               	incf	_motionType,f
 12361                           
 12362                           ;main.c: 263: remainingSteps = steps;
 12363  22CE  0831               	movf	startRelMove@steps,w
 12364  22CF  0022               	movlb	2	; select bank2
 12365  22D0  00BE               	movwf	_remainingSteps^(0+256)
 12366  22D1  0020               	movlb	0	; select bank0
 12367  22D2  0832               	movf	startRelMove@steps+1,w
 12368  22D3  0022               	movlb	2	; select bank2
 12369  22D4  00BF               	movwf	(_remainingSteps+1)^(0+256)
 12370  22D5  0D89               	rlf	9,f
 12371  22D6  3B89               	subwfb	9,f
 12372  22D7  0989               	comf	9,f
 12373  22D8  00C0               	movwf	(_remainingSteps+2)^(0+256)
 12374  22D9  00C1               	movwf	(_remainingSteps+3)^(0+256)
 12375                           
 12376                           ;main.c: 266: verboseMove = verbose;
 12377  22DA  0020               	movlb	0	; select bank0
 12378  22DB  0834               	movf	startRelMove@verbose+1,w
 12379  22DC  0022               	movlb	2	; select bank2
 12380  22DD  00E1               	movwf	(_verboseMove+1)^(0+256)
 12381  22DE  0020               	movlb	0	; select bank0
 12382  22DF  0833               	movf	startRelMove@verbose,w
 12383  22E0  0022               	movlb	2	; select bank2
 12384  22E1  00E0               	movwf	_verboseMove^(0+256)
 12385                           
 12386                           ;main.c: 268: return 0;
 12387  22E2  0020               	movlb	0	; select bank0
 12388  22E3  01B1               	clrf	?_startRelMove
 12389  22E4  01B2               	clrf	?_startRelMove+1
 12390  22E5  0008               	return
 12391  22E6                     __end_of_startRelMove:	
 12392                           
 12393                           	psect	text23
 12394  21C4                     __ptext23:	
 12395 ;; *************** function _startAbsMove *****************
 12396 ;; Defined at:
 12397 ;;		line 270 in file "main.c"
 12398 ;; Parameters:    Size  Location     Type
 12399 ;;  steps           2   17[BANK0 ] int 
 12400 ;; Auto vars:     Size  Location     Type
 12401 ;;		None
 12402 ;; Return value:  Size  Location     Type
 12403 ;;                  2   17[BANK0 ] int 
 12404 ;; Registers used:
 12405 ;;		wreg, status,2
 12406 ;; Tracked objects:
 12407 ;;		On entry : 0/0
 12408 ;;		On exit  : 0/0
 12409 ;;		Unchanged: 0/0
 12410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12411 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12414 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12415 ;;Total ram usage:        3 bytes
 12416 ;; Hardware stack levels used:    1
 12417 ;; Hardware stack levels required when called:    6
 12418 ;; This function calls:
 12419 ;;		Nothing
 12420 ;; This function is called by:
 12421 ;;		_execCmd
 12422 ;; This function uses a non-reentrant model
 12423 ;;
 12424                           
 12425                           
 12426                           ;psect for function _startAbsMove
 12427  21C4                     _startAbsMove:	
 12428                           
 12429                           ;main.c: 271: motionType = ABS_MOVE;
 12430                           
 12431                           ;incstack = 0
 12432                           ; Regs used in _startAbsMove: [wreg+status,2]
 12433  21C4  3002               	movlw	2
 12434  21C5  0020               	movlb	0	; select bank0
 12435  21C6  00B3               	movwf	??_startAbsMove
 12436  21C7  0833               	movf	??_startAbsMove,w
 12437  21C8  00D5               	movwf	_motionType
 12438                           
 12439                           ;main.c: 272: absCommand = steps;
 12440  21C9  0831               	movf	startAbsMove@steps,w
 12441  21CA  00CE               	movwf	_absCommand
 12442  21CB  0832               	movf	startAbsMove@steps+1,w
 12443  21CC  00CF               	movwf	_absCommand+1
 12444  21CD  0D89               	rlf	9,f
 12445  21CE  3B89               	subwfb	9,f
 12446  21CF  0989               	comf	9,f
 12447  21D0  00D0               	movwf	_absCommand+2
 12448  21D1  00D1               	movwf	_absCommand+3
 12449                           
 12450                           ;main.c: 274: return 0;
 12451  21D2  01B1               	clrf	?_startAbsMove
 12452  21D3  01B2               	clrf	?_startAbsMove+1
 12453  21D4  0008               	return
 12454  21D5                     __end_of_startAbsMove:	
 12455                           
 12456                           	psect	text24
 12457  1330                     __ptext24:	
 12458 ;; *************** function _setMoveMask *****************
 12459 ;; Defined at:
 12460 ;;		line 522 in file "main.c"
 12461 ;; Parameters:    Size  Location     Type
 12462 ;;  probeNum        2   21[BANK1 ] int 
 12463 ;;  onOff           2   23[BANK1 ] int 
 12464 ;; Auto vars:     Size  Location     Type
 12465 ;;		None
 12466 ;; Return value:  Size  Location     Type
 12467 ;;                  2   21[BANK1 ] int 
 12468 ;; Registers used:
 12469 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12470 ;; Tracked objects:
 12471 ;;		On entry : 0/0
 12472 ;;		On exit  : 0/0
 12473 ;;		Unchanged: 0/0
 12474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12475 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12477 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12478 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12479 ;;Total ram usage:        8 bytes
 12480 ;; Hardware stack levels used:    1
 12481 ;; Hardware stack levels required when called:    9
 12482 ;; This function calls:
 12483 ;;		_printf
 12484 ;; This function is called by:
 12485 ;;		_execCmd
 12486 ;; This function uses a non-reentrant model
 12487 ;;
 12488                           
 12489                           
 12490                           ;psect for function _setMoveMask
 12491  1330                     _setMoveMask:	
 12492                           
 12493                           ;main.c: 526: if (probeNum < 24){
 12494                           
 12495                           ;incstack = 0
 12496                           ; Regs used in _setMoveMask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12497  1330  0021               	movlb	1	; select bank1
 12498  1331  0836               	movf	(setMoveMask@probeNum+1)^(0+128),w
 12499  1332  3A80               	xorlw	128
 12500  1333  0020               	movlb	0	; select bank0
 12501  1334  00C9               	movwf	??_setMoveMask
 12502  1335  3080               	movlw	128
 12503  1336  0249               	subwf	??_setMoveMask,w
 12504  1337  1D03               	skipz
 12505  1338  2B3C               	goto	u8835
 12506  1339  3018               	movlw	24
 12507  133A  0021               	movlb	1	; select bank1
 12508  133B  0235               	subwf	setMoveMask@probeNum^(0+128),w
 12509  133C                     u8835:	
 12510  133C  1803               	skipnc
 12511  133D  2B96               	goto	l8844
 12512                           
 12513                           ;main.c: 527: if (onOff)
 12514  133E  0021               	movlb	1	; select bank1
 12515  133F  0837               	movf	setMoveMask@onOff^(0+128),w
 12516  1340  0438               	iorwf	(setMoveMask@onOff+1)^(0+128),w
 12517  1341  1903               	btfsc	3,2
 12518  1342  2B66               	goto	l8836
 12519                           
 12520                           ;main.c: 528: moveMask |= (1UL<<probeNum);
 12521  1343  3001               	movlw	1
 12522  1344  0020               	movlb	0	; select bank0
 12523  1345  00C9               	movwf	??_setMoveMask
 12524  1346  3000               	movlw	0
 12525  1347  00CA               	movwf	??_setMoveMask+1
 12526  1348  3000               	movlw	0
 12527  1349  00CB               	movwf	??_setMoveMask+2
 12528  134A  3000               	movlw	0
 12529  134B  00CC               	movwf	??_setMoveMask+3
 12530  134C  0021               	movlb	1	; select bank1
 12531  134D  0A35               	incf	setMoveMask@probeNum^(0+128),w
 12532  134E  0020               	movlb	0	; select bank0
 12533  134F  2B54               	goto	u8850
 12534  1350                     u8855:	
 12535  1350  35C9               	lslf	??_setMoveMask,f
 12536  1351  0DCA               	rlf	??_setMoveMask+1,f
 12537  1352  0DCB               	rlf	??_setMoveMask+2,f
 12538  1353  0DCC               	rlf	??_setMoveMask+3,f
 12539  1354                     u8850:	
 12540  1354  0B89               	decfsz	9,f
 12541  1355  2B50               	goto	u8855
 12542  1356  0849               	movf	??_setMoveMask,w
 12543  1357  0021               	movlb	1	; select bank1
 12544  1358  04D8               	iorwf	_moveMask^(0+128),f
 12545  1359  0020               	movlb	0	; select bank0
 12546  135A  084A               	movf	??_setMoveMask+1,w
 12547  135B  0021               	movlb	1	; select bank1
 12548  135C  04D9               	iorwf	(_moveMask+1)^(0+128),f
 12549  135D  0020               	movlb	0	; select bank0
 12550  135E  084B               	movf	??_setMoveMask+2,w
 12551  135F  0021               	movlb	1	; select bank1
 12552  1360  04DA               	iorwf	(_moveMask+2)^(0+128),f
 12553  1361  0020               	movlb	0	; select bank0
 12554  1362  084C               	movf	??_setMoveMask+3,w
 12555  1363  0021               	movlb	1	; select bank1
 12556  1364  04DB               	iorwf	(_moveMask+3)^(0+128),f
 12557  1365  2B8C               	goto	l8838
 12558  1366                     l8836:	
 12559                           
 12560                           ;main.c: 529: else
 12561                           ;main.c: 530: moveMask &= ~(1UL<< probeNum);
 12562  1366  3001               	movlw	1
 12563  1367  0020               	movlb	0	; select bank0
 12564  1368  00C9               	movwf	??_setMoveMask
 12565  1369  3000               	movlw	0
 12566  136A  00CA               	movwf	??_setMoveMask+1
 12567  136B  3000               	movlw	0
 12568  136C  00CB               	movwf	??_setMoveMask+2
 12569  136D  3000               	movlw	0
 12570  136E  00CC               	movwf	??_setMoveMask+3
 12571  136F  0021               	movlb	1	; select bank1
 12572  1370  0A35               	incf	setMoveMask@probeNum^(0+128),w
 12573  1371  0020               	movlb	0	; select bank0
 12574  1372  2B77               	goto	u8860
 12575  1373                     u8865:	
 12576  1373  35C9               	lslf	??_setMoveMask,f
 12577  1374  0DCA               	rlf	??_setMoveMask+1,f
 12578  1375  0DCB               	rlf	??_setMoveMask+2,f
 12579  1376  0DCC               	rlf	??_setMoveMask+3,f
 12580  1377                     u8860:	
 12581  1377  0B89               	decfsz	9,f
 12582  1378  2B73               	goto	u8865
 12583  1379  09C9               	comf	??_setMoveMask,f
 12584  137A  09CA               	comf	??_setMoveMask+1,f
 12585  137B  09CB               	comf	??_setMoveMask+2,f
 12586  137C  09CC               	comf	??_setMoveMask+3,f
 12587  137D  0849               	movf	??_setMoveMask,w
 12588  137E  0021               	movlb	1	; select bank1
 12589  137F  05D8               	andwf	_moveMask^(0+128),f
 12590  1380  0020               	movlb	0	; select bank0
 12591  1381  084A               	movf	??_setMoveMask+1,w
 12592  1382  0021               	movlb	1	; select bank1
 12593  1383  05D9               	andwf	(_moveMask+1)^(0+128),f
 12594  1384  0020               	movlb	0	; select bank0
 12595  1385  084B               	movf	??_setMoveMask+2,w
 12596  1386  0021               	movlb	1	; select bank1
 12597  1387  05DA               	andwf	(_moveMask+2)^(0+128),f
 12598  1388  0020               	movlb	0	; select bank0
 12599  1389  084C               	movf	??_setMoveMask+3,w
 12600  138A  0021               	movlb	1	; select bank1
 12601  138B  05DB               	andwf	(_moveMask+3)^(0+128),f
 12602  138C                     l8838:	
 12603                           
 12604                           ;main.c: 531: printf("A\n");
 12605  138C  3038               	movlw	low (STR_5| (0+32768))
 12606  138D  00A0               	movwf	printf@f^(0+128)
 12607  138E  30B0               	movlw	high (STR_5| (0+32768))
 12608  138F  00A1               	movwf	(printf@f^(0+128)+1)
 12609  1390  318D  2594         	fcall	_printf
 12610                           
 12611                           ;main.c: 532: return 0;
 12612  1392  0021               	movlb	1	; select bank1
 12613  1393  01B5               	clrf	?_setMoveMask^(0+128)
 12614  1394  01B6               	clrf	(?_setMoveMask+1)^(0+128)
 12615  1395  0008               	return
 12616  1396                     l8844:	
 12617                           
 12618                           ;main.c: 533: }
 12619                           ;main.c: 534: printf("E\n");
 12620  1396  303B               	movlw	low (STR_12| (0+32768))
 12621  1397  0021               	movlb	1	; select bank1
 12622  1398  00A0               	movwf	printf@f^(0+128)
 12623  1399  30B0               	movlw	high (STR_12| (0+32768))
 12624  139A  00A1               	movwf	(printf@f^(0+128)+1)
 12625  139B  318D  2594         	fcall	_printf
 12626                           
 12627                           ;main.c: 535: return 1;
 12628  139D  3001               	movlw	1
 12629  139E  0021               	movlb	1	; select bank1
 12630  139F  00B5               	movwf	?_setMoveMask^(0+128)
 12631  13A0  3000               	movlw	0
 12632  13A1  00B6               	movwf	(?_setMoveMask^(0+128)+1)
 12633  13A2  0008               	return
 12634  13A3                     __end_of_setMoveMask:	
 12635                           
 12636                           	psect	text25
 12637  235A                     __ptext25:	
 12638 ;; *************** function _setLEDPwr *****************
 12639 ;; Defined at:
 12640 ;;		line 453 in file "main.c"
 12641 ;; Parameters:    Size  Location     Type
 12642 ;;  pwr             2   21[BANK1 ] int 
 12643 ;;  topOrBottom     2   23[BANK1 ] int 
 12644 ;; Auto vars:     Size  Location     Type
 12645 ;;		None
 12646 ;; Return value:  Size  Location     Type
 12647 ;;                  2   21[BANK1 ] int 
 12648 ;; Registers used:
 12649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12650 ;; Tracked objects:
 12651 ;;		On entry : 0/0
 12652 ;;		On exit  : 0/0
 12653 ;;		Unchanged: 0/0
 12654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12655 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12658 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12659 ;;Total ram usage:        4 bytes
 12660 ;; Hardware stack levels used:    1
 12661 ;; Hardware stack levels required when called:    9
 12662 ;; This function calls:
 12663 ;;		_LEDsPwr
 12664 ;;		_printf
 12665 ;; This function is called by:
 12666 ;;		_execCmd
 12667 ;; This function uses a non-reentrant model
 12668 ;;
 12669                           
 12670                           
 12671                           ;psect for function _setLEDPwr
 12672  235A                     _setLEDPwr:	
 12673                           
 12674                           ;main.c: 454: LEDsPwr(pwr, topOrBottom);
 12675                           
 12676                           ;incstack = 0
 12677                           ; Regs used in _setLEDPwr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12678  235A  0021               	movlb	1	; select bank1
 12679  235B  0836               	movf	(setLEDPwr@pwr+1)^(0+128),w
 12680  235C  0020               	movlb	0	; select bank0
 12681  235D  00C5               	movwf	LEDsPwr@pwr+1
 12682  235E  0021               	movlb	1	; select bank1
 12683  235F  0835               	movf	setLEDPwr@pwr^(0+128),w
 12684  2360  0020               	movlb	0	; select bank0
 12685  2361  00C4               	movwf	LEDsPwr@pwr
 12686  2362  0021               	movlb	1	; select bank1
 12687  2363  0838               	movf	(setLEDPwr@topOrBottom+1)^(0+128),w
 12688  2364  0020               	movlb	0	; select bank0
 12689  2365  00C7               	movwf	LEDsPwr@topOrBottom+1
 12690  2366  0021               	movlb	1	; select bank1
 12691  2367  0837               	movf	setLEDPwr@topOrBottom^(0+128),w
 12692  2368  0020               	movlb	0	; select bank0
 12693  2369  00C6               	movwf	LEDsPwr@topOrBottom
 12694  236A  319F  272F  31A3   	fcall	_LEDsPwr
 12695                           
 12696                           ;main.c: 455: printf("A\n");
 12697  236D  3038               	movlw	low (STR_5| (0+32768))
 12698  236E  0021               	movlb	1	; select bank1
 12699  236F  00A0               	movwf	printf@f^(0+128)
 12700  2370  30B0               	movlw	high (STR_5| (0+32768))
 12701  2371  00A1               	movwf	(printf@f^(0+128)+1)
 12702  2372  318D  2594         	fcall	_printf
 12703                           
 12704                           ;main.c: 456: return 0;
 12705  2374  0021               	movlb	1	; select bank1
 12706  2375  01B5               	clrf	?_setLEDPwr^(0+128)
 12707  2376  01B6               	clrf	(?_setLEDPwr+1)^(0+128)
 12708  2377  0008               	return
 12709  2378                     __end_of_setLEDPwr:	
 12710                           
 12711                           	psect	text26
 12712  1F2F                     __ptext26:	
 12713 ;; *************** function _LEDsPwr *****************
 12714 ;; Defined at:
 12715 ;;		line 12 in file "LEDcomm.c"
 12716 ;; Parameters:    Size  Location     Type
 12717 ;;  pwr             2   36[BANK0 ] int 
 12718 ;;  topOrBottom     2   38[BANK0 ] int 
 12719 ;; Auto vars:     Size  Location     Type
 12720 ;;  pwrAll          4    0[BANK1 ] unsigned long 
 12721 ;; Return value:  Size  Location     Type
 12722 ;;                  1    wreg      void 
 12723 ;; Registers used:
 12724 ;;		wreg, status,2, status,0, pclath, cstack
 12725 ;; Tracked objects:
 12726 ;;		On entry : 0/0
 12727 ;;		On exit  : 0/0
 12728 ;;		Unchanged: 0/0
 12729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12730 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12731 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12732 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12733 ;;      Totals:         0      10       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12734 ;;Total ram usage:       14 bytes
 12735 ;; Hardware stack levels used:    1
 12736 ;; Hardware stack levels required when called:    8
 12737 ;; This function calls:
 12738 ;;		_send_2length_2bytes_IK
 12739 ;; This function is called by:
 12740 ;;		_main_initialize
 12741 ;;		_setLEDPwr
 12742 ;; This function uses a non-reentrant model
 12743 ;;
 12744                           
 12745                           
 12746                           ;psect for function _LEDsPwr
 12747  1F2F                     _LEDsPwr:	
 12748                           
 12749                           ;LEDcomm.c: 13: pwr = (pwr>63) ? 63 : pwr;
 12750                           
 12751                           ;incstack = 0
 12752                           ; Regs used in _LEDsPwr: [wreg+status,2+status,0+pclath+cstack]
 12753  1F2F  0020               	movlb	0	; select bank0
 12754  1F30  0845               	movf	LEDsPwr@pwr+1,w
 12755  1F31  3A80               	xorlw	128
 12756  1F32  00C8               	movwf	??_LEDsPwr
 12757  1F33  3080               	movlw	128
 12758  1F34  0248               	subwf	??_LEDsPwr,w
 12759  1F35  1D03               	skipz
 12760  1F36  2F39               	goto	u8275
 12761  1F37  3040               	movlw	64
 12762  1F38  0244               	subwf	LEDsPwr@pwr,w
 12763  1F39                     u8275:	
 12764  1F39  1C03               	btfss	3,0
 12765  1F3A  2F40               	goto	l208
 12766  1F3B  303F               	movlw	63
 12767  1F3C  0020               	movlb	0	; select bank0
 12768  1F3D  00C4               	movwf	LEDsPwr@pwr
 12769  1F3E  3000               	movlw	0
 12770  1F3F  00C5               	movwf	LEDsPwr@pwr+1
 12771  1F40                     l208:	
 12772                           
 12773                           ;LEDcomm.c: 14: unsigned long pwrAll = pwr | (pwr<<6) | (pwr<<12);
 12774  1F40  0020               	movlb	0	; select bank0
 12775  1F41  0845               	movf	LEDsPwr@pwr+1,w
 12776  1F42  00C9               	movwf	??_LEDsPwr+1
 12777  1F43  0844               	movf	LEDsPwr@pwr,w
 12778  1F44  00C8               	movwf	??_LEDsPwr
 12779  1F45  0E48               	swapf	??_LEDsPwr,w
 12780  1F46  39F0               	andlw	240
 12781  1F47  00C9               	movwf	??_LEDsPwr+1
 12782  1F48  01C8               	clrf	??_LEDsPwr
 12783  1F49  0845               	movf	LEDsPwr@pwr+1,w
 12784  1F4A  00CB               	movwf	??_LEDsPwr+3
 12785  1F4B  0844               	movf	LEDsPwr@pwr,w
 12786  1F4C  00CA               	movwf	??_LEDsPwr+2
 12787  1F4D  3006               	movlw	6
 12788  1F4E                     u8285:	
 12789  1F4E  35CA               	lslf	??_LEDsPwr+2,f
 12790  1F4F  0DCB               	rlf	??_LEDsPwr+3,f
 12791  1F50  0B89               	decfsz	9,f
 12792  1F51  2F4E               	goto	u8285
 12793  1F52  0848               	movf	??_LEDsPwr,w
 12794  1F53  044A               	iorwf	??_LEDsPwr+2,w
 12795  1F54  00CC               	movwf	??_LEDsPwr+4
 12796  1F55  0849               	movf	??_LEDsPwr+1,w
 12797  1F56  044B               	iorwf	??_LEDsPwr+3,w
 12798  1F57  00CD               	movwf	??_LEDsPwr+5
 12799  1F58  0844               	movf	LEDsPwr@pwr,w
 12800  1F59  044C               	iorwf	??_LEDsPwr+4,w
 12801  1F5A  0021               	movlb	1	; select bank1
 12802  1F5B  00A0               	movwf	LEDsPwr@pwrAll^(0+128)
 12803  1F5C  0020               	movlb	0	; select bank0
 12804  1F5D  0845               	movf	LEDsPwr@pwr+1,w
 12805  1F5E  044D               	iorwf	??_LEDsPwr+5,w
 12806  1F5F  0021               	movlb	1	; select bank1
 12807  1F60  00A1               	movwf	(LEDsPwr@pwrAll+1)^(0+128)
 12808  1F61  01A2               	clrf	(LEDsPwr@pwrAll^(0+128)+2)
 12809  1F62  1BA1               	btfsc	(LEDsPwr@pwrAll^(0+128)+1),7
 12810  1F63  03A2               	decf	(LEDsPwr@pwrAll+2)^(0+128),f
 12811  1F64  0822               	movf	(LEDsPwr@pwrAll^(0+128)+2),w
 12812  1F65  00A3               	movwf	(LEDsPwr@pwrAll+3)^(0+128)
 12813                           
 12814                           ;LEDcomm.c: 15: send_2length_2bytes_IK((unsigned int)((pwrAll>>16) & 0xFFFF),(unsigned i
      +                          nt)pwrAll, 7, topOrBottom);
 12815  1F66  0820               	movf	LEDsPwr@pwrAll^(0+128),w
 12816  1F67  0020               	movlb	0	; select bank0
 12817  1F68  00C8               	movwf	??_LEDsPwr
 12818  1F69  0021               	movlb	1	; select bank1
 12819  1F6A  0821               	movf	(LEDsPwr@pwrAll+1)^(0+128),w
 12820  1F6B  0020               	movlb	0	; select bank0
 12821  1F6C  00C9               	movwf	??_LEDsPwr+1
 12822  1F6D  0021               	movlb	1	; select bank1
 12823  1F6E  0822               	movf	(LEDsPwr@pwrAll+2)^(0+128),w
 12824  1F6F  0020               	movlb	0	; select bank0
 12825  1F70  00CA               	movwf	??_LEDsPwr+2
 12826  1F71  0021               	movlb	1	; select bank1
 12827  1F72  0823               	movf	(LEDsPwr@pwrAll+3)^(0+128),w
 12828  1F73  0020               	movlb	0	; select bank0
 12829  1F74  00CB               	movwf	??_LEDsPwr+3
 12830  1F75  3010               	movlw	16
 12831  1F76                     u8295:	
 12832  1F76  36CB               	lsrf	??_LEDsPwr+3,f
 12833  1F77  0CCA               	rrf	??_LEDsPwr+2,f
 12834  1F78  0CC9               	rrf	??_LEDsPwr+1,f
 12835  1F79  0CC8               	rrf	??_LEDsPwr,f
 12836  1F7A  0B89               	decfsz	9,f
 12837  1F7B  2F76               	goto	u8295
 12838  1F7C  0849               	movf	??_LEDsPwr+1,w
 12839  1F7D  00BD               	movwf	send_2length_2bytes_IK@data1+1
 12840  1F7E  0848               	movf	??_LEDsPwr,w
 12841  1F7F  00BC               	movwf	send_2length_2bytes_IK@data1
 12842  1F80  0021               	movlb	1	; select bank1
 12843  1F81  0821               	movf	(LEDsPwr@pwrAll+1)^(0+128),w
 12844  1F82  0020               	movlb	0	; select bank0
 12845  1F83  00BF               	movwf	send_2length_2bytes_IK@data2+1
 12846  1F84  0021               	movlb	1	; select bank1
 12847  1F85  0820               	movf	LEDsPwr@pwrAll^(0+128),w
 12848  1F86  0020               	movlb	0	; select bank0
 12849  1F87  00BE               	movwf	send_2length_2bytes_IK@data2
 12850  1F88  3007               	movlw	7
 12851  1F89  00CC               	movwf	??_LEDsPwr+4
 12852  1F8A  084C               	movf	??_LEDsPwr+4,w
 12853  1F8B  00C0               	movwf	send_2length_2bytes_IK@latch_start
 12854  1F8C  0847               	movf	LEDsPwr@topOrBottom+1,w
 12855  1F8D  00C2               	movwf	send_2length_2bytes_IK@topOrBottom+1
 12856  1F8E  0846               	movf	LEDsPwr@topOrBottom,w
 12857  1F8F  00C1               	movwf	send_2length_2bytes_IK@topOrBottom
 12858  1F90  31A2  2266         	fcall	_send_2length_2bytes_IK
 12859  1F92  0008               	return
 12860  1F93                     __end_of_LEDsPwr:	
 12861                           
 12862                           	psect	text27
 12863  233C                     __ptext27:	
 12864 ;; *************** function _setLEDBrightnessRange *****************
 12865 ;; Defined at:
 12866 ;;		line 445 in file "main.c"
 12867 ;; Parameters:    Size  Location     Type
 12868 ;;  r               2   21[BANK1 ] int 
 12869 ;;  tOB             2   23[BANK1 ] int 
 12870 ;; Auto vars:     Size  Location     Type
 12871 ;;		None
 12872 ;; Return value:  Size  Location     Type
 12873 ;;                  2   21[BANK1 ] int 
 12874 ;; Registers used:
 12875 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12876 ;; Tracked objects:
 12877 ;;		On entry : 0/0
 12878 ;;		On exit  : 0/0
 12879 ;;		Unchanged: 0/0
 12880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12881 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12884 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12885 ;;Total ram usage:        4 bytes
 12886 ;; Hardware stack levels used:    1
 12887 ;; Hardware stack levels required when called:    9
 12888 ;; This function calls:
 12889 ;;		_LED_setBrightnessRange
 12890 ;;		_printf
 12891 ;; This function is called by:
 12892 ;;		_execCmd
 12893 ;; This function uses a non-reentrant model
 12894 ;;
 12895                           
 12896                           
 12897                           ;psect for function _setLEDBrightnessRange
 12898  233C                     _setLEDBrightnessRange:	
 12899                           
 12900                           ;main.c: 446: LED_setBrightnessRange(r, tOB);
 12901                           
 12902                           ;incstack = 0
 12903                           ; Regs used in _setLEDBrightnessRange: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12904  233C  0021               	movlb	1	; select bank1
 12905  233D  0836               	movf	(setLEDBrightnessRange@r+1)^(0+128),w
 12906  233E  0020               	movlb	0	; select bank0
 12907  233F  00C5               	movwf	LED_setBrightnessRange@range+1
 12908  2340  0021               	movlb	1	; select bank1
 12909  2341  0835               	movf	setLEDBrightnessRange@r^(0+128),w
 12910  2342  0020               	movlb	0	; select bank0
 12911  2343  00C4               	movwf	LED_setBrightnessRange@range
 12912  2344  0021               	movlb	1	; select bank1
 12913  2345  0838               	movf	(setLEDBrightnessRange@tOB+1)^(0+128),w
 12914  2346  0020               	movlb	0	; select bank0
 12915  2347  00C7               	movwf	LED_setBrightnessRange@topOrBottom+1
 12916  2348  0021               	movlb	1	; select bank1
 12917  2349  0837               	movf	setLEDBrightnessRange@tOB^(0+128),w
 12918  234A  0020               	movlb	0	; select bank0
 12919  234B  00C6               	movwf	LED_setBrightnessRange@topOrBottom
 12920  234C  3187  2768  31A3   	fcall	_LED_setBrightnessRange
 12921                           
 12922                           ;main.c: 447: printf("A\n");
 12923  234F  3038               	movlw	low (STR_5| (0+32768))
 12924  2350  0021               	movlb	1	; select bank1
 12925  2351  00A0               	movwf	printf@f^(0+128)
 12926  2352  30B0               	movlw	high (STR_5| (0+32768))
 12927  2353  00A1               	movwf	(printf@f^(0+128)+1)
 12928  2354  318D  2594         	fcall	_printf
 12929                           
 12930                           ;main.c: 448: return 0;
 12931  2356  0021               	movlb	1	; select bank1
 12932  2357  01B5               	clrf	?_setLEDBrightnessRange^(0+128)
 12933  2358  01B6               	clrf	(?_setLEDBrightnessRange+1)^(0+128)
 12934  2359  0008               	return
 12935  235A                     __end_of_setLEDBrightnessRange:	
 12936                           
 12937                           	psect	text28
 12938  1675                     __ptext28:	
 12939 ;; *************** function _setHeaterToggle *****************
 12940 ;; Defined at:
 12941 ;;		line 462 in file "main.c"
 12942 ;; Parameters:    Size  Location     Type
 12943 ;;  num             2   21[BANK1 ] int 
 12944 ;;  topOrB          2   23[BANK1 ] int 
 12945 ;; Auto vars:     Size  Location     Type
 12946 ;;		None
 12947 ;; Return value:  Size  Location     Type
 12948 ;;                  2   21[BANK1 ] int 
 12949 ;; Registers used:
 12950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12951 ;; Tracked objects:
 12952 ;;		On entry : 0/0
 12953 ;;		On exit  : 0/0
 12954 ;;		Unchanged: 0/0
 12955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12956 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12958 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12959 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12960 ;;Total ram usage:        8 bytes
 12961 ;; Hardware stack levels used:    1
 12962 ;; Hardware stack levels required when called:    9
 12963 ;; This function calls:
 12964 ;;		_LEDsOn
 12965 ;;		_printf
 12966 ;; This function is called by:
 12967 ;;		_execCmd
 12968 ;; This function uses a non-reentrant model
 12969 ;;
 12970                           
 12971                           
 12972                           ;psect for function _setHeaterToggle
 12973  1675                     _setHeaterToggle:	
 12974                           
 12975                           ;incstack = 0
 12976                           ; Regs used in _setHeaterToggle: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12977                           ;main.c: 463: do { LATCbits.LATC1 = 0; } while(0);
 12978  1675  0022               	movlb	2	; select bank2
 12979  1676  108E               	bcf	14,1	;volatile
 12980                           
 12981                           ;main.c: 464: if(topOrB == 1){
 12982  1677  0021               	movlb	1	; select bank1
 12983  1678  0337               	decf	setHeaterToggle@topOrB^(0+128),w
 12984  1679  0438               	iorwf	(setHeaterToggle@topOrB+1)^(0+128),w
 12985  167A  1D03               	btfss	3,2
 12986  167B  2EAC               	goto	l8774
 12987                           
 12988                           ;main.c: 465: demoHeaterToggle_top ^= 1UL << num;
 12989  167C  3001               	movlw	1
 12990  167D  00B9               	movwf	??_setHeaterToggle^(0+128)
 12991  167E  3000               	movlw	0
 12992  167F  00BA               	movwf	(??_setHeaterToggle^(0+128)+1)
 12993  1680  3000               	movlw	0
 12994  1681  00BB               	movwf	(??_setHeaterToggle^(0+128)+2)
 12995  1682  3000               	movlw	0
 12996  1683  00BC               	movwf	(??_setHeaterToggle^(0+128)+3)
 12997  1684  0A35               	incf	setHeaterToggle@num^(0+128),w
 12998  1685  2E8A               	goto	u8710
 12999  1686                     u8715:	
 13000  1686  35B9               	lslf	??_setHeaterToggle^(0+128),f
 13001  1687  0DBA               	rlf	(??_setHeaterToggle^(0+128)+1),f
 13002  1688  0DBB               	rlf	(??_setHeaterToggle^(0+128)+2),f
 13003  1689  0DBC               	rlf	(??_setHeaterToggle^(0+128)+3),f
 13004  168A                     u8710:	
 13005  168A  0B89               	decfsz	9,f
 13006  168B  2E86               	goto	u8715
 13007  168C  0839               	movf	??_setHeaterToggle^(0+128),w
 13008  168D  0022               	movlb	2	; select bank2
 13009  168E  06C2               	xorwf	_demoHeaterToggle_top^(0+256),f
 13010  168F  0021               	movlb	1	; select bank1
 13011  1690  083A               	movf	(??_setHeaterToggle+1)^(0+128),w
 13012  1691  0022               	movlb	2	; select bank2
 13013  1692  06C3               	xorwf	(_demoHeaterToggle_top+1)^(0+256),f
 13014  1693  0021               	movlb	1	; select bank1
 13015  1694  083B               	movf	(??_setHeaterToggle+2)^(0+128),w
 13016  1695  0022               	movlb	2	; select bank2
 13017  1696  06C4               	xorwf	(_demoHeaterToggle_top+2)^(0+256),f
 13018  1697  0021               	movlb	1	; select bank1
 13019  1698  083C               	movf	(??_setHeaterToggle+3)^(0+128),w
 13020  1699  0022               	movlb	2	; select bank2
 13021  169A  06C5               	xorwf	(_demoHeaterToggle_top+3)^(0+256),f
 13022                           
 13023                           ;main.c: 466: LEDsOn(demoHeaterToggle_top, 1);
 13024  169B  0845               	movf	(_demoHeaterToggle_top+3)^(0+256),w
 13025  169C  0020               	movlb	0	; select bank0
 13026  169D  00C7               	movwf	LEDsOn@LEDpins+3
 13027  169E  0022               	movlb	2	; select bank2
 13028  169F  0844               	movf	(_demoHeaterToggle_top+2)^(0+256),w
 13029  16A0  0020               	movlb	0	; select bank0
 13030  16A1  00C6               	movwf	LEDsOn@LEDpins+2
 13031  16A2  0022               	movlb	2	; select bank2
 13032  16A3  0843               	movf	(_demoHeaterToggle_top+1)^(0+256),w
 13033  16A4  0020               	movlb	0	; select bank0
 13034  16A5  00C5               	movwf	LEDsOn@LEDpins+1
 13035  16A6  0022               	movlb	2	; select bank2
 13036  16A7  0842               	movf	_demoHeaterToggle_top^(0+256),w
 13037  16A8  0020               	movlb	0	; select bank0
 13038  16A9  00C4               	movwf	LEDsOn@LEDpins
 13039  16AA  3001               	movlw	1
 13040  16AB  2EE1               	goto	L26
 13041  16AC                     l8774:	
 13042                           ;main.c: 467: }
 13043                           
 13044                           
 13045                           ;main.c: 468: else if (topOrB == 2){
 13046  16AC  3002               	movlw	2
 13047  16AD  0021               	movlb	1	; select bank1
 13048  16AE  0637               	xorwf	setHeaterToggle@topOrB^(0+128),w
 13049  16AF  0438               	iorwf	(setHeaterToggle@topOrB+1)^(0+128),w
 13050  16B0  1D03               	btfss	3,2
 13051  16B1  2EE7               	goto	l8780
 13052                           
 13053                           ;main.c: 469: demoHeaterToggle_bot ^= 1UL << num;
 13054  16B2  3001               	movlw	1
 13055  16B3  00B9               	movwf	??_setHeaterToggle^(0+128)
 13056  16B4  3000               	movlw	0
 13057  16B5  00BA               	movwf	(??_setHeaterToggle^(0+128)+1)
 13058  16B6  3000               	movlw	0
 13059  16B7  00BB               	movwf	(??_setHeaterToggle^(0+128)+2)
 13060  16B8  3000               	movlw	0
 13061  16B9  00BC               	movwf	(??_setHeaterToggle^(0+128)+3)
 13062  16BA  0A35               	incf	setHeaterToggle@num^(0+128),w
 13063  16BB  2EC0               	goto	u8730
 13064  16BC                     u8735:	
 13065  16BC  35B9               	lslf	??_setHeaterToggle^(0+128),f
 13066  16BD  0DBA               	rlf	(??_setHeaterToggle^(0+128)+1),f
 13067  16BE  0DBB               	rlf	(??_setHeaterToggle^(0+128)+2),f
 13068  16BF  0DBC               	rlf	(??_setHeaterToggle^(0+128)+3),f
 13069  16C0                     u8730:	
 13070  16C0  0B89               	decfsz	9,f
 13071  16C1  2EBC               	goto	u8735
 13072  16C2  0839               	movf	??_setHeaterToggle^(0+128),w
 13073  16C3  0023               	movlb	3	; select bank3
 13074  16C4  06B0               	xorwf	_demoHeaterToggle_bot^(0+384),f
 13075  16C5  0021               	movlb	1	; select bank1
 13076  16C6  083A               	movf	(??_setHeaterToggle+1)^(0+128),w
 13077  16C7  0023               	movlb	3	; select bank3
 13078  16C8  06B1               	xorwf	(_demoHeaterToggle_bot+1)^(0+384),f
 13079  16C9  0021               	movlb	1	; select bank1
 13080  16CA  083B               	movf	(??_setHeaterToggle+2)^(0+128),w
 13081  16CB  0023               	movlb	3	; select bank3
 13082  16CC  06B2               	xorwf	(_demoHeaterToggle_bot+2)^(0+384),f
 13083  16CD  0021               	movlb	1	; select bank1
 13084  16CE  083C               	movf	(??_setHeaterToggle+3)^(0+128),w
 13085  16CF  0023               	movlb	3	; select bank3
 13086  16D0  06B3               	xorwf	(_demoHeaterToggle_bot+3)^(0+384),f
 13087                           
 13088                           ;main.c: 470: LEDsOn(demoHeaterToggle_bot, 2);
 13089  16D1  0833               	movf	(_demoHeaterToggle_bot+3)^(0+384),w
 13090  16D2  0020               	movlb	0	; select bank0
 13091  16D3  00C7               	movwf	LEDsOn@LEDpins+3
 13092  16D4  0023               	movlb	3	; select bank3
 13093  16D5  0832               	movf	(_demoHeaterToggle_bot+2)^(0+384),w
 13094  16D6  0020               	movlb	0	; select bank0
 13095  16D7  00C6               	movwf	LEDsOn@LEDpins+2
 13096  16D8  0023               	movlb	3	; select bank3
 13097  16D9  0831               	movf	(_demoHeaterToggle_bot+1)^(0+384),w
 13098  16DA  0020               	movlb	0	; select bank0
 13099  16DB  00C5               	movwf	LEDsOn@LEDpins+1
 13100  16DC  0023               	movlb	3	; select bank3
 13101  16DD  0830               	movf	_demoHeaterToggle_bot^(0+384),w
 13102  16DE  0020               	movlb	0	; select bank0
 13103  16DF  00C4               	movwf	LEDsOn@LEDpins
 13104  16E0  3002               	movlw	2
 13105  16E1                     L26:	
 13106  16E1  00C8               	movwf	LEDsOn@topOrBottom
 13107  16E2  3000               	movlw	0
 13108  16E3  00C9               	movwf	LEDsOn@topOrBottom+1
 13109  16E4  31A3  23F8  3196   	fcall	_LEDsOn
 13110  16E7                     l8780:	
 13111                           
 13112                           ;main.c: 471: }
 13113                           ;main.c: 473: printf("A\n");
 13114  16E7  3038               	movlw	low (STR_5| (0+32768))
 13115  16E8  0021               	movlb	1	; select bank1
 13116  16E9  00A0               	movwf	printf@f^(0+128)
 13117  16EA  30B0               	movlw	high (STR_5| (0+32768))
 13118  16EB  00A1               	movwf	(printf@f^(0+128)+1)
 13119  16EC  318D  2594         	fcall	_printf
 13120                           
 13121                           ;main.c: 474: return 0;
 13122  16EE  0021               	movlb	1	; select bank1
 13123  16EF  01B5               	clrf	?_setHeaterToggle^(0+128)
 13124  16F0  01B6               	clrf	(?_setHeaterToggle+1)^(0+128)
 13125  16F1  0008               	return
 13126  16F2                     __end_of_setHeaterToggle:	
 13127                           
 13128                           	psect	text29
 13129  2196                     __ptext29:	
 13130 ;; *************** function _setHeaterPreTime *****************
 13131 ;; Defined at:
 13132 ;;		line 415 in file "main.c"
 13133 ;; Parameters:    Size  Location     Type
 13134 ;;  t               2   21[BANK1 ] int 
 13135 ;; Auto vars:     Size  Location     Type
 13136 ;;		None
 13137 ;; Return value:  Size  Location     Type
 13138 ;;                  2   21[BANK1 ] int 
 13139 ;; Registers used:
 13140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13141 ;; Tracked objects:
 13142 ;;		On entry : 0/0
 13143 ;;		On exit  : 0/0
 13144 ;;		Unchanged: 0/0
 13145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13146 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13149 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13150 ;;Total ram usage:        2 bytes
 13151 ;; Hardware stack levels used:    1
 13152 ;; Hardware stack levels required when called:    9
 13153 ;; This function calls:
 13154 ;;		_printf
 13155 ;; This function is called by:
 13156 ;;		_execCmd
 13157 ;; This function uses a non-reentrant model
 13158 ;;
 13159                           
 13160                           
 13161                           ;psect for function _setHeaterPreTime
 13162  2196                     _setHeaterPreTime:	
 13163                           
 13164                           ;main.c: 416: heater_pre_time_ms = t;
 13165                           
 13166                           ;incstack = 0
 13167                           ; Regs used in _setHeaterPreTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13168  2196  0021               	movlb	1	; select bank1
 13169  2197  0836               	movf	(setHeaterPreTime@t+1)^(0+128),w
 13170  2198  00ED               	movwf	(_heater_pre_time_ms+1)^(0+128)
 13171  2199  0835               	movf	setHeaterPreTime@t^(0+128),w
 13172  219A  00EC               	movwf	_heater_pre_time_ms^(0+128)
 13173                           
 13174                           ;main.c: 418: printf("A\n");
 13175  219B  3038               	movlw	low (STR_5| (0+32768))
 13176  219C  00A0               	movwf	printf@f^(0+128)
 13177  219D  30B0               	movlw	high (STR_5| (0+32768))
 13178  219E  00A1               	movwf	(printf@f^(0+128)+1)
 13179  219F  318D  2594         	fcall	_printf
 13180                           
 13181                           ;main.c: 419: return 0;
 13182  21A1  0021               	movlb	1	; select bank1
 13183  21A2  01B5               	clrf	?_setHeaterPreTime^(0+128)
 13184  21A3  01B6               	clrf	(?_setHeaterPreTime+1)^(0+128)
 13185  21A4  0008               	return
 13186  21A5                     __end_of_setHeaterPreTime:	
 13187                           
 13188                           	psect	text30
 13189  21FA                     __ptext30:	
 13190 ;; *************** function _setHeaterPostTime *****************
 13191 ;; Defined at:
 13192 ;;		line 421 in file "main.c"
 13193 ;; Parameters:    Size  Location     Type
 13194 ;;  t               2   21[BANK1 ] int 
 13195 ;; Auto vars:     Size  Location     Type
 13196 ;;		None
 13197 ;; Return value:  Size  Location     Type
 13198 ;;                  2   21[BANK1 ] int 
 13199 ;; Registers used:
 13200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13201 ;; Tracked objects:
 13202 ;;		On entry : 0/0
 13203 ;;		On exit  : 0/0
 13204 ;;		Unchanged: 0/0
 13205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13206 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13209 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13210 ;;Total ram usage:        2 bytes
 13211 ;; Hardware stack levels used:    1
 13212 ;; Hardware stack levels required when called:    9
 13213 ;; This function calls:
 13214 ;;		_printf
 13215 ;; This function is called by:
 13216 ;;		_execCmd
 13217 ;; This function uses a non-reentrant model
 13218 ;;
 13219                           
 13220                           
 13221                           ;psect for function _setHeaterPostTime
 13222  21FA                     _setHeaterPostTime:	
 13223                           
 13224                           ;main.c: 422: heater_post_time_ms = t;
 13225                           
 13226                           ;incstack = 0
 13227                           ; Regs used in _setHeaterPostTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13228  21FA  0021               	movlb	1	; select bank1
 13229  21FB  0836               	movf	(setHeaterPostTime@t+1)^(0+128),w
 13230  21FC  0022               	movlb	2	; select bank2
 13231  21FD  00EB               	movwf	(_heater_post_time_ms+1)^(0+256)
 13232  21FE  0021               	movlb	1	; select bank1
 13233  21FF  0835               	movf	setHeaterPostTime@t^(0+128),w
 13234  2200  0022               	movlb	2	; select bank2
 13235  2201  00EA               	movwf	_heater_post_time_ms^(0+256)
 13236                           
 13237                           ;main.c: 424: printf("A\n");
 13238  2202  3038               	movlw	low (STR_5| (0+32768))
 13239  2203  0021               	movlb	1	; select bank1
 13240  2204  00A0               	movwf	printf@f^(0+128)
 13241  2205  30B0               	movlw	high (STR_5| (0+32768))
 13242  2206  00A1               	movwf	(printf@f^(0+128)+1)
 13243  2207  318D  2594         	fcall	_printf
 13244                           
 13245                           ;main.c: 425: return 0;
 13246  2209  0021               	movlb	1	; select bank1
 13247  220A  01B5               	clrf	?_setHeaterPostTime^(0+128)
 13248  220B  01B6               	clrf	(?_setHeaterPostTime+1)^(0+128)
 13249  220C  0008               	return
 13250  220D                     __end_of_setHeaterPostTime:	
 13251                           
 13252                           	psect	text31
 13253  1C7F                     __ptext31:	
 13254 ;; *************** function _setH2OnTime *****************
 13255 ;; Defined at:
 13256 ;;		line 436 in file "main.c"
 13257 ;; Parameters:    Size  Location     Type
 13258 ;;  t               2   37[BANK1 ] int 
 13259 ;; Auto vars:     Size  Location     Type
 13260 ;;		None
 13261 ;; Return value:  Size  Location     Type
 13262 ;;                  2   37[BANK1 ] int 
 13263 ;; Registers used:
 13264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13265 ;; Tracked objects:
 13266 ;;		On entry : 0/0
 13267 ;;		On exit  : 0/0
 13268 ;;		Unchanged: 0/0
 13269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13270 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13273 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13274 ;;Total ram usage:        2 bytes
 13275 ;; Hardware stack levels used:    1
 13276 ;; Hardware stack levels required when called:    9
 13277 ;; This function calls:
 13278 ;;		_TMR0_Load8bitPeriod
 13279 ;;		___awtoft
 13280 ;;		___ftadd
 13281 ;;		___ftmul
 13282 ;;		___fttol
 13283 ;;		_printf
 13284 ;; This function is called by:
 13285 ;;		_execCmd
 13286 ;; This function uses a non-reentrant model
 13287 ;;
 13288                           
 13289                           
 13290                           ;psect for function _setH2OnTime
 13291  1C7F                     _setH2OnTime:	
 13292                           
 13293                           ;main.c: 437: TMR0_Load8bitPeriod((t*TMR0_RANGE)-1);
 13294                           
 13295                           ;incstack = 0
 13296                           ; Regs used in _setH2OnTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13297  1C7F  0021               	movlb	1	; select bank1
 13298  1C80  0846               	movf	(setH2OnTime@t+1)^(0+128),w
 13299  1C81  0020               	movlb	0	; select bank0
 13300  1C82  00C1               	movwf	___awtoft@c+1
 13301  1C83  0021               	movlb	1	; select bank1
 13302  1C84  0845               	movf	setH2OnTime@t^(0+128),w
 13303  1C85  0020               	movlb	0	; select bank0
 13304  1C86  00C0               	movwf	___awtoft@c
 13305  1C87  31A4  2419  319C   	fcall	___awtoft
 13306  1C8A  0020               	movlb	0	; select bank0
 13307  1C8B  0840               	movf	?___awtoft,w
 13308  1C8C  00C9               	movwf	___ftmul@f2
 13309  1C8D  0841               	movf	?___awtoft+1,w
 13310  1C8E  00CA               	movwf	___ftmul@f2+1
 13311  1C8F  0842               	movf	?___awtoft+2,w
 13312  1C90  00CB               	movwf	___ftmul@f2+2
 13313  1C91  3035               	movlw	low (_TMR0_RANGE| (0+32768))
 13314  1C92  0084               	movwf	4
 13315  1C93  30B0               	movlw	high (_TMR0_RANGE| (0+32768))
 13316  1C94  0085               	movwf	5
 13317  1C95  3F00               	moviw [0]fsr0
 13318  1C96  00C6               	movwf	___ftmul@f1
 13319  1C97  3F01               	moviw [1]fsr0
 13320  1C98  00C7               	movwf	___ftmul@f1+1
 13321  1C99  3F02               	moviw [2]fsr0
 13322  1C9A  00C8               	movwf	___ftmul@f1+2
 13323  1C9B  318B  23A7  319C   	fcall	___ftmul
 13324  1C9E  0020               	movlb	0	; select bank0
 13325  1C9F  0846               	movf	?___ftmul,w
 13326  1CA0  0021               	movlb	1	; select bank1
 13327  1CA1  00AD               	movwf	___ftadd@f2^(0+128)
 13328  1CA2  0020               	movlb	0	; select bank0
 13329  1CA3  0847               	movf	?___ftmul+1,w
 13330  1CA4  0021               	movlb	1	; select bank1
 13331  1CA5  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 13332  1CA6  0020               	movlb	0	; select bank0
 13333  1CA7  0848               	movf	?___ftmul+2,w
 13334  1CA8  0021               	movlb	1	; select bank1
 13335  1CA9  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 13336  1CAA  3000               	movlw	0
 13337  1CAB  00AA               	movwf	___ftadd@f1^(0+128)
 13338  1CAC  3080               	movlw	128
 13339  1CAD  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 13340  1CAE  30BF               	movlw	191
 13341  1CAF  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 13342  1CB0  318C  2490  319C   	fcall	___ftadd
 13343  1CB3  0021               	movlb	1	; select bank1
 13344  1CB4  082A               	movf	?___ftadd^(0+128),w
 13345  1CB5  00B7               	movwf	___fttol@f1^(0+128)
 13346  1CB6  082B               	movf	(?___ftadd+1)^(0+128),w
 13347  1CB7  00B8               	movwf	(___fttol@f1+1)^(0+128)
 13348  1CB8  082C               	movf	(?___ftadd+2)^(0+128),w
 13349  1CB9  00B9               	movwf	(___fttol@f1+2)^(0+128)
 13350  1CBA  3197  2779  319C   	fcall	___fttol
 13351  1CBD  0021               	movlb	1	; select bank1
 13352  1CBE  0837               	movf	?___fttol^(0+128),w
 13353  1CBF  31AF  27C4  319C   	fcall	_TMR0_Load8bitPeriod
 13354                           
 13355                           ;main.c: 438: printf("A\n");
 13356  1CC2  3038               	movlw	low (STR_5| (0+32768))
 13357  1CC3  0021               	movlb	1	; select bank1
 13358  1CC4  00A0               	movwf	printf@f^(0+128)
 13359  1CC5  30B0               	movlw	high (STR_5| (0+32768))
 13360  1CC6  00A1               	movwf	(printf@f^(0+128)+1)
 13361  1CC7  318D  2594         	fcall	_printf
 13362                           
 13363                           ;main.c: 439: return 0;
 13364  1CC9  0021               	movlb	1	; select bank1
 13365  1CCA  01C5               	clrf	?_setH2OnTime^(0+128)
 13366  1CCB  01C6               	clrf	(?_setH2OnTime+1)^(0+128)
 13367  1CCC  0008               	return
 13368  1CCD                     __end_of_setH2OnTime:	
 13369                           
 13370                           	psect	text32
 13371  1C31                     __ptext32:	
 13372 ;; *************** function _setH1OffTime *****************
 13373 ;; Defined at:
 13374 ;;		line 429 in file "main.c"
 13375 ;; Parameters:    Size  Location     Type
 13376 ;;  t               2   37[BANK1 ] int 
 13377 ;; Auto vars:     Size  Location     Type
 13378 ;;		None
 13379 ;; Return value:  Size  Location     Type
 13380 ;;                  2   37[BANK1 ] int 
 13381 ;; Registers used:
 13382 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13383 ;; Tracked objects:
 13384 ;;		On entry : 0/0
 13385 ;;		On exit  : 0/0
 13386 ;;		Unchanged: 0/0
 13387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13388 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13391 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13392 ;;Total ram usage:        2 bytes
 13393 ;; Hardware stack levels used:    1
 13394 ;; Hardware stack levels required when called:    9
 13395 ;; This function calls:
 13396 ;;		_TMR2_LoadPeriodRegister
 13397 ;;		___awtoft
 13398 ;;		___ftadd
 13399 ;;		___ftmul
 13400 ;;		___fttol
 13401 ;;		_printf
 13402 ;; This function is called by:
 13403 ;;		_execCmd
 13404 ;; This function uses a non-reentrant model
 13405 ;;
 13406                           
 13407                           
 13408                           ;psect for function _setH1OffTime
 13409  1C31                     _setH1OffTime:	
 13410                           
 13411                           ;main.c: 430: TMR2_LoadPeriodRegister((t*TMR2_RANGE)-1);
 13412                           
 13413                           ;incstack = 0
 13414                           ; Regs used in _setH1OffTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13415  1C31  0021               	movlb	1	; select bank1
 13416  1C32  0846               	movf	(setH1OffTime@t+1)^(0+128),w
 13417  1C33  0020               	movlb	0	; select bank0
 13418  1C34  00C1               	movwf	___awtoft@c+1
 13419  1C35  0021               	movlb	1	; select bank1
 13420  1C36  0845               	movf	setH1OffTime@t^(0+128),w
 13421  1C37  0020               	movlb	0	; select bank0
 13422  1C38  00C0               	movwf	___awtoft@c
 13423  1C39  31A4  2419  319C   	fcall	___awtoft
 13424  1C3C  0020               	movlb	0	; select bank0
 13425  1C3D  0840               	movf	?___awtoft,w
 13426  1C3E  00C9               	movwf	___ftmul@f2
 13427  1C3F  0841               	movf	?___awtoft+1,w
 13428  1C40  00CA               	movwf	___ftmul@f2+1
 13429  1C41  0842               	movf	?___awtoft+2,w
 13430  1C42  00CB               	movwf	___ftmul@f2+2
 13431  1C43  3032               	movlw	low (_TMR2_RANGE| (0+32768))
 13432  1C44  0084               	movwf	4
 13433  1C45  30B0               	movlw	high (_TMR2_RANGE| (0+32768))
 13434  1C46  0085               	movwf	5
 13435  1C47  3F00               	moviw [0]fsr0
 13436  1C48  00C6               	movwf	___ftmul@f1
 13437  1C49  3F01               	moviw [1]fsr0
 13438  1C4A  00C7               	movwf	___ftmul@f1+1
 13439  1C4B  3F02               	moviw [2]fsr0
 13440  1C4C  00C8               	movwf	___ftmul@f1+2
 13441  1C4D  318B  23A7  319C   	fcall	___ftmul
 13442  1C50  0020               	movlb	0	; select bank0
 13443  1C51  0846               	movf	?___ftmul,w
 13444  1C52  0021               	movlb	1	; select bank1
 13445  1C53  00AD               	movwf	___ftadd@f2^(0+128)
 13446  1C54  0020               	movlb	0	; select bank0
 13447  1C55  0847               	movf	?___ftmul+1,w
 13448  1C56  0021               	movlb	1	; select bank1
 13449  1C57  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 13450  1C58  0020               	movlb	0	; select bank0
 13451  1C59  0848               	movf	?___ftmul+2,w
 13452  1C5A  0021               	movlb	1	; select bank1
 13453  1C5B  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 13454  1C5C  3000               	movlw	0
 13455  1C5D  00AA               	movwf	___ftadd@f1^(0+128)
 13456  1C5E  3080               	movlw	128
 13457  1C5F  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 13458  1C60  30BF               	movlw	191
 13459  1C61  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 13460  1C62  318C  2490  319C   	fcall	___ftadd
 13461  1C65  0021               	movlb	1	; select bank1
 13462  1C66  082A               	movf	?___ftadd^(0+128),w
 13463  1C67  00B7               	movwf	___fttol@f1^(0+128)
 13464  1C68  082B               	movf	(?___ftadd+1)^(0+128),w
 13465  1C69  00B8               	movwf	(___fttol@f1+1)^(0+128)
 13466  1C6A  082C               	movf	(?___ftadd+2)^(0+128),w
 13467  1C6B  00B9               	movwf	(___fttol@f1+2)^(0+128)
 13468  1C6C  3197  2779  319C   	fcall	___fttol
 13469  1C6F  0021               	movlb	1	; select bank1
 13470  1C70  0837               	movf	?___fttol^(0+128),w
 13471  1C71  31AF  27C9  319C   	fcall	_TMR2_LoadPeriodRegister
 13472                           
 13473                           ;main.c: 431: printf("A\n");
 13474  1C74  3038               	movlw	low (STR_5| (0+32768))
 13475  1C75  0021               	movlb	1	; select bank1
 13476  1C76  00A0               	movwf	printf@f^(0+128)
 13477  1C77  30B0               	movlw	high (STR_5| (0+32768))
 13478  1C78  00A1               	movwf	(printf@f^(0+128)+1)
 13479  1C79  318D  2594         	fcall	_printf
 13480                           
 13481                           ;main.c: 432: return 0;
 13482  1C7B  0021               	movlb	1	; select bank1
 13483  1C7C  01C5               	clrf	?_setH1OffTime^(0+128)
 13484  1C7D  01C6               	clrf	(?_setH1OffTime+1)^(0+128)
 13485  1C7E  0008               	return
 13486  1C7F                     __end_of_setH1OffTime:	
 13487                           
 13488                           	psect	text33
 13489  2FC9                     __ptext33:	
 13490 ;; *************** function _TMR2_LoadPeriodRegister *****************
 13491 ;; Defined at:
 13492 ;;		line 112 in file "mcc_generated_files/tmr2.c"
 13493 ;; Parameters:    Size  Location     Type
 13494 ;;  periodVal       1    wreg     unsigned char 
 13495 ;; Auto vars:     Size  Location     Type
 13496 ;;  periodVal       1   17[BANK0 ] unsigned char 
 13497 ;; Return value:  Size  Location     Type
 13498 ;;                  1    wreg      void 
 13499 ;; Registers used:
 13500 ;;		wreg
 13501 ;; Tracked objects:
 13502 ;;		On entry : 0/0
 13503 ;;		On exit  : 0/0
 13504 ;;		Unchanged: 0/0
 13505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13509 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13510 ;;Total ram usage:        1 bytes
 13511 ;; Hardware stack levels used:    1
 13512 ;; Hardware stack levels required when called:    6
 13513 ;; This function calls:
 13514 ;;		Nothing
 13515 ;; This function is called by:
 13516 ;;		_main_initialize
 13517 ;;		_setH1OffTime
 13518 ;; This function uses a non-reentrant model
 13519 ;;
 13520                           
 13521                           
 13522                           ;psect for function _TMR2_LoadPeriodRegister
 13523  2FC9                     _TMR2_LoadPeriodRegister:	
 13524                           
 13525                           ;incstack = 0
 13526                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
 13527                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
 13528  2FC9  0020               	movlb	0	; select bank0
 13529  2FCA  00B1               	movwf	TMR2_LoadPeriodRegister@periodVal
 13530                           
 13531                           ;tmr2.c: 114: PR2 = periodVal;
 13532  2FCB  0831               	movf	TMR2_LoadPeriodRegister@periodVal,w
 13533  2FCC  009E               	movwf	30	;volatile
 13534  2FCD  0008               	return
 13535  2FCE                     __end_of_TMR2_LoadPeriodRegister:	
 13536                           
 13537                           	psect	text34
 13538  1ED0                     __ptext34:	
 13539 ;; *************** function _setDrvPiezoOnTime *****************
 13540 ;; Defined at:
 13541 ;;		line 404 in file "main.c"
 13542 ;; Parameters:    Size  Location     Type
 13543 ;;  t               2   37[BANK1 ] int 
 13544 ;; Auto vars:     Size  Location     Type
 13545 ;;		None
 13546 ;; Return value:  Size  Location     Type
 13547 ;;                  2   37[BANK1 ] int 
 13548 ;; Registers used:
 13549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13550 ;; Tracked objects:
 13551 ;;		On entry : 0/0
 13552 ;;		On exit  : 0/0
 13553 ;;		Unchanged: 0/0
 13554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13555 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13557 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13558 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13559 ;;Total ram usage:        4 bytes
 13560 ;; Hardware stack levels used:    1
 13561 ;; Hardware stack levels required when called:    9
 13562 ;; This function calls:
 13563 ;;		_TMR0_Load8bitPeriod
 13564 ;;		___awtoft
 13565 ;;		___ftadd
 13566 ;;		___ftmul
 13567 ;;		___fttol
 13568 ;;		_printf
 13569 ;; This function is called by:
 13570 ;;		_execCmd
 13571 ;; This function uses a non-reentrant model
 13572 ;;
 13573                           
 13574                           
 13575                           ;psect for function _setDrvPiezoOnTime
 13576  1ED0                     _setDrvPiezoOnTime:	
 13577                           
 13578                           ;main.c: 405: piezo_on_time_ms = t;
 13579                           
 13580                           ;incstack = 0
 13581                           ; Regs used in _setDrvPiezoOnTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13582  1ED0  0021               	movlb	1	; select bank1
 13583  1ED1  0846               	movf	(setDrvPiezoOnTime@t+1)^(0+128),w
 13584  1ED2  00EB               	movwf	(_piezo_on_time_ms+1)^(0+128)
 13585  1ED3  0845               	movf	setDrvPiezoOnTime@t^(0+128),w
 13586  1ED4  00EA               	movwf	_piezo_on_time_ms^(0+128)
 13587                           
 13588                           ;main.c: 406: TMR0_Load8bitPeriod(((piezo_on_time_ms-heater_pre_time_ms)*TMR0_RANGE)-1);
 13589  1ED5  096C               	comf	_heater_pre_time_ms^(0+128),w
 13590  1ED6  0020               	movlb	0	; select bank0
 13591  1ED7  00CC               	movwf	??_setDrvPiezoOnTime
 13592  1ED8  0021               	movlb	1	; select bank1
 13593  1ED9  096D               	comf	(_heater_pre_time_ms+1)^(0+128),w
 13594  1EDA  0020               	movlb	0	; select bank0
 13595  1EDB  00CD               	movwf	??_setDrvPiezoOnTime+1
 13596  1EDC  0ACC               	incf	??_setDrvPiezoOnTime,f
 13597  1EDD  1903               	skipnz
 13598  1EDE  0ACD               	incf	??_setDrvPiezoOnTime+1,f
 13599  1EDF  0021               	movlb	1	; select bank1
 13600  1EE0  086A               	movf	_piezo_on_time_ms^(0+128),w
 13601  1EE1  0020               	movlb	0	; select bank0
 13602  1EE2  074C               	addwf	??_setDrvPiezoOnTime,w
 13603  1EE3  00C0               	movwf	___awtoft@c
 13604  1EE4  0021               	movlb	1	; select bank1
 13605  1EE5  086B               	movf	(_piezo_on_time_ms+1)^(0+128),w
 13606  1EE6  0020               	movlb	0	; select bank0
 13607  1EE7  3D4D               	addwfc	??_setDrvPiezoOnTime+1,w
 13608  1EE8  00C1               	movwf	___awtoft@c+1
 13609  1EE9  31A4  2419  319E   	fcall	___awtoft
 13610  1EEC  0020               	movlb	0	; select bank0
 13611  1EED  0840               	movf	?___awtoft,w
 13612  1EEE  00C9               	movwf	___ftmul@f2
 13613  1EEF  0841               	movf	?___awtoft+1,w
 13614  1EF0  00CA               	movwf	___ftmul@f2+1
 13615  1EF1  0842               	movf	?___awtoft+2,w
 13616  1EF2  00CB               	movwf	___ftmul@f2+2
 13617  1EF3  3035               	movlw	low (_TMR0_RANGE| (0+32768))
 13618  1EF4  0084               	movwf	4
 13619  1EF5  30B0               	movlw	high (_TMR0_RANGE| (0+32768))
 13620  1EF6  0085               	movwf	5
 13621  1EF7  3F00               	moviw [0]fsr0
 13622  1EF8  00C6               	movwf	___ftmul@f1
 13623  1EF9  3F01               	moviw [1]fsr0
 13624  1EFA  00C7               	movwf	___ftmul@f1+1
 13625  1EFB  3F02               	moviw [2]fsr0
 13626  1EFC  00C8               	movwf	___ftmul@f1+2
 13627  1EFD  318B  23A7  319E   	fcall	___ftmul
 13628  1F00  0020               	movlb	0	; select bank0
 13629  1F01  0846               	movf	?___ftmul,w
 13630  1F02  0021               	movlb	1	; select bank1
 13631  1F03  00AD               	movwf	___ftadd@f2^(0+128)
 13632  1F04  0020               	movlb	0	; select bank0
 13633  1F05  0847               	movf	?___ftmul+1,w
 13634  1F06  0021               	movlb	1	; select bank1
 13635  1F07  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 13636  1F08  0020               	movlb	0	; select bank0
 13637  1F09  0848               	movf	?___ftmul+2,w
 13638  1F0A  0021               	movlb	1	; select bank1
 13639  1F0B  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 13640  1F0C  3000               	movlw	0
 13641  1F0D  00AA               	movwf	___ftadd@f1^(0+128)
 13642  1F0E  3080               	movlw	128
 13643  1F0F  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 13644  1F10  30BF               	movlw	191
 13645  1F11  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 13646  1F12  318C  2490  319E   	fcall	___ftadd
 13647  1F15  0021               	movlb	1	; select bank1
 13648  1F16  082A               	movf	?___ftadd^(0+128),w
 13649  1F17  00B7               	movwf	___fttol@f1^(0+128)
 13650  1F18  082B               	movf	(?___ftadd+1)^(0+128),w
 13651  1F19  00B8               	movwf	(___fttol@f1+1)^(0+128)
 13652  1F1A  082C               	movf	(?___ftadd+2)^(0+128),w
 13653  1F1B  00B9               	movwf	(___fttol@f1+2)^(0+128)
 13654  1F1C  3197  2779  319E   	fcall	___fttol
 13655  1F1F  0021               	movlb	1	; select bank1
 13656  1F20  0837               	movf	?___fttol^(0+128),w
 13657  1F21  31AF  27C4  319E   	fcall	_TMR0_Load8bitPeriod
 13658                           
 13659                           ;main.c: 407: printf("A\n");
 13660  1F24  3038               	movlw	low (STR_5| (0+32768))
 13661  1F25  0021               	movlb	1	; select bank1
 13662  1F26  00A0               	movwf	printf@f^(0+128)
 13663  1F27  30B0               	movlw	high (STR_5| (0+32768))
 13664  1F28  00A1               	movwf	(printf@f^(0+128)+1)
 13665  1F29  318D  2594         	fcall	_printf
 13666                           
 13667                           ;main.c: 408: return 0;
 13668  1F2B  0021               	movlb	1	; select bank1
 13669  1F2C  01C5               	clrf	?_setDrvPiezoOnTime^(0+128)
 13670  1F2D  01C6               	clrf	(?_setDrvPiezoOnTime+1)^(0+128)
 13671  1F2E  0008               	return
 13672  1F2F                     __end_of_setDrvPiezoOnTime:	
 13673                           
 13674                           	psect	text35
 13675  0BA7                     __ptext35:	
 13676 ;; *************** function ___ftmul *****************
 13677 ;; Defined at:
 13678 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 13679 ;; Parameters:    Size  Location     Type
 13680 ;;  f1              3   38[BANK0 ] float 
 13681 ;;  f2              3   41[BANK0 ] float 
 13682 ;; Auto vars:     Size  Location     Type
 13683 ;;  f3_as_produc    3    5[BANK1 ] unsigned um
 13684 ;;  sign            1    9[BANK1 ] unsigned char 
 13685 ;;  cntr            1    8[BANK1 ] unsigned char 
 13686 ;;  exp             1    4[BANK1 ] unsigned char 
 13687 ;; Return value:  Size  Location     Type
 13688 ;;                  3   38[BANK0 ] float 
 13689 ;; Registers used:
 13690 ;;		wreg, status,2, status,0, pclath, cstack
 13691 ;; Tracked objects:
 13692 ;;		On entry : 0/0
 13693 ;;		On exit  : 0/0
 13694 ;;		Unchanged: 0/0
 13695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13696 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13697 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13698 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13699 ;;      Totals:         0       6      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13700 ;;Total ram usage:       16 bytes
 13701 ;; Hardware stack levels used:    1
 13702 ;; Hardware stack levels required when called:    7
 13703 ;; This function calls:
 13704 ;;		___ftpack
 13705 ;; This function is called by:
 13706 ;;		_main_initialize
 13707 ;;		_setDrvPiezoOnTime
 13708 ;;		_setH1OffTime
 13709 ;;		_setH2OnTime
 13710 ;;		_drv_outputSine
 13711 ;; This function uses a non-reentrant model
 13712 ;;
 13713                           
 13714                           
 13715                           ;psect for function ___ftmul
 13716  0BA7                     ___ftmul:	
 13717                           
 13718                           ;incstack = 0
 13719                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 13720  0BA7  0020               	movlb	0	; select bank0
 13721  0BA8  0846               	movf	___ftmul@f1,w
 13722  0BA9  0021               	movlb	1	; select bank1
 13723  0BAA  00A0               	movwf	??___ftmul^(0+128)
 13724  0BAB  0020               	movlb	0	; select bank0
 13725  0BAC  0847               	movf	___ftmul@f1+1,w
 13726  0BAD  0021               	movlb	1	; select bank1
 13727  0BAE  00A1               	movwf	(??___ftmul^(0+128)+1)
 13728  0BAF  0020               	movlb	0	; select bank0
 13729  0BB0  0848               	movf	___ftmul@f1+2,w
 13730  0BB1  0021               	movlb	1	; select bank1
 13731  0BB2  00A2               	movwf	(??___ftmul^(0+128)+2)
 13732  0BB3  1003               	clrc
 13733  0BB4  0D21               	rlf	(??___ftmul^(0+128)+1),w
 13734  0BB5  0D22               	rlf	(??___ftmul^(0+128)+2),w
 13735  0BB6  00A3               	movwf	(??___ftmul+3)^(0+128)
 13736  0BB7  0823               	movf	(??___ftmul+3)^(0+128),w
 13737  0BB8  00A4               	movwf	___ftmul@exp^(0+128)
 13738  0BB9  0824               	movf	___ftmul@exp^(0+128),w
 13739  0BBA  1D03               	btfss	3,2
 13740  0BBB  2BC4               	goto	l8450
 13741  0BBC  3000               	movlw	0
 13742  0BBD  0020               	movlb	0	; select bank0
 13743  0BBE  00C6               	movwf	?___ftmul
 13744  0BBF  3000               	movlw	0
 13745  0BC0  00C7               	movwf	?___ftmul+1
 13746  0BC1  3000               	movlw	0
 13747  0BC2  00C8               	movwf	?___ftmul+2
 13748  0BC3  0008               	return
 13749  0BC4                     l8450:	
 13750  0BC4  0020               	movlb	0	; select bank0
 13751  0BC5  0849               	movf	___ftmul@f2,w
 13752  0BC6  0021               	movlb	1	; select bank1
 13753  0BC7  00A0               	movwf	??___ftmul^(0+128)
 13754  0BC8  0020               	movlb	0	; select bank0
 13755  0BC9  084A               	movf	___ftmul@f2+1,w
 13756  0BCA  0021               	movlb	1	; select bank1
 13757  0BCB  00A1               	movwf	(??___ftmul^(0+128)+1)
 13758  0BCC  0020               	movlb	0	; select bank0
 13759  0BCD  084B               	movf	___ftmul@f2+2,w
 13760  0BCE  0021               	movlb	1	; select bank1
 13761  0BCF  00A2               	movwf	(??___ftmul^(0+128)+2)
 13762  0BD0  1003               	clrc
 13763  0BD1  0D21               	rlf	(??___ftmul^(0+128)+1),w
 13764  0BD2  0D22               	rlf	(??___ftmul^(0+128)+2),w
 13765  0BD3  00A3               	movwf	(??___ftmul+3)^(0+128)
 13766  0BD4  0823               	movf	(??___ftmul+3)^(0+128),w
 13767  0BD5  00A9               	movwf	___ftmul@sign^(0+128)
 13768  0BD6  0829               	movf	___ftmul@sign^(0+128),w
 13769  0BD7  1D03               	btfss	3,2
 13770  0BD8  2BE1               	goto	l8456
 13771  0BD9  3000               	movlw	0
 13772  0BDA  0020               	movlb	0	; select bank0
 13773  0BDB  00C6               	movwf	?___ftmul
 13774  0BDC  3000               	movlw	0
 13775  0BDD  00C7               	movwf	?___ftmul+1
 13776  0BDE  3000               	movlw	0
 13777  0BDF  00C8               	movwf	?___ftmul+2
 13778  0BE0  0008               	return
 13779  0BE1                     l8456:	
 13780  0BE1  0021               	movlb	1	; select bank1
 13781  0BE2  0829               	movf	___ftmul@sign^(0+128),w
 13782  0BE3  3E7B               	addlw	123
 13783  0BE4  00A0               	movwf	??___ftmul^(0+128)
 13784  0BE5  0820               	movf	??___ftmul^(0+128),w
 13785  0BE6  07A4               	addwf	___ftmul@exp^(0+128),f
 13786  0BE7  0020               	movlb	0	; select bank0
 13787  0BE8  0846               	movf	___ftmul@f1,w
 13788  0BE9  0021               	movlb	1	; select bank1
 13789  0BEA  00A0               	movwf	??___ftmul^(0+128)
 13790  0BEB  0020               	movlb	0	; select bank0
 13791  0BEC  0847               	movf	___ftmul@f1+1,w
 13792  0BED  0021               	movlb	1	; select bank1
 13793  0BEE  00A1               	movwf	(??___ftmul^(0+128)+1)
 13794  0BEF  0020               	movlb	0	; select bank0
 13795  0BF0  0848               	movf	___ftmul@f1+2,w
 13796  0BF1  0021               	movlb	1	; select bank1
 13797  0BF2  00A2               	movwf	(??___ftmul^(0+128)+2)
 13798  0BF3  3010               	movlw	16
 13799  0BF4                     u8525:	
 13800  0BF4  36A2               	lsrf	(??___ftmul^(0+128)+2),f
 13801  0BF5  0CA1               	rrf	(??___ftmul^(0+128)+1),f
 13802  0BF6  0CA0               	rrf	??___ftmul^(0+128),f
 13803  0BF7  0B89               	decfsz	9,f
 13804  0BF8  2BF4               	goto	u8525
 13805  0BF9  0820               	movf	??___ftmul^(0+128),w
 13806  0BFA  00A3               	movwf	(??___ftmul+3)^(0+128)
 13807  0BFB  0823               	movf	(??___ftmul+3)^(0+128),w
 13808  0BFC  00A9               	movwf	___ftmul@sign^(0+128)
 13809  0BFD  0020               	movlb	0	; select bank0
 13810  0BFE  0849               	movf	___ftmul@f2,w
 13811  0BFF  0021               	movlb	1	; select bank1
 13812  0C00  00A0               	movwf	??___ftmul^(0+128)
 13813  0C01  0020               	movlb	0	; select bank0
 13814  0C02  084A               	movf	___ftmul@f2+1,w
 13815  0C03  0021               	movlb	1	; select bank1
 13816  0C04  00A1               	movwf	(??___ftmul^(0+128)+1)
 13817  0C05  0020               	movlb	0	; select bank0
 13818  0C06  084B               	movf	___ftmul@f2+2,w
 13819  0C07  0021               	movlb	1	; select bank1
 13820  0C08  00A2               	movwf	(??___ftmul^(0+128)+2)
 13821  0C09  3010               	movlw	16
 13822  0C0A                     u8535:	
 13823  0C0A  36A2               	lsrf	(??___ftmul^(0+128)+2),f
 13824  0C0B  0CA1               	rrf	(??___ftmul^(0+128)+1),f
 13825  0C0C  0CA0               	rrf	??___ftmul^(0+128),f
 13826  0C0D  0B89               	decfsz	9,f
 13827  0C0E  2C0A               	goto	u8535
 13828  0C0F  0820               	movf	??___ftmul^(0+128),w
 13829  0C10  00A3               	movwf	(??___ftmul+3)^(0+128)
 13830  0C11  0823               	movf	(??___ftmul+3)^(0+128),w
 13831  0C12  06A9               	xorwf	___ftmul@sign^(0+128),f
 13832  0C13  3080               	movlw	128
 13833  0C14  00A0               	movwf	??___ftmul^(0+128)
 13834  0C15  0820               	movf	??___ftmul^(0+128),w
 13835  0C16  05A9               	andwf	___ftmul@sign^(0+128),f
 13836  0C17  0020               	movlb	0	; select bank0
 13837  0C18  17C7               	bsf	___ftmul@f1+1,7
 13838  0C19  17CA               	bsf	___ftmul@f2+1,7
 13839  0C1A  30FF               	movlw	255
 13840  0C1B  05C9               	andwf	___ftmul@f2,f
 13841  0C1C  30FF               	movlw	255
 13842  0C1D  05CA               	andwf	___ftmul@f2+1,f
 13843  0C1E  3000               	movlw	0
 13844  0C1F  05CB               	andwf	___ftmul@f2+2,f
 13845  0C20  3000               	movlw	0
 13846  0C21  0021               	movlb	1	; select bank1
 13847  0C22  00A5               	movwf	___ftmul@f3_as_product^(0+128)
 13848  0C23  3000               	movlw	0
 13849  0C24  00A6               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 13850  0C25  3000               	movlw	0
 13851  0C26  00A7               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 13852  0C27  3007               	movlw	7
 13853  0C28  00A0               	movwf	??___ftmul^(0+128)
 13854  0C29  0820               	movf	??___ftmul^(0+128),w
 13855  0C2A  00A8               	movwf	___ftmul@cntr^(0+128)
 13856  0C2B                     l8468:	
 13857  0C2B  0020               	movlb	0	; select bank0
 13858  0C2C  1C46               	btfss	___ftmul@f1,0
 13859  0C2D  2C39               	goto	l8472
 13860  0C2E  0849               	movf	___ftmul@f2,w
 13861  0C2F  0021               	movlb	1	; select bank1
 13862  0C30  07A5               	addwf	___ftmul@f3_as_product^(0+128),f
 13863  0C31  0020               	movlb	0	; select bank0
 13864  0C32  084A               	movf	___ftmul@f2+1,w
 13865  0C33  0021               	movlb	1	; select bank1
 13866  0C34  3DA6               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 13867  0C35  0020               	movlb	0	; select bank0
 13868  0C36  084B               	movf	___ftmul@f2+2,w
 13869  0C37  0021               	movlb	1	; select bank1
 13870  0C38  3DA7               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 13871  0C39                     l8472:	
 13872  0C39  3001               	movlw	1
 13873  0C3A                     u8555:	
 13874  0C3A  0020               	movlb	0	; select bank0
 13875  0C3B  36C8               	lsrf	___ftmul@f1+2,f
 13876  0C3C  0CC7               	rrf	___ftmul@f1+1,f
 13877  0C3D  0CC6               	rrf	___ftmul@f1,f
 13878  0C3E  0B89               	decfsz	9,f
 13879  0C3F  2C3A               	goto	u8555
 13880  0C40  3001               	movlw	1
 13881  0C41                     u8565:	
 13882  0C41  35C9               	lslf	___ftmul@f2,f
 13883  0C42  0DCA               	rlf	___ftmul@f2+1,f
 13884  0C43  0DCB               	rlf	___ftmul@f2+2,f
 13885  0C44  0B89               	decfsz	9,f
 13886  0C45  2C41               	goto	u8565
 13887  0C46  3001               	movlw	1
 13888  0C47  0021               	movlb	1	; select bank1
 13889  0C48  02A8               	subwf	___ftmul@cntr^(0+128),f
 13890  0C49  1D03               	btfss	3,2
 13891  0C4A  2C2B               	goto	l8468
 13892  0C4B  3009               	movlw	9
 13893  0C4C  00A0               	movwf	??___ftmul^(0+128)
 13894  0C4D  0820               	movf	??___ftmul^(0+128),w
 13895  0C4E  00A8               	movwf	___ftmul@cntr^(0+128)
 13896  0C4F                     l8480:	
 13897  0C4F  0020               	movlb	0	; select bank0
 13898  0C50  1C46               	btfss	___ftmul@f1,0
 13899  0C51  2C5D               	goto	l8484
 13900  0C52  0849               	movf	___ftmul@f2,w
 13901  0C53  0021               	movlb	1	; select bank1
 13902  0C54  07A5               	addwf	___ftmul@f3_as_product^(0+128),f
 13903  0C55  0020               	movlb	0	; select bank0
 13904  0C56  084A               	movf	___ftmul@f2+1,w
 13905  0C57  0021               	movlb	1	; select bank1
 13906  0C58  3DA6               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 13907  0C59  0020               	movlb	0	; select bank0
 13908  0C5A  084B               	movf	___ftmul@f2+2,w
 13909  0C5B  0021               	movlb	1	; select bank1
 13910  0C5C  3DA7               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 13911  0C5D                     l8484:	
 13912  0C5D  3001               	movlw	1
 13913  0C5E                     u8595:	
 13914  0C5E  0020               	movlb	0	; select bank0
 13915  0C5F  36C8               	lsrf	___ftmul@f1+2,f
 13916  0C60  0CC7               	rrf	___ftmul@f1+1,f
 13917  0C61  0CC6               	rrf	___ftmul@f1,f
 13918  0C62  0B89               	decfsz	9,f
 13919  0C63  2C5E               	goto	u8595
 13920  0C64  3001               	movlw	1
 13921  0C65                     u8605:	
 13922  0C65  0021               	movlb	1	; select bank1
 13923  0C66  36A7               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 13924  0C67  0CA6               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 13925  0C68  0CA5               	rrf	___ftmul@f3_as_product^(0+128),f
 13926  0C69  0B89               	decfsz	9,f
 13927  0C6A  2C65               	goto	u8605
 13928  0C6B  3001               	movlw	1
 13929  0C6C  02A8               	subwf	___ftmul@cntr^(0+128),f
 13930  0C6D  1D03               	btfss	3,2
 13931  0C6E  2C4F               	goto	l8480
 13932  0C6F  0825               	movf	___ftmul@f3_as_product^(0+128),w
 13933  0C70  0020               	movlb	0	; select bank0
 13934  0C71  00B1               	movwf	___ftpack@arg
 13935  0C72  0021               	movlb	1	; select bank1
 13936  0C73  0826               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 13937  0C74  0020               	movlb	0	; select bank0
 13938  0C75  00B2               	movwf	___ftpack@arg+1
 13939  0C76  0021               	movlb	1	; select bank1
 13940  0C77  0827               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 13941  0C78  0020               	movlb	0	; select bank0
 13942  0C79  00B3               	movwf	___ftpack@arg+2
 13943  0C7A  0021               	movlb	1	; select bank1
 13944  0C7B  0824               	movf	___ftmul@exp^(0+128),w
 13945  0C7C  00A0               	movwf	??___ftmul^(0+128)
 13946  0C7D  0820               	movf	??___ftmul^(0+128),w
 13947  0C7E  0020               	movlb	0	; select bank0
 13948  0C7F  00B4               	movwf	___ftpack@exp
 13949  0C80  0021               	movlb	1	; select bank1
 13950  0C81  0829               	movf	___ftmul@sign^(0+128),w
 13951  0C82  00A1               	movwf	(??___ftmul+1)^(0+128)
 13952  0C83  0821               	movf	(??___ftmul+1)^(0+128),w
 13953  0C84  0020               	movlb	0	; select bank0
 13954  0C85  00B5               	movwf	___ftpack@sign
 13955  0C86  3191  21E8         	fcall	___ftpack
 13956  0C88  0020               	movlb	0	; select bank0
 13957  0C89  0831               	movf	?___ftpack,w
 13958  0C8A  00C6               	movwf	?___ftmul
 13959  0C8B  0832               	movf	?___ftpack+1,w
 13960  0C8C  00C7               	movwf	?___ftmul+1
 13961  0C8D  0833               	movf	?___ftpack+2,w
 13962  0C8E  00C8               	movwf	?___ftmul+2
 13963  0C8F  0008               	return
 13964  0C90                     __end_of___ftmul:	
 13965                           
 13966                           	psect	text36
 13967  2FC4                     __ptext36:	
 13968 ;; *************** function _TMR0_Load8bitPeriod *****************
 13969 ;; Defined at:
 13970 ;;		line 113 in file "mcc_generated_files/tmr0.c"
 13971 ;; Parameters:    Size  Location     Type
 13972 ;;  periodVal       1    wreg     unsigned char 
 13973 ;; Auto vars:     Size  Location     Type
 13974 ;;  periodVal       1   17[BANK0 ] unsigned char 
 13975 ;; Return value:  Size  Location     Type
 13976 ;;                  1    wreg      void 
 13977 ;; Registers used:
 13978 ;;		wreg
 13979 ;; Tracked objects:
 13980 ;;		On entry : 0/0
 13981 ;;		On exit  : 0/0
 13982 ;;		Unchanged: 0/0
 13983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13985 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13987 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13988 ;;Total ram usage:        1 bytes
 13989 ;; Hardware stack levels used:    1
 13990 ;; Hardware stack levels required when called:    6
 13991 ;; This function calls:
 13992 ;;		Nothing
 13993 ;; This function is called by:
 13994 ;;		_main_initialize
 13995 ;;		_setDrvPiezoOnTime
 13996 ;;		_setH2OnTime
 13997 ;; This function uses a non-reentrant model
 13998 ;;
 13999                           
 14000                           
 14001                           ;psect for function _TMR0_Load8bitPeriod
 14002  2FC4                     _TMR0_Load8bitPeriod:	
 14003                           
 14004                           ;incstack = 0
 14005                           ; Regs used in _TMR0_Load8bitPeriod: [wreg]
 14006                           ;TMR0_Load8bitPeriod@periodVal stored from wreg
 14007  2FC4  0020               	movlb	0	; select bank0
 14008  2FC5  00B1               	movwf	TMR0_Load8bitPeriod@periodVal
 14009                           
 14010                           ;tmr0.c: 116: TMR0H = periodVal;
 14011  2FC6  0831               	movf	TMR0_Load8bitPeriod@periodVal,w
 14012  2FC7  0096               	movwf	22	;volatile
 14013  2FC8  0008               	return
 14014  2FC9                     __end_of_TMR0_Load8bitPeriod:	
 14015                           
 14016                           	psect	text37
 14017  2378                     __ptext37:	
 14018 ;; *************** function _setDrvPeak *****************
 14019 ;; Defined at:
 14020 ;;		line 381 in file "main.c"
 14021 ;; Parameters:    Size  Location     Type
 14022 ;;  pk              2   53[BANK1 ] int 
 14023 ;; Auto vars:     Size  Location     Type
 14024 ;;		None
 14025 ;; Return value:  Size  Location     Type
 14026 ;;                  2   53[BANK1 ] int 
 14027 ;; Registers used:
 14028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14029 ;; Tracked objects:
 14030 ;;		On entry : 0/0
 14031 ;;		On exit  : 0/0
 14032 ;;		Unchanged: 0/0
 14033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14034 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14037 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14038 ;;Total ram usage:        2 bytes
 14039 ;; Hardware stack levels used:    1
 14040 ;; Hardware stack levels required when called:   11
 14041 ;; This function calls:
 14042 ;;		_calcDownstroke
 14043 ;;		_calcUpstroke
 14044 ;;		_printf
 14045 ;; This function is called by:
 14046 ;;		_execCmd
 14047 ;; This function uses a non-reentrant model
 14048 ;;
 14049                           
 14050                           
 14051                           ;psect for function _setDrvPeak
 14052  2378                     _setDrvPeak:	
 14053                           
 14054                           ;main.c: 382: drv_peak_val = pk;
 14055                           
 14056                           ;incstack = 0
 14057                           ; Regs used in _setDrvPeak: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14058  2378  0021               	movlb	1	; select bank1
 14059  2379  0856               	movf	(setDrvPeak@pk+1)^(0+128),w
 14060  237A  00EF               	movwf	(_drv_peak_val+1)^(0+128)
 14061  237B  0855               	movf	setDrvPeak@pk^(0+128),w
 14062  237C  00EE               	movwf	_drv_peak_val^(0+128)
 14063                           
 14064                           ;main.c: 383: calcUpstroke(drv_peak_val);
 14065  237D  086F               	movf	(_drv_peak_val+1)^(0+128),w
 14066  237E  00D4               	movwf	(calcUpstroke@maxVal+1)^(0+128)
 14067  237F  086E               	movf	_drv_peak_val^(0+128),w
 14068  2380  00D3               	movwf	calcUpstroke@maxVal^(0+128)
 14069  2381  3195  257E  31A3   	fcall	_calcUpstroke
 14070                           
 14071                           ;main.c: 384: calcDownstroke(drv_peak_val);
 14072  2384  0021               	movlb	1	; select bank1
 14073  2385  086F               	movf	(_drv_peak_val+1)^(0+128),w
 14074  2386  00D4               	movwf	(calcDownstroke@maxVal+1)^(0+128)
 14075  2387  086E               	movf	_drv_peak_val^(0+128),w
 14076  2388  00D3               	movwf	calcDownstroke@maxVal^(0+128)
 14077  2389  3189  2168  31A3   	fcall	_calcDownstroke
 14078                           
 14079                           ;main.c: 385: printf("A\n");
 14080  238C  3038               	movlw	low (STR_5| (0+32768))
 14081  238D  0021               	movlb	1	; select bank1
 14082  238E  00A0               	movwf	printf@f^(0+128)
 14083  238F  30B0               	movlw	high (STR_5| (0+32768))
 14084  2390  00A1               	movwf	(printf@f^(0+128)+1)
 14085  2391  318D  2594         	fcall	_printf
 14086                           
 14087                           ;main.c: 386: return 0;
 14088  2393  0021               	movlb	1	; select bank1
 14089  2394  01D5               	clrf	?_setDrvPeak^(0+128)
 14090  2395  01D6               	clrf	(?_setDrvPeak+1)^(0+128)
 14091  2396  0008               	return
 14092  2397                     __end_of_setDrvPeak:	
 14093                           
 14094                           	psect	text38
 14095  157E                     __ptext38:	
 14096 ;; *************** function _calcUpstroke *****************
 14097 ;; Defined at:
 14098 ;;		line 151 in file "drv2665.c"
 14099 ;; Parameters:    Size  Location     Type
 14100 ;;  maxVal          2   51[BANK1 ] int 
 14101 ;; Auto vars:     Size  Location     Type
 14102 ;;  i               2    3[BANK3 ] int 
 14103 ;; Return value:  Size  Location     Type
 14104 ;;                  1    wreg      void 
 14105 ;; Registers used:
 14106 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14107 ;; Tracked objects:
 14108 ;;		On entry : 0/0
 14109 ;;		On exit  : 0/0
 14110 ;;		Unchanged: 0/0
 14111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14112 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14113 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14114 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14115 ;;      Totals:         0       1       2       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14116 ;;Total ram usage:        8 bytes
 14117 ;; Hardware stack levels used:    1
 14118 ;; Hardware stack levels required when called:   10
 14119 ;; This function calls:
 14120 ;;		___awdiv
 14121 ;;		___awtoft
 14122 ;;		___fttol
 14123 ;;		___wmul
 14124 ;;		_round
 14125 ;; This function is called by:
 14126 ;;		_setDrvPeak
 14127 ;;		_drv_init
 14128 ;; This function uses a non-reentrant model
 14129 ;;
 14130                           
 14131                           
 14132                           ;psect for function _calcUpstroke
 14133  157E                     _calcUpstroke:	
 14134                           
 14135                           ;drv2665.c: 153: drv_fifo_upstroke[0] = 0x0b;
 14136                           
 14137                           ;incstack = 0
 14138                           ; Regs used in _calcUpstroke: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14139  157E  300B               	movlw	11
 14140  157F  0020               	movlb	0	; select bank0
 14141  1580  00CD               	movwf	??_calcUpstroke
 14142  1581  084D               	movf	??_calcUpstroke,w
 14143  1582  0024               	movlb	4	; select bank4
 14144  1583  00A0               	movwf	_drv_fifo_upstroke^(0+512)
 14145                           
 14146                           ;drv2665.c: 154: for(int i = 1; i < 40; i++){
 14147  1584  3001               	movlw	1
 14148  1585  0023               	movlb	3	; select bank3
 14149  1586  00E0               	movwf	calcUpstroke@i^(0+384)
 14150  1587  3000               	movlw	0
 14151  1588  00E1               	movwf	(calcUpstroke@i^(0+384)+1)
 14152  1589                     L27:	
 14153  1589  0861               	movf	(calcUpstroke@i+1)^(0+384),w
 14154  158A  3A80               	xorlw	128
 14155  158B  0020               	movlb	0	; select bank0
 14156  158C  00CD               	movwf	??_calcUpstroke
 14157  158D  3080               	movlw	128
 14158  158E  024D               	subwf	??_calcUpstroke,w
 14159  158F  1D03               	skipz
 14160  1590  2D94               	goto	u8445
 14161  1591  3028               	movlw	40
 14162  1592  0023               	movlb	3	; select bank3
 14163  1593  0260               	subwf	calcUpstroke@i^(0+384),w
 14164  1594                     u8445:	
 14165  1594  1803               	btfsc	3,0
 14166  1595  0008               	return
 14167                           
 14168                           ;drv2665.c: 155: drv_fifo_upstroke[i] = (char)round(i*maxVal/40);
 14169  1596  0021               	movlb	1	; select bank1
 14170  1597  0854               	movf	(calcUpstroke@maxVal+1)^(0+128),w
 14171  1598  0020               	movlb	0	; select bank0
 14172  1599  00B4               	movwf	___wmul@multiplicand+1
 14173  159A  0021               	movlb	1	; select bank1
 14174  159B  0853               	movf	calcUpstroke@maxVal^(0+128),w
 14175  159C  0020               	movlb	0	; select bank0
 14176  159D  00B3               	movwf	___wmul@multiplicand
 14177  159E  0023               	movlb	3	; select bank3
 14178  159F  0861               	movf	(calcUpstroke@i+1)^(0+384),w
 14179  15A0  0020               	movlb	0	; select bank0
 14180  15A1  00B2               	movwf	___wmul@multiplier+1
 14181  15A2  0023               	movlb	3	; select bank3
 14182  15A3  0860               	movf	calcUpstroke@i^(0+384),w
 14183  15A4  0020               	movlb	0	; select bank0
 14184  15A5  00B1               	movwf	___wmul@multiplier
 14185  15A6  31A3  2302  3195   	fcall	___wmul
 14186  15A9  0020               	movlb	0	; select bank0
 14187  15AA  0832               	movf	?___wmul+1,w
 14188  15AB  00BA               	movwf	___awdiv@dividend+1
 14189  15AC  0831               	movf	?___wmul,w
 14190  15AD  00B9               	movwf	___awdiv@dividend
 14191  15AE  3028               	movlw	40
 14192  15AF  00B7               	movwf	___awdiv@divisor
 14193  15B0  3000               	movlw	0
 14194  15B1  00B8               	movwf	___awdiv@divisor+1
 14195  15B2  319C  24CD  3195   	fcall	___awdiv
 14196  15B5  0020               	movlb	0	; select bank0
 14197  15B6  0838               	movf	?___awdiv+1,w
 14198  15B7  00C1               	movwf	___awtoft@c+1
 14199  15B8  0837               	movf	?___awdiv,w
 14200  15B9  00C0               	movwf	___awtoft@c
 14201  15BA  31A4  2419  3195   	fcall	___awtoft
 14202  15BD  0020               	movlb	0	; select bank0
 14203  15BE  0840               	movf	?___awtoft,w
 14204  15BF  0021               	movlb	1	; select bank1
 14205  15C0  00CD               	movwf	round@x^(0+128)
 14206  15C1  0020               	movlb	0	; select bank0
 14207  15C2  0841               	movf	?___awtoft+1,w
 14208  15C3  0021               	movlb	1	; select bank1
 14209  15C4  00CE               	movwf	(round@x+1)^(0+128)
 14210  15C5  0020               	movlb	0	; select bank0
 14211  15C6  0842               	movf	?___awtoft+2,w
 14212  15C7  0021               	movlb	1	; select bank1
 14213  15C8  00CF               	movwf	(round@x+2)^(0+128)
 14214  15C9  319E  2675  3195   	fcall	_round
 14215  15CC  0021               	movlb	1	; select bank1
 14216  15CD  084D               	movf	?_round^(0+128),w
 14217  15CE  0023               	movlb	3	; select bank3
 14218  15CF  00DD               	movwf	_calcUpstroke$2993^(0+384)
 14219  15D0  0021               	movlb	1	; select bank1
 14220  15D1  084E               	movf	(?_round+1)^(0+128),w
 14221  15D2  0023               	movlb	3	; select bank3
 14222  15D3  00DE               	movwf	(_calcUpstroke$2993+1)^(0+384)
 14223  15D4  0021               	movlb	1	; select bank1
 14224  15D5  084F               	movf	(?_round+2)^(0+128),w
 14225  15D6  0023               	movlb	3	; select bank3
 14226  15D7  00DF               	movwf	(_calcUpstroke$2993+2)^(0+384)
 14227                           
 14228                           ;drv2665.c: 155: drv_fifo_upstroke[i] = (char)round(i*maxVal/40);
 14229  15D8  085D               	movf	_calcUpstroke$2993^(0+384),w
 14230  15D9  0021               	movlb	1	; select bank1
 14231  15DA  00B7               	movwf	___fttol@f1^(0+128)
 14232  15DB  0023               	movlb	3	; select bank3
 14233  15DC  085E               	movf	(_calcUpstroke$2993+1)^(0+384),w
 14234  15DD  0021               	movlb	1	; select bank1
 14235  15DE  00B8               	movwf	(___fttol@f1+1)^(0+128)
 14236  15DF  0023               	movlb	3	; select bank3
 14237  15E0  085F               	movf	(_calcUpstroke$2993+2)^(0+384),w
 14238  15E1  0021               	movlb	1	; select bank1
 14239  15E2  00B9               	movwf	(___fttol@f1+2)^(0+128)
 14240  15E3  3197  2779  3195   	fcall	___fttol
 14241  15E6  0021               	movlb	1	; select bank1
 14242  15E7  0837               	movf	?___fttol^(0+128),w
 14243  15E8  0020               	movlb	0	; select bank0
 14244  15E9  00CD               	movwf	??_calcUpstroke
 14245  15EA  0023               	movlb	3	; select bank3
 14246  15EB  0860               	movf	calcUpstroke@i^(0+384),w
 14247  15EC  3E20               	addlw	(low (_drv_fifo_upstroke| (0+512)))& (0+255)
 14248  15ED  0086               	movwf	6
 14249  15EE  3002               	movlw	2	; select bank4/5
 14250  15EF  0087               	movwf	7
 14251  15F0  0020               	movlb	0	; select bank0
 14252  15F1  084D               	movf	??_calcUpstroke,w
 14253  15F2  0081               	movwf	1
 14254  15F3  3001               	movlw	1
 14255  15F4  0023               	movlb	3	; select bank3
 14256  15F5  07E0               	addwf	calcUpstroke@i^(0+384),f
 14257  15F6  3000               	movlw	0
 14258  15F7  3DE1               	addwfc	(calcUpstroke@i+1)^(0+384),f
 14259  15F8  2D89               	goto	L27
 14260  15F9                     __end_of_calcUpstroke:	
 14261                           
 14262                           	psect	text39
 14263  0968                     __ptext39:	
 14264 ;; *************** function _calcDownstroke *****************
 14265 ;; Defined at:
 14266 ;;		line 159 in file "drv2665.c"
 14267 ;; Parameters:    Size  Location     Type
 14268 ;;  maxVal          2   51[BANK1 ] int 
 14269 ;; Auto vars:     Size  Location     Type
 14270 ;;  i               2    3[BANK3 ] int 
 14271 ;; Return value:  Size  Location     Type
 14272 ;;                  1    wreg      void 
 14273 ;; Registers used:
 14274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14275 ;; Tracked objects:
 14276 ;;		On entry : 0/0
 14277 ;;		On exit  : 0/0
 14278 ;;		Unchanged: 0/0
 14279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14280 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14281 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14283 ;;      Totals:         0       1       2       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14284 ;;Total ram usage:        8 bytes
 14285 ;; Hardware stack levels used:    1
 14286 ;; Hardware stack levels required when called:   10
 14287 ;; This function calls:
 14288 ;;		___awdiv
 14289 ;;		___awtoft
 14290 ;;		___ftadd
 14291 ;;		___ftneg
 14292 ;;		___fttol
 14293 ;;		___wmul
 14294 ;;		_round
 14295 ;; This function is called by:
 14296 ;;		_setDrvPeak
 14297 ;;		_drv_init
 14298 ;; This function uses a non-reentrant model
 14299 ;;
 14300                           
 14301                           
 14302                           ;psect for function _calcDownstroke
 14303  0968                     _calcDownstroke:	
 14304                           
 14305                           ;drv2665.c: 160: drv_fifo_downstroke[0] = 0x0b;
 14306                           
 14307                           ;incstack = 0
 14308                           ; Regs used in _calcDownstroke: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14309  0968  300B               	movlw	11
 14310  0969  0020               	movlb	0	; select bank0
 14311  096A  00CD               	movwf	??_calcDownstroke
 14312  096B  084D               	movf	??_calcDownstroke,w
 14313  096C  0025               	movlb	5	; select bank5
 14314  096D  00A0               	movwf	_drv_fifo_downstroke^(0+640)
 14315                           
 14316                           ;drv2665.c: 161: for(int i = 1; i < 40; i++){
 14317  096E  3001               	movlw	1
 14318  096F  0023               	movlb	3	; select bank3
 14319  0970  00E0               	movwf	calcDownstroke@i^(0+384)
 14320  0971  3000               	movlw	0
 14321  0972  00E1               	movwf	(calcDownstroke@i^(0+384)+1)
 14322  0973                     L28:	
 14323  0973  0861               	movf	(calcDownstroke@i+1)^(0+384),w
 14324  0974  3A80               	xorlw	128
 14325  0975  0020               	movlb	0	; select bank0
 14326  0976  00CD               	movwf	??_calcDownstroke
 14327  0977  3080               	movlw	128
 14328  0978  024D               	subwf	??_calcDownstroke,w
 14329  0979  1D03               	skipz
 14330  097A  297E               	goto	u8465
 14331  097B  3028               	movlw	40
 14332  097C  0023               	movlb	3	; select bank3
 14333  097D  0260               	subwf	calcDownstroke@i^(0+384),w
 14334  097E                     u8465:	
 14335  097E  1803               	btfsc	3,0
 14336  097F  0008               	return
 14337                           
 14338                           ;drv2665.c: 162: drv_fifo_downstroke[i] = (char)(maxVal - round(i*maxVal/40));
 14339  0980  0021               	movlb	1	; select bank1
 14340  0981  0854               	movf	(calcDownstroke@maxVal+1)^(0+128),w
 14341  0982  0020               	movlb	0	; select bank0
 14342  0983  00B4               	movwf	___wmul@multiplicand+1
 14343  0984  0021               	movlb	1	; select bank1
 14344  0985  0853               	movf	calcDownstroke@maxVal^(0+128),w
 14345  0986  0020               	movlb	0	; select bank0
 14346  0987  00B3               	movwf	___wmul@multiplicand
 14347  0988  0023               	movlb	3	; select bank3
 14348  0989  0861               	movf	(calcDownstroke@i+1)^(0+384),w
 14349  098A  0020               	movlb	0	; select bank0
 14350  098B  00B2               	movwf	___wmul@multiplier+1
 14351  098C  0023               	movlb	3	; select bank3
 14352  098D  0860               	movf	calcDownstroke@i^(0+384),w
 14353  098E  0020               	movlb	0	; select bank0
 14354  098F  00B1               	movwf	___wmul@multiplier
 14355  0990  31A3  2302  3189   	fcall	___wmul
 14356  0993  0020               	movlb	0	; select bank0
 14357  0994  0832               	movf	?___wmul+1,w
 14358  0995  00BA               	movwf	___awdiv@dividend+1
 14359  0996  0831               	movf	?___wmul,w
 14360  0997  00B9               	movwf	___awdiv@dividend
 14361  0998  3028               	movlw	40
 14362  0999  00B7               	movwf	___awdiv@divisor
 14363  099A  3000               	movlw	0
 14364  099B  00B8               	movwf	___awdiv@divisor+1
 14365  099C  319C  24CD  3189   	fcall	___awdiv
 14366  099F  0020               	movlb	0	; select bank0
 14367  09A0  0838               	movf	?___awdiv+1,w
 14368  09A1  00C1               	movwf	___awtoft@c+1
 14369  09A2  0837               	movf	?___awdiv,w
 14370  09A3  00C0               	movwf	___awtoft@c
 14371  09A4  31A4  2419  3189   	fcall	___awtoft
 14372  09A7  0020               	movlb	0	; select bank0
 14373  09A8  0840               	movf	?___awtoft,w
 14374  09A9  0021               	movlb	1	; select bank1
 14375  09AA  00CD               	movwf	round@x^(0+128)
 14376  09AB  0020               	movlb	0	; select bank0
 14377  09AC  0841               	movf	?___awtoft+1,w
 14378  09AD  0021               	movlb	1	; select bank1
 14379  09AE  00CE               	movwf	(round@x+1)^(0+128)
 14380  09AF  0020               	movlb	0	; select bank0
 14381  09B0  0842               	movf	?___awtoft+2,w
 14382  09B1  0021               	movlb	1	; select bank1
 14383  09B2  00CF               	movwf	(round@x+2)^(0+128)
 14384  09B3  319E  2675  3189   	fcall	_round
 14385  09B6  0021               	movlb	1	; select bank1
 14386  09B7  084D               	movf	?_round^(0+128),w
 14387  09B8  0023               	movlb	3	; select bank3
 14388  09B9  00DD               	movwf	_calcDownstroke$2994^(0+384)
 14389  09BA  0021               	movlb	1	; select bank1
 14390  09BB  084E               	movf	(?_round+1)^(0+128),w
 14391  09BC  0023               	movlb	3	; select bank3
 14392  09BD  00DE               	movwf	(_calcDownstroke$2994+1)^(0+384)
 14393  09BE  0021               	movlb	1	; select bank1
 14394  09BF  084F               	movf	(?_round+2)^(0+128),w
 14395  09C0  0023               	movlb	3	; select bank3
 14396  09C1  00DF               	movwf	(_calcDownstroke$2994+2)^(0+384)
 14397                           
 14398                           ;drv2665.c: 162: drv_fifo_downstroke[i] = (char)(maxVal - round(i*maxVal/40));
 14399  09C2  0021               	movlb	1	; select bank1
 14400  09C3  0854               	movf	(calcDownstroke@maxVal+1)^(0+128),w
 14401  09C4  0020               	movlb	0	; select bank0
 14402  09C5  00C1               	movwf	___awtoft@c+1
 14403  09C6  0021               	movlb	1	; select bank1
 14404  09C7  0853               	movf	calcDownstroke@maxVal^(0+128),w
 14405  09C8  0020               	movlb	0	; select bank0
 14406  09C9  00C0               	movwf	___awtoft@c
 14407  09CA  31A4  2419  3189   	fcall	___awtoft
 14408  09CD  0020               	movlb	0	; select bank0
 14409  09CE  0840               	movf	?___awtoft,w
 14410  09CF  0021               	movlb	1	; select bank1
 14411  09D0  00AD               	movwf	___ftadd@f2^(0+128)
 14412  09D1  0020               	movlb	0	; select bank0
 14413  09D2  0841               	movf	?___awtoft+1,w
 14414  09D3  0021               	movlb	1	; select bank1
 14415  09D4  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 14416  09D5  0020               	movlb	0	; select bank0
 14417  09D6  0842               	movf	?___awtoft+2,w
 14418  09D7  0021               	movlb	1	; select bank1
 14419  09D8  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 14420  09D9  0023               	movlb	3	; select bank3
 14421  09DA  085D               	movf	_calcDownstroke$2994^(0+384),w
 14422  09DB  0020               	movlb	0	; select bank0
 14423  09DC  00C6               	movwf	___ftneg@f1
 14424  09DD  0023               	movlb	3	; select bank3
 14425  09DE  085E               	movf	(_calcDownstroke$2994+1)^(0+384),w
 14426  09DF  0020               	movlb	0	; select bank0
 14427  09E0  00C7               	movwf	___ftneg@f1+1
 14428  09E1  0023               	movlb	3	; select bank3
 14429  09E2  085F               	movf	(_calcDownstroke$2994+2)^(0+384),w
 14430  09E3  0020               	movlb	0	; select bank0
 14431  09E4  00C8               	movwf	___ftneg@f1+2
 14432  09E5  31A0  20AF  3189   	fcall	___ftneg
 14433  09E8  0020               	movlb	0	; select bank0
 14434  09E9  0846               	movf	?___ftneg,w
 14435  09EA  0021               	movlb	1	; select bank1
 14436  09EB  00AA               	movwf	___ftadd@f1^(0+128)
 14437  09EC  0020               	movlb	0	; select bank0
 14438  09ED  0847               	movf	?___ftneg+1,w
 14439  09EE  0021               	movlb	1	; select bank1
 14440  09EF  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 14441  09F0  0020               	movlb	0	; select bank0
 14442  09F1  0848               	movf	?___ftneg+2,w
 14443  09F2  0021               	movlb	1	; select bank1
 14444  09F3  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 14445  09F4  318C  2490  3189   	fcall	___ftadd
 14446  09F7  0021               	movlb	1	; select bank1
 14447  09F8  082A               	movf	?___ftadd^(0+128),w
 14448  09F9  00B7               	movwf	___fttol@f1^(0+128)
 14449  09FA  082B               	movf	(?___ftadd+1)^(0+128),w
 14450  09FB  00B8               	movwf	(___fttol@f1+1)^(0+128)
 14451  09FC  082C               	movf	(?___ftadd+2)^(0+128),w
 14452  09FD  00B9               	movwf	(___fttol@f1+2)^(0+128)
 14453  09FE  3197  2779  3189   	fcall	___fttol
 14454  0A01  0021               	movlb	1	; select bank1
 14455  0A02  0837               	movf	?___fttol^(0+128),w
 14456  0A03  0020               	movlb	0	; select bank0
 14457  0A04  00CD               	movwf	??_calcDownstroke
 14458  0A05  0023               	movlb	3	; select bank3
 14459  0A06  0860               	movf	calcDownstroke@i^(0+384),w
 14460  0A07  3EA0               	addlw	(low (_drv_fifo_downstroke| (0+512)))& (0+255)
 14461  0A08  0086               	movwf	6
 14462  0A09  3002               	movlw	2	; select bank5/6
 14463  0A0A  0087               	movwf	7
 14464  0A0B  0020               	movlb	0	; select bank0
 14465  0A0C  084D               	movf	??_calcDownstroke,w
 14466  0A0D  0081               	movwf	1
 14467  0A0E  3001               	movlw	1
 14468  0A0F  0023               	movlb	3	; select bank3
 14469  0A10  07E0               	addwf	calcDownstroke@i^(0+384),f
 14470  0A11  3000               	movlw	0
 14471  0A12  3DE1               	addwfc	(calcDownstroke@i+1)^(0+384),f
 14472  0A13  2973               	goto	L28
 14473  0A14                     __end_of_calcDownstroke:	
 14474                           
 14475                           	psect	text40
 14476  1E75                     __ptext40:	
 14477 ;; *************** function _round *****************
 14478 ;; Defined at:
 14479 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\round.c"
 14480 ;; Parameters:    Size  Location     Type
 14481 ;;  x               3   45[BANK1 ] void 
 14482 ;; Auto vars:     Size  Location     Type
 14483 ;;  f               3   48[BANK1 ] void 
 14484 ;; Return value:  Size  Location     Type
 14485 ;;                  3   45[BANK1 ] void 
 14486 ;; Registers used:
 14487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14488 ;; Tracked objects:
 14489 ;;		On entry : 0/0
 14490 ;;		On exit  : 0/0
 14491 ;;		Unchanged: 0/0
 14492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14493 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14494 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14496 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14497 ;;Total ram usage:        6 bytes
 14498 ;; Hardware stack levels used:    1
 14499 ;; Hardware stack levels required when called:    9
 14500 ;; This function calls:
 14501 ;;		___ftadd
 14502 ;;		___ftneg
 14503 ;;		_trunc
 14504 ;; This function is called by:
 14505 ;;		_calcUpstroke
 14506 ;;		_calcDownstroke
 14507 ;; This function uses a non-reentrant model
 14508 ;;
 14509                           
 14510                           
 14511                           ;psect for function _round
 14512  1E75                     _round:	
 14513                           
 14514                           ;incstack = 0
 14515                           ; Regs used in _round: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14516  1E75  0021               	movlb	1	; select bank1
 14517  1E76  084D               	movf	round@x^(0+128),w
 14518  1E77  00AA               	movwf	___ftadd@f1^(0+128)
 14519  1E78  084E               	movf	(round@x+1)^(0+128),w
 14520  1E79  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 14521  1E7A  084F               	movf	(round@x+2)^(0+128),w
 14522  1E7B  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 14523  1E7C  084D               	movf	round@x^(0+128),w
 14524  1E7D  00C5               	movwf	trunc@x^(0+128)
 14525  1E7E  084E               	movf	(round@x+1)^(0+128),w
 14526  1E7F  00C6               	movwf	(trunc@x+1)^(0+128)
 14527  1E80  084F               	movf	(round@x+2)^(0+128),w
 14528  1E81  00C7               	movwf	(trunc@x+2)^(0+128)
 14529  1E82  319D  251F  319E   	fcall	_trunc
 14530  1E85  0021               	movlb	1	; select bank1
 14531  1E86  0845               	movf	?_trunc^(0+128),w
 14532  1E87  0020               	movlb	0	; select bank0
 14533  1E88  00C6               	movwf	___ftneg@f1
 14534  1E89  0021               	movlb	1	; select bank1
 14535  1E8A  0846               	movf	(?_trunc+1)^(0+128),w
 14536  1E8B  0020               	movlb	0	; select bank0
 14537  1E8C  00C7               	movwf	___ftneg@f1+1
 14538  1E8D  0021               	movlb	1	; select bank1
 14539  1E8E  0847               	movf	(?_trunc+2)^(0+128),w
 14540  1E8F  0020               	movlb	0	; select bank0
 14541  1E90  00C8               	movwf	___ftneg@f1+2
 14542  1E91  31A0  20AF  319E   	fcall	___ftneg
 14543  1E94  0020               	movlb	0	; select bank0
 14544  1E95  0846               	movf	?___ftneg,w
 14545  1E96  0021               	movlb	1	; select bank1
 14546  1E97  00AD               	movwf	___ftadd@f2^(0+128)
 14547  1E98  0020               	movlb	0	; select bank0
 14548  1E99  0847               	movf	?___ftneg+1,w
 14549  1E9A  0021               	movlb	1	; select bank1
 14550  1E9B  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 14551  1E9C  0020               	movlb	0	; select bank0
 14552  1E9D  0848               	movf	?___ftneg+2,w
 14553  1E9E  0021               	movlb	1	; select bank1
 14554  1E9F  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 14555  1EA0  318C  2490  319E   	fcall	___ftadd
 14556  1EA3  0021               	movlb	1	; select bank1
 14557  1EA4  082A               	movf	?___ftadd^(0+128),w
 14558  1EA5  00D0               	movwf	round@f^(0+128)
 14559  1EA6  082B               	movf	(?___ftadd+1)^(0+128),w
 14560  1EA7  00D1               	movwf	(round@f+1)^(0+128)
 14561  1EA8  082C               	movf	(?___ftadd+2)^(0+128),w
 14562  1EA9  00D2               	movwf	(round@f+2)^(0+128)
 14563  1EAA  0850               	movf	round@f^(0+128),w
 14564  1EAB  00AA               	movwf	___ftadd@f1^(0+128)
 14565  1EAC  0851               	movf	(round@f+1)^(0+128),w
 14566  1EAD  00AB               	movwf	(___ftadd@f1+1)^(0+128)
 14567  1EAE  0852               	movf	(round@f+2)^(0+128),w
 14568  1EAF  00AC               	movwf	(___ftadd@f1+2)^(0+128)
 14569  1EB0  084D               	movf	round@x^(0+128),w
 14570  1EB1  00AD               	movwf	___ftadd@f2^(0+128)
 14571  1EB2  084E               	movf	(round@x+1)^(0+128),w
 14572  1EB3  00AE               	movwf	(___ftadd@f2+1)^(0+128)
 14573  1EB4  084F               	movf	(round@x+2)^(0+128),w
 14574  1EB5  00AF               	movwf	(___ftadd@f2+2)^(0+128)
 14575  1EB6  318C  2490  319E   	fcall	___ftadd
 14576  1EB9  0021               	movlb	1	; select bank1
 14577  1EBA  082A               	movf	?___ftadd^(0+128),w
 14578  1EBB  00CD               	movwf	round@x^(0+128)
 14579  1EBC  082B               	movf	(?___ftadd+1)^(0+128),w
 14580  1EBD  00CE               	movwf	(round@x+1)^(0+128)
 14581  1EBE  082C               	movf	(?___ftadd+2)^(0+128),w
 14582  1EBF  00CF               	movwf	(round@x+2)^(0+128)
 14583  1EC0  084D               	movf	round@x^(0+128),w
 14584  1EC1  00C5               	movwf	trunc@x^(0+128)
 14585  1EC2  084E               	movf	(round@x+1)^(0+128),w
 14586  1EC3  00C6               	movwf	(trunc@x+1)^(0+128)
 14587  1EC4  084F               	movf	(round@x+2)^(0+128),w
 14588  1EC5  00C7               	movwf	(trunc@x+2)^(0+128)
 14589  1EC6  319D  251F         	fcall	_trunc
 14590  1EC8  0021               	movlb	1	; select bank1
 14591  1EC9  0845               	movf	?_trunc^(0+128),w
 14592  1ECA  00CD               	movwf	?_round^(0+128)
 14593  1ECB  0846               	movf	(?_trunc+1)^(0+128),w
 14594  1ECC  00CE               	movwf	(?_round+1)^(0+128)
 14595  1ECD  0847               	movf	(?_trunc+2)^(0+128),w
 14596  1ECE  00CF               	movwf	(?_round+2)^(0+128)
 14597  1ECF  0008               	return
 14598  1ED0                     __end_of_round:	
 14599                           
 14600                           	psect	text41
 14601  1D1F                     __ptext41:	
 14602 ;; *************** function _trunc *****************
 14603 ;; Defined at:
 14604 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\trunc.c"
 14605 ;; Parameters:    Size  Location     Type
 14606 ;;  x               3   37[BANK1 ] void 
 14607 ;; Auto vars:     Size  Location     Type
 14608 ;;  i               3   40[BANK1 ] void 
 14609 ;;  expon           2   43[BANK1 ] int 
 14610 ;; Return value:  Size  Location     Type
 14611 ;;                  3   37[BANK1 ] int 
 14612 ;; Registers used:
 14613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14614 ;; Tracked objects:
 14615 ;;		On entry : 0/0
 14616 ;;		On exit  : 0/0
 14617 ;;		Unchanged: 0/0
 14618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14619 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14620 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14621 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14622 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14623 ;;Total ram usage:        9 bytes
 14624 ;; Hardware stack levels used:    1
 14625 ;; Hardware stack levels required when called:    8
 14626 ;; This function calls:
 14627 ;;		___altoft
 14628 ;;		___fttol
 14629 ;;		_frexp
 14630 ;; This function is called by:
 14631 ;;		_round
 14632 ;; This function uses a non-reentrant model
 14633 ;;
 14634                           
 14635                           
 14636                           ;psect for function _trunc
 14637  1D1F                     _trunc:	
 14638                           
 14639                           ;incstack = 0
 14640                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14641  1D1F  0021               	movlb	1	; select bank1
 14642  1D20  0845               	movf	trunc@x^(0+128),w
 14643  1D21  0020               	movlb	0	; select bank0
 14644  1D22  00B1               	movwf	frexp@value
 14645  1D23  0021               	movlb	1	; select bank1
 14646  1D24  0846               	movf	(trunc@x+1)^(0+128),w
 14647  1D25  0020               	movlb	0	; select bank0
 14648  1D26  00B2               	movwf	frexp@value+1
 14649  1D27  0021               	movlb	1	; select bank1
 14650  1D28  0847               	movf	(trunc@x+2)^(0+128),w
 14651  1D29  0020               	movlb	0	; select bank0
 14652  1D2A  00B3               	movwf	frexp@value+2
 14653  1D2B  30CB               	movlw	(low (trunc@expon| 0))& (0+255)
 14654  1D2C  00CC               	movwf	??_trunc
 14655  1D2D  084C               	movf	??_trunc,w
 14656  1D2E  00B4               	movwf	frexp@eptr
 14657  1D2F  31A6  26E0  319D   	fcall	_frexp
 14658  1D32  0021               	movlb	1	; select bank1
 14659  1D33  1FCC               	btfss	(trunc@expon+1)^(0+128),7
 14660  1D34  2D3C               	goto	l8168
 14661  1D35  3000               	movlw	0
 14662  1D36  00C5               	movwf	?_trunc^(0+128)
 14663  1D37  3000               	movlw	0
 14664  1D38  00C6               	movwf	(?_trunc+1)^(0+128)
 14665  1D39  3000               	movlw	0
 14666  1D3A  00C7               	movwf	(?_trunc+2)^(0+128)
 14667  1D3B  0008               	return
 14668  1D3C                     l8168:	
 14669  1D3C  3000               	movlw	0
 14670  1D3D  024C               	subwf	(trunc@expon+1)^(0+128),w
 14671  1D3E  3015               	movlw	21
 14672  1D3F  1903               	skipnz
 14673  1D40  024B               	subwf	trunc@expon^(0+128),w
 14674  1D41  1803               	btfsc	3,0
 14675  1D42  0008               	return
 14676  1D43  0845               	movf	trunc@x^(0+128),w
 14677  1D44  00B7               	movwf	___fttol@f1^(0+128)
 14678  1D45  0846               	movf	(trunc@x+1)^(0+128),w
 14679  1D46  00B8               	movwf	(___fttol@f1+1)^(0+128)
 14680  1D47  0847               	movf	(trunc@x+2)^(0+128),w
 14681  1D48  00B9               	movwf	(___fttol@f1+2)^(0+128)
 14682  1D49  3197  2779  319D   	fcall	___fttol
 14683  1D4C  0021               	movlb	1	; select bank1
 14684  1D4D  083A               	movf	(?___fttol+3)^(0+128),w
 14685  1D4E  0020               	movlb	0	; select bank0
 14686  1D4F  00BC               	movwf	___altoft@c+3
 14687  1D50  0021               	movlb	1	; select bank1
 14688  1D51  0839               	movf	(?___fttol+2)^(0+128),w
 14689  1D52  0020               	movlb	0	; select bank0
 14690  1D53  00BB               	movwf	___altoft@c+2
 14691  1D54  0021               	movlb	1	; select bank1
 14692  1D55  0838               	movf	(?___fttol+1)^(0+128),w
 14693  1D56  0020               	movlb	0	; select bank0
 14694  1D57  00BA               	movwf	___altoft@c+1
 14695  1D58  0021               	movlb	1	; select bank1
 14696  1D59  0837               	movf	?___fttol^(0+128),w
 14697  1D5A  0020               	movlb	0	; select bank0
 14698  1D5B  00B9               	movwf	___altoft@c
 14699  1D5C  31A7  2784         	fcall	___altoft
 14700  1D5E  0020               	movlb	0	; select bank0
 14701  1D5F  0839               	movf	?___altoft,w
 14702  1D60  0021               	movlb	1	; select bank1
 14703  1D61  00C8               	movwf	trunc@i^(0+128)
 14704  1D62  0020               	movlb	0	; select bank0
 14705  1D63  083A               	movf	?___altoft+1,w
 14706  1D64  0021               	movlb	1	; select bank1
 14707  1D65  00C9               	movwf	(trunc@i+1)^(0+128)
 14708  1D66  0020               	movlb	0	; select bank0
 14709  1D67  083B               	movf	?___altoft+2,w
 14710  1D68  0021               	movlb	1	; select bank1
 14711  1D69  00CA               	movwf	(trunc@i+2)^(0+128)
 14712  1D6A  0848               	movf	trunc@i^(0+128),w
 14713  1D6B  00C5               	movwf	?_trunc^(0+128)
 14714  1D6C  0849               	movf	(trunc@i+1)^(0+128),w
 14715  1D6D  00C6               	movwf	(?_trunc+1)^(0+128)
 14716  1D6E  084A               	movf	(trunc@i+2)^(0+128),w
 14717  1D6F  00C7               	movwf	(?_trunc+2)^(0+128)
 14718  1D70  0008               	return
 14719  1D71                     __end_of_trunc:	
 14720                           
 14721                           	psect	text42
 14722  26E0                     __ptext42:	
 14723 ;; *************** function _frexp *****************
 14724 ;; Defined at:
 14725 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 14726 ;; Parameters:    Size  Location     Type
 14727 ;;  value           3   17[BANK0 ] int 
 14728 ;;  eptr            1   20[BANK0 ] PTR int 
 14729 ;;		 -> floor@expon(2), trunc@expon(2), 
 14730 ;; Auto vars:     Size  Location     Type
 14731 ;;		None
 14732 ;; Return value:  Size  Location     Type
 14733 ;;                  3   17[BANK0 ] PTR int 
 14734 ;; Registers used:
 14735 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14736 ;; Tracked objects:
 14737 ;;		On entry : 0/0
 14738 ;;		On exit  : 0/0
 14739 ;;		Unchanged: 0/0
 14740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14741 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14743 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14744 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14745 ;;Total ram usage:        6 bytes
 14746 ;; Hardware stack levels used:    1
 14747 ;; Hardware stack levels required when called:    6
 14748 ;; This function calls:
 14749 ;;		Nothing
 14750 ;; This function is called by:
 14751 ;;		_trunc
 14752 ;; This function uses a non-reentrant model
 14753 ;;
 14754                           
 14755                           
 14756                           ;psect for function _frexp
 14757  26E0                     _frexp:	
 14758                           
 14759                           ;incstack = 0
 14760                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 14761  26E0  0020               	movlb	0	; select bank0
 14762  26E1  0833               	movf	frexp@value+2,w
 14763  26E2  0432               	iorwf	frexp@value+1,w
 14764  26E3  0431               	iorwf	frexp@value,w
 14765  26E4  1D03               	skipz
 14766  26E5  2EED               	goto	l8014
 14767  26E6  0834               	movf	frexp@eptr,w
 14768  26E7  0086               	movwf	6
 14769  26E8  0187               	clrf	7
 14770  26E9  3000               	movlw	0
 14771  26EA  3FC0               	movwi [0]fsr1
 14772  26EB  3FC1               	movwi [1]fsr1
 14773                           
 14774                           ;	Return value of _frexp is never used
 14775  26EC  0008               	return
 14776  26ED                     l8014:	
 14777  26ED  0833               	movf	frexp@value+2,w
 14778  26EE  397F               	andlw	127
 14779  26EF  00B5               	movwf	??_frexp
 14780  26F0  01B6               	clrf	??_frexp+1
 14781  26F1  35B5               	lslf	??_frexp,f
 14782  26F2  0DB6               	rlf	??_frexp+1,f
 14783  26F3  0834               	movf	frexp@eptr,w
 14784  26F4  0086               	movwf	6
 14785  26F5  0187               	clrf	7
 14786  26F6  0835               	movf	??_frexp,w
 14787  26F7  3FC0               	movwi [0]fsr1
 14788  26F8  0836               	movf	??_frexp+1,w
 14789  26F9  3FC1               	movwi [1]fsr1
 14790  26FA  0D32               	rlf	frexp@value+1,w
 14791  26FB  0D32               	rlf	frexp@value+1,w
 14792  26FC  3901               	andlw	1
 14793  26FD  00B5               	movwf	??_frexp
 14794  26FE  01B6               	clrf	??_frexp+1
 14795  26FF  0834               	movf	frexp@eptr,w
 14796  2700  0086               	movwf	6
 14797  2701  0187               	clrf	7
 14798  2702  0835               	movf	??_frexp,w
 14799  2703  0481               	iorwf	1,f
 14800  2704  3141               	addfsr 1,1
 14801  2705  0836               	movf	??_frexp+1,w
 14802  2706  0481               	iorwf	1,f
 14803  2707  0834               	movf	frexp@eptr,w
 14804  2708  0086               	movwf	6
 14805  2709  0187               	clrf	7
 14806  270A  3082               	movlw	130
 14807  270B  0781               	addwf	1,f
 14808  270C  3141               	addfsr 1,1
 14809  270D  30FF               	movlw	255
 14810  270E  3D81               	addwfc	1,f
 14811  270F  317F               	addfsr 1,-1
 14812  2710  0833               	movf	frexp@value+2,w
 14813  2711  3980               	andlw	-128
 14814  2712  383F               	iorlw	63
 14815  2713  00B3               	movwf	frexp@value+2
 14816  2714  13B2               	bcf	frexp@value+1,7
 14817  2715  0008               	return
 14818  2716                     __end_of_frexp:	
 14819                           ;	Return value of _frexp is never used
 14820                           
 14821                           
 14822                           	psect	text43
 14823  1779                     __ptext43:	
 14824 ;; *************** function ___fttol *****************
 14825 ;; Defined at:
 14826 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 14827 ;; Parameters:    Size  Location     Type
 14828 ;;  f1              3   23[BANK1 ] float 
 14829 ;; Auto vars:     Size  Location     Type
 14830 ;;  lval            4   32[BANK1 ] unsigned long 
 14831 ;;  exp1            1   36[BANK1 ] unsigned char 
 14832 ;;  sign1           1   31[BANK1 ] unsigned char 
 14833 ;; Return value:  Size  Location     Type
 14834 ;;                  4   23[BANK1 ] long 
 14835 ;; Registers used:
 14836 ;;		wreg, status,2, status,0
 14837 ;; Tracked objects:
 14838 ;;		On entry : 0/0
 14839 ;;		On exit  : 0/0
 14840 ;;		Unchanged: 0/0
 14841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14842 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14843 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14844 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14845 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14846 ;;Total ram usage:       14 bytes
 14847 ;; Hardware stack levels used:    1
 14848 ;; Hardware stack levels required when called:    6
 14849 ;; This function calls:
 14850 ;;		Nothing
 14851 ;; This function is called by:
 14852 ;;		_main_initialize
 14853 ;;		_setDrvPiezoOnTime
 14854 ;;		_setH1OffTime
 14855 ;;		_setH2OnTime
 14856 ;;		_calcUpstroke
 14857 ;;		_calcDownstroke
 14858 ;;		_trunc
 14859 ;;		_drv_outputSine
 14860 ;; This function uses a non-reentrant model
 14861 ;;
 14862                           
 14863                           
 14864                           ;psect for function ___fttol
 14865  1779                     ___fttol:	
 14866                           
 14867                           ;incstack = 0
 14868                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14869  1779  0021               	movlb	1	; select bank1
 14870  177A  0837               	movf	___fttol@f1^(0+128),w
 14871  177B  00BB               	movwf	??___fttol^(0+128)
 14872  177C  0838               	movf	(___fttol@f1+1)^(0+128),w
 14873  177D  00BC               	movwf	(??___fttol^(0+128)+1)
 14874  177E  0839               	movf	(___fttol@f1+2)^(0+128),w
 14875  177F  00BD               	movwf	(??___fttol^(0+128)+2)
 14876  1780  1003               	clrc
 14877  1781  0D3C               	rlf	(??___fttol^(0+128)+1),w
 14878  1782  0D3D               	rlf	(??___fttol^(0+128)+2),w
 14879  1783  00BE               	movwf	(??___fttol+3)^(0+128)
 14880  1784  083E               	movf	(??___fttol+3)^(0+128),w
 14881  1785  00C4               	movwf	___fttol@exp1^(0+128)
 14882  1786  0844               	movf	___fttol@exp1^(0+128),w
 14883  1787  1D03               	btfss	3,2
 14884  1788  2F92               	goto	l7972
 14885  1789  3000               	movlw	0
 14886  178A  00BA               	movwf	(?___fttol+3)^(0+128)
 14887  178B  3000               	movlw	0
 14888  178C  00B9               	movwf	(?___fttol+2)^(0+128)
 14889  178D  3000               	movlw	0
 14890  178E  00B8               	movwf	(?___fttol+1)^(0+128)
 14891  178F  3000               	movlw	0
 14892  1790  00B7               	movwf	?___fttol^(0+128)
 14893  1791  0008               	return
 14894  1792                     l7972:	
 14895  1792  0837               	movf	___fttol@f1^(0+128),w
 14896  1793  00BB               	movwf	??___fttol^(0+128)
 14897  1794  0838               	movf	(___fttol@f1+1)^(0+128),w
 14898  1795  00BC               	movwf	(??___fttol^(0+128)+1)
 14899  1796  0839               	movf	(___fttol@f1+2)^(0+128),w
 14900  1797  00BD               	movwf	(??___fttol^(0+128)+2)
 14901  1798  3017               	movlw	23
 14902  1799                     u7605:	
 14903  1799  36BD               	lsrf	(??___fttol^(0+128)+2),f
 14904  179A  0CBC               	rrf	(??___fttol^(0+128)+1),f
 14905  179B  0CBB               	rrf	??___fttol^(0+128),f
 14906  179C  0B89               	decfsz	9,f
 14907  179D  2F99               	goto	u7605
 14908  179E  083B               	movf	??___fttol^(0+128),w
 14909  179F  00BE               	movwf	(??___fttol+3)^(0+128)
 14910  17A0  083E               	movf	(??___fttol+3)^(0+128),w
 14911  17A1  00BF               	movwf	___fttol@sign1^(0+128)
 14912  17A2  17B8               	bsf	(___fttol@f1^(0+128)+1),7
 14913  17A3  30FF               	movlw	255
 14914  17A4  05B7               	andwf	___fttol@f1^(0+128),f
 14915  17A5  30FF               	movlw	255
 14916  17A6  05B8               	andwf	(___fttol@f1+1)^(0+128),f
 14917  17A7  3000               	movlw	0
 14918  17A8  05B9               	andwf	(___fttol@f1+2)^(0+128),f
 14919  17A9  0837               	movf	___fttol@f1^(0+128),w
 14920  17AA  00C0               	movwf	___fttol@lval^(0+128)
 14921  17AB  0838               	movf	(___fttol@f1+1)^(0+128),w
 14922  17AC  00C1               	movwf	(___fttol@lval^(0+128)+1)
 14923  17AD  0839               	movf	(___fttol@f1+2)^(0+128),w
 14924  17AE  00C2               	movwf	(___fttol@lval^(0+128)+2)
 14925  17AF  01C3               	clrf	(___fttol@lval^(0+128)+3)
 14926  17B0  308E               	movlw	142
 14927  17B1  02C4               	subwf	___fttol@exp1^(0+128),f
 14928  17B2  1FC4               	btfss	___fttol@exp1^(0+128),7
 14929  17B3  2FD0               	goto	l7992
 14930  17B4  0844               	movf	___fttol@exp1^(0+128),w
 14931  17B5  3A80               	xorlw	128
 14932  17B6  3E8F               	addlw	143
 14933  17B7  1803               	skipnc
 14934  17B8  2FC2               	goto	l7990
 14935  17B9  3000               	movlw	0
 14936  17BA  00BA               	movwf	(?___fttol+3)^(0+128)
 14937  17BB  3000               	movlw	0
 14938  17BC  00B9               	movwf	(?___fttol+2)^(0+128)
 14939  17BD  3000               	movlw	0
 14940  17BE  00B8               	movwf	(?___fttol+1)^(0+128)
 14941  17BF  3000               	movlw	0
 14942  17C0  00B7               	movwf	?___fttol^(0+128)
 14943  17C1  0008               	return
 14944  17C2                     l7990:	
 14945  17C2  3001               	movlw	1
 14946  17C3                     u7635:	
 14947  17C3  36C3               	lsrf	(___fttol@lval+3)^(0+128),f
 14948  17C4  0CC2               	rrf	(___fttol@lval+2)^(0+128),f
 14949  17C5  0CC1               	rrf	(___fttol@lval+1)^(0+128),f
 14950  17C6  0CC0               	rrf	___fttol@lval^(0+128),f
 14951  17C7  0B89               	decfsz	9,f
 14952  17C8  2FC3               	goto	u7635
 14953  17C9  3001               	movlw	1
 14954  17CA  00BB               	movwf	??___fttol^(0+128)
 14955  17CB  083B               	movf	??___fttol^(0+128),w
 14956  17CC  07C4               	addwf	___fttol@exp1^(0+128),f
 14957  17CD  1903               	btfsc	3,2
 14958  17CE  2FE9               	goto	l8000
 14959  17CF  2FC2               	goto	l7990
 14960  17D0                     l7992:	
 14961  17D0  3018               	movlw	24
 14962  17D1  0244               	subwf	___fttol@exp1^(0+128),w
 14963  17D2  1C03               	skipc
 14964  17D3  2FE6               	goto	l1989
 14965  17D4  3000               	movlw	0
 14966  17D5  00BA               	movwf	(?___fttol+3)^(0+128)
 14967  17D6  3000               	movlw	0
 14968  17D7  00B9               	movwf	(?___fttol+2)^(0+128)
 14969  17D8  3000               	movlw	0
 14970  17D9  00B8               	movwf	(?___fttol+1)^(0+128)
 14971  17DA  3000               	movlw	0
 14972  17DB  00B7               	movwf	?___fttol^(0+128)
 14973  17DC  0008               	return
 14974  17DD                     l7998:	
 14975  17DD  3001               	movlw	1
 14976  17DE                     u7665:	
 14977  17DE  35C0               	lslf	___fttol@lval^(0+128),f
 14978  17DF  0DC1               	rlf	(___fttol@lval+1)^(0+128),f
 14979  17E0  0DC2               	rlf	(___fttol@lval+2)^(0+128),f
 14980  17E1  0DC3               	rlf	(___fttol@lval+3)^(0+128),f
 14981  17E2  0B89               	decfsz	9,f
 14982  17E3  2FDE               	goto	u7665
 14983  17E4  3001               	movlw	1
 14984  17E5  02C4               	subwf	___fttol@exp1^(0+128),f
 14985  17E6                     l1989:	
 14986  17E6  0844               	movf	___fttol@exp1^(0+128),w
 14987  17E7  1D03               	btfss	3,2
 14988  17E8  2FDD               	goto	l7998
 14989  17E9                     l8000:	
 14990  17E9  083F               	movf	___fttol@sign1^(0+128),w
 14991  17EA  1903               	btfsc	3,2
 14992  17EB  2FF7               	goto	l8004
 14993  17EC  09C0               	comf	___fttol@lval^(0+128),f
 14994  17ED  09C1               	comf	(___fttol@lval+1)^(0+128),f
 14995  17EE  09C2               	comf	(___fttol@lval+2)^(0+128),f
 14996  17EF  09C3               	comf	(___fttol@lval+3)^(0+128),f
 14997  17F0  0AC0               	incf	___fttol@lval^(0+128),f
 14998  17F1  1903               	skipnz
 14999  17F2  0AC1               	incf	(___fttol@lval+1)^(0+128),f
 15000  17F3  1903               	skipnz
 15001  17F4  0AC2               	incf	(___fttol@lval+2)^(0+128),f
 15002  17F5  1903               	skipnz
 15003  17F6  0AC3               	incf	(___fttol@lval+3)^(0+128),f
 15004  17F7                     l8004:	
 15005  17F7  0843               	movf	(___fttol@lval+3)^(0+128),w
 15006  17F8  00BA               	movwf	(?___fttol+3)^(0+128)
 15007  17F9  0842               	movf	(___fttol@lval+2)^(0+128),w
 15008  17FA  00B9               	movwf	(?___fttol+2)^(0+128)
 15009  17FB  0841               	movf	(___fttol@lval+1)^(0+128),w
 15010  17FC  00B8               	movwf	(?___fttol+1)^(0+128)
 15011  17FD  0840               	movf	___fttol@lval^(0+128),w
 15012  17FE  00B7               	movwf	?___fttol^(0+128)
 15013  17FF  0008               	return
 15014  1800                     __end_of___fttol:	
 15015                           
 15016                           	psect	text44
 15017  2784                     __ptext44:	
 15018 ;; *************** function ___altoft *****************
 15019 ;; Defined at:
 15020 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 15021 ;; Parameters:    Size  Location     Type
 15022 ;;  c               4   25[BANK0 ] long 
 15023 ;; Auto vars:     Size  Location     Type
 15024 ;;  sign            1   32[BANK0 ] unsigned char 
 15025 ;;  exp             1   31[BANK0 ] unsigned char 
 15026 ;; Return value:  Size  Location     Type
 15027 ;;                  3   25[BANK0 ] float 
 15028 ;; Registers used:
 15029 ;;		wreg, status,2, status,0, pclath, cstack
 15030 ;; Tracked objects:
 15031 ;;		On entry : 0/0
 15032 ;;		On exit  : 0/0
 15033 ;;		Unchanged: 0/0
 15034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15035 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15036 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15037 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15038 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15039 ;;Total ram usage:        8 bytes
 15040 ;; Hardware stack levels used:    1
 15041 ;; Hardware stack levels required when called:    7
 15042 ;; This function calls:
 15043 ;;		___ftpack
 15044 ;; This function is called by:
 15045 ;;		_trunc
 15046 ;; This function uses a non-reentrant model
 15047 ;;
 15048                           
 15049                           
 15050                           ;psect for function ___altoft
 15051  2784                     ___altoft:	
 15052                           
 15053                           ;incstack = 0
 15054                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 15055  2784  0020               	movlb	0	; select bank0
 15056  2785  01C0               	clrf	___altoft@sign
 15057  2786  308E               	movlw	142
 15058  2787  00BD               	movwf	??___altoft
 15059  2788  083D               	movf	??___altoft,w
 15060  2789  00BF               	movwf	___altoft@exp
 15061  278A  1FBC               	btfss	___altoft@c+3,7
 15062  278B  2F99               	goto	l7960
 15063  278C  09B9               	comf	___altoft@c,f
 15064  278D  09BA               	comf	___altoft@c+1,f
 15065  278E  09BB               	comf	___altoft@c+2,f
 15066  278F  09BC               	comf	___altoft@c+3,f
 15067  2790  0AB9               	incf	___altoft@c,f
 15068  2791  1903               	skipnz
 15069  2792  0ABA               	incf	___altoft@c+1,f
 15070  2793  1903               	skipnz
 15071  2794  0ABB               	incf	___altoft@c+2,f
 15072  2795  1903               	skipnz
 15073  2796  0ABC               	incf	___altoft@c+3,f
 15074  2797  01C0               	clrf	___altoft@sign
 15075  2798  0AC0               	incf	___altoft@sign,f
 15076  2799                     l7960:	
 15077  2799  30FF               	movlw	255
 15078  279A  053C               	andwf	___altoft@c+3,w
 15079  279B  1903               	btfsc	3,2
 15080  279C  2FA9               	goto	l7962
 15081  279D  3001               	movlw	1
 15082  279E                     u7575:	
 15083  279E  36BC               	lsrf	___altoft@c+3,f
 15084  279F  0CBB               	rrf	___altoft@c+2,f
 15085  27A0  0CBA               	rrf	___altoft@c+1,f
 15086  27A1  0CB9               	rrf	___altoft@c,f
 15087  27A2  0B89               	decfsz	9,f
 15088  27A3  2F9E               	goto	u7575
 15089  27A4  3001               	movlw	1
 15090  27A5  00BD               	movwf	??___altoft
 15091  27A6  083D               	movf	??___altoft,w
 15092  27A7  07BF               	addwf	___altoft@exp,f
 15093  27A8  2F99               	goto	l7960
 15094  27A9                     l7962:	
 15095  27A9  0839               	movf	___altoft@c,w
 15096  27AA  00B1               	movwf	___ftpack@arg
 15097  27AB  083A               	movf	___altoft@c+1,w
 15098  27AC  00B2               	movwf	___ftpack@arg+1
 15099  27AD  083B               	movf	___altoft@c+2,w
 15100  27AE  00B3               	movwf	___ftpack@arg+2
 15101  27AF  083F               	movf	___altoft@exp,w
 15102  27B0  00BD               	movwf	??___altoft
 15103  27B1  083D               	movf	??___altoft,w
 15104  27B2  00B4               	movwf	___ftpack@exp
 15105  27B3  0840               	movf	___altoft@sign,w
 15106  27B4  00BE               	movwf	??___altoft+1
 15107  27B5  083E               	movf	??___altoft+1,w
 15108  27B6  00B5               	movwf	___ftpack@sign
 15109  27B7  3191  21E8         	fcall	___ftpack
 15110  27B9  0020               	movlb	0	; select bank0
 15111  27BA  0831               	movf	?___ftpack,w
 15112  27BB  00B9               	movwf	?___altoft
 15113  27BC  0832               	movf	?___ftpack+1,w
 15114  27BD  00BA               	movwf	?___altoft+1
 15115  27BE  0833               	movf	?___ftpack+2,w
 15116  27BF  00BB               	movwf	?___altoft+2
 15117  27C0  0008               	return
 15118  27C1                     __end_of___altoft:	
 15119                           
 15120                           	psect	text45
 15121  20AF                     __ptext45:	
 15122 ;; *************** function ___ftneg *****************
 15123 ;; Defined at:
 15124 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 15125 ;; Parameters:    Size  Location     Type
 15126 ;;  f1              3   38[BANK0 ] float 
 15127 ;; Auto vars:     Size  Location     Type
 15128 ;;		None
 15129 ;; Return value:  Size  Location     Type
 15130 ;;                  3   38[BANK0 ] float 
 15131 ;; Registers used:
 15132 ;;		wreg
 15133 ;; Tracked objects:
 15134 ;;		On entry : 0/0
 15135 ;;		On exit  : 0/0
 15136 ;;		Unchanged: 0/0
 15137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15138 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15141 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15142 ;;Total ram usage:        3 bytes
 15143 ;; Hardware stack levels used:    1
 15144 ;; Hardware stack levels required when called:    6
 15145 ;; This function calls:
 15146 ;;		Nothing
 15147 ;; This function is called by:
 15148 ;;		_calcDownstroke
 15149 ;;		_round
 15150 ;; This function uses a non-reentrant model
 15151 ;;
 15152                           
 15153                           
 15154                           ;psect for function ___ftneg
 15155  20AF                     ___ftneg:	
 15156                           
 15157                           ;incstack = 0
 15158                           ; Regs used in ___ftneg: [wreg]
 15159  20AF  0020               	movlb	0	; select bank0
 15160  20B0  0848               	movf	___ftneg@f1+2,w
 15161  20B1  0447               	iorwf	___ftneg@f1+1,w
 15162  20B2  0446               	iorwf	___ftneg@f1,w
 15163  20B3  1903               	skipnz
 15164  20B4  0008               	return
 15165  20B5  3080               	movlw	128
 15166  20B6  06C8               	xorwf	___ftneg@f1+2,f
 15167  20B7  0008               	return
 15168  20B8                     __end_of___ftneg:	
 15169                           
 15170                           	psect	text46
 15171  0C90                     __ptext46:	
 15172 ;; *************** function ___ftadd *****************
 15173 ;; Defined at:
 15174 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 15175 ;; Parameters:    Size  Location     Type
 15176 ;;  f1              3   10[BANK1 ] float 
 15177 ;;  f2              3   13[BANK1 ] float 
 15178 ;; Auto vars:     Size  Location     Type
 15179 ;;  exp1            1   22[BANK1 ] unsigned char 
 15180 ;;  exp2            1   21[BANK1 ] unsigned char 
 15181 ;;  sign            1   20[BANK1 ] unsigned char 
 15182 ;; Return value:  Size  Location     Type
 15183 ;;                  3   10[BANK1 ] float 
 15184 ;; Registers used:
 15185 ;;		wreg, status,2, status,0, pclath, cstack
 15186 ;; Tracked objects:
 15187 ;;		On entry : 0/0
 15188 ;;		On exit  : 0/0
 15189 ;;		Unchanged: 0/0
 15190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15191 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15192 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15193 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15194 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15195 ;;Total ram usage:       13 bytes
 15196 ;; Hardware stack levels used:    1
 15197 ;; Hardware stack levels required when called:    7
 15198 ;; This function calls:
 15199 ;;		___ftpack
 15200 ;; This function is called by:
 15201 ;;		_main_initialize
 15202 ;;		_setDrvPiezoOnTime
 15203 ;;		_setH1OffTime
 15204 ;;		_setH2OnTime
 15205 ;;		_calcDownstroke
 15206 ;;		_round
 15207 ;; This function uses a non-reentrant model
 15208 ;;
 15209                           
 15210                           
 15211                           ;psect for function ___ftadd
 15212  0C90                     ___ftadd:	
 15213                           
 15214                           ;incstack = 0
 15215                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 15216  0C90  0021               	movlb	1	; select bank1
 15217  0C91  082A               	movf	___ftadd@f1^(0+128),w
 15218  0C92  00B0               	movwf	??___ftadd^(0+128)
 15219  0C93  082B               	movf	(___ftadd@f1+1)^(0+128),w
 15220  0C94  00B1               	movwf	(??___ftadd^(0+128)+1)
 15221  0C95  082C               	movf	(___ftadd@f1+2)^(0+128),w
 15222  0C96  00B2               	movwf	(??___ftadd^(0+128)+2)
 15223  0C97  1003               	clrc
 15224  0C98  0D31               	rlf	(??___ftadd^(0+128)+1),w
 15225  0C99  0D32               	rlf	(??___ftadd^(0+128)+2),w
 15226  0C9A  00B3               	movwf	(??___ftadd+3)^(0+128)
 15227  0C9B  0833               	movf	(??___ftadd+3)^(0+128),w
 15228  0C9C  00B6               	movwf	___ftadd@exp1^(0+128)
 15229  0C9D  082D               	movf	___ftadd@f2^(0+128),w
 15230  0C9E  00B0               	movwf	??___ftadd^(0+128)
 15231  0C9F  082E               	movf	(___ftadd@f2+1)^(0+128),w
 15232  0CA0  00B1               	movwf	(??___ftadd^(0+128)+1)
 15233  0CA1  082F               	movf	(___ftadd@f2+2)^(0+128),w
 15234  0CA2  00B2               	movwf	(??___ftadd^(0+128)+2)
 15235  0CA3  1003               	clrc
 15236  0CA4  0D31               	rlf	(??___ftadd^(0+128)+1),w
 15237  0CA5  0D32               	rlf	(??___ftadd^(0+128)+2),w
 15238  0CA6  00B3               	movwf	(??___ftadd+3)^(0+128)
 15239  0CA7  0833               	movf	(??___ftadd+3)^(0+128),w
 15240  0CA8  00B5               	movwf	___ftadd@exp2^(0+128)
 15241  0CA9  0836               	movf	___ftadd@exp1^(0+128),w
 15242  0CAA  1903               	btfsc	3,2
 15243  0CAB  2CB8               	goto	l8088
 15244  0CAC  0835               	movf	___ftadd@exp2^(0+128),w
 15245  0CAD  0236               	subwf	___ftadd@exp1^(0+128),w
 15246  0CAE  1803               	skipnc
 15247  0CAF  2CBF               	goto	l8092
 15248  0CB0  0336               	decf	___ftadd@exp1^(0+128),w
 15249  0CB1  3AFF               	xorlw	255
 15250  0CB2  0735               	addwf	___ftadd@exp2^(0+128),w
 15251  0CB3  00B0               	movwf	??___ftadd^(0+128)
 15252  0CB4  3019               	movlw	25
 15253  0CB5  0230               	subwf	??___ftadd^(0+128),w
 15254  0CB6  1C03               	skipc
 15255  0CB7  2CBF               	goto	l8092
 15256  0CB8                     l8088:	
 15257  0CB8  082D               	movf	___ftadd@f2^(0+128),w
 15258  0CB9  00AA               	movwf	?___ftadd^(0+128)
 15259  0CBA  082E               	movf	(___ftadd@f2+1)^(0+128),w
 15260  0CBB  00AB               	movwf	(?___ftadd+1)^(0+128)
 15261  0CBC  082F               	movf	(___ftadd@f2+2)^(0+128),w
 15262  0CBD  00AC               	movwf	(?___ftadd+2)^(0+128)
 15263  0CBE  0008               	return
 15264  0CBF                     l8092:	
 15265  0CBF  0835               	movf	___ftadd@exp2^(0+128),w
 15266  0CC0  1903               	btfsc	3,2
 15267  0CC1  0008               	return
 15268  0CC2  0836               	movf	___ftadd@exp1^(0+128),w
 15269  0CC3  0235               	subwf	___ftadd@exp2^(0+128),w
 15270  0CC4  1803               	skipnc
 15271  0CC5  2CCE               	goto	l8098
 15272  0CC6  0335               	decf	___ftadd@exp2^(0+128),w
 15273  0CC7  3AFF               	xorlw	255
 15274  0CC8  0736               	addwf	___ftadd@exp1^(0+128),w
 15275  0CC9  00B0               	movwf	??___ftadd^(0+128)
 15276  0CCA  3019               	movlw	25
 15277  0CCB  0230               	subwf	??___ftadd^(0+128),w
 15278  0CCC  1803               	btfsc	3,0
 15279  0CCD  0008               	return
 15280  0CCE                     l8098:	
 15281  0CCE  3006               	movlw	6
 15282  0CCF  00B0               	movwf	??___ftadd^(0+128)
 15283  0CD0  0830               	movf	??___ftadd^(0+128),w
 15284  0CD1  00B4               	movwf	___ftadd@sign^(0+128)
 15285  0CD2  1BAC               	btfsc	(___ftadd@f1+2)^(0+128),7
 15286  0CD3  17B4               	bsf	___ftadd@sign^(0+128),7
 15287  0CD4  1BAF               	btfsc	(___ftadd@f2+2)^(0+128),7
 15288  0CD5  1734               	bsf	___ftadd@sign^(0+128),6
 15289  0CD6  17AB               	bsf	(___ftadd@f1^(0+128)+1),7
 15290  0CD7  30FF               	movlw	255
 15291  0CD8  05AA               	andwf	___ftadd@f1^(0+128),f
 15292  0CD9  30FF               	movlw	255
 15293  0CDA  05AB               	andwf	(___ftadd@f1+1)^(0+128),f
 15294  0CDB  3000               	movlw	0
 15295  0CDC  05AC               	andwf	(___ftadd@f1+2)^(0+128),f
 15296  0CDD  17AE               	bsf	(___ftadd@f2^(0+128)+1),7
 15297  0CDE  30FF               	movlw	255
 15298  0CDF  05AD               	andwf	___ftadd@f2^(0+128),f
 15299  0CE0  30FF               	movlw	255
 15300  0CE1  05AE               	andwf	(___ftadd@f2+1)^(0+128),f
 15301  0CE2  3000               	movlw	0
 15302  0CE3  05AF               	andwf	(___ftadd@f2+2)^(0+128),f
 15303  0CE4  0835               	movf	___ftadd@exp2^(0+128),w
 15304  0CE5  0236               	subwf	___ftadd@exp1^(0+128),w
 15305  0CE6  1803               	skipnc
 15306  0CE7  2D0A               	goto	l8120
 15307  0CE8                     l8110:	
 15308  0CE8  3001               	movlw	1
 15309  0CE9                     u7895:	
 15310  0CE9  35AD               	lslf	___ftadd@f2^(0+128),f
 15311  0CEA  0DAE               	rlf	(___ftadd@f2+1)^(0+128),f
 15312  0CEB  0DAF               	rlf	(___ftadd@f2+2)^(0+128),f
 15313  0CEC  0B89               	decfsz	9,f
 15314  0CED  2CE9               	goto	u7895
 15315  0CEE  3001               	movlw	1
 15316  0CEF  02B5               	subwf	___ftadd@exp2^(0+128),f
 15317  0CF0  0835               	movf	___ftadd@exp2^(0+128),w
 15318  0CF1  0636               	xorwf	___ftadd@exp1^(0+128),w
 15319  0CF2  1903               	skipnz
 15320  0CF3  2D05               	goto	l8118
 15321  0CF4  3001               	movlw	1
 15322  0CF5  02B4               	subwf	___ftadd@sign^(0+128),f
 15323  0CF6  0834               	movf	___ftadd@sign^(0+128),w
 15324  0CF7  3907               	andlw	7
 15325  0CF8  1903               	btfsc	3,2
 15326  0CF9  2D05               	goto	l8118
 15327  0CFA  2CE8               	goto	l8110
 15328  0CFB                     l8116:	
 15329  0CFB  3001               	movlw	1
 15330  0CFC                     u7925:	
 15331  0CFC  36AC               	lsrf	(___ftadd@f1+2)^(0+128),f
 15332  0CFD  0CAB               	rrf	(___ftadd@f1+1)^(0+128),f
 15333  0CFE  0CAA               	rrf	___ftadd@f1^(0+128),f
 15334  0CFF  0B89               	decfsz	9,f
 15335  0D00  2CFC               	goto	u7925
 15336  0D01  3001               	movlw	1
 15337  0D02  00B0               	movwf	??___ftadd^(0+128)
 15338  0D03  0830               	movf	??___ftadd^(0+128),w
 15339  0D04  07B6               	addwf	___ftadd@exp1^(0+128),f
 15340  0D05                     l8118:	
 15341  0D05  0836               	movf	___ftadd@exp1^(0+128),w
 15342  0D06  0635               	xorwf	___ftadd@exp2^(0+128),w
 15343  0D07  1903               	btfsc	3,2
 15344  0D08  2D2F               	goto	l1929
 15345  0D09  2CFB               	goto	l8116
 15346  0D0A                     l8120:	
 15347  0D0A  0836               	movf	___ftadd@exp1^(0+128),w
 15348  0D0B  0235               	subwf	___ftadd@exp2^(0+128),w
 15349  0D0C  1803               	skipnc
 15350  0D0D  2D2F               	goto	l1929
 15351  0D0E                     l8122:	
 15352  0D0E  3001               	movlw	1
 15353  0D0F                     u7955:	
 15354  0D0F  35AA               	lslf	___ftadd@f1^(0+128),f
 15355  0D10  0DAB               	rlf	(___ftadd@f1+1)^(0+128),f
 15356  0D11  0DAC               	rlf	(___ftadd@f1+2)^(0+128),f
 15357  0D12  0B89               	decfsz	9,f
 15358  0D13  2D0F               	goto	u7955
 15359  0D14  3001               	movlw	1
 15360  0D15  02B6               	subwf	___ftadd@exp1^(0+128),f
 15361  0D16  0835               	movf	___ftadd@exp2^(0+128),w
 15362  0D17  0636               	xorwf	___ftadd@exp1^(0+128),w
 15363  0D18  1903               	skipnz
 15364  0D19  2D2B               	goto	l8130
 15365  0D1A  3001               	movlw	1
 15366  0D1B  02B4               	subwf	___ftadd@sign^(0+128),f
 15367  0D1C  0834               	movf	___ftadd@sign^(0+128),w
 15368  0D1D  3907               	andlw	7
 15369  0D1E  1903               	btfsc	3,2
 15370  0D1F  2D2B               	goto	l8130
 15371  0D20  2D0E               	goto	l8122
 15372  0D21                     l8128:	
 15373  0D21  3001               	movlw	1
 15374  0D22                     u7985:	
 15375  0D22  36AF               	lsrf	(___ftadd@f2+2)^(0+128),f
 15376  0D23  0CAE               	rrf	(___ftadd@f2+1)^(0+128),f
 15377  0D24  0CAD               	rrf	___ftadd@f2^(0+128),f
 15378  0D25  0B89               	decfsz	9,f
 15379  0D26  2D22               	goto	u7985
 15380  0D27  3001               	movlw	1
 15381  0D28  00B0               	movwf	??___ftadd^(0+128)
 15382  0D29  0830               	movf	??___ftadd^(0+128),w
 15383  0D2A  07B5               	addwf	___ftadd@exp2^(0+128),f
 15384  0D2B                     l8130:	
 15385  0D2B  0836               	movf	___ftadd@exp1^(0+128),w
 15386  0D2C  0635               	xorwf	___ftadd@exp2^(0+128),w
 15387  0D2D  1D03               	skipz
 15388  0D2E  2D21               	goto	l8128
 15389  0D2F                     l1929:	
 15390  0D2F  1FB4               	btfss	___ftadd@sign^(0+128),7
 15391  0D30  2D41               	goto	l8134
 15392  0D31  30FF               	movlw	255
 15393  0D32  06AA               	xorwf	___ftadd@f1^(0+128),f
 15394  0D33  30FF               	movlw	255
 15395  0D34  06AB               	xorwf	(___ftadd@f1+1)^(0+128),f
 15396  0D35  30FF               	movlw	255
 15397  0D36  06AC               	xorwf	(___ftadd@f1+2)^(0+128),f
 15398  0D37  3001               	movlw	1
 15399  0D38  07AA               	addwf	___ftadd@f1^(0+128),f
 15400  0D39  3000               	movlw	0
 15401  0D3A  1803               	skipnc
 15402  0D3B  3001               	movlw	1
 15403  0D3C  07AB               	addwf	(___ftadd@f1+1)^(0+128),f
 15404  0D3D  3000               	movlw	0
 15405  0D3E  1803               	skipnc
 15406  0D3F  3001               	movlw	1
 15407  0D40  07AC               	addwf	(___ftadd@f1+2)^(0+128),f
 15408  0D41                     l8134:	
 15409  0D41  1F34               	btfss	___ftadd@sign^(0+128),6
 15410  0D42  2D53               	goto	l8138
 15411  0D43  30FF               	movlw	255
 15412  0D44  06AD               	xorwf	___ftadd@f2^(0+128),f
 15413  0D45  30FF               	movlw	255
 15414  0D46  06AE               	xorwf	(___ftadd@f2+1)^(0+128),f
 15415  0D47  30FF               	movlw	255
 15416  0D48  06AF               	xorwf	(___ftadd@f2+2)^(0+128),f
 15417  0D49  3001               	movlw	1
 15418  0D4A  07AD               	addwf	___ftadd@f2^(0+128),f
 15419  0D4B  3000               	movlw	0
 15420  0D4C  1803               	skipnc
 15421  0D4D  3001               	movlw	1
 15422  0D4E  07AE               	addwf	(___ftadd@f2+1)^(0+128),f
 15423  0D4F  3000               	movlw	0
 15424  0D50  1803               	skipnc
 15425  0D51  3001               	movlw	1
 15426  0D52  07AF               	addwf	(___ftadd@f2+2)^(0+128),f
 15427  0D53                     l8138:	
 15428  0D53  01B4               	clrf	___ftadd@sign^(0+128)
 15429  0D54  082A               	movf	___ftadd@f1^(0+128),w
 15430  0D55  07AD               	addwf	___ftadd@f2^(0+128),f
 15431  0D56  082B               	movf	(___ftadd@f1+1)^(0+128),w
 15432  0D57  3DAE               	addwfc	(___ftadd@f2+1)^(0+128),f
 15433  0D58  082C               	movf	(___ftadd@f1+2)^(0+128),w
 15434  0D59  3DAF               	addwfc	(___ftadd@f2+2)^(0+128),f
 15435  0D5A  1FAF               	btfss	(___ftadd@f2+2)^(0+128),7
 15436  0D5B  2D6E               	goto	l8148
 15437  0D5C  30FF               	movlw	255
 15438  0D5D  06AD               	xorwf	___ftadd@f2^(0+128),f
 15439  0D5E  30FF               	movlw	255
 15440  0D5F  06AE               	xorwf	(___ftadd@f2+1)^(0+128),f
 15441  0D60  30FF               	movlw	255
 15442  0D61  06AF               	xorwf	(___ftadd@f2+2)^(0+128),f
 15443  0D62  3001               	movlw	1
 15444  0D63  07AD               	addwf	___ftadd@f2^(0+128),f
 15445  0D64  3000               	movlw	0
 15446  0D65  1803               	skipnc
 15447  0D66  3001               	movlw	1
 15448  0D67  07AE               	addwf	(___ftadd@f2+1)^(0+128),f
 15449  0D68  3000               	movlw	0
 15450  0D69  1803               	skipnc
 15451  0D6A  3001               	movlw	1
 15452  0D6B  07AF               	addwf	(___ftadd@f2+2)^(0+128),f
 15453  0D6C  01B4               	clrf	___ftadd@sign^(0+128)
 15454  0D6D  0AB4               	incf	___ftadd@sign^(0+128),f
 15455  0D6E                     l8148:	
 15456  0D6E  082D               	movf	___ftadd@f2^(0+128),w
 15457  0D6F  0020               	movlb	0	; select bank0
 15458  0D70  00B1               	movwf	___ftpack@arg
 15459  0D71  0021               	movlb	1	; select bank1
 15460  0D72  082E               	movf	(___ftadd@f2+1)^(0+128),w
 15461  0D73  0020               	movlb	0	; select bank0
 15462  0D74  00B2               	movwf	___ftpack@arg+1
 15463  0D75  0021               	movlb	1	; select bank1
 15464  0D76  082F               	movf	(___ftadd@f2+2)^(0+128),w
 15465  0D77  0020               	movlb	0	; select bank0
 15466  0D78  00B3               	movwf	___ftpack@arg+2
 15467  0D79  0021               	movlb	1	; select bank1
 15468  0D7A  0836               	movf	___ftadd@exp1^(0+128),w
 15469  0D7B  00B0               	movwf	??___ftadd^(0+128)
 15470  0D7C  0830               	movf	??___ftadd^(0+128),w
 15471  0D7D  0020               	movlb	0	; select bank0
 15472  0D7E  00B4               	movwf	___ftpack@exp
 15473  0D7F  0021               	movlb	1	; select bank1
 15474  0D80  0834               	movf	___ftadd@sign^(0+128),w
 15475  0D81  00B1               	movwf	(??___ftadd+1)^(0+128)
 15476  0D82  0831               	movf	(??___ftadd+1)^(0+128),w
 15477  0D83  0020               	movlb	0	; select bank0
 15478  0D84  00B5               	movwf	___ftpack@sign
 15479  0D85  3191  21E8         	fcall	___ftpack
 15480  0D87  0020               	movlb	0	; select bank0
 15481  0D88  0831               	movf	?___ftpack,w
 15482  0D89  0021               	movlb	1	; select bank1
 15483  0D8A  00AA               	movwf	?___ftadd^(0+128)
 15484  0D8B  0020               	movlb	0	; select bank0
 15485  0D8C  0832               	movf	?___ftpack+1,w
 15486  0D8D  0021               	movlb	1	; select bank1
 15487  0D8E  00AB               	movwf	(?___ftadd+1)^(0+128)
 15488  0D8F  0020               	movlb	0	; select bank0
 15489  0D90  0833               	movf	?___ftpack+2,w
 15490  0D91  0021               	movlb	1	; select bank1
 15491  0D92  00AC               	movwf	(?___ftadd+2)^(0+128)
 15492  0D93  0008               	return
 15493  0D94                     __end_of___ftadd:	
 15494                           
 15495                           	psect	text47
 15496  2302                     __ptext47:	
 15497 ;; *************** function ___wmul *****************
 15498 ;; Defined at:
 15499 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 15500 ;; Parameters:    Size  Location     Type
 15501 ;;  multiplier      2   17[BANK0 ] unsigned int 
 15502 ;;  multiplicand    2   19[BANK0 ] unsigned int 
 15503 ;; Auto vars:     Size  Location     Type
 15504 ;;  product         2   21[BANK0 ] unsigned int 
 15505 ;; Return value:  Size  Location     Type
 15506 ;;                  2   17[BANK0 ] unsigned int 
 15507 ;; Registers used:
 15508 ;;		wreg, status,2, status,0
 15509 ;; Tracked objects:
 15510 ;;		On entry : 0/0
 15511 ;;		On exit  : 0/0
 15512 ;;		Unchanged: 0/0
 15513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15514 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15517 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15518 ;;Total ram usage:        6 bytes
 15519 ;; Hardware stack levels used:    1
 15520 ;; Hardware stack levels required when called:    6
 15521 ;; This function calls:
 15522 ;;		Nothing
 15523 ;; This function is called by:
 15524 ;;		_calcUpstroke
 15525 ;;		_calcDownstroke
 15526 ;;		_atoi
 15527 ;; This function uses a non-reentrant model
 15528 ;;
 15529                           
 15530                           
 15531                           ;psect for function ___wmul
 15532  2302                     ___wmul:	
 15533                           
 15534                           ;incstack = 0
 15535                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 15536  2302  0020               	movlb	0	; select bank0
 15537  2303  01B5               	clrf	___wmul@product
 15538  2304  01B6               	clrf	___wmul@product+1
 15539  2305                     l8222:	
 15540  2305  1C31               	btfss	___wmul@multiplier,0
 15541  2306  2B0B               	goto	l1722
 15542  2307  0833               	movf	___wmul@multiplicand,w
 15543  2308  07B5               	addwf	___wmul@product,f
 15544  2309  0834               	movf	___wmul@multiplicand+1,w
 15545  230A  3DB6               	addwfc	___wmul@product+1,f
 15546  230B                     l1722:	
 15547  230B  3001               	movlw	1
 15548  230C                     u8135:	
 15549  230C  35B3               	lslf	___wmul@multiplicand,f
 15550  230D  0DB4               	rlf	___wmul@multiplicand+1,f
 15551  230E  0B89               	decfsz	9,f
 15552  230F  2B0C               	goto	u8135
 15553  2310  3001               	movlw	1
 15554  2311                     u8145:	
 15555  2311  36B2               	lsrf	___wmul@multiplier+1,f
 15556  2312  0CB1               	rrf	___wmul@multiplier,f
 15557  2313  0B89               	decfsz	9,f
 15558  2314  2B11               	goto	u8145
 15559  2315  0831               	movf	___wmul@multiplier,w
 15560  2316  0432               	iorwf	___wmul@multiplier+1,w
 15561  2317  1D03               	btfss	3,2
 15562  2318  2B05               	goto	l8222
 15563  2319  0836               	movf	___wmul@product+1,w
 15564  231A  00B2               	movwf	?___wmul+1
 15565  231B  0835               	movf	___wmul@product,w
 15566  231C  00B1               	movwf	?___wmul
 15567  231D  0008               	return
 15568  231E                     __end_of___wmul:	
 15569                           
 15570                           	psect	text48
 15571  2419                     __ptext48:	
 15572 ;; *************** function ___awtoft *****************
 15573 ;; Defined at:
 15574 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15575 ;; Parameters:    Size  Location     Type
 15576 ;;  c               2   32[BANK0 ] int 
 15577 ;; Auto vars:     Size  Location     Type
 15578 ;;  sign            1   37[BANK0 ] unsigned char 
 15579 ;; Return value:  Size  Location     Type
 15580 ;;                  3   32[BANK0 ] float 
 15581 ;; Registers used:
 15582 ;;		wreg, status,2, status,0, pclath, cstack
 15583 ;; Tracked objects:
 15584 ;;		On entry : 0/0
 15585 ;;		On exit  : 0/0
 15586 ;;		Unchanged: 0/0
 15587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15588 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15589 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15590 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15591 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15592 ;;Total ram usage:        6 bytes
 15593 ;; Hardware stack levels used:    1
 15594 ;; Hardware stack levels required when called:    7
 15595 ;; This function calls:
 15596 ;;		___ftpack
 15597 ;; This function is called by:
 15598 ;;		_main_initialize
 15599 ;;		_setDrvPiezoOnTime
 15600 ;;		_setH1OffTime
 15601 ;;		_setH2OnTime
 15602 ;;		_calcUpstroke
 15603 ;;		_calcDownstroke
 15604 ;;		_drv_outputSine
 15605 ;; This function uses a non-reentrant model
 15606 ;;
 15607                           
 15608                           
 15609                           ;psect for function ___awtoft
 15610  2419                     ___awtoft:	
 15611                           
 15612                           ;incstack = 0
 15613                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15614  2419  0020               	movlb	0	; select bank0
 15615  241A  01C5               	clrf	___awtoft@sign
 15616  241B  1FC1               	btfss	___awtoft@c+1,7
 15617  241C  2C24               	goto	l8286
 15618  241D  09C0               	comf	___awtoft@c,f
 15619  241E  09C1               	comf	___awtoft@c+1,f
 15620  241F  0AC0               	incf	___awtoft@c,f
 15621  2420  1903               	skipnz
 15622  2421  0AC1               	incf	___awtoft@c+1,f
 15623  2422  01C5               	clrf	___awtoft@sign
 15624  2423  0AC5               	incf	___awtoft@sign,f
 15625  2424                     l8286:	
 15626  2424  0840               	movf	___awtoft@c,w
 15627  2425  00B1               	movwf	___ftpack@arg
 15628  2426  0841               	movf	___awtoft@c+1,w
 15629  2427  00B2               	movwf	___ftpack@arg+1
 15630  2428  01B3               	clrf	___ftpack@arg+2
 15631  2429  308E               	movlw	142
 15632  242A  00C3               	movwf	??___awtoft
 15633  242B  0843               	movf	??___awtoft,w
 15634  242C  00B4               	movwf	___ftpack@exp
 15635  242D  0845               	movf	___awtoft@sign,w
 15636  242E  00C4               	movwf	??___awtoft+1
 15637  242F  0844               	movf	??___awtoft+1,w
 15638  2430  00B5               	movwf	___ftpack@sign
 15639  2431  3191  21E8         	fcall	___ftpack
 15640  2433  0020               	movlb	0	; select bank0
 15641  2434  0831               	movf	?___ftpack,w
 15642  2435  00C0               	movwf	?___awtoft
 15643  2436  0832               	movf	?___ftpack+1,w
 15644  2437  00C1               	movwf	?___awtoft+1
 15645  2438  0833               	movf	?___ftpack+2,w
 15646  2439  00C2               	movwf	?___awtoft+2
 15647  243A  0008               	return
 15648  243B                     __end_of___awtoft:	
 15649                           
 15650                           	psect	text49
 15651  11E8                     __ptext49:	
 15652 ;; *************** function ___ftpack *****************
 15653 ;; Defined at:
 15654 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15655 ;; Parameters:    Size  Location     Type
 15656 ;;  arg             3   17[BANK0 ] unsigned um
 15657 ;;  exp             1   20[BANK0 ] unsigned char 
 15658 ;;  sign            1   21[BANK0 ] unsigned char 
 15659 ;; Auto vars:     Size  Location     Type
 15660 ;;		None
 15661 ;; Return value:  Size  Location     Type
 15662 ;;                  3   17[BANK0 ] float 
 15663 ;; Registers used:
 15664 ;;		wreg, status,2, status,0
 15665 ;; Tracked objects:
 15666 ;;		On entry : 0/0
 15667 ;;		On exit  : 0/0
 15668 ;;		Unchanged: 0/0
 15669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15670 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15672 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15673 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15674 ;;Total ram usage:        8 bytes
 15675 ;; Hardware stack levels used:    1
 15676 ;; Hardware stack levels required when called:    6
 15677 ;; This function calls:
 15678 ;;		Nothing
 15679 ;; This function is called by:
 15680 ;;		___altoft
 15681 ;;		___awtoft
 15682 ;;		___ftadd
 15683 ;;		___ftmul
 15684 ;; This function uses a non-reentrant model
 15685 ;;
 15686                           
 15687                           
 15688                           ;psect for function ___ftpack
 15689  11E8                     ___ftpack:	
 15690                           
 15691                           ;incstack = 0
 15692                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15693  11E8  0020               	movlb	0	; select bank0
 15694  11E9  0834               	movf	___ftpack@exp,w
 15695  11EA  1903               	btfsc	3,2
 15696  11EB  29F1               	goto	l7770
 15697  11EC  0833               	movf	___ftpack@arg+2,w
 15698  11ED  0432               	iorwf	___ftpack@arg+1,w
 15699  11EE  0431               	iorwf	___ftpack@arg,w
 15700  11EF  1D03               	skipz
 15701  11F0  2A02               	goto	l7776
 15702  11F1                     l7770:	
 15703  11F1  3000               	movlw	0
 15704  11F2  00B1               	movwf	?___ftpack
 15705  11F3  3000               	movlw	0
 15706  11F4  00B2               	movwf	?___ftpack+1
 15707  11F5  3000               	movlw	0
 15708  11F6  00B3               	movwf	?___ftpack+2
 15709  11F7  0008               	return
 15710  11F8                     l7774:	
 15711  11F8  3001               	movlw	1
 15712  11F9  00B6               	movwf	??___ftpack
 15713  11FA  0836               	movf	??___ftpack,w
 15714  11FB  07B4               	addwf	___ftpack@exp,f
 15715  11FC  3001               	movlw	1
 15716  11FD                     u7095:	
 15717  11FD  36B3               	lsrf	___ftpack@arg+2,f
 15718  11FE  0CB2               	rrf	___ftpack@arg+1,f
 15719  11FF  0CB1               	rrf	___ftpack@arg,f
 15720  1200  0B89               	decfsz	9,f
 15721  1201  29FD               	goto	u7095
 15722  1202                     l7776:	
 15723  1202  30FE               	movlw	254
 15724  1203  0533               	andwf	___ftpack@arg+2,w
 15725  1204  1903               	btfsc	3,2
 15726  1205  2A1B               	goto	l1898
 15727  1206  29F8               	goto	l7774
 15728  1207                     l7778:	
 15729  1207  3001               	movlw	1
 15730  1208  00B6               	movwf	??___ftpack
 15731  1209  0836               	movf	??___ftpack,w
 15732  120A  07B4               	addwf	___ftpack@exp,f
 15733  120B  3001               	movlw	1
 15734  120C  07B1               	addwf	___ftpack@arg,f
 15735  120D  3000               	movlw	0
 15736  120E  1803               	skipnc
 15737  120F  3001               	movlw	1
 15738  1210  07B2               	addwf	___ftpack@arg+1,f
 15739  1211  3000               	movlw	0
 15740  1212  1803               	skipnc
 15741  1213  3001               	movlw	1
 15742  1214  07B3               	addwf	___ftpack@arg+2,f
 15743  1215  3001               	movlw	1
 15744  1216                     u7115:	
 15745  1216  36B3               	lsrf	___ftpack@arg+2,f
 15746  1217  0CB2               	rrf	___ftpack@arg+1,f
 15747  1218  0CB1               	rrf	___ftpack@arg,f
 15748  1219  0B89               	decfsz	9,f
 15749  121A  2A16               	goto	u7115
 15750  121B                     l1898:	
 15751  121B  30FF               	movlw	255
 15752  121C  0533               	andwf	___ftpack@arg+2,w
 15753  121D  1903               	btfsc	3,2
 15754  121E  2A28               	goto	l7786
 15755  121F  2A07               	goto	l7778
 15756  1220                     l7784:	
 15757  1220  3001               	movlw	1
 15758  1221  02B4               	subwf	___ftpack@exp,f
 15759  1222  3001               	movlw	1
 15760  1223                     u7135:	
 15761  1223  35B1               	lslf	___ftpack@arg,f
 15762  1224  0DB2               	rlf	___ftpack@arg+1,f
 15763  1225  0DB3               	rlf	___ftpack@arg+2,f
 15764  1226  0B89               	decfsz	9,f
 15765  1227  2A23               	goto	u7135
 15766  1228                     l7786:	
 15767  1228  1BB2               	btfsc	___ftpack@arg+1,7
 15768  1229  2A2E               	goto	l1905
 15769  122A  3002               	movlw	2
 15770  122B  0234               	subwf	___ftpack@exp,w
 15771  122C  1803               	skipnc
 15772  122D  2A20               	goto	l7784
 15773  122E                     l1905:	
 15774  122E  1834               	btfsc	___ftpack@exp,0
 15775  122F  2A36               	goto	l1906
 15776  1230  30FF               	movlw	255
 15777  1231  05B1               	andwf	___ftpack@arg,f
 15778  1232  307F               	movlw	127
 15779  1233  05B2               	andwf	___ftpack@arg+1,f
 15780  1234  30FF               	movlw	255
 15781  1235  05B3               	andwf	___ftpack@arg+2,f
 15782  1236                     l1906:	
 15783  1236  1003               	clrc
 15784  1237  0CB4               	rrf	___ftpack@exp,f
 15785  1238  0834               	movf	___ftpack@exp,w
 15786  1239  00B6               	movwf	??___ftpack
 15787  123A  01B7               	clrf	??___ftpack+1
 15788  123B  01B8               	clrf	??___ftpack+2
 15789  123C  3010               	movlw	16
 15790  123D                     u7175:	
 15791  123D  35B6               	lslf	??___ftpack,f
 15792  123E  0DB7               	rlf	??___ftpack+1,f
 15793  123F  0DB8               	rlf	??___ftpack+2,f
 15794  1240  0B89               	decfsz	9,f
 15795  1241  2A3D               	goto	u7175
 15796  1242  0836               	movf	??___ftpack,w
 15797  1243  04B1               	iorwf	___ftpack@arg,f
 15798  1244  0837               	movf	??___ftpack+1,w
 15799  1245  04B2               	iorwf	___ftpack@arg+1,f
 15800  1246  0838               	movf	??___ftpack+2,w
 15801  1247  04B3               	iorwf	___ftpack@arg+2,f
 15802  1248  0835               	movf	___ftpack@sign,w
 15803  1249  1903               	btfsc	3,2
 15804  124A  0008               	return
 15805  124B  17B3               	bsf	___ftpack@arg+2,7
 15806  124C  0008               	return
 15807  124D                     __end_of___ftpack:	
 15808                           
 15809                           	psect	text50
 15810  1997                     __ptext50:	
 15811 ;; *************** function _setDrvGain *****************
 15812 ;; Defined at:
 15813 ;;		line 390 in file "main.c"
 15814 ;; Parameters:    Size  Location     Type
 15815 ;;  gain            2   21[BANK1 ] int 
 15816 ;; Auto vars:     Size  Location     Type
 15817 ;;  setGain         2   24[BANK1 ] int 
 15818 ;; Return value:  Size  Location     Type
 15819 ;;                  2   21[BANK1 ] int 
 15820 ;; Registers used:
 15821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15822 ;; Tracked objects:
 15823 ;;		On entry : 0/0
 15824 ;;		On exit  : 0/0
 15825 ;;		Unchanged: 0/0
 15826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15827 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15828 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15829 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15830 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15831 ;;Total ram usage:        5 bytes
 15832 ;; Hardware stack levels used:    1
 15833 ;; Hardware stack levels required when called:   13
 15834 ;; This function calls:
 15835 ;;		_drv_write
 15836 ;;		_printf
 15837 ;; This function is called by:
 15838 ;;		_execCmd
 15839 ;; This function uses a non-reentrant model
 15840 ;;
 15841                           
 15842                           
 15843                           ;psect for function _setDrvGain
 15844  1997                     _setDrvGain:	
 15845                           
 15846                           ;main.c: 391: int setGain = 0;
 15847                           
 15848                           ;incstack = 0
 15849                           ; Regs used in _setDrvGain: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15850  1997  0021               	movlb	1	; select bank1
 15851  1998  01B8               	clrf	setDrvGain@setGain^(0+128)
 15852  1999  01B9               	clrf	(setDrvGain@setGain+1)^(0+128)
 15853                           
 15854                           ;main.c: 392: switch (gain){
 15855  199A  29B3               	goto	l8698
 15856  199B                     l8682:	
 15857                           ;main.c: 393: case 0: setGain = 0x00; break;
 15858                           
 15859  199B  01B8               	clrf	setDrvGain@setGain^(0+128)
 15860  199C  01B9               	clrf	(setDrvGain@setGain+1)^(0+128)
 15861  199D  29C6               	goto	l8700
 15862  199E                     l8684:	
 15863                           ;main.c: 394: case 1: setGain = 0x01; break;
 15864                           
 15865  199E  3001               	movlw	1
 15866  199F  29A3               	goto	L30
 15867  19A0                     l8686:	
 15868                           ;main.c: 395: case 2: setGain = 0x02; break;
 15869                           
 15870  19A0  3002               	movlw	2
 15871  19A1  29A3               	goto	L30
 15872  19A2                     l8688:	
 15873                           ;main.c: 396: case 3: setGain = 0x03; break;
 15874                           
 15875  19A2  3003               	movlw	3
 15876  19A3                     L30:	
 15877  19A3  00B8               	movwf	setDrvGain@setGain^(0+128)
 15878  19A4  3000               	movlw	0
 15879  19A5  00B9               	movwf	(setDrvGain@setGain^(0+128)+1)
 15880  19A6  29C6               	goto	l8700
 15881  19A7                     l8690:	
 15882                           ;main.c: 397: default: printf("E\n"); return 1;
 15883                           
 15884  19A7  303B               	movlw	low (STR_12| (0+32768))
 15885  19A8  00A0               	movwf	printf@f^(0+128)
 15886  19A9  30B0               	movlw	high (STR_12| (0+32768))
 15887  19AA  00A1               	movwf	(printf@f^(0+128)+1)
 15888  19AB  318D  2594         	fcall	_printf
 15889  19AD  3001               	movlw	1
 15890  19AE  0021               	movlb	1	; select bank1
 15891  19AF  00B5               	movwf	?_setDrvGain^(0+128)
 15892  19B0  3000               	movlw	0
 15893  19B1  00B6               	movwf	(?_setDrvGain^(0+128)+1)
 15894  19B2  0008               	return
 15895  19B3                     l8698:	
 15896                           ;main.c: 398: }
 15897                           
 15898                           
 15899                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15900                           ; Switch size 1, requested type "space"
 15901                           ; Number of cases is 1, Range of values is 0 to 0
 15902                           ; switch strategies available:
 15903                           ; Name         Instructions Cycles
 15904                           ; simple_byte            4     3 (average)
 15905                           ; direct_byte            8     6 (fixed)
 15906                           ; jumptable            260     6 (fixed)
 15907                           ;	Chosen strategy is simple_byte
 15908  19B3  0836               	movf	(setDrvGain@gain+1)^(0+128),w
 15909  19B4  3A00               	xorlw	0	; case 0
 15910  19B5  1903               	skipnz
 15911  19B6  29B8               	goto	l9574
 15912  19B7  29A7               	goto	l8690
 15913  19B8                     l9574:	
 15914                           
 15915                           ; Switch size 1, requested type "space"
 15916                           ; Number of cases is 4, Range of values is 0 to 3
 15917                           ; switch strategies available:
 15918                           ; Name         Instructions Cycles
 15919                           ; simple_byte           13     7 (average)
 15920                           ; direct_byte           14     6 (fixed)
 15921                           ; jumptable            260     6 (fixed)
 15922                           ;	Chosen strategy is simple_byte
 15923  19B8  0835               	movf	setDrvGain@gain^(0+128),w
 15924  19B9  3A00               	xorlw	0	; case 0
 15925  19BA  1903               	skipnz
 15926  19BB  299B               	goto	l8682
 15927  19BC  3A01               	xorlw	1	; case 1
 15928  19BD  1903               	skipnz
 15929  19BE  299E               	goto	l8684
 15930  19BF  3A03               	xorlw	3	; case 2
 15931  19C0  1903               	skipnz
 15932  19C1  29A0               	goto	l8686
 15933  19C2  3A01               	xorlw	1	; case 3
 15934  19C3  1903               	skipnz
 15935  19C4  29A2               	goto	l8688
 15936  19C5  29A7               	goto	l8690
 15937  19C6                     l8700:	
 15938                           
 15939                           ;main.c: 399: drv_write(0x01, setGain);
 15940  19C6  0838               	movf	setDrvGain@setGain^(0+128),w
 15941  19C7  00B7               	movwf	??_setDrvGain^(0+128)
 15942  19C8  0837               	movf	??_setDrvGain^(0+128),w
 15943  19C9  0020               	movlb	0	; select bank0
 15944  19CA  00C9               	movwf	drv_write@data
 15945  19CB  3001               	movlw	1
 15946  19CC  31A4  2483  3199   	fcall	_drv_write
 15947                           
 15948                           ;main.c: 400: printf("A\n");
 15949  19CF  3038               	movlw	low (STR_5| (0+32768))
 15950  19D0  0021               	movlb	1	; select bank1
 15951  19D1  00A0               	movwf	printf@f^(0+128)
 15952  19D2  30B0               	movlw	high (STR_5| (0+32768))
 15953  19D3  00A1               	movwf	(printf@f^(0+128)+1)
 15954  19D4  318D  2594         	fcall	_printf
 15955                           
 15956                           ;main.c: 401: return 0;
 15957  19D6  0021               	movlb	1	; select bank1
 15958  19D7  01B5               	clrf	?_setDrvGain^(0+128)
 15959  19D8  01B6               	clrf	(?_setDrvGain+1)^(0+128)
 15960  19D9  0008               	return
 15961  19DA                     __end_of_setDrvGain:	
 15962                           
 15963                           	psect	text51
 15964  1418                     __ptext51:	
 15965 ;; *************** function _setActive *****************
 15966 ;; Defined at:
 15967 ;;		line 507 in file "main.c"
 15968 ;; Parameters:    Size  Location     Type
 15969 ;;  probeNum        2   21[BANK1 ] int 
 15970 ;;  onOff           2   23[BANK1 ] int 
 15971 ;; Auto vars:     Size  Location     Type
 15972 ;;		None
 15973 ;; Return value:  Size  Location     Type
 15974 ;;                  2   21[BANK1 ] int 
 15975 ;; Registers used:
 15976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15977 ;; Tracked objects:
 15978 ;;		On entry : 0/0
 15979 ;;		On exit  : 0/0
 15980 ;;		Unchanged: 0/0
 15981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15982 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15984 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15985 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15986 ;;Total ram usage:       12 bytes
 15987 ;; Hardware stack levels used:    1
 15988 ;; Hardware stack levels required when called:    9
 15989 ;; This function calls:
 15990 ;;		_printf
 15991 ;; This function is called by:
 15992 ;;		_execCmd
 15993 ;; This function uses a non-reentrant model
 15994 ;;
 15995                           
 15996                           
 15997                           ;psect for function _setActive
 15998  1418                     _setActive:	
 15999                           
 16000                           ;main.c: 510: if(moveMask & 1UL << probeNum){
 16001                           
 16002                           ;incstack = 0
 16003                           ; Regs used in _setActive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16004  1418  0021               	movlb	1	; select bank1
 16005  1419  0858               	movf	_moveMask^(0+128),w
 16006  141A  00B9               	movwf	??_setActive^(0+128)
 16007  141B  0859               	movf	(_moveMask+1)^(0+128),w
 16008  141C  00BA               	movwf	(??_setActive^(0+128)+1)
 16009  141D  085A               	movf	(_moveMask+2)^(0+128),w
 16010  141E  00BB               	movwf	(??_setActive^(0+128)+2)
 16011  141F  085B               	movf	(_moveMask+3)^(0+128),w
 16012  1420  00BC               	movwf	(??_setActive^(0+128)+3)
 16013  1421  3001               	movlw	1
 16014  1422  00BD               	movwf	(??_setActive+4)^(0+128)
 16015  1423  3000               	movlw	0
 16016  1424  00BE               	movwf	((??_setActive+4)^(0+128)+1)
 16017  1425  3000               	movlw	0
 16018  1426  00BF               	movwf	((??_setActive+4)^(0+128)+2)
 16019  1427  3000               	movlw	0
 16020  1428  00C0               	movwf	((??_setActive+4)^(0+128)+3)
 16021  1429  0A35               	incf	setActive@probeNum^(0+128),w
 16022  142A  2C2F               	goto	u8780
 16023  142B                     u8785:	
 16024  142B  35BD               	lslf	(??_setActive+4)^(0+128),f
 16025  142C  0DBE               	rlf	((??_setActive+4)^(0+128)+1),f
 16026  142D  0DBF               	rlf	((??_setActive+4)^(0+128)+2),f
 16027  142E  0DC0               	rlf	((??_setActive+4)^(0+128)+3),f
 16028  142F                     u8780:	
 16029  142F  0B89               	decfsz	9,f
 16030  1430  2C2B               	goto	u8785
 16031  1431  083D               	movf	(??_setActive+4)^(0+128),w
 16032  1432  05B9               	andwf	??_setActive^(0+128),f
 16033  1433  083E               	movf	(??_setActive+5)^(0+128),w
 16034  1434  05BA               	andwf	(??_setActive^(0+128)+1),f
 16035  1435  083F               	movf	(??_setActive+6)^(0+128),w
 16036  1436  05BB               	andwf	(??_setActive^(0+128)+2),f
 16037  1437  0840               	movf	(??_setActive+7)^(0+128),w
 16038  1438  05BC               	andwf	(??_setActive^(0+128)+3),f
 16039  1439  083C               	movf	(??_setActive+3)^(0+128),w
 16040  143A  043B               	iorwf	(??_setActive+2)^(0+128),w
 16041  143B  043A               	iorwf	(??_setActive+1)^(0+128),w
 16042  143C  0439               	iorwf	??_setActive^(0+128),w
 16043  143D  1903               	skipnz
 16044  143E  2C82               	goto	l8824
 16045                           
 16046                           ;main.c: 511: if (onOff)
 16047  143F  0837               	movf	setActive@onOff^(0+128),w
 16048  1440  0438               	iorwf	(setActive@onOff+1)^(0+128),w
 16049  1441  1903               	btfsc	3,2
 16050  1442  2C5C               	goto	l8816
 16051                           
 16052                           ;main.c: 512: activeMask |= 1UL << probeNum;
 16053  1443  3001               	movlw	1
 16054  1444  00B9               	movwf	??_setActive^(0+128)
 16055  1445  3000               	movlw	0
 16056  1446  00BA               	movwf	(??_setActive^(0+128)+1)
 16057  1447  3000               	movlw	0
 16058  1448  00BB               	movwf	(??_setActive^(0+128)+2)
 16059  1449  3000               	movlw	0
 16060  144A  00BC               	movwf	(??_setActive^(0+128)+3)
 16061  144B  0A35               	incf	setActive@probeNum^(0+128),w
 16062  144C  2C51               	goto	u8810
 16063  144D                     u8815:	
 16064  144D  35B9               	lslf	??_setActive^(0+128),f
 16065  144E  0DBA               	rlf	(??_setActive^(0+128)+1),f
 16066  144F  0DBB               	rlf	(??_setActive^(0+128)+2),f
 16067  1450  0DBC               	rlf	(??_setActive^(0+128)+3),f
 16068  1451                     u8810:	
 16069  1451  0B89               	decfsz	9,f
 16070  1452  2C4D               	goto	u8815
 16071  1453  0839               	movf	??_setActive^(0+128),w
 16072  1454  04DC               	iorwf	_activeMask^(0+128),f
 16073  1455  083A               	movf	(??_setActive+1)^(0+128),w
 16074  1456  04DD               	iorwf	(_activeMask+1)^(0+128),f
 16075  1457  083B               	movf	(??_setActive+2)^(0+128),w
 16076  1458  04DE               	iorwf	(_activeMask+2)^(0+128),f
 16077  1459  083C               	movf	(??_setActive+3)^(0+128),w
 16078  145A  04DF               	iorwf	(_activeMask+3)^(0+128),f
 16079  145B  2C78               	goto	l8818
 16080  145C                     l8816:	
 16081                           
 16082                           ;main.c: 513: else
 16083                           ;main.c: 514: activeMask &= ~(1UL << probeNum);
 16084  145C  3001               	movlw	1
 16085  145D  00B9               	movwf	??_setActive^(0+128)
 16086  145E  3000               	movlw	0
 16087  145F  00BA               	movwf	(??_setActive^(0+128)+1)
 16088  1460  3000               	movlw	0
 16089  1461  00BB               	movwf	(??_setActive^(0+128)+2)
 16090  1462  3000               	movlw	0
 16091  1463  00BC               	movwf	(??_setActive^(0+128)+3)
 16092  1464  0A35               	incf	setActive@probeNum^(0+128),w
 16093  1465  2C6A               	goto	u8820
 16094  1466                     u8825:	
 16095  1466  35B9               	lslf	??_setActive^(0+128),f
 16096  1467  0DBA               	rlf	(??_setActive^(0+128)+1),f
 16097  1468  0DBB               	rlf	(??_setActive^(0+128)+2),f
 16098  1469  0DBC               	rlf	(??_setActive^(0+128)+3),f
 16099  146A                     u8820:	
 16100  146A  0B89               	decfsz	9,f
 16101  146B  2C66               	goto	u8825
 16102  146C  09B9               	comf	??_setActive^(0+128),f
 16103  146D  09BA               	comf	(??_setActive^(0+128)+1),f
 16104  146E  09BB               	comf	(??_setActive^(0+128)+2),f
 16105  146F  09BC               	comf	(??_setActive^(0+128)+3),f
 16106  1470  0839               	movf	??_setActive^(0+128),w
 16107  1471  05DC               	andwf	_activeMask^(0+128),f
 16108  1472  083A               	movf	(??_setActive+1)^(0+128),w
 16109  1473  05DD               	andwf	(_activeMask+1)^(0+128),f
 16110  1474  083B               	movf	(??_setActive+2)^(0+128),w
 16111  1475  05DE               	andwf	(_activeMask+2)^(0+128),f
 16112  1476  083C               	movf	(??_setActive+3)^(0+128),w
 16113  1477  05DF               	andwf	(_activeMask+3)^(0+128),f
 16114  1478                     l8818:	
 16115                           
 16116                           ;main.c: 515: printf("A\n");
 16117  1478  3038               	movlw	low (STR_5| (0+32768))
 16118  1479  00A0               	movwf	printf@f^(0+128)
 16119  147A  30B0               	movlw	high (STR_5| (0+32768))
 16120  147B  00A1               	movwf	(printf@f^(0+128)+1)
 16121  147C  318D  2594         	fcall	_printf
 16122                           
 16123                           ;main.c: 516: return 0;
 16124  147E  0021               	movlb	1	; select bank1
 16125  147F  01B5               	clrf	?_setActive^(0+128)
 16126  1480  01B6               	clrf	(?_setActive+1)^(0+128)
 16127  1481  0008               	return
 16128  1482                     l8824:	
 16129                           
 16130                           ;main.c: 517: }
 16131                           ;main.c: 518: printf("E\n");
 16132  1482  303B               	movlw	low (STR_12| (0+32768))
 16133  1483  00A0               	movwf	printf@f^(0+128)
 16134  1484  30B0               	movlw	high (STR_12| (0+32768))
 16135  1485  00A1               	movwf	(printf@f^(0+128)+1)
 16136  1486  318D  2594         	fcall	_printf
 16137                           
 16138                           ;main.c: 519: return 1;
 16139  1488  3001               	movlw	1
 16140  1489  0021               	movlb	1	; select bank1
 16141  148A  00B5               	movwf	?_setActive^(0+128)
 16142  148B  3000               	movlw	0
 16143  148C  00B6               	movwf	(?_setActive^(0+128)+1)
 16144  148D  0008               	return
 16145  148E                     __end_of_setActive:	
 16146                           
 16147                           	psect	text52
 16148  27C1                     __ptext52:	
 16149 ;; *************** function _getPosition *****************
 16150 ;; Defined at:
 16151 ;;		line 370 in file "main.c"
 16152 ;; Parameters:    Size  Location     Type
 16153 ;;  a               2   21[BANK1 ] int 
 16154 ;; Auto vars:     Size  Location     Type
 16155 ;;		None
 16156 ;; Return value:  Size  Location     Type
 16157 ;;                  2   21[BANK1 ] int 
 16158 ;; Registers used:
 16159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16160 ;; Tracked objects:
 16161 ;;		On entry : 0/0
 16162 ;;		On exit  : 0/0
 16163 ;;		Unchanged: 0/0
 16164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16165 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16167 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16168 ;;      Totals:         0       4       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16169 ;;Total ram usage:        6 bytes
 16170 ;; Hardware stack levels used:    1
 16171 ;; Hardware stack levels required when called:    9
 16172 ;; This function calls:
 16173 ;;		_printf
 16174 ;; This function is called by:
 16175 ;;		_execCmd
 16176 ;; This function uses a non-reentrant model
 16177 ;;
 16178                           
 16179                           
 16180                           ;psect for function _getPosition
 16181  27C1                     _getPosition:	
 16182                           
 16183                           ;main.c: 372: if (a>=0 && a < 24){
 16184                           
 16185                           ;incstack = 0
 16186                           ; Regs used in _getPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16187  27C1  0021               	movlb	1	; select bank1
 16188  27C2  1BB6               	btfsc	(getPosition@a+1)^(0+128),7
 16189  27C3  2FFA               	goto	l8664
 16190  27C4  0836               	movf	(getPosition@a+1)^(0+128),w
 16191  27C5  3A80               	xorlw	128
 16192  27C6  0020               	movlb	0	; select bank0
 16193  27C7  00C9               	movwf	??_getPosition
 16194  27C8  3080               	movlw	128
 16195  27C9  0249               	subwf	??_getPosition,w
 16196  27CA  1D03               	skipz
 16197  27CB  2FCF               	goto	u8695
 16198  27CC  3018               	movlw	24
 16199  27CD  0021               	movlb	1	; select bank1
 16200  27CE  0235               	subwf	getPosition@a^(0+128),w
 16201  27CF                     u8695:	
 16202  27CF  1803               	skipnc
 16203  27D0  2FFA               	goto	l8664
 16204                           
 16205                           ;main.c: 373: printf("%d\n", currentPositions_steps[a]);
 16206  27D1  302A               	movlw	low (STR_10| (0+32768))
 16207  27D2  0021               	movlb	1	; select bank1
 16208  27D3  00A0               	movwf	printf@f^(0+128)
 16209  27D4  30B0               	movlw	high (STR_10| (0+32768))
 16210  27D5  00A1               	movwf	(printf@f^(0+128)+1)
 16211  27D6  0836               	movf	(getPosition@a+1)^(0+128),w
 16212  27D7  0020               	movlb	0	; select bank0
 16213  27D8  00CA               	movwf	??_getPosition+1
 16214  27D9  0021               	movlb	1	; select bank1
 16215  27DA  0835               	movf	getPosition@a^(0+128),w
 16216  27DB  0020               	movlb	0	; select bank0
 16217  27DC  00C9               	movwf	??_getPosition
 16218  27DD  35C9               	lslf	??_getPosition,f
 16219  27DE  0DCA               	rlf	??_getPosition+1,f
 16220  27DF  35C9               	lslf	??_getPosition,f
 16221  27E0  0DCA               	rlf	??_getPosition+1,f
 16222  27E1  3090               	movlw	144
 16223  27E2  00CB               	movwf	??_getPosition+2
 16224  27E3  3027               	movlw	39
 16225  27E4  00CC               	movwf	??_getPosition+3
 16226  27E5  0849               	movf	??_getPosition,w
 16227  27E6  074B               	addwf	??_getPosition+2,w
 16228  27E7  0086               	movwf	6
 16229  27E8  084A               	movf	??_getPosition+1,w
 16230  27E9  3D4C               	addwfc	??_getPosition+3,w
 16231  27EA  0087               	movwf	7
 16232  27EB  3F40               	moviw [0]fsr1
 16233  27EC  0021               	movlb	1	; select bank1
 16234  27ED  00A2               	movwf	(?_printf^(0+128)+2)
 16235  27EE  3F41               	moviw [1]fsr1
 16236  27EF  00A3               	movwf	((?_printf+1)^(0+128)+2)
 16237  27F0  3F42               	moviw [2]fsr1
 16238  27F1  00A4               	movwf	((?_printf+2)^(0+128)+2)
 16239  27F2  3F43               	moviw [3]fsr1
 16240  27F3  00A5               	movwf	((?_printf+3)^(0+128)+2)
 16241  27F4  318D  2594         	fcall	_printf
 16242                           
 16243                           ;main.c: 374: return 0;
 16244  27F6  0021               	movlb	1	; select bank1
 16245  27F7  01B5               	clrf	?_getPosition^(0+128)
 16246  27F8  01B6               	clrf	(?_getPosition+1)^(0+128)
 16247  27F9  0008               	return
 16248  27FA                     l8664:	
 16249                           
 16250                           ;main.c: 375: }
 16251                           ;main.c: 377: return 1;
 16252  27FA  3001               	movlw	1
 16253  27FB  0021               	movlb	1	; select bank1
 16254  27FC  00B5               	movwf	?_getPosition^(0+128)
 16255  27FD  3000               	movlw	0
 16256  27FE  00B6               	movwf	(?_getPosition^(0+128)+1)
 16257  27FF  0008               	return
 16258  2800                     __end_of_getPosition:	
 16259                           
 16260                           	psect	text53
 16261  1B96                     __ptext53:	
 16262 ;; *************** function _getMoveMask *****************
 16263 ;; Defined at:
 16264 ;;		line 547 in file "main.c"
 16265 ;; Parameters:    Size  Location     Type
 16266 ;;		None
 16267 ;; Auto vars:     Size  Location     Type
 16268 ;;  i               2   23[BANK1 ] int 
 16269 ;; Return value:  Size  Location     Type
 16270 ;;                  2   21[BANK1 ] int 
 16271 ;; Registers used:
 16272 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16273 ;; Tracked objects:
 16274 ;;		On entry : 0/0
 16275 ;;		On exit  : 0/0
 16276 ;;		Unchanged: 0/0
 16277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16278 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16279 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16280 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16281 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16282 ;;Total ram usage:        8 bytes
 16283 ;; Hardware stack levels used:    1
 16284 ;; Hardware stack levels required when called:    9
 16285 ;; This function calls:
 16286 ;;		_printf
 16287 ;; This function is called by:
 16288 ;;		_execCmd
 16289 ;; This function uses a non-reentrant model
 16290 ;;
 16291                           
 16292                           
 16293                           ;psect for function _getMoveMask
 16294  1B96                     _getMoveMask:	
 16295                           
 16296                           ;main.c: 548: for(int i=24-1; i>=0; i--){
 16297                           
 16298                           ;incstack = 0
 16299                           ; Regs used in _getMoveMask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16300  1B96  3017               	movlw	23
 16301  1B97  0021               	movlb	1	; select bank1
 16302  1B98  00B7               	movwf	getMoveMask@i^(0+128)
 16303  1B99  3000               	movlw	0
 16304  1B9A  00B8               	movwf	(getMoveMask@i^(0+128)+1)
 16305  1B9B  1BB8               	btfsc	(getMoveMask@i+1)^(0+128),7
 16306  1B9C  2BD9               	goto	l8880
 16307  1B9D                     l8874:	
 16308                           
 16309                           ;main.c: 549: printf("%d ", (moveMask >> i) & 1 );
 16310  1B9D  302E               	movlw	low (STR_1| (0+32768))
 16311  1B9E  00A0               	movwf	printf@f^(0+128)
 16312  1B9F  30B0               	movlw	high (STR_1| (0+32768))
 16313  1BA0  00A1               	movwf	(printf@f^(0+128)+1)
 16314  1BA1  0858               	movf	_moveMask^(0+128),w
 16315  1BA2  0020               	movlb	0	; select bank0
 16316  1BA3  00C9               	movwf	??_getMoveMask
 16317  1BA4  0021               	movlb	1	; select bank1
 16318  1BA5  0859               	movf	(_moveMask+1)^(0+128),w
 16319  1BA6  0020               	movlb	0	; select bank0
 16320  1BA7  00CA               	movwf	??_getMoveMask+1
 16321  1BA8  0021               	movlb	1	; select bank1
 16322  1BA9  085A               	movf	(_moveMask+2)^(0+128),w
 16323  1BAA  0020               	movlb	0	; select bank0
 16324  1BAB  00CB               	movwf	??_getMoveMask+2
 16325  1BAC  0021               	movlb	1	; select bank1
 16326  1BAD  085B               	movf	(_moveMask+3)^(0+128),w
 16327  1BAE  0020               	movlb	0	; select bank0
 16328  1BAF  00CC               	movwf	??_getMoveMask+3
 16329  1BB0  0021               	movlb	1	; select bank1
 16330  1BB1  0A37               	incf	getMoveMask@i^(0+128),w
 16331  1BB2  0020               	movlb	0	; select bank0
 16332  1BB3  2BB9               	goto	u8910
 16333  1BB4                     u8915:	
 16334  1BB4  1003               	clrc
 16335  1BB5  0CCC               	rrf	??_getMoveMask+3,f
 16336  1BB6  0CCB               	rrf	??_getMoveMask+2,f
 16337  1BB7  0CCA               	rrf	??_getMoveMask+1,f
 16338  1BB8  0CC9               	rrf	??_getMoveMask,f
 16339  1BB9                     u8910:	
 16340  1BB9  3EFF               	addlw	-1
 16341  1BBA  1D03               	skipz
 16342  1BBB  2BB4               	goto	u8915
 16343  1BBC  3001               	movlw	1
 16344  1BBD  0549               	andwf	??_getMoveMask,w
 16345  1BBE  0021               	movlb	1	; select bank1
 16346  1BBF  00A2               	movwf	(?_printf^(0+128)+2)
 16347  1BC0  3000               	movlw	0
 16348  1BC1  0020               	movlb	0	; select bank0
 16349  1BC2  054A               	andwf	??_getMoveMask+1,w
 16350  1BC3  0021               	movlb	1	; select bank1
 16351  1BC4  00A3               	movwf	((?_printf+1)^(0+128)+2)
 16352  1BC5  3000               	movlw	0
 16353  1BC6  0020               	movlb	0	; select bank0
 16354  1BC7  054B               	andwf	??_getMoveMask+2,w
 16355  1BC8  0021               	movlb	1	; select bank1
 16356  1BC9  00A4               	movwf	((?_printf+2)^(0+128)+2)
 16357  1BCA  3000               	movlw	0
 16358  1BCB  0020               	movlb	0	; select bank0
 16359  1BCC  054C               	andwf	??_getMoveMask+3,w
 16360  1BCD  0021               	movlb	1	; select bank1
 16361  1BCE  00A5               	movwf	((?_printf+3)^(0+128)+2)
 16362  1BCF  318D  2594  319B   	fcall	_printf
 16363  1BD2  30FF               	movlw	255
 16364  1BD3  0021               	movlb	1	; select bank1
 16365  1BD4  07B7               	addwf	getMoveMask@i^(0+128),f
 16366  1BD5  30FF               	movlw	255
 16367  1BD6  3DB8               	addwfc	(getMoveMask@i+1)^(0+128),f
 16368  1BD7  1FB8               	btfss	(getMoveMask@i+1)^(0+128),7
 16369  1BD8  2B9D               	goto	l8874
 16370  1BD9                     l8880:	
 16371                           
 16372                           ;main.c: 550: }
 16373                           ;main.c: 551: printf("\n");
 16374  1BD9  3063               	movlw	low ((STR_34+28)| (0+32768))
 16375  1BDA  00A0               	movwf	printf@f^(0+128)
 16376  1BDB  30A8               	movlw	high ((STR_34+28)| (0+32768))
 16377  1BDC  00A1               	movwf	(printf@f^(0+128)+1)
 16378  1BDD  318D  2594         	fcall	_printf
 16379                           
 16380                           ;main.c: 552: return 0;
 16381  1BDF  0021               	movlb	1	; select bank1
 16382  1BE0  01B5               	clrf	?_getMoveMask^(0+128)
 16383  1BE1  01B6               	clrf	(?_getMoveMask+1)^(0+128)
 16384  1BE2  0008               	return
 16385  1BE3                     __end_of_getMoveMask:	
 16386                           
 16387                           	psect	text54
 16388  1B49                     __ptext54:	
 16389 ;; *************** function _getActive *****************
 16390 ;; Defined at:
 16391 ;;		line 539 in file "main.c"
 16392 ;; Parameters:    Size  Location     Type
 16393 ;;		None
 16394 ;; Auto vars:     Size  Location     Type
 16395 ;;  i               2   23[BANK1 ] int 
 16396 ;; Return value:  Size  Location     Type
 16397 ;;                  2   21[BANK1 ] int 
 16398 ;; Registers used:
 16399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16400 ;; Tracked objects:
 16401 ;;		On entry : 0/0
 16402 ;;		On exit  : 0/0
 16403 ;;		Unchanged: 0/0
 16404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16405 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16406 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16407 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16408 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16409 ;;Total ram usage:        8 bytes
 16410 ;; Hardware stack levels used:    1
 16411 ;; Hardware stack levels required when called:    9
 16412 ;; This function calls:
 16413 ;;		_printf
 16414 ;; This function is called by:
 16415 ;;		_execCmd
 16416 ;; This function uses a non-reentrant model
 16417 ;;
 16418                           
 16419                           
 16420                           ;psect for function _getActive
 16421  1B49                     _getActive:	
 16422                           
 16423                           ;main.c: 540: for(int i=24-1; i>=0; i--){
 16424                           
 16425                           ;incstack = 0
 16426                           ; Regs used in _getActive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16427  1B49  3017               	movlw	23
 16428  1B4A  0021               	movlb	1	; select bank1
 16429  1B4B  00B7               	movwf	getActive@i^(0+128)
 16430  1B4C  3000               	movlw	0
 16431  1B4D  00B8               	movwf	(getActive@i^(0+128)+1)
 16432  1B4E  1BB8               	btfsc	(getActive@i+1)^(0+128),7
 16433  1B4F  2B8C               	goto	l8862
 16434  1B50                     l8856:	
 16435                           
 16436                           ;main.c: 541: printf("%d ", (activeMask >> i) & 1 );
 16437  1B50  302E               	movlw	low (STR_1| (0+32768))
 16438  1B51  00A0               	movwf	printf@f^(0+128)
 16439  1B52  30B0               	movlw	high (STR_1| (0+32768))
 16440  1B53  00A1               	movwf	(printf@f^(0+128)+1)
 16441  1B54  085C               	movf	_activeMask^(0+128),w
 16442  1B55  0020               	movlb	0	; select bank0
 16443  1B56  00C9               	movwf	??_getActive
 16444  1B57  0021               	movlb	1	; select bank1
 16445  1B58  085D               	movf	(_activeMask+1)^(0+128),w
 16446  1B59  0020               	movlb	0	; select bank0
 16447  1B5A  00CA               	movwf	??_getActive+1
 16448  1B5B  0021               	movlb	1	; select bank1
 16449  1B5C  085E               	movf	(_activeMask+2)^(0+128),w
 16450  1B5D  0020               	movlb	0	; select bank0
 16451  1B5E  00CB               	movwf	??_getActive+2
 16452  1B5F  0021               	movlb	1	; select bank1
 16453  1B60  085F               	movf	(_activeMask+3)^(0+128),w
 16454  1B61  0020               	movlb	0	; select bank0
 16455  1B62  00CC               	movwf	??_getActive+3
 16456  1B63  0021               	movlb	1	; select bank1
 16457  1B64  0A37               	incf	getActive@i^(0+128),w
 16458  1B65  0020               	movlb	0	; select bank0
 16459  1B66  2B6C               	goto	u8880
 16460  1B67                     u8885:	
 16461  1B67  1003               	clrc
 16462  1B68  0CCC               	rrf	??_getActive+3,f
 16463  1B69  0CCB               	rrf	??_getActive+2,f
 16464  1B6A  0CCA               	rrf	??_getActive+1,f
 16465  1B6B  0CC9               	rrf	??_getActive,f
 16466  1B6C                     u8880:	
 16467  1B6C  3EFF               	addlw	-1
 16468  1B6D  1D03               	skipz
 16469  1B6E  2B67               	goto	u8885
 16470  1B6F  3001               	movlw	1
 16471  1B70  0549               	andwf	??_getActive,w
 16472  1B71  0021               	movlb	1	; select bank1
 16473  1B72  00A2               	movwf	(?_printf^(0+128)+2)
 16474  1B73  3000               	movlw	0
 16475  1B74  0020               	movlb	0	; select bank0
 16476  1B75  054A               	andwf	??_getActive+1,w
 16477  1B76  0021               	movlb	1	; select bank1
 16478  1B77  00A3               	movwf	((?_printf+1)^(0+128)+2)
 16479  1B78  3000               	movlw	0
 16480  1B79  0020               	movlb	0	; select bank0
 16481  1B7A  054B               	andwf	??_getActive+2,w
 16482  1B7B  0021               	movlb	1	; select bank1
 16483  1B7C  00A4               	movwf	((?_printf+2)^(0+128)+2)
 16484  1B7D  3000               	movlw	0
 16485  1B7E  0020               	movlb	0	; select bank0
 16486  1B7F  054C               	andwf	??_getActive+3,w
 16487  1B80  0021               	movlb	1	; select bank1
 16488  1B81  00A5               	movwf	((?_printf+3)^(0+128)+2)
 16489  1B82  318D  2594  319B   	fcall	_printf
 16490  1B85  30FF               	movlw	255
 16491  1B86  0021               	movlb	1	; select bank1
 16492  1B87  07B7               	addwf	getActive@i^(0+128),f
 16493  1B88  30FF               	movlw	255
 16494  1B89  3DB8               	addwfc	(getActive@i+1)^(0+128),f
 16495  1B8A  1FB8               	btfss	(getActive@i+1)^(0+128),7
 16496  1B8B  2B50               	goto	l8856
 16497  1B8C                     l8862:	
 16498                           
 16499                           ;main.c: 542: }
 16500                           ;main.c: 543: printf("\n");
 16501  1B8C  3063               	movlw	low ((STR_34+28)| (0+32768))
 16502  1B8D  00A0               	movwf	printf@f^(0+128)
 16503  1B8E  30A8               	movlw	high ((STR_34+28)| (0+32768))
 16504  1B8F  00A1               	movwf	(printf@f^(0+128)+1)
 16505  1B90  318D  2594         	fcall	_printf
 16506                           
 16507                           ;main.c: 544: return 0;
 16508  1B92  0021               	movlb	1	; select bank1
 16509  1B93  01B5               	clrf	?_getActive^(0+128)
 16510  1B94  01B6               	clrf	(?_getActive+1)^(0+128)
 16511  1B95  0008               	return
 16512  1B96                     __end_of_getActive:	
 16513                           
 16514                           	psect	text55
 16515  0A14                     __ptext55:	
 16516 ;; *************** function _commCheck *****************
 16517 ;; Defined at:
 16518 ;;		line 563 in file "main.c"
 16519 ;; Parameters:    Size  Location     Type
 16520 ;;		None
 16521 ;; Auto vars:     Size  Location     Type
 16522 ;;		None
 16523 ;; Return value:  Size  Location     Type
 16524 ;;                  2   52[BANK1 ] int 
 16525 ;; Registers used:
 16526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16527 ;; Tracked objects:
 16528 ;;		On entry : 0/0
 16529 ;;		On exit  : 0/0
 16530 ;;		Unchanged: 0/0
 16531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16532 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16534 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16535 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16536 ;;Total ram usage:        3 bytes
 16537 ;; Hardware stack levels used:    1
 16538 ;; Hardware stack levels required when called:   13
 16539 ;; This function calls:
 16540 ;;		_LED_testComm
 16541 ;;		_LED_test_openshort
 16542 ;;		_drv_read
 16543 ;;		_printf
 16544 ;; This function is called by:
 16545 ;;		_execCmd
 16546 ;; This function uses a non-reentrant model
 16547 ;;
 16548                           
 16549                           
 16550                           ;psect for function _commCheck
 16551  0A14                     _commCheck:	
 16552                           
 16553                           ;main.c: 564: printf("\n----starting comm test----\n\n");
 16554                           
 16555                           ;incstack = 0
 16556                           ; Regs used in _commCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16557  0A14  3047               	movlw	low (STR_34| (0+32768))
 16558  0A15  0021               	movlb	1	; select bank1
 16559  0A16  00A0               	movwf	printf@f^(0+128)
 16560  0A17  30A8               	movlw	high (STR_34| (0+32768))
 16561  0A18  00A1               	movwf	(printf@f^(0+128)+1)
 16562  0A19  318D  2594  318A   	fcall	_printf
 16563                           
 16564                           ;main.c: 567: printf("testing top LED driver...");
 16565  0A1C  3081               	movlw	low (STR_35| (0+32768))
 16566  0A1D  0021               	movlb	1	; select bank1
 16567  0A1E  00A0               	movwf	printf@f^(0+128)
 16568  0A1F  30A8               	movlw	high (STR_35| (0+32768))
 16569  0A20  00A1               	movwf	(printf@f^(0+128)+1)
 16570  0A21  318D  2594  318A   	fcall	_printf
 16571                           
 16572                           ;main.c: 568: if (!LED_testComm(1))
 16573  0A24  3001               	movlw	1
 16574  0A25  0021               	movlb	1	; select bank1
 16575  0A26  00CA               	movwf	LED_testComm@topOrBottom^(0+128)
 16576  0A27  3000               	movlw	0
 16577  0A28  00CB               	movwf	(LED_testComm@topOrBottom^(0+128)+1)
 16578  0A29  3194  248E  318A   	fcall	_LED_testComm
 16579  0A2C  0021               	movlb	1	; select bank1
 16580  0A2D  084A               	movf	?_LED_testComm^(0+128),w
 16581  0A2E  044B               	iorwf	(?_LED_testComm+1)^(0+128),w
 16582  0A2F  1D03               	btfss	3,2
 16583  0A30  2A35               	goto	l8890
 16584                           
 16585                           ;main.c: 569: printf("passed\n");
 16586  0A31  30CE               	movlw	low (STR_36| (0+32768))
 16587  0A32  00A0               	movwf	printf@f^(0+128)
 16588  0A33  30A9               	movlw	high (STR_36| (0+32768))
 16589  0A34  2A39               	goto	L31
 16590  0A35                     l8890:	
 16591                           
 16592                           ;main.c: 570: else
 16593                           ;main.c: 571: printf("FAILED\n");
 16594  0A35  30C6               	movlw	low (STR_37| (0+32768))
 16595  0A36  0021               	movlb	1	; select bank1
 16596  0A37  00A0               	movwf	printf@f^(0+128)
 16597  0A38  30A9               	movlw	high (STR_37| (0+32768))
 16598  0A39                     L31:	
 16599  0A39  00A1               	movwf	(printf@f^(0+128)+1)
 16600  0A3A  318D  2594  318A   	fcall	_printf
 16601                           
 16602                           ;main.c: 573: printf("opens: ");
 16603  0A3D  30D6               	movlw	low (STR_38| (0+32768))
 16604  0A3E  0021               	movlb	1	; select bank1
 16605  0A3F  00A0               	movwf	printf@f^(0+128)
 16606  0A40  30A9               	movlw	high (STR_38| (0+32768))
 16607  0A41  00A1               	movwf	(printf@f^(0+128)+1)
 16608  0A42  318D  2594  318A   	fcall	_printf
 16609                           
 16610                           ;main.c: 574: LED_test_openshort(10, 1);
 16611  0A45  300A               	movlw	10
 16612  0A46  0021               	movlb	1	; select bank1
 16613  0A47  00B5               	movwf	LED_test_openshort@type^(0+128)
 16614  0A48  3000               	movlw	0
 16615  0A49  00B6               	movwf	(LED_test_openshort@type^(0+128)+1)
 16616  0A4A  3001               	movlw	1
 16617  0A4B  00B7               	movwf	LED_test_openshort@topOrBottom^(0+128)
 16618  0A4C  3000               	movlw	0
 16619  0A4D  00B8               	movwf	(LED_test_openshort@topOrBottom^(0+128)+1)
 16620  0A4E  3195  25F9  318A   	fcall	_LED_test_openshort
 16621                           
 16622                           ;main.c: 575: printf("\n\nshorts: ");
 16623  0A51  3075               	movlw	low (STR_39| (0+32768))
 16624  0A52  0021               	movlb	1	; select bank1
 16625  0A53  00A0               	movwf	printf@f^(0+128)
 16626  0A54  30A9               	movlw	high (STR_39| (0+32768))
 16627  0A55  00A1               	movwf	(printf@f^(0+128)+1)
 16628  0A56  318D  2594  318A   	fcall	_printf
 16629                           
 16630                           ;main.c: 576: LED_test_openshort(11, 1);
 16631  0A59  300B               	movlw	11
 16632  0A5A  0021               	movlb	1	; select bank1
 16633  0A5B  00B5               	movwf	LED_test_openshort@type^(0+128)
 16634  0A5C  3000               	movlw	0
 16635  0A5D  00B6               	movwf	(LED_test_openshort@type^(0+128)+1)
 16636  0A5E  3001               	movlw	1
 16637  0A5F  00B7               	movwf	LED_test_openshort@topOrBottom^(0+128)
 16638  0A60  3000               	movlw	0
 16639  0A61  00B8               	movwf	(LED_test_openshort@topOrBottom^(0+128)+1)
 16640  0A62  3195  25F9  318A   	fcall	_LED_test_openshort
 16641                           
 16642                           ;main.c: 579: printf("\ntesting bottom LED driver...\n");
 16643  0A65  3028               	movlw	low (STR_40| (0+32768))
 16644  0A66  0021               	movlb	1	; select bank1
 16645  0A67  00A0               	movwf	printf@f^(0+128)
 16646  0A68  30A8               	movlw	high (STR_40| (0+32768))
 16647  0A69  00A1               	movwf	(printf@f^(0+128)+1)
 16648  0A6A  318D  2594  318A   	fcall	_printf
 16649                           
 16650                           ;main.c: 580: if (!LED_testComm(2))
 16651  0A6D  3002               	movlw	2
 16652  0A6E  0021               	movlb	1	; select bank1
 16653  0A6F  00CA               	movwf	LED_testComm@topOrBottom^(0+128)
 16654  0A70  3000               	movlw	0
 16655  0A71  00CB               	movwf	(LED_testComm@topOrBottom^(0+128)+1)
 16656  0A72  3194  248E  318A   	fcall	_LED_testComm
 16657  0A75  0021               	movlb	1	; select bank1
 16658  0A76  084A               	movf	?_LED_testComm^(0+128),w
 16659  0A77  044B               	iorwf	(?_LED_testComm+1)^(0+128),w
 16660  0A78  1D03               	btfss	3,2
 16661  0A79  2A7E               	goto	l8894
 16662                           
 16663                           ;main.c: 581: printf("passed\n");
 16664  0A7A  30CE               	movlw	low (STR_36| (0+32768))
 16665  0A7B  00A0               	movwf	printf@f^(0+128)
 16666  0A7C  30A9               	movlw	high (STR_36| (0+32768))
 16667  0A7D  2A82               	goto	L32
 16668  0A7E                     l8894:	
 16669                           
 16670                           ;main.c: 582: else
 16671                           ;main.c: 583: printf("FAILED\n");
 16672  0A7E  30C6               	movlw	low (STR_37| (0+32768))
 16673  0A7F  0021               	movlb	1	; select bank1
 16674  0A80  00A0               	movwf	printf@f^(0+128)
 16675  0A81  30A9               	movlw	high (STR_37| (0+32768))
 16676  0A82                     L32:	
 16677  0A82  00A1               	movwf	(printf@f^(0+128)+1)
 16678  0A83  318D  2594  318A   	fcall	_printf
 16679                           
 16680                           ;main.c: 585: printf("opens: ");
 16681  0A86  30D6               	movlw	low (STR_38| (0+32768))
 16682  0A87  0021               	movlb	1	; select bank1
 16683  0A88  00A0               	movwf	printf@f^(0+128)
 16684  0A89  30A9               	movlw	high (STR_38| (0+32768))
 16685  0A8A  00A1               	movwf	(printf@f^(0+128)+1)
 16686  0A8B  318D  2594  318A   	fcall	_printf
 16687                           
 16688                           ;main.c: 586: LED_test_openshort(10, 2);
 16689  0A8E  300A               	movlw	10
 16690  0A8F  0021               	movlb	1	; select bank1
 16691  0A90  00B5               	movwf	LED_test_openshort@type^(0+128)
 16692  0A91  3000               	movlw	0
 16693  0A92  00B6               	movwf	(LED_test_openshort@type^(0+128)+1)
 16694  0A93  3002               	movlw	2
 16695  0A94  00B7               	movwf	LED_test_openshort@topOrBottom^(0+128)
 16696  0A95  3000               	movlw	0
 16697  0A96  00B8               	movwf	(LED_test_openshort@topOrBottom^(0+128)+1)
 16698  0A97  3195  25F9  318A   	fcall	_LED_test_openshort
 16699                           
 16700                           ;main.c: 587: printf("\n\nshorts: ");
 16701  0A9A  3075               	movlw	low (STR_39| (0+32768))
 16702  0A9B  0021               	movlb	1	; select bank1
 16703  0A9C  00A0               	movwf	printf@f^(0+128)
 16704  0A9D  30A9               	movlw	high (STR_39| (0+32768))
 16705  0A9E  00A1               	movwf	(printf@f^(0+128)+1)
 16706  0A9F  318D  2594  318A   	fcall	_printf
 16707                           
 16708                           ;main.c: 588: LED_test_openshort(11, 2);
 16709  0AA2  300B               	movlw	11
 16710  0AA3  0021               	movlb	1	; select bank1
 16711  0AA4  00B5               	movwf	LED_test_openshort@type^(0+128)
 16712  0AA5  3000               	movlw	0
 16713  0AA6  00B6               	movwf	(LED_test_openshort@type^(0+128)+1)
 16714  0AA7  3002               	movlw	2
 16715  0AA8  00B7               	movwf	LED_test_openshort@topOrBottom^(0+128)
 16716  0AA9  3000               	movlw	0
 16717  0AAA  00B8               	movwf	(LED_test_openshort@topOrBottom^(0+128)+1)
 16718  0AAB  3195  25F9  318A   	fcall	_LED_test_openshort
 16719                           
 16720                           ;main.c: 590: printf("\ntesting piezo driver...");
 16721  0AAE  309B               	movlw	low (STR_45| (0+32768))
 16722  0AAF  0021               	movlb	1	; select bank1
 16723  0AB0  00A0               	movwf	printf@f^(0+128)
 16724  0AB1  30A8               	movlw	high (STR_45| (0+32768))
 16725  0AB2  00A1               	movwf	(printf@f^(0+128)+1)
 16726  0AB3  318D  2594  318A   	fcall	_printf
 16727                           
 16728                           ;main.c: 591: if(drv_read(0x01) > 0)
 16729  0AB6  3001               	movlw	1
 16730  0AB7  3199  21DA  318A   	fcall	_drv_read
 16731  0ABA  0021               	movlb	1	; select bank1
 16732  0ABB  0836               	movf	(?_drv_read+1)^(0+128),w
 16733  0ABC  3A80               	xorlw	128
 16734  0ABD  00D6               	movwf	??_commCheck^(0+128)
 16735  0ABE  3080               	movlw	128
 16736  0ABF  0256               	subwf	??_commCheck^(0+128),w
 16737  0AC0  1D03               	skipz
 16738  0AC1  2AC4               	goto	u8955
 16739  0AC2  3001               	movlw	1
 16740  0AC3  0235               	subwf	?_drv_read^(0+128),w
 16741  0AC4                     u8955:	
 16742  0AC4  1C03               	skipc
 16743  0AC5  2ACB               	goto	l8898
 16744                           
 16745                           ;main.c: 592: printf("passed\n\n");
 16746  0AC6  309D               	movlw	low (STR_46| (0+32768))
 16747  0AC7  0021               	movlb	1	; select bank1
 16748  0AC8  00A0               	movwf	printf@f^(0+128)
 16749  0AC9  30A9               	movlw	high (STR_46| (0+32768))
 16750  0ACA  2ACF               	goto	L33
 16751  0ACB                     l8898:	
 16752                           
 16753                           ;main.c: 593: else
 16754                           ;main.c: 594: printf("FAILED\n\n");
 16755  0ACB  3094               	movlw	low (STR_47| (0+32768))
 16756  0ACC  0021               	movlb	1	; select bank1
 16757  0ACD  00A0               	movwf	printf@f^(0+128)
 16758  0ACE  30A9               	movlw	high (STR_47| (0+32768))
 16759  0ACF                     L33:	
 16760  0ACF  00A1               	movwf	(printf@f^(0+128)+1)
 16761  0AD0  318D  2594  318A   	fcall	_printf
 16762                           
 16763                           ;main.c: 595: printf("----finished comm test----\n");
 16764  0AD3  3065               	movlw	low (STR_48| (0+32768))
 16765  0AD4  0021               	movlb	1	; select bank1
 16766  0AD5  00A0               	movwf	printf@f^(0+128)
 16767  0AD6  30A8               	movlw	high (STR_48| (0+32768))
 16768  0AD7  00A1               	movwf	(printf@f^(0+128)+1)
 16769  0AD8  318D  2594         	fcall	_printf
 16770  0ADA  0008               	return
 16771  0ADB                     __end_of_commCheck:	
 16772                           
 16773                           	psect	text56
 16774  19DA                     __ptext56:	
 16775 ;; *************** function _drv_read *****************
 16776 ;; Defined at:
 16777 ;;		line 87 in file "drv2665.c"
 16778 ;; Parameters:    Size  Location     Type
 16779 ;;  reg             1    wreg     unsigned char 
 16780 ;; Auto vars:     Size  Location     Type
 16781 ;;  reg             1   43[BANK0 ] unsigned char 
 16782 ;;  buff            1   44[BANK0 ] unsigned char 
 16783 ;; Return value:  Size  Location     Type
 16784 ;;                  2   21[BANK1 ] int 
 16785 ;; Registers used:
 16786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16787 ;; Tracked objects:
 16788 ;;		On entry : 0/0
 16789 ;;		On exit  : 0/0
 16790 ;;		Unchanged: 0/0
 16791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16792 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16793 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16794 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16795 ;;      Totals:         0       4       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16796 ;;Total ram usage:        6 bytes
 16797 ;; Hardware stack levels used:    1
 16798 ;; Hardware stack levels required when called:   12
 16799 ;; This function calls:
 16800 ;;		_i2c_masterOperation
 16801 ;;		_i2c_setBuffer
 16802 ;;		_printf
 16803 ;; This function is called by:
 16804 ;;		_commCheck
 16805 ;;		_fifo_check
 16806 ;; This function uses a non-reentrant model
 16807 ;;
 16808                           
 16809                           
 16810                           ;psect for function _drv_read
 16811  19DA                     _drv_read:	
 16812                           
 16813                           ;incstack = 0
 16814                           ; Regs used in _drv_read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16815                           ;drv_read@reg stored from wreg
 16816  19DA  0020               	movlb	0	; select bank0
 16817  19DB  00CB               	movwf	drv_read@reg
 16818                           
 16819                           ;drv2665.c: 89: char buff=0;
 16820  19DC  01CC               	clrf	drv_read@buff
 16821                           
 16822                           ;drv2665.c: 92: i2c_setBuffer(&reg, 1);
 16823  19DD  304B               	movlw	low drv_read@reg
 16824  19DE  00B1               	movwf	i2c_setBuffer@buffer
 16825  19DF  3000               	movlw	high drv_read@reg
 16826  19E0  00B2               	movwf	i2c_setBuffer@buffer+1
 16827  19E1  3001               	movlw	1
 16828  19E2  00B3               	movwf	i2c_setBuffer@bufferSize
 16829  19E3  3000               	movlw	0
 16830  19E4  00B4               	movwf	i2c_setBuffer@bufferSize+1
 16831  19E5  31A2  2221  3199   	fcall	_i2c_setBuffer
 16832                           
 16833                           ;drv2665.c: 93: if(i2c_masterOperation(0) != I2C_NOERR)
 16834  19E8  3000               	movlw	0
 16835  19E9  31A4  245F  3199   	fcall	_i2c_masterOperation
 16836  19EC  3A00               	xorlw	0
 16837  19ED  1903               	skipnz
 16838  19EE  29F7               	goto	l8430
 16839                           
 16840                           ;drv2665.c: 94: printf("drv_write error!\n");
 16841  19EF  30CB               	movlw	low (STR_49| (0+32768))
 16842  19F0  0021               	movlb	1	; select bank1
 16843  19F1  00A0               	movwf	printf@f^(0+128)
 16844  19F2  30A8               	movlw	high (STR_49| (0+32768))
 16845  19F3  00A1               	movwf	(printf@f^(0+128)+1)
 16846  19F4  318D  2594  3199   	fcall	_printf
 16847  19F7                     l8430:	
 16848                           
 16849                           ;drv2665.c: 97: _delay((unsigned long)((100)*(1000000/4000000.0)));
 16850  19F7  3008               	movlw	8
 16851  19F8                     u10097:	
 16852  19F8  0B89               	decfsz	9,f
 16853  19F9  29F8               	goto	u10097
 16854  19FA  0000               	nop
 16855                           
 16856                           ;drv2665.c: 100: i2c_setBuffer(&buff, 1);
 16857  19FB  304C               	movlw	low drv_read@buff
 16858  19FC  0020               	movlb	0	; select bank0
 16859  19FD  00B1               	movwf	i2c_setBuffer@buffer
 16860  19FE  3000               	movlw	high drv_read@buff
 16861  19FF  00B2               	movwf	i2c_setBuffer@buffer+1
 16862  1A00  3001               	movlw	1
 16863  1A01  00B3               	movwf	i2c_setBuffer@bufferSize
 16864  1A02  3000               	movlw	0
 16865  1A03  00B4               	movwf	i2c_setBuffer@bufferSize+1
 16866  1A04  31A2  2221  3199   	fcall	_i2c_setBuffer
 16867                           
 16868                           ;drv2665.c: 102: if(i2c_masterOperation(1) != I2C_NOERR)
 16869  1A07  3001               	movlw	1
 16870  1A08  31A4  245F  3199   	fcall	_i2c_masterOperation
 16871  1A0B  3A00               	xorlw	0
 16872  1A0C  1903               	skipnz
 16873  1A0D  2A15               	goto	l8438
 16874                           
 16875                           ;drv2665.c: 103: printf("drv_read error!\n");
 16876  1A0E  30DD               	movlw	low (STR_51| (0+32768))
 16877  1A0F  0021               	movlb	1	; select bank1
 16878  1A10  00A0               	movwf	printf@f^(0+128)
 16879  1A11  30A8               	movlw	high (STR_51| (0+32768))
 16880  1A12  00A1               	movwf	(printf@f^(0+128)+1)
 16881  1A13  318D  2594         	fcall	_printf
 16882  1A15                     l8438:	
 16883                           
 16884                           ;drv2665.c: 105: return buff;
 16885  1A15  0020               	movlb	0	; select bank0
 16886  1A16  084C               	movf	drv_read@buff,w
 16887  1A17  00C9               	movwf	??_drv_read
 16888  1A18  01CA               	clrf	??_drv_read+1
 16889  1A19  0849               	movf	??_drv_read,w
 16890  1A1A  0021               	movlb	1	; select bank1
 16891  1A1B  00B5               	movwf	?_drv_read^(0+128)
 16892  1A1C  0020               	movlb	0	; select bank0
 16893  1A1D  084A               	movf	??_drv_read+1,w
 16894  1A1E  0021               	movlb	1	; select bank1
 16895  1A1F  00B6               	movwf	(?_drv_read+1)^(0+128)
 16896  1A20  0008               	return
 16897  1A21                     __end_of_drv_read:	
 16898                           
 16899                           	psect	text57
 16900  15F9                     __ptext57:	
 16901 ;; *************** function _LED_test_openshort *****************
 16902 ;; Defined at:
 16903 ;;		line 99 in file "LEDcomm.c"
 16904 ;; Parameters:    Size  Location     Type
 16905 ;;  type            2   21[BANK1 ] int 
 16906 ;;  topOrBottom     2   23[BANK1 ] int 
 16907 ;; Auto vars:     Size  Location     Type
 16908 ;;  j               2   26[BANK1 ] int 
 16909 ;; Return value:  Size  Location     Type
 16910 ;;                  1    wreg      void 
 16911 ;; Registers used:
 16912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16913 ;; Tracked objects:
 16914 ;;		On entry : 0/0
 16915 ;;		On exit  : 0/0
 16916 ;;		Unchanged: 0/0
 16917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16918 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16919 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16920 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16921 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16922 ;;Total ram usage:        7 bytes
 16923 ;; Hardware stack levels used:    1
 16924 ;; Hardware stack levels required when called:    9
 16925 ;; This function calls:
 16926 ;;		_LEDsOn
 16927 ;;		_printf
 16928 ;;		_send_2length_2bytes_IK
 16929 ;; This function is called by:
 16930 ;;		_commCheck
 16931 ;; This function uses a non-reentrant model
 16932 ;;
 16933                           
 16934                           
 16935                           ;psect for function _LED_test_openshort
 16936  15F9                     _LED_test_openshort:	
 16937                           
 16938                           ;incstack = 0
 16939                           ; Regs used in _LED_test_openshort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16940                           ;LEDcomm.c: 101: do { LATCbits.LATC1 = 1; } while(0);
 16941  15F9  0022               	movlb	2	; select bank2
 16942  15FA  148E               	bsf	14,1	;volatile
 16943                           
 16944                           ;LEDcomm.c: 102: LEDsOn(0xFFFFFFFF, topOrBottom);
 16945  15FB  30FF               	movlw	255
 16946  15FC  0020               	movlb	0	; select bank0
 16947  15FD  00C7               	movwf	LEDsOn@LEDpins+3
 16948  15FE  30FF               	movlw	255
 16949  15FF  00C6               	movwf	LEDsOn@LEDpins+2
 16950  1600  30FF               	movlw	255
 16951  1601  00C5               	movwf	LEDsOn@LEDpins+1
 16952  1602  30FF               	movlw	255
 16953  1603  00C4               	movwf	LEDsOn@LEDpins
 16954  1604  0021               	movlb	1	; select bank1
 16955  1605  0838               	movf	(LED_test_openshort@topOrBottom+1)^(0+128),w
 16956  1606  0020               	movlb	0	; select bank0
 16957  1607  00C9               	movwf	LEDsOn@topOrBottom+1
 16958  1608  0021               	movlb	1	; select bank1
 16959  1609  0837               	movf	LED_test_openshort@topOrBottom^(0+128),w
 16960  160A  0020               	movlb	0	; select bank0
 16961  160B  00C8               	movwf	LEDsOn@topOrBottom
 16962  160C  31A3  23F8  3195   	fcall	_LEDsOn
 16963                           
 16964                           ;LEDcomm.c: 103: send_2length_2bytes_IK(0,0,type,topOrBottom);
 16965  160F  3000               	movlw	0
 16966  1610  0020               	movlb	0	; select bank0
 16967  1611  00BC               	movwf	send_2length_2bytes_IK@data1
 16968  1612  00BD               	movwf	send_2length_2bytes_IK@data1+1
 16969  1613  3000               	movlw	0
 16970  1614  00BE               	movwf	send_2length_2bytes_IK@data2
 16971  1615  00BF               	movwf	send_2length_2bytes_IK@data2+1
 16972  1616  0021               	movlb	1	; select bank1
 16973  1617  0835               	movf	LED_test_openshort@type^(0+128),w
 16974  1618  00B9               	movwf	??_LED_test_openshort^(0+128)
 16975  1619  0839               	movf	??_LED_test_openshort^(0+128),w
 16976  161A  0020               	movlb	0	; select bank0
 16977  161B  00C0               	movwf	send_2length_2bytes_IK@latch_start
 16978  161C  0021               	movlb	1	; select bank1
 16979  161D  0838               	movf	(LED_test_openshort@topOrBottom+1)^(0+128),w
 16980  161E  0020               	movlb	0	; select bank0
 16981  161F  00C2               	movwf	send_2length_2bytes_IK@topOrBottom+1
 16982  1620  0021               	movlb	1	; select bank1
 16983  1621  0837               	movf	LED_test_openshort@topOrBottom^(0+128),w
 16984  1622  0020               	movlb	0	; select bank0
 16985  1623  00C1               	movwf	send_2length_2bytes_IK@topOrBottom
 16986  1624  31A2  2266  3195   	fcall	_send_2length_2bytes_IK
 16987                           
 16988                           ;LEDcomm.c: 105: do { LATCbits.LATC1 = 0; } while(0);
 16989  1627  0022               	movlb	2	; select bank2
 16990  1628  108E               	bcf	14,1	;volatile
 16991                           
 16992                           ;LEDcomm.c: 107: for(int j = 23; j>=0; j--){
 16993  1629  3017               	movlw	23
 16994  162A  0021               	movlb	1	; select bank1
 16995  162B  00BA               	movwf	LED_test_openshort@j^(0+128)
 16996  162C  3000               	movlw	0
 16997  162D  00BB               	movwf	(LED_test_openshort@j^(0+128)+1)
 16998  162E  1BBB               	btfsc	(LED_test_openshort@j+1)^(0+128),7
 16999  162F  2E6E               	goto	l8330
 17000  1630                     l287:	
 17001                           ;LEDcomm.c: 108: do { LATAbits.LATA2 = 1; } while(0);
 17002                           
 17003  1630  0022               	movlb	2	; select bank2
 17004  1631  150C               	bsf	12,2	;volatile
 17005                           
 17006                           ;LEDcomm.c: 109: _delay((unsigned long)((10)*(1000000/4000000.0)));
 17007  1632  3200               	nop2	;2 cycle nop
 17008                           
 17009                           ;LEDcomm.c: 110: do { LATAbits.LATA2 = 0; } while(0);
 17010  1633  0022               	movlb	2	; select bank2
 17011  1634  110C               	bcf	12,2	;volatile
 17012                           
 17013                           ;LEDcomm.c: 111: if (topOrBottom == 1)
 17014  1635  0021               	movlb	1	; select bank1
 17015  1636  0337               	decf	LED_test_openshort@topOrBottom^(0+128),w
 17016  1637  0438               	iorwf	(LED_test_openshort@topOrBottom+1)^(0+128),w
 17017  1638  1D03               	btfss	3,2
 17018  1639  2E4B               	goto	l8322
 17019                           
 17020                           ;LEDcomm.c: 112: if (PORTCbits.RC6){ printf("%d ", j);}
 17021  163A  0020               	movlb	0	; select bank0
 17022  163B  1B0E               	btfsc	14,6	;volatile
 17023  163C  2E3F               	goto	l8320
 17024                           
 17025                           ;LEDcomm.c: 113: else
 17026                           ;LEDcomm.c: 114: if (PORTCbits.RC3){ printf("%d ", j);}
 17027  163D  1D8E               	btfss	14,3	;volatile
 17028  163E  2E4B               	goto	l8322
 17029  163F                     l8320:	
 17030  163F  302E               	movlw	low (STR_1| (0+32768))
 17031  1640  0021               	movlb	1	; select bank1
 17032  1641  00A0               	movwf	printf@f^(0+128)
 17033  1642  30B0               	movlw	high (STR_1| (0+32768))
 17034  1643  00A1               	movwf	(printf@f^(0+128)+1)
 17035  1644  083B               	movf	(LED_test_openshort@j+1)^(0+128),w
 17036  1645  00A3               	movwf	((?_printf+1)^(0+128)+2)
 17037  1646  083A               	movf	LED_test_openshort@j^(0+128),w
 17038  1647  00A2               	movwf	(?_printf^(0+128)+2)
 17039  1648  318D  2594  3195   	fcall	_printf
 17040  164B                     l8322:	
 17041                           
 17042                           ;LEDcomm.c: 117: if (j == 23) {do { LATCbits.LATC1 = 1; } while(0); LEDsOn(0, topOrBotto
      +                          m); }
 17043  164B  3017               	movlw	23
 17044  164C  0021               	movlb	1	; select bank1
 17045  164D  063A               	xorwf	LED_test_openshort@j^(0+128),w
 17046  164E  043B               	iorwf	(LED_test_openshort@j+1)^(0+128),w
 17047  164F  1D03               	btfss	3,2
 17048  1650  2E67               	goto	l8326
 17049  1651  0022               	movlb	2	; select bank2
 17050  1652  148E               	bsf	14,1	;volatile
 17051  1653  3000               	movlw	0
 17052  1654  0020               	movlb	0	; select bank0
 17053  1655  00C7               	movwf	LEDsOn@LEDpins+3
 17054  1656  3000               	movlw	0
 17055  1657  00C6               	movwf	LEDsOn@LEDpins+2
 17056  1658  3000               	movlw	0
 17057  1659  00C5               	movwf	LEDsOn@LEDpins+1
 17058  165A  3000               	movlw	0
 17059  165B  00C4               	movwf	LEDsOn@LEDpins
 17060  165C  0021               	movlb	1	; select bank1
 17061  165D  0838               	movf	(LED_test_openshort@topOrBottom+1)^(0+128),w
 17062  165E  0020               	movlb	0	; select bank0
 17063  165F  00C9               	movwf	LEDsOn@topOrBottom+1
 17064  1660  0021               	movlb	1	; select bank1
 17065  1661  0837               	movf	LED_test_openshort@topOrBottom^(0+128),w
 17066  1662  0020               	movlb	0	; select bank0
 17067  1663  00C8               	movwf	LEDsOn@topOrBottom
 17068  1664  31A3  23F8  3195   	fcall	_LEDsOn
 17069  1667                     l8326:	
 17070  1667  30FF               	movlw	255
 17071  1668  0021               	movlb	1	; select bank1
 17072  1669  07BA               	addwf	LED_test_openshort@j^(0+128),f
 17073  166A  30FF               	movlw	255
 17074  166B  3DBB               	addwfc	(LED_test_openshort@j+1)^(0+128),f
 17075  166C  1FBB               	btfss	(LED_test_openshort@j+1)^(0+128),7
 17076  166D  2E30               	goto	l287
 17077  166E                     l8330:	
 17078                           
 17079                           ;LEDcomm.c: 118: }
 17080                           ;LEDcomm.c: 119: printf("\n");
 17081  166E  3063               	movlw	low ((STR_34+28)| (0+32768))
 17082  166F  00A0               	movwf	printf@f^(0+128)
 17083  1670  30A8               	movlw	high ((STR_34+28)| (0+32768))
 17084  1671  00A1               	movwf	(printf@f^(0+128)+1)
 17085  1672  318D  2594         	fcall	_printf
 17086  1674  0008               	return
 17087  1675                     __end_of_LED_test_openshort:	
 17088                           
 17089                           	psect	text58
 17090  148E                     __ptext58:	
 17091 ;; *************** function _LED_testComm *****************
 17092 ;; Defined at:
 17093 ;;		line 158 in file "LEDcomm.c"
 17094 ;; Parameters:    Size  Location     Type
 17095 ;;  topOrBottom     2   42[BANK1 ] int 
 17096 ;; Auto vars:     Size  Location     Type
 17097 ;;  oldConfigReg    4   48[BANK1 ] long 
 17098 ;;  readResult      2   46[BANK1 ] int 
 17099 ;; Return value:  Size  Location     Type
 17100 ;;                  2   42[BANK1 ] int 
 17101 ;; Registers used:
 17102 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17103 ;; Tracked objects:
 17104 ;;		On entry : 0/0
 17105 ;;		On exit  : 0/0
 17106 ;;		Unchanged: 0/0
 17107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17108 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17109 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17110 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17111 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17112 ;;Total ram usage:       10 bytes
 17113 ;; Hardware stack levels used:    1
 17114 ;; Hardware stack levels required when called:   11
 17115 ;; This function calls:
 17116 ;;		_LED_readConfig
 17117 ;;		_LED_setBrightnessRange
 17118 ;; This function is called by:
 17119 ;;		_commCheck
 17120 ;; This function uses a non-reentrant model
 17121 ;;
 17122                           
 17123                           
 17124                           ;psect for function _LED_testComm
 17125  148E                     _LED_testComm:	
 17126                           
 17127                           ;LEDcomm.c: 160: long oldConfigReg = (topOrBottom == 1) ? LED_configReg_top : LED_config
      +                          Reg_bot;
 17128                           
 17129                           ;incstack = 0
 17130                           ; Regs used in _LED_testComm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17131  148E  0021               	movlb	1	; select bank1
 17132  148F  034A               	decf	LED_testComm@topOrBottom^(0+128),w
 17133  1490  044B               	iorwf	(LED_testComm@topOrBottom+1)^(0+128),w
 17134  1491  1903               	btfsc	3,2
 17135  1492  2CA2               	goto	l8336
 17136  1493  0022               	movlb	2	; select bank2
 17137  1494  0849               	movf	(_LED_configReg_bot+3)^(0+256),w
 17138  1495  0021               	movlb	1	; select bank1
 17139  1496  00D3               	movwf	(LED_testComm@oldConfigReg+3)^(0+128)
 17140  1497  0022               	movlb	2	; select bank2
 17141  1498  0848               	movf	(_LED_configReg_bot+2)^(0+256),w
 17142  1499  0021               	movlb	1	; select bank1
 17143  149A  00D2               	movwf	(LED_testComm@oldConfigReg+2)^(0+128)
 17144  149B  0022               	movlb	2	; select bank2
 17145  149C  0847               	movf	(_LED_configReg_bot+1)^(0+256),w
 17146  149D  0021               	movlb	1	; select bank1
 17147  149E  00D1               	movwf	(LED_testComm@oldConfigReg+1)^(0+128)
 17148  149F  0022               	movlb	2	; select bank2
 17149  14A0  0846               	movf	_LED_configReg_bot^(0+256),w
 17150  14A1  2CB0               	goto	L34
 17151  14A2                     l8336:	
 17152  14A2  0022               	movlb	2	; select bank2
 17153  14A3  084D               	movf	(_LED_configReg_top+3)^(0+256),w
 17154  14A4  0021               	movlb	1	; select bank1
 17155  14A5  00D3               	movwf	(LED_testComm@oldConfigReg+3)^(0+128)
 17156  14A6  0022               	movlb	2	; select bank2
 17157  14A7  084C               	movf	(_LED_configReg_top+2)^(0+256),w
 17158  14A8  0021               	movlb	1	; select bank1
 17159  14A9  00D2               	movwf	(LED_testComm@oldConfigReg+2)^(0+128)
 17160  14AA  0022               	movlb	2	; select bank2
 17161  14AB  084B               	movf	(_LED_configReg_top+1)^(0+256),w
 17162  14AC  0021               	movlb	1	; select bank1
 17163  14AD  00D1               	movwf	(LED_testComm@oldConfigReg+1)^(0+128)
 17164  14AE  0022               	movlb	2	; select bank2
 17165  14AF  084A               	movf	_LED_configReg_top^(0+256),w
 17166  14B0                     L34:	
 17167  14B0  0021               	movlb	1	; select bank1
 17168  14B1  00D0               	movwf	LED_testComm@oldConfigReg^(0+128)
 17169                           
 17170                           ;LEDcomm.c: 161: LED_setBrightnessRange(1, topOrBottom);
 17171  14B2  3001               	movlw	1
 17172  14B3  0020               	movlb	0	; select bank0
 17173  14B4  00C4               	movwf	LED_setBrightnessRange@range
 17174  14B5  3000               	movlw	0
 17175  14B6  00C5               	movwf	LED_setBrightnessRange@range+1
 17176  14B7  0021               	movlb	1	; select bank1
 17177  14B8  084B               	movf	(LED_testComm@topOrBottom+1)^(0+128),w
 17178  14B9  0020               	movlb	0	; select bank0
 17179  14BA  00C7               	movwf	LED_setBrightnessRange@topOrBottom+1
 17180  14BB  0021               	movlb	1	; select bank1
 17181  14BC  084A               	movf	LED_testComm@topOrBottom^(0+128),w
 17182  14BD  0020               	movlb	0	; select bank0
 17183  14BE  00C6               	movwf	LED_setBrightnessRange@topOrBottom
 17184  14BF  3187  2768  3194   	fcall	_LED_setBrightnessRange
 17185                           
 17186                           ;LEDcomm.c: 162: int readResult = LED_readConfig(topOrBottom);
 17187  14C2  0021               	movlb	1	; select bank1
 17188  14C3  084B               	movf	(LED_testComm@topOrBottom+1)^(0+128),w
 17189  14C4  00C7               	movwf	(LED_readConfig@topOrBottom+1)^(0+128)
 17190  14C5  084A               	movf	LED_testComm@topOrBottom^(0+128),w
 17191  14C6  00C6               	movwf	LED_readConfig@topOrBottom^(0+128)
 17192  14C7  31A5  256B  3194   	fcall	_LED_readConfig
 17193  14CA  0021               	movlb	1	; select bank1
 17194  14CB  0847               	movf	(?_LED_readConfig+1)^(0+128),w
 17195  14CC  00CF               	movwf	(LED_testComm@readResult+1)^(0+128)
 17196  14CD  0846               	movf	?_LED_readConfig^(0+128),w
 17197  14CE  00CE               	movwf	LED_testComm@readResult^(0+128)
 17198                           
 17199                           ;LEDcomm.c: 164: LED_setBrightnessRange(oldConfigReg > 0, topOrBottom);
 17200  14CF  1BD3               	btfsc	(LED_testComm@oldConfigReg+3)^(0+128),7
 17201  14D0  2CE0               	goto	u8370
 17202  14D1  0853               	movf	(LED_testComm@oldConfigReg+3)^(0+128),w
 17203  14D2  1D03               	btfss	3,2
 17204  14D3  2CDE               	goto	u8371
 17205  14D4  0852               	movf	(LED_testComm@oldConfigReg+2)^(0+128),w
 17206  14D5  1D03               	btfss	3,2
 17207  14D6  2CDE               	goto	u8371
 17208  14D7  0851               	movf	(LED_testComm@oldConfigReg+1)^(0+128),w
 17209  14D8  1D03               	btfss	3,2
 17210  14D9  2CDE               	goto	u8371
 17211  14DA  3001               	movlw	1
 17212  14DB  0250               	subwf	LED_testComm@oldConfigReg^(0+128),w
 17213  14DC  1C03               	btfss	3,0
 17214  14DD  2CE0               	goto	u8370
 17215  14DE                     u8371:	
 17216  14DE  3001               	movlw	1
 17217  14DF  2CE1               	goto	u8380
 17218  14E0                     u8370:	
 17219  14E0  3000               	movlw	0
 17220  14E1                     u8380:	
 17221  14E1  00CC               	movwf	??_LED_testComm^(0+128)
 17222  14E2  01CD               	clrf	(??_LED_testComm^(0+128)+1)
 17223  14E3  084C               	movf	??_LED_testComm^(0+128),w
 17224  14E4  0020               	movlb	0	; select bank0
 17225  14E5  00C4               	movwf	LED_setBrightnessRange@range
 17226  14E6  0021               	movlb	1	; select bank1
 17227  14E7  084D               	movf	(??_LED_testComm+1)^(0+128),w
 17228  14E8  0020               	movlb	0	; select bank0
 17229  14E9  00C5               	movwf	LED_setBrightnessRange@range+1
 17230  14EA  0021               	movlb	1	; select bank1
 17231  14EB  084B               	movf	(LED_testComm@topOrBottom+1)^(0+128),w
 17232  14EC  0020               	movlb	0	; select bank0
 17233  14ED  00C7               	movwf	LED_setBrightnessRange@topOrBottom+1
 17234  14EE  0021               	movlb	1	; select bank1
 17235  14EF  084A               	movf	LED_testComm@topOrBottom^(0+128),w
 17236  14F0  0020               	movlb	0	; select bank0
 17237  14F1  00C6               	movwf	LED_setBrightnessRange@topOrBottom
 17238  14F2  3187  2768  3194   	fcall	_LED_setBrightnessRange
 17239                           
 17240                           ;LEDcomm.c: 166: return (readResult != 7);
 17241  14F5  3007               	movlw	7
 17242  14F6  0021               	movlb	1	; select bank1
 17243  14F7  064E               	xorwf	LED_testComm@readResult^(0+128),w
 17244  14F8  044F               	iorwf	(LED_testComm@readResult+1)^(0+128),w
 17245  14F9  1903               	btfsc	3,2
 17246  14FA  2CFD               	goto	u8390
 17247  14FB  3001               	movlw	1
 17248  14FC  2CFE               	goto	u8400
 17249  14FD                     u8390:	
 17250  14FD  3000               	movlw	0
 17251  14FE                     u8400:	
 17252  14FE  00CC               	movwf	??_LED_testComm^(0+128)
 17253  14FF  01CD               	clrf	(??_LED_testComm^(0+128)+1)
 17254  1500  084C               	movf	??_LED_testComm^(0+128),w
 17255  1501  00CA               	movwf	?_LED_testComm^(0+128)
 17256  1502  084D               	movf	(??_LED_testComm+1)^(0+128),w
 17257  1503  00CB               	movwf	(?_LED_testComm+1)^(0+128)
 17258  1504  0008               	return
 17259  1505                     __end_of_LED_testComm:	
 17260                           
 17261                           	psect	text59
 17262  0768                     __ptext59:	
 17263 ;; *************** function _LED_setBrightnessRange *****************
 17264 ;; Defined at:
 17265 ;;		line 77 in file "LEDcomm.c"
 17266 ;; Parameters:    Size  Location     Type
 17267 ;;  range           2   36[BANK0 ] int 
 17268 ;;  topOrBottom     2   38[BANK0 ] int 
 17269 ;; Auto vars:     Size  Location     Type
 17270 ;;  LED_configRe    4    0[BANK1 ] long 
 17271 ;; Return value:  Size  Location     Type
 17272 ;;                  1    wreg      void 
 17273 ;; Registers used:
 17274 ;;		wreg, status,2, status,0, pclath, cstack
 17275 ;; Tracked objects:
 17276 ;;		On entry : 0/0
 17277 ;;		On exit  : 0/0
 17278 ;;		Unchanged: 0/0
 17279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17280 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17281 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17282 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17283 ;;      Totals:         0      10       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17284 ;;Total ram usage:       14 bytes
 17285 ;; Hardware stack levels used:    1
 17286 ;; Hardware stack levels required when called:    8
 17287 ;; This function calls:
 17288 ;;		_send_2length_2bytes_IK
 17289 ;; This function is called by:
 17290 ;;		_LED_testComm
 17291 ;;		_main_initialize
 17292 ;;		_setLEDBrightnessRange
 17293 ;; This function uses a non-reentrant model
 17294 ;;
 17295                           
 17296                           
 17297                           ;psect for function _LED_setBrightnessRange
 17298  0768                     _LED_setBrightnessRange:	
 17299                           
 17300                           ;LEDcomm.c: 79: long LED_configReg = (topOrBottom == 1) ? LED_configReg_top : LED_config
      +                          Reg_bot;
 17301                           
 17302                           ;incstack = 0
 17303                           ; Regs used in _LED_setBrightnessRange: [wreg+status,2+status,0+pclath+cstack]
 17304  0768  0020               	movlb	0	; select bank0
 17305  0769  0346               	decf	LED_setBrightnessRange@topOrBottom,w
 17306  076A  0447               	iorwf	LED_setBrightnessRange@topOrBottom+1,w
 17307  076B  1903               	btfsc	3,2
 17308  076C  2F7C               	goto	l8184
 17309  076D  0022               	movlb	2	; select bank2
 17310  076E  0849               	movf	(_LED_configReg_bot+3)^(0+256),w
 17311  076F  0021               	movlb	1	; select bank1
 17312  0770  00A3               	movwf	(LED_setBrightnessRange@LED_configReg+3)^(0+128)
 17313  0771  0022               	movlb	2	; select bank2
 17314  0772  0848               	movf	(_LED_configReg_bot+2)^(0+256),w
 17315  0773  0021               	movlb	1	; select bank1
 17316  0774  00A2               	movwf	(LED_setBrightnessRange@LED_configReg+2)^(0+128)
 17317  0775  0022               	movlb	2	; select bank2
 17318  0776  0847               	movf	(_LED_configReg_bot+1)^(0+256),w
 17319  0777  0021               	movlb	1	; select bank1
 17320  0778  00A1               	movwf	(LED_setBrightnessRange@LED_configReg+1)^(0+128)
 17321  0779  0022               	movlb	2	; select bank2
 17322  077A  0846               	movf	_LED_configReg_bot^(0+256),w
 17323  077B  2F8A               	goto	L35
 17324  077C                     l8184:	
 17325  077C  0022               	movlb	2	; select bank2
 17326  077D  084D               	movf	(_LED_configReg_top+3)^(0+256),w
 17327  077E  0021               	movlb	1	; select bank1
 17328  077F  00A3               	movwf	(LED_setBrightnessRange@LED_configReg+3)^(0+128)
 17329  0780  0022               	movlb	2	; select bank2
 17330  0781  084C               	movf	(_LED_configReg_top+2)^(0+256),w
 17331  0782  0021               	movlb	1	; select bank1
 17332  0783  00A2               	movwf	(LED_setBrightnessRange@LED_configReg+2)^(0+128)
 17333  0784  0022               	movlb	2	; select bank2
 17334  0785  084B               	movf	(_LED_configReg_top+1)^(0+256),w
 17335  0786  0021               	movlb	1	; select bank1
 17336  0787  00A1               	movwf	(LED_setBrightnessRange@LED_configReg+1)^(0+128)
 17337  0788  0022               	movlb	2	; select bank2
 17338  0789  084A               	movf	_LED_configReg_top^(0+256),w
 17339  078A                     L35:	
 17340  078A  0021               	movlb	1	; select bank1
 17341  078B  00A0               	movwf	LED_setBrightnessRange@LED_configReg^(0+128)
 17342                           
 17343                           ;LEDcomm.c: 80: if(range > 0)
 17344  078C  0020               	movlb	0	; select bank0
 17345  078D  0845               	movf	LED_setBrightnessRange@range+1,w
 17346  078E  3A80               	xorlw	128
 17347  078F  00C8               	movwf	??_LED_setBrightnessRange
 17348  0790  3080               	movlw	128
 17349  0791  0248               	subwf	??_LED_setBrightnessRange,w
 17350  0792  1D03               	skipz
 17351  0793  2F96               	goto	u8085
 17352  0794  3001               	movlw	1
 17353  0795  0244               	subwf	LED_setBrightnessRange@range,w
 17354  0796                     u8085:	
 17355  0796  1C03               	skipc
 17356  0797  2FA2               	goto	l8188
 17357                           
 17358                           ;LEDcomm.c: 81: LED_configReg |= (0b111);
 17359  0798  3007               	movlw	7
 17360  0799  0021               	movlb	1	; select bank1
 17361  079A  04A0               	iorwf	LED_setBrightnessRange@LED_configReg^(0+128),f
 17362  079B  3000               	movlw	0
 17363  079C  04A1               	iorwf	(LED_setBrightnessRange@LED_configReg+1)^(0+128),f
 17364  079D  3000               	movlw	0
 17365  079E  04A2               	iorwf	(LED_setBrightnessRange@LED_configReg+2)^(0+128),f
 17366  079F  3000               	movlw	0
 17367  07A0  04A3               	iorwf	(LED_setBrightnessRange@LED_configReg+3)^(0+128),f
 17368  07A1  2FAB               	goto	l8190
 17369  07A2                     l8188:	
 17370                           
 17371                           ;LEDcomm.c: 82: else
 17372                           ;LEDcomm.c: 83: LED_configReg &= ~(0b111);
 17373  07A2  30F8               	movlw	248
 17374  07A3  0021               	movlb	1	; select bank1
 17375  07A4  05A0               	andwf	LED_setBrightnessRange@LED_configReg^(0+128),f
 17376  07A5  30FF               	movlw	255
 17377  07A6  05A1               	andwf	(LED_setBrightnessRange@LED_configReg+1)^(0+128),f
 17378  07A7  30FF               	movlw	255
 17379  07A8  05A2               	andwf	(LED_setBrightnessRange@LED_configReg+2)^(0+128),f
 17380  07A9  30FF               	movlw	255
 17381  07AA  05A3               	andwf	(LED_setBrightnessRange@LED_configReg+3)^(0+128),f
 17382  07AB                     l8190:	
 17383                           
 17384                           ;LEDcomm.c: 85: send_2length_2bytes_IK((unsigned int)((LED_configReg>>16) & 0xFFFF),(uns
      +                          igned int)LED_configReg, 3, topOrBottom);
 17385  07AB  0820               	movf	LED_setBrightnessRange@LED_configReg^(0+128),w
 17386  07AC  0020               	movlb	0	; select bank0
 17387  07AD  00C8               	movwf	??_LED_setBrightnessRange
 17388  07AE  0021               	movlb	1	; select bank1
 17389  07AF  0821               	movf	(LED_setBrightnessRange@LED_configReg+1)^(0+128),w
 17390  07B0  0020               	movlb	0	; select bank0
 17391  07B1  00C9               	movwf	??_LED_setBrightnessRange+1
 17392  07B2  0021               	movlb	1	; select bank1
 17393  07B3  0822               	movf	(LED_setBrightnessRange@LED_configReg+2)^(0+128),w
 17394  07B4  0020               	movlb	0	; select bank0
 17395  07B5  00CA               	movwf	??_LED_setBrightnessRange+2
 17396  07B6  0021               	movlb	1	; select bank1
 17397  07B7  0823               	movf	(LED_setBrightnessRange@LED_configReg+3)^(0+128),w
 17398  07B8  0020               	movlb	0	; select bank0
 17399  07B9  00CB               	movwf	??_LED_setBrightnessRange+3
 17400  07BA  3010               	movlw	16
 17401  07BB  00CC               	movwf	??_LED_setBrightnessRange+4
 17402  07BC                     u8095:	
 17403  07BC  37CB               	asrf	??_LED_setBrightnessRange+3,f
 17404  07BD  0CCA               	rrf	??_LED_setBrightnessRange+2,f
 17405  07BE  0CC9               	rrf	??_LED_setBrightnessRange+1,f
 17406  07BF  0CC8               	rrf	??_LED_setBrightnessRange,f
 17407  07C0  0BCC               	decfsz	??_LED_setBrightnessRange+4,f
 17408  07C1  2FBC               	goto	u8095
 17409  07C2  0849               	movf	??_LED_setBrightnessRange+1,w
 17410  07C3  00BD               	movwf	send_2length_2bytes_IK@data1+1
 17411  07C4  0848               	movf	??_LED_setBrightnessRange,w
 17412  07C5  00BC               	movwf	send_2length_2bytes_IK@data1
 17413  07C6  0021               	movlb	1	; select bank1
 17414  07C7  0821               	movf	(LED_setBrightnessRange@LED_configReg+1)^(0+128),w
 17415  07C8  0020               	movlb	0	; select bank0
 17416  07C9  00BF               	movwf	send_2length_2bytes_IK@data2+1
 17417  07CA  0021               	movlb	1	; select bank1
 17418  07CB  0820               	movf	LED_setBrightnessRange@LED_configReg^(0+128),w
 17419  07CC  0020               	movlb	0	; select bank0
 17420  07CD  00BE               	movwf	send_2length_2bytes_IK@data2
 17421  07CE  3003               	movlw	3
 17422  07CF  00CD               	movwf	??_LED_setBrightnessRange+5
 17423  07D0  084D               	movf	??_LED_setBrightnessRange+5,w
 17424  07D1  00C0               	movwf	send_2length_2bytes_IK@latch_start
 17425  07D2  0847               	movf	LED_setBrightnessRange@topOrBottom+1,w
 17426  07D3  00C2               	movwf	send_2length_2bytes_IK@topOrBottom+1
 17427  07D4  0846               	movf	LED_setBrightnessRange@topOrBottom,w
 17428  07D5  00C1               	movwf	send_2length_2bytes_IK@topOrBottom
 17429  07D6  31A2  2266  3187   	fcall	_send_2length_2bytes_IK
 17430                           
 17431                           ;LEDcomm.c: 88: if (topOrBottom == 1)
 17432  07D9  0020               	movlb	0	; select bank0
 17433  07DA  0346               	decf	LED_setBrightnessRange@topOrBottom,w
 17434  07DB  0447               	iorwf	LED_setBrightnessRange@topOrBottom+1,w
 17435  07DC  1D03               	btfss	3,2
 17436  07DD  2FEF               	goto	l8196
 17437                           
 17438                           ;LEDcomm.c: 89: LED_configReg_top = LED_configReg;
 17439  07DE  0021               	movlb	1	; select bank1
 17440  07DF  0823               	movf	(LED_setBrightnessRange@LED_configReg+3)^(0+128),w
 17441  07E0  0022               	movlb	2	; select bank2
 17442  07E1  00CD               	movwf	(_LED_configReg_top+3)^(0+256)
 17443  07E2  0021               	movlb	1	; select bank1
 17444  07E3  0822               	movf	(LED_setBrightnessRange@LED_configReg+2)^(0+128),w
 17445  07E4  0022               	movlb	2	; select bank2
 17446  07E5  00CC               	movwf	(_LED_configReg_top+2)^(0+256)
 17447  07E6  0021               	movlb	1	; select bank1
 17448  07E7  0821               	movf	(LED_setBrightnessRange@LED_configReg+1)^(0+128),w
 17449  07E8  0022               	movlb	2	; select bank2
 17450  07E9  00CB               	movwf	(_LED_configReg_top+1)^(0+256)
 17451  07EA  0021               	movlb	1	; select bank1
 17452  07EB  0820               	movf	LED_setBrightnessRange@LED_configReg^(0+128),w
 17453  07EC  0022               	movlb	2	; select bank2
 17454  07ED  00CA               	movwf	_LED_configReg_top^(0+256)
 17455  07EE  0008               	return
 17456  07EF                     l8196:	
 17457                           
 17458                           ;LEDcomm.c: 90: else
 17459                           ;LEDcomm.c: 91: LED_configReg_bot = LED_configReg;
 17460  07EF  0021               	movlb	1	; select bank1
 17461  07F0  0823               	movf	(LED_setBrightnessRange@LED_configReg+3)^(0+128),w
 17462  07F1  0022               	movlb	2	; select bank2
 17463  07F2  00C9               	movwf	(_LED_configReg_bot+3)^(0+256)
 17464  07F3  0021               	movlb	1	; select bank1
 17465  07F4  0822               	movf	(LED_setBrightnessRange@LED_configReg+2)^(0+128),w
 17466  07F5  0022               	movlb	2	; select bank2
 17467  07F6  00C8               	movwf	(_LED_configReg_bot+2)^(0+256)
 17468  07F7  0021               	movlb	1	; select bank1
 17469  07F8  0821               	movf	(LED_setBrightnessRange@LED_configReg+1)^(0+128),w
 17470  07F9  0022               	movlb	2	; select bank2
 17471  07FA  00C7               	movwf	(_LED_configReg_bot+1)^(0+256)
 17472  07FB  0021               	movlb	1	; select bank1
 17473  07FC  0820               	movf	LED_setBrightnessRange@LED_configReg^(0+128),w
 17474  07FD  0022               	movlb	2	; select bank2
 17475  07FE  00C6               	movwf	_LED_configReg_bot^(0+256)
 17476  07FF  0008               	return
 17477  0800                     __end_of_LED_setBrightnessRange:	
 17478                           
 17479                           	psect	text60
 17480  256B                     __ptext60:	
 17481 ;; *************** function _LED_readConfig *****************
 17482 ;; Defined at:
 17483 ;;		line 124 in file "LEDcomm.c"
 17484 ;; Parameters:    Size  Location     Type
 17485 ;;  topOrBottom     2   38[BANK1 ] int 
 17486 ;; Auto vars:     Size  Location     Type
 17487 ;;		None
 17488 ;; Return value:  Size  Location     Type
 17489 ;;                  4   38[BANK1 ] long 
 17490 ;; Registers used:
 17491 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17492 ;; Tracked objects:
 17493 ;;		On entry : 0/0
 17494 ;;		On exit  : 0/0
 17495 ;;		Unchanged: 0/0
 17496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17497 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17499 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17500 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17501 ;;Total ram usage:        5 bytes
 17502 ;; Hardware stack levels used:    1
 17503 ;; Hardware stack levels required when called:   10
 17504 ;; This function calls:
 17505 ;;		_LED_getData
 17506 ;;		_send_2length_2bytes_IK
 17507 ;; This function is called by:
 17508 ;;		_LED_testComm
 17509 ;; This function uses a non-reentrant model
 17510 ;;
 17511                           
 17512                           
 17513                           ;psect for function _LED_readConfig
 17514  256B                     _LED_readConfig:	
 17515                           
 17516                           ;incstack = 0
 17517                           ; Regs used in _LED_readConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17518                           ;LEDcomm.c: 125: do { LATCbits.LATC1 = 1; } while(0);
 17519  256B  0022               	movlb	2	; select bank2
 17520  256C  148E               	bsf	14,1	;volatile
 17521                           
 17522                           ;LEDcomm.c: 126: send_2length_2bytes_IK(0,0,5,topOrBottom);
 17523  256D  3000               	movlw	0
 17524  256E  0020               	movlb	0	; select bank0
 17525  256F  00BC               	movwf	send_2length_2bytes_IK@data1
 17526  2570  00BD               	movwf	send_2length_2bytes_IK@data1+1
 17527  2571  3000               	movlw	0
 17528  2572  00BE               	movwf	send_2length_2bytes_IK@data2
 17529  2573  00BF               	movwf	send_2length_2bytes_IK@data2+1
 17530  2574  3005               	movlw	5
 17531  2575  00C9               	movwf	??_LED_readConfig
 17532  2576  0849               	movf	??_LED_readConfig,w
 17533  2577  00C0               	movwf	send_2length_2bytes_IK@latch_start
 17534  2578  0021               	movlb	1	; select bank1
 17535  2579  0847               	movf	(LED_readConfig@topOrBottom+1)^(0+128),w
 17536  257A  0020               	movlb	0	; select bank0
 17537  257B  00C2               	movwf	send_2length_2bytes_IK@topOrBottom+1
 17538  257C  0021               	movlb	1	; select bank1
 17539  257D  0846               	movf	LED_readConfig@topOrBottom^(0+128),w
 17540  257E  0020               	movlb	0	; select bank0
 17541  257F  00C1               	movwf	send_2length_2bytes_IK@topOrBottom
 17542  2580  31A2  2266  31A5   	fcall	_send_2length_2bytes_IK
 17543                           
 17544                           ;LEDcomm.c: 127: return LED_getData(topOrBottom);
 17545  2583  0021               	movlb	1	; select bank1
 17546  2584  0847               	movf	(LED_readConfig@topOrBottom+1)^(0+128),w
 17547  2585  00B6               	movwf	(LED_getData@topOrBottom+1)^(0+128)
 17548  2586  0846               	movf	LED_readConfig@topOrBottom^(0+128),w
 17549  2587  00B5               	movwf	LED_getData@topOrBottom^(0+128)
 17550  2588  3196  26F2         	fcall	_LED_getData
 17551  258A  0021               	movlb	1	; select bank1
 17552  258B  0838               	movf	(?_LED_getData+3)^(0+128),w
 17553  258C  00C9               	movwf	(?_LED_readConfig+3)^(0+128)
 17554  258D  0837               	movf	(?_LED_getData+2)^(0+128),w
 17555  258E  00C8               	movwf	(?_LED_readConfig+2)^(0+128)
 17556  258F  0836               	movf	(?_LED_getData+1)^(0+128),w
 17557  2590  00C7               	movwf	(?_LED_readConfig+1)^(0+128)
 17558  2591  0835               	movf	?_LED_getData^(0+128),w
 17559  2592  00C6               	movwf	?_LED_readConfig^(0+128)
 17560  2593  0008               	return
 17561  2594                     __end_of_LED_readConfig:	
 17562                           
 17563                           	psect	text61
 17564  16F2                     __ptext61:	
 17565 ;; *************** function _LED_getData *****************
 17566 ;; Defined at:
 17567 ;;		line 130 in file "LEDcomm.c"
 17568 ;; Parameters:    Size  Location     Type
 17569 ;;  topOrBottom     2   21[BANK1 ] int 
 17570 ;; Auto vars:     Size  Location     Type
 17571 ;;  j               2   36[BANK1 ] int 
 17572 ;;  readData        4   32[BANK1 ] long 
 17573 ;; Return value:  Size  Location     Type
 17574 ;;                  4   21[BANK1 ] long 
 17575 ;; Registers used:
 17576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17577 ;; Tracked objects:
 17578 ;;		On entry : 0/0
 17579 ;;		On exit  : 0/0
 17580 ;;		Unchanged: 0/0
 17581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17582 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17583 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17584 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17585 ;;      Totals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17586 ;;Total ram usage:       17 bytes
 17587 ;; Hardware stack levels used:    1
 17588 ;; Hardware stack levels required when called:    9
 17589 ;; This function calls:
 17590 ;;		_printf
 17591 ;; This function is called by:
 17592 ;;		_LED_readConfig
 17593 ;; This function uses a non-reentrant model
 17594 ;;
 17595                           
 17596                           
 17597                           ;psect for function _LED_getData
 17598  16F2                     _LED_getData:	
 17599                           
 17600                           ;LEDcomm.c: 132: long readData = 0;
 17601                           
 17602                           ;incstack = 0
 17603                           ; Regs used in _LED_getData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17604  16F2  3000               	movlw	0
 17605  16F3  0021               	movlb	1	; select bank1
 17606  16F4  00C3               	movwf	(LED_getData@readData+3)^(0+128)
 17607  16F5  3000               	movlw	0
 17608  16F6  00C2               	movwf	(LED_getData@readData+2)^(0+128)
 17609  16F7  3000               	movlw	0
 17610  16F8  00C1               	movwf	(LED_getData@readData+1)^(0+128)
 17611  16F9  3000               	movlw	0
 17612  16FA  00C0               	movwf	LED_getData@readData^(0+128)
 17613                           
 17614                           ;LEDcomm.c: 134: if (topOrBottom == 1) do { LATBbits.LATB4 = 0; } while(0);
 17615  16FB  0335               	decf	LED_getData@topOrBottom^(0+128),w
 17616  16FC  0436               	iorwf	(LED_getData@topOrBottom+1)^(0+128),w
 17617  16FD  1D03               	btfss	3,2
 17618  16FE  2F02               	goto	l310
 17619  16FF  0022               	movlb	2	; select bank2
 17620  1700  120D               	bcf	13,4	;volatile
 17621  1701  2F04               	goto	l8030
 17622  1702                     l310:	
 17623                           ;LEDcomm.c: 135: else do { LATCbits.LATC0 = 0; } while(0);
 17624                           
 17625  1702  0022               	movlb	2	; select bank2
 17626  1703  100E               	bcf	14,0	;volatile
 17627  1704                     l8030:	
 17628                           
 17629                           ;LEDcomm.c: 137: for(int j = 23; j>=0; j--){
 17630  1704  3017               	movlw	23
 17631  1705  0021               	movlb	1	; select bank1
 17632  1706  00C4               	movwf	LED_getData@j^(0+128)
 17633  1707  3000               	movlw	0
 17634  1708  00C5               	movwf	(LED_getData@j^(0+128)+1)
 17635  1709  1BC5               	btfsc	(LED_getData@j+1)^(0+128),7
 17636  170A  2F5E               	goto	l320
 17637  170B                     l314:	
 17638                           ;LEDcomm.c: 138: do { LATAbits.LATA2 = 1; } while(0);
 17639                           
 17640  170B  0022               	movlb	2	; select bank2
 17641  170C  150C               	bsf	12,2	;volatile
 17642                           
 17643                           ;LEDcomm.c: 140: if (topOrBottom == 1)
 17644  170D  0021               	movlb	1	; select bank1
 17645  170E  0335               	decf	LED_getData@topOrBottom^(0+128),w
 17646  170F  0436               	iorwf	(LED_getData@topOrBottom+1)^(0+128),w
 17647  1710  1D03               	btfss	3,2
 17648  1711  2F31               	goto	l8040
 17649                           
 17650                           ;LEDcomm.c: 141: {readData |= (PORTCbits.RC6 << j);}
 17651  1712  0020               	movlb	0	; select bank0
 17652  1713  0E0E               	swapf	14,w	;volatile
 17653  1714  0C89               	rrf	9,f
 17654  1715  0C89               	rrf	9,f
 17655  1716  3901               	andlw	1
 17656  1717  0021               	movlb	1	; select bank1
 17657  1718  00B9               	movwf	??_LED_getData^(0+128)
 17658  1719  01BA               	clrf	(??_LED_getData^(0+128)+1)
 17659  171A  0A44               	incf	LED_getData@j^(0+128),w
 17660  171B  2F1E               	goto	u7734
 17661  171C                     u7735:	
 17662  171C  35B9               	lslf	??_LED_getData^(0+128),f
 17663  171D  0DBA               	rlf	(??_LED_getData^(0+128)+1),f
 17664  171E                     u7734:	
 17665  171E  0B89               	decfsz	9,f
 17666  171F  2F1C               	goto	u7735
 17667  1720  0839               	movf	??_LED_getData^(0+128),w
 17668  1721  00BB               	movwf	(??_LED_getData+2)^(0+128)
 17669  1722  083A               	movf	(??_LED_getData+1)^(0+128),w
 17670  1723  00BC               	movwf	((??_LED_getData+2)^(0+128)+1)
 17671  1724  3000               	movlw	0
 17672  1725  1BBC               	btfsc	((??_LED_getData+2)^(0+128)+1),7
 17673  1726  30FF               	movlw	255
 17674  1727  00BD               	movwf	((??_LED_getData+2)^(0+128)+2)
 17675  1728  00BE               	movwf	((??_LED_getData+2)^(0+128)+3)
 17676  1729  083B               	movf	(??_LED_getData+2)^(0+128),w
 17677  172A  04C0               	iorwf	LED_getData@readData^(0+128),f
 17678  172B  083C               	movf	(??_LED_getData+3)^(0+128),w
 17679  172C  04C1               	iorwf	(LED_getData@readData+1)^(0+128),f
 17680  172D  083D               	movf	(??_LED_getData+4)^(0+128),w
 17681  172E  04C2               	iorwf	(LED_getData@readData+2)^(0+128),f
 17682  172F  083E               	movf	(??_LED_getData+5)^(0+128),w
 17683  1730  2F50               	goto	L36
 17684  1731                     l8040:	
 17685                           
 17686                           ;LEDcomm.c: 142: else
 17687                           ;LEDcomm.c: 143: {readData |= (PORTCbits.RC3 << j);}
 17688  1731  0020               	movlb	0	; select bank0
 17689  1732  0C0E               	rrf	14,w	;volatile
 17690  1733  0021               	movlb	1	; select bank1
 17691  1734  00B9               	movwf	??_LED_getData^(0+128)
 17692  1735  0CB9               	rrf	??_LED_getData^(0+128),f
 17693  1736  0C39               	rrf	??_LED_getData^(0+128),w
 17694  1737  3901               	andlw	1
 17695  1738  00BA               	movwf	(??_LED_getData+1)^(0+128)
 17696  1739  01BB               	clrf	((??_LED_getData+1)^(0+128)+1)
 17697  173A  0A44               	incf	LED_getData@j^(0+128),w
 17698  173B  2F3E               	goto	u7744
 17699  173C                     u7745:	
 17700  173C  35BA               	lslf	(??_LED_getData+1)^(0+128),f
 17701  173D  0DBB               	rlf	((??_LED_getData+1)^(0+128)+1),f
 17702  173E                     u7744:	
 17703  173E  0B89               	decfsz	9,f
 17704  173F  2F3C               	goto	u7745
 17705  1740  083A               	movf	(??_LED_getData+1)^(0+128),w
 17706  1741  00BC               	movwf	(??_LED_getData+3)^(0+128)
 17707  1742  083B               	movf	(??_LED_getData+2)^(0+128),w
 17708  1743  00BD               	movwf	((??_LED_getData+3)^(0+128)+1)
 17709  1744  3000               	movlw	0
 17710  1745  1BBD               	btfsc	((??_LED_getData+3)^(0+128)+1),7
 17711  1746  30FF               	movlw	255
 17712  1747  00BE               	movwf	((??_LED_getData+3)^(0+128)+2)
 17713  1748  00BF               	movwf	((??_LED_getData+3)^(0+128)+3)
 17714  1749  083C               	movf	(??_LED_getData+3)^(0+128),w
 17715  174A  04C0               	iorwf	LED_getData@readData^(0+128),f
 17716  174B  083D               	movf	(??_LED_getData+4)^(0+128),w
 17717  174C  04C1               	iorwf	(LED_getData@readData+1)^(0+128),f
 17718  174D  083E               	movf	(??_LED_getData+5)^(0+128),w
 17719  174E  04C2               	iorwf	(LED_getData@readData+2)^(0+128),f
 17720  174F  083F               	movf	(??_LED_getData+6)^(0+128),w
 17721  1750                     L36:	
 17722  1750  04C3               	iorwf	(LED_getData@readData+3)^(0+128),f
 17723                           
 17724                           ;LEDcomm.c: 145: do { LATAbits.LATA2 = 0; } while(0);
 17725  1751  0022               	movlb	2	; select bank2
 17726  1752  110C               	bcf	12,2	;volatile
 17727                           
 17728                           ;LEDcomm.c: 146: _delay((unsigned long)((100)*(1000000/4000000.0)));
 17729  1753  3008               	movlw	8
 17730  1754                     u10107:	
 17731  1754  0B89               	decfsz	9,f
 17732  1755  2F54               	goto	u10107
 17733  1756  0000               	nop
 17734  1757  30FF               	movlw	255
 17735  1758  0021               	movlb	1	; select bank1
 17736  1759  07C4               	addwf	LED_getData@j^(0+128),f
 17737  175A  30FF               	movlw	255
 17738  175B  3DC5               	addwfc	(LED_getData@j+1)^(0+128),f
 17739  175C  1FC5               	btfss	(LED_getData@j+1)^(0+128),7
 17740  175D  2F0B               	goto	l314
 17741  175E                     l320:	
 17742                           ;LEDcomm.c: 148: }
 17743                           ;LEDcomm.c: 150: do { LATAbits.LATA2 = 0; } while(0);
 17744                           
 17745  175E  0022               	movlb	2	; select bank2
 17746  175F  110C               	bcf	12,2	;volatile
 17747                           
 17748                           ;LEDcomm.c: 151: printf("read data: %lu\n", readData);
 17749  1760  30FE               	movlw	low (STR_4| (0+32768))
 17750  1761  0021               	movlb	1	; select bank1
 17751  1762  00A0               	movwf	printf@f^(0+128)
 17752  1763  30A8               	movlw	high (STR_4| (0+32768))
 17753  1764  00A1               	movwf	(printf@f^(0+128)+1)
 17754  1765  0843               	movf	(LED_getData@readData+3)^(0+128),w
 17755  1766  00A5               	movwf	((?_printf+3)^(0+128)+2)
 17756  1767  0842               	movf	(LED_getData@readData+2)^(0+128),w
 17757  1768  00A4               	movwf	((?_printf+2)^(0+128)+2)
 17758  1769  0841               	movf	(LED_getData@readData+1)^(0+128),w
 17759  176A  00A3               	movwf	((?_printf+1)^(0+128)+2)
 17760  176B  0840               	movf	LED_getData@readData^(0+128),w
 17761  176C  00A2               	movwf	(?_printf^(0+128)+2)
 17762  176D  318D  2594         	fcall	_printf
 17763                           
 17764                           ;LEDcomm.c: 152: return readData;
 17765  176F  0021               	movlb	1	; select bank1
 17766  1770  0843               	movf	(LED_getData@readData+3)^(0+128),w
 17767  1771  00B8               	movwf	(?_LED_getData+3)^(0+128)
 17768  1772  0842               	movf	(LED_getData@readData+2)^(0+128),w
 17769  1773  00B7               	movwf	(?_LED_getData+2)^(0+128)
 17770  1774  0841               	movf	(LED_getData@readData+1)^(0+128),w
 17771  1775  00B6               	movwf	(?_LED_getData+1)^(0+128)
 17772  1776  0840               	movf	LED_getData@readData^(0+128),w
 17773  1777  00B5               	movwf	?_LED_getData^(0+128)
 17774  1778  0008               	return
 17775  1779                     __end_of_LED_getData:	
 17776                           
 17777                           	psect	text62
 17778  0EC6                     __ptext62:	
 17779 ;; *************** function _doRelMove *****************
 17780 ;; Defined at:
 17781 ;;		line 321 in file "main.c"
 17782 ;; Parameters:    Size  Location     Type
 17783 ;;		None
 17784 ;; Auto vars:     Size  Location     Type
 17785 ;;  j               2   51[BANK1 ] int 
 17786 ;; Return value:  Size  Location     Type
 17787 ;;                  1    wreg      void 
 17788 ;; Registers used:
 17789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17790 ;; Tracked objects:
 17791 ;;		On entry : 0/0
 17792 ;;		On exit  : 0/0
 17793 ;;		Unchanged: 0/0
 17794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17796 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17797 ;;      Temps:          0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17798 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17799 ;;Total ram usage:       18 bytes
 17800 ;; Hardware stack levels used:    1
 17801 ;; Hardware stack levels required when called:   15
 17802 ;; This function calls:
 17803 ;;		_doMove
 17804 ;;		_getMotionStatus
 17805 ;;		_printf
 17806 ;; This function is called by:
 17807 ;;		_main
 17808 ;; This function uses a non-reentrant model
 17809 ;;
 17810                           
 17811                           
 17812                           ;psect for function _doRelMove
 17813  0EC6                     _doRelMove:	
 17814                           
 17815                           ;main.c: 322: if(remainingSteps == 0){
 17816                           
 17817                           ;incstack = 0
 17818                           ; Regs used in _doRelMove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17819  0EC6  0022               	movlb	2	; select bank2
 17820  0EC7  0841               	movf	(_remainingSteps+3)^(0+256),w
 17821  0EC8  0440               	iorwf	(_remainingSteps+2)^(0+256),w
 17822  0EC9  043F               	iorwf	(_remainingSteps+1)^(0+256),w
 17823  0ECA  043E               	iorwf	_remainingSteps^(0+256),w
 17824  0ECB  1D03               	skipz
 17825  0ECC  2EE7               	goto	l9256
 17826                           
 17827                           ;main.c: 323: motionType = NONE;
 17828  0ECD  0020               	movlb	0	; select bank0
 17829  0ECE  01D5               	clrf	_motionType
 17830                           
 17831                           ;main.c: 324: moveVector_ups = 0;
 17832  0ECF  3000               	movlw	0
 17833  0ED0  0021               	movlb	1	; select bank1
 17834  0ED1  00E7               	movwf	(_moveVector_ups+3)^(0+128)
 17835  0ED2  3000               	movlw	0
 17836  0ED3  00E6               	movwf	(_moveVector_ups+2)^(0+128)
 17837  0ED4  3000               	movlw	0
 17838  0ED5  00E5               	movwf	(_moveVector_ups+1)^(0+128)
 17839  0ED6  3000               	movlw	0
 17840  0ED7  00E4               	movwf	_moveVector_ups^(0+128)
 17841                           
 17842                           ;main.c: 325: moveVector_downs = 0;
 17843  0ED8  3000               	movlw	0
 17844  0ED9  00E3               	movwf	(_moveVector_downs+3)^(0+128)
 17845  0EDA  3000               	movlw	0
 17846  0EDB  00E2               	movwf	(_moveVector_downs+2)^(0+128)
 17847  0EDC  3000               	movlw	0
 17848  0EDD  00E1               	movwf	(_moveVector_downs+1)^(0+128)
 17849  0EDE  3000               	movlw	0
 17850  0EDF  00E0               	movwf	_moveVector_downs^(0+128)
 17851                           
 17852                           ;main.c: 326: printf("A\n");
 17853  0EE0  3038               	movlw	low (STR_5| (0+32768))
 17854  0EE1  00A0               	movwf	printf@f^(0+128)
 17855  0EE2  30B0               	movlw	high (STR_5| (0+32768))
 17856  0EE3  00A1               	movwf	(printf@f^(0+128)+1)
 17857  0EE4  318D  2594         	fcall	_printf
 17858                           
 17859                           ;main.c: 327: return;
 17860  0EE6  0008               	return
 17861  0EE7                     l9256:	
 17862                           ;main.c: 328: }
 17863                           
 17864                           
 17865                           ;main.c: 329: else{
 17866                           ;main.c: 330: int j;
 17867                           ;main.c: 331: if (remainingSteps > 0){
 17868  0EE7  0022               	movlb	2	; select bank2
 17869  0EE8  1BC1               	btfsc	(_remainingSteps+3)^(0+256),7
 17870  0EE9  2F72               	goto	l9276
 17871  0EEA  0841               	movf	(_remainingSteps+3)^(0+256),w
 17872  0EEB  1D03               	btfss	3,2
 17873  0EEC  2EF7               	goto	l9258
 17874  0EED  0840               	movf	(_remainingSteps+2)^(0+256),w
 17875  0EEE  1D03               	btfss	3,2
 17876  0EEF  2EF7               	goto	l9258
 17877  0EF0  083F               	movf	(_remainingSteps+1)^(0+256),w
 17878  0EF1  1D03               	btfss	3,2
 17879  0EF2  2EF7               	goto	l9258
 17880  0EF3  3001               	movlw	1
 17881  0EF4  023E               	subwf	_remainingSteps^(0+256),w
 17882  0EF5  1C03               	btfss	3,0
 17883  0EF6  2F72               	goto	l9276
 17884  0EF7                     l9258:	
 17885                           
 17886                           ;main.c: 332: moveVector_ups = 0;
 17887  0EF7  3000               	movlw	0
 17888  0EF8  0021               	movlb	1	; select bank1
 17889  0EF9  00E7               	movwf	(_moveVector_ups+3)^(0+128)
 17890  0EFA  3000               	movlw	0
 17891  0EFB  00E6               	movwf	(_moveVector_ups+2)^(0+128)
 17892  0EFC  3000               	movlw	0
 17893  0EFD  00E5               	movwf	(_moveVector_ups+1)^(0+128)
 17894  0EFE  3000               	movlw	0
 17895  0EFF  00E4               	movwf	_moveVector_ups^(0+128)
 17896                           
 17897                           ;main.c: 333: moveVector_downs = activeMask;
 17898  0F00  085F               	movf	(_activeMask+3)^(0+128),w
 17899  0F01  00E3               	movwf	(_moveVector_downs+3)^(0+128)
 17900  0F02  085E               	movf	(_activeMask+2)^(0+128),w
 17901  0F03  00E2               	movwf	(_moveVector_downs+2)^(0+128)
 17902  0F04  085D               	movf	(_activeMask+1)^(0+128),w
 17903  0F05  00E1               	movwf	(_moveVector_downs+1)^(0+128)
 17904  0F06  085C               	movf	_activeMask^(0+128),w
 17905  0F07  00E0               	movwf	_moveVector_downs^(0+128)
 17906                           
 17907                           ;main.c: 335: doMove();
 17908  0F08  3188  202F  318E   	fcall	_doMove
 17909                           
 17910                           ;main.c: 336: remainingSteps--;
 17911  0F0B  30FF               	movlw	255
 17912  0F0C  0022               	movlb	2	; select bank2
 17913  0F0D  07BE               	addwf	_remainingSteps^(0+256),f
 17914  0F0E  30FF               	movlw	255
 17915  0F0F  3DBF               	addwfc	(_remainingSteps+1)^(0+256),f
 17916  0F10  30FF               	movlw	255
 17917  0F11  3DC0               	addwfc	(_remainingSteps+2)^(0+256),f
 17918  0F12  30FF               	movlw	255
 17919  0F13  3DC1               	addwfc	(_remainingSteps+3)^(0+256),f
 17920                           
 17921                           ;main.c: 339: for(j = 0; j<24; j++)
 17922  0F14  0021               	movlb	1	; select bank1
 17923  0F15  01D3               	clrf	doRelMove@j^(0+128)
 17924  0F16  01D4               	clrf	(doRelMove@j+1)^(0+128)
 17925  0F17                     L37:	
 17926  0F17  0854               	movf	(doRelMove@j+1)^(0+128),w
 17927  0F18  3A80               	xorlw	128
 17928  0F19  00C3               	movwf	??_doRelMove^(0+128)
 17929  0F1A  3080               	movlw	128
 17930  0F1B  0243               	subwf	??_doRelMove^(0+128),w
 17931  0F1C  1D03               	skipz
 17932  0F1D  2F20               	goto	u9375
 17933  0F1E  3018               	movlw	24
 17934  0F1F  0253               	subwf	doRelMove@j^(0+128),w
 17935  0F20                     u9375:	
 17936  0F20  1803               	btfsc	3,0
 17937  0F21  2FF8               	goto	l9294
 17938                           
 17939                           ;main.c: 340: currentPositions_steps[j] += (activeMask & (1UL<<j) > 0);
 17940  0F22  0021               	movlb	1	; select bank1
 17941  0F23  085C               	movf	_activeMask^(0+128),w
 17942  0F24  00C3               	movwf	??_doRelMove^(0+128)
 17943  0F25  085D               	movf	(_activeMask+1)^(0+128),w
 17944  0F26  00C4               	movwf	(??_doRelMove^(0+128)+1)
 17945  0F27  085E               	movf	(_activeMask+2)^(0+128),w
 17946  0F28  00C5               	movwf	(??_doRelMove^(0+128)+2)
 17947  0F29  085F               	movf	(_activeMask+3)^(0+128),w
 17948  0F2A  00C6               	movwf	(??_doRelMove^(0+128)+3)
 17949  0F2B  3001               	movlw	1
 17950  0F2C  00C7               	movwf	(??_doRelMove+4)^(0+128)
 17951  0F2D  3000               	movlw	0
 17952  0F2E  00C8               	movwf	((??_doRelMove+4)^(0+128)+1)
 17953  0F2F  3000               	movlw	0
 17954  0F30  00C9               	movwf	((??_doRelMove+4)^(0+128)+2)
 17955  0F31  3000               	movlw	0
 17956  0F32  00CA               	movwf	((??_doRelMove+4)^(0+128)+3)
 17957  0F33  0A53               	incf	doRelMove@j^(0+128),w
 17958  0F34  2F39               	goto	u9380
 17959  0F35                     u9385:	
 17960  0F35  35C7               	lslf	(??_doRelMove+4)^(0+128),f
 17961  0F36  0DC8               	rlf	((??_doRelMove+4)^(0+128)+1),f
 17962  0F37  0DC9               	rlf	((??_doRelMove+4)^(0+128)+2),f
 17963  0F38  0DCA               	rlf	((??_doRelMove+4)^(0+128)+3),f
 17964  0F39                     u9380:	
 17965  0F39  0B89               	decfsz	9,f
 17966  0F3A  2F35               	goto	u9385
 17967  0F3B  084A               	movf	(??_doRelMove+7)^(0+128),w
 17968  0F3C  0449               	iorwf	(??_doRelMove+6)^(0+128),w
 17969  0F3D  0448               	iorwf	(??_doRelMove+5)^(0+128),w
 17970  0F3E  0447               	iorwf	(??_doRelMove+4)^(0+128),w
 17971  0F3F  1903               	btfsc	3,2
 17972  0F40  2F43               	goto	u9390
 17973  0F41  3001               	movlw	1
 17974  0F42  2F44               	goto	u9400
 17975  0F43                     u9390:	
 17976  0F43  3000               	movlw	0
 17977  0F44                     u9400:	
 17978  0F44  00CB               	movwf	(??_doRelMove+8)^(0+128)
 17979  0F45  01CC               	clrf	((??_doRelMove+8)^(0+128)+1)
 17980  0F46  01CD               	clrf	((??_doRelMove+8)^(0+128)+2)
 17981  0F47  01CE               	clrf	((??_doRelMove+8)^(0+128)+3)
 17982  0F48  084B               	movf	(??_doRelMove+8)^(0+128),w
 17983  0F49  05C3               	andwf	??_doRelMove^(0+128),f
 17984  0F4A  084C               	movf	(??_doRelMove+9)^(0+128),w
 17985  0F4B  05C4               	andwf	(??_doRelMove^(0+128)+1),f
 17986  0F4C  084D               	movf	(??_doRelMove+10)^(0+128),w
 17987  0F4D  05C5               	andwf	(??_doRelMove^(0+128)+2),f
 17988  0F4E  084E               	movf	(??_doRelMove+11)^(0+128),w
 17989  0F4F  05C6               	andwf	(??_doRelMove^(0+128)+3),f
 17990  0F50  0854               	movf	(doRelMove@j+1)^(0+128),w
 17991  0F51  00D0               	movwf	((??_doRelMove+12)^(0+128)+1)
 17992  0F52  0853               	movf	doRelMove@j^(0+128),w
 17993  0F53  00CF               	movwf	(??_doRelMove+12)^(0+128)
 17994  0F54  35CF               	lslf	(??_doRelMove+12)^(0+128),f
 17995  0F55  0DD0               	rlf	((??_doRelMove+12)^(0+128)+1),f
 17996  0F56  35CF               	lslf	(??_doRelMove+12)^(0+128),f
 17997  0F57  0DD0               	rlf	((??_doRelMove+12)^(0+128)+1),f
 17998  0F58  3090               	movlw	144
 17999  0F59  00D1               	movwf	(??_doRelMove+14)^(0+128)
 18000  0F5A  3027               	movlw	39
 18001  0F5B  00D2               	movwf	((??_doRelMove+14)^(0+128)+1)
 18002  0F5C  084F               	movf	(??_doRelMove+12)^(0+128),w
 18003  0F5D  0751               	addwf	(??_doRelMove+14)^(0+128),w
 18004  0F5E  0086               	movwf	6
 18005  0F5F  0850               	movf	(??_doRelMove+13)^(0+128),w
 18006  0F60  3D52               	addwfc	(??_doRelMove+15)^(0+128),w
 18007  0F61  0087               	movwf	7
 18008  0F62  0843               	movf	??_doRelMove^(0+128),w
 18009  0F63  0781               	addwf	1,f
 18010  0F64  3141               	addfsr 1,1
 18011  0F65  0844               	movf	(??_doRelMove+1)^(0+128),w
 18012  0F66  3D81               	addwfc	1,f
 18013  0F67  3141               	addfsr 1,1
 18014  0F68  0845               	movf	(??_doRelMove+2)^(0+128),w
 18015  0F69  3D81               	addwfc	1,f
 18016  0F6A  3141               	addfsr 1,1
 18017  0F6B  0846               	movf	(??_doRelMove+3)^(0+128),w
 18018  0F6C  3D81               	addwfc	1,f
 18019  0F6D  3001               	movlw	1
 18020  0F6E  07D3               	addwf	doRelMove@j^(0+128),f
 18021  0F6F  3000               	movlw	0
 18022  0F70  3DD4               	addwfc	(doRelMove@j+1)^(0+128),f
 18023  0F71  2F17               	goto	L37
 18024  0F72                     l9276:	
 18025                           ;main.c: 342: }
 18026                           
 18027                           
 18028                           ;main.c: 343: else{
 18029                           ;main.c: 344: moveVector_ups = activeMask;
 18030  0F72  0021               	movlb	1	; select bank1
 18031  0F73  085F               	movf	(_activeMask+3)^(0+128),w
 18032  0F74  00E7               	movwf	(_moveVector_ups+3)^(0+128)
 18033  0F75  085E               	movf	(_activeMask+2)^(0+128),w
 18034  0F76  00E6               	movwf	(_moveVector_ups+2)^(0+128)
 18035  0F77  085D               	movf	(_activeMask+1)^(0+128),w
 18036  0F78  00E5               	movwf	(_moveVector_ups+1)^(0+128)
 18037  0F79  085C               	movf	_activeMask^(0+128),w
 18038  0F7A  00E4               	movwf	_moveVector_ups^(0+128)
 18039                           
 18040                           ;main.c: 345: moveVector_downs = 0;
 18041  0F7B  3000               	movlw	0
 18042  0F7C  00E3               	movwf	(_moveVector_downs+3)^(0+128)
 18043  0F7D  3000               	movlw	0
 18044  0F7E  00E2               	movwf	(_moveVector_downs+2)^(0+128)
 18045  0F7F  3000               	movlw	0
 18046  0F80  00E1               	movwf	(_moveVector_downs+1)^(0+128)
 18047  0F81  3000               	movlw	0
 18048  0F82  00E0               	movwf	_moveVector_downs^(0+128)
 18049                           
 18050                           ;main.c: 347: doMove();
 18051  0F83  3188  202F  318E   	fcall	_doMove
 18052                           
 18053                           ;main.c: 348: remainingSteps++;
 18054  0F86  3001               	movlw	1
 18055  0F87  0022               	movlb	2	; select bank2
 18056  0F88  07BE               	addwf	_remainingSteps^(0+256),f
 18057  0F89  3000               	movlw	0
 18058  0F8A  3DBF               	addwfc	(_remainingSteps+1)^(0+256),f
 18059  0F8B  3000               	movlw	0
 18060  0F8C  3DC0               	addwfc	(_remainingSteps+2)^(0+256),f
 18061  0F8D  3000               	movlw	0
 18062  0F8E  3DC1               	addwfc	(_remainingSteps+3)^(0+256),f
 18063                           
 18064                           ;main.c: 349: for(j = 0; j<24; j++)
 18065  0F8F  0021               	movlb	1	; select bank1
 18066  0F90  01D3               	clrf	doRelMove@j^(0+128)
 18067  0F91  01D4               	clrf	(doRelMove@j+1)^(0+128)
 18068  0F92  0854               	movf	(doRelMove@j+1)^(0+128),w
 18069  0F93  3A80               	xorlw	128
 18070  0F94  00C3               	movwf	??_doRelMove^(0+128)
 18071  0F95  3080               	movlw	128
 18072  0F96  0243               	subwf	??_doRelMove^(0+128),w
 18073  0F97  1D03               	skipz
 18074  0F98  2F9B               	goto	u9425
 18075  0F99  3018               	movlw	24
 18076  0F9A  0253               	subwf	doRelMove@j^(0+128),w
 18077  0F9B                     u9425:	
 18078  0F9B  1803               	btfsc	3,0
 18079  0F9C  2FF8               	goto	l9294
 18080  0F9D                     l9288:	
 18081                           
 18082                           ;main.c: 350: currentPositions_steps[j] -= (activeMask & (1UL<<j) > 0);
 18083  0F9D  0021               	movlb	1	; select bank1
 18084  0F9E  085C               	movf	_activeMask^(0+128),w
 18085  0F9F  00C3               	movwf	??_doRelMove^(0+128)
 18086  0FA0  085D               	movf	(_activeMask+1)^(0+128),w
 18087  0FA1  00C4               	movwf	(??_doRelMove^(0+128)+1)
 18088  0FA2  085E               	movf	(_activeMask+2)^(0+128),w
 18089  0FA3  00C5               	movwf	(??_doRelMove^(0+128)+2)
 18090  0FA4  085F               	movf	(_activeMask+3)^(0+128),w
 18091  0FA5  00C6               	movwf	(??_doRelMove^(0+128)+3)
 18092  0FA6  3001               	movlw	1
 18093  0FA7  00C7               	movwf	(??_doRelMove+4)^(0+128)
 18094  0FA8  3000               	movlw	0
 18095  0FA9  00C8               	movwf	((??_doRelMove+4)^(0+128)+1)
 18096  0FAA  3000               	movlw	0
 18097  0FAB  00C9               	movwf	((??_doRelMove+4)^(0+128)+2)
 18098  0FAC  3000               	movlw	0
 18099  0FAD  00CA               	movwf	((??_doRelMove+4)^(0+128)+3)
 18100  0FAE  0A53               	incf	doRelMove@j^(0+128),w
 18101  0FAF  2FB4               	goto	u9430
 18102  0FB0                     u9435:	
 18103  0FB0  35C7               	lslf	(??_doRelMove+4)^(0+128),f
 18104  0FB1  0DC8               	rlf	((??_doRelMove+4)^(0+128)+1),f
 18105  0FB2  0DC9               	rlf	((??_doRelMove+4)^(0+128)+2),f
 18106  0FB3  0DCA               	rlf	((??_doRelMove+4)^(0+128)+3),f
 18107  0FB4                     u9430:	
 18108  0FB4  0B89               	decfsz	9,f
 18109  0FB5  2FB0               	goto	u9435
 18110  0FB6  084A               	movf	(??_doRelMove+7)^(0+128),w
 18111  0FB7  0449               	iorwf	(??_doRelMove+6)^(0+128),w
 18112  0FB8  0448               	iorwf	(??_doRelMove+5)^(0+128),w
 18113  0FB9  0447               	iorwf	(??_doRelMove+4)^(0+128),w
 18114  0FBA  1903               	btfsc	3,2
 18115  0FBB  2FBE               	goto	u9440
 18116  0FBC  3001               	movlw	1
 18117  0FBD  2FBF               	goto	u9450
 18118  0FBE                     u9440:	
 18119  0FBE  3000               	movlw	0
 18120  0FBF                     u9450:	
 18121  0FBF  00CB               	movwf	(??_doRelMove+8)^(0+128)
 18122  0FC0  01CC               	clrf	((??_doRelMove+8)^(0+128)+1)
 18123  0FC1  01CD               	clrf	((??_doRelMove+8)^(0+128)+2)
 18124  0FC2  01CE               	clrf	((??_doRelMove+8)^(0+128)+3)
 18125  0FC3  084B               	movf	(??_doRelMove+8)^(0+128),w
 18126  0FC4  05C3               	andwf	??_doRelMove^(0+128),f
 18127  0FC5  084C               	movf	(??_doRelMove+9)^(0+128),w
 18128  0FC6  05C4               	andwf	(??_doRelMove^(0+128)+1),f
 18129  0FC7  084D               	movf	(??_doRelMove+10)^(0+128),w
 18130  0FC8  05C5               	andwf	(??_doRelMove^(0+128)+2),f
 18131  0FC9  084E               	movf	(??_doRelMove+11)^(0+128),w
 18132  0FCA  05C6               	andwf	(??_doRelMove^(0+128)+3),f
 18133  0FCB  0854               	movf	(doRelMove@j+1)^(0+128),w
 18134  0FCC  00D0               	movwf	((??_doRelMove+12)^(0+128)+1)
 18135  0FCD  0853               	movf	doRelMove@j^(0+128),w
 18136  0FCE  00CF               	movwf	(??_doRelMove+12)^(0+128)
 18137  0FCF  35CF               	lslf	(??_doRelMove+12)^(0+128),f
 18138  0FD0  0DD0               	rlf	((??_doRelMove+12)^(0+128)+1),f
 18139  0FD1  35CF               	lslf	(??_doRelMove+12)^(0+128),f
 18140  0FD2  0DD0               	rlf	((??_doRelMove+12)^(0+128)+1),f
 18141  0FD3  3090               	movlw	144
 18142  0FD4  00D1               	movwf	(??_doRelMove+14)^(0+128)
 18143  0FD5  3027               	movlw	39
 18144  0FD6  00D2               	movwf	((??_doRelMove+14)^(0+128)+1)
 18145  0FD7  084F               	movf	(??_doRelMove+12)^(0+128),w
 18146  0FD8  0751               	addwf	(??_doRelMove+14)^(0+128),w
 18147  0FD9  0086               	movwf	6
 18148  0FDA  0850               	movf	(??_doRelMove+13)^(0+128),w
 18149  0FDB  3D52               	addwfc	(??_doRelMove+15)^(0+128),w
 18150  0FDC  0087               	movwf	7
 18151  0FDD  0843               	movf	??_doRelMove^(0+128),w
 18152  0FDE  0281               	subwf	1,f
 18153  0FDF  3141               	addfsr 1,1
 18154  0FE0  0844               	movf	(??_doRelMove+1)^(0+128),w
 18155  0FE1  3B81               	subwfb	1,f
 18156  0FE2  3141               	addfsr 1,1
 18157  0FE3  0845               	movf	(??_doRelMove+2)^(0+128),w
 18158  0FE4  3B81               	subwfb	1,f
 18159  0FE5  3141               	addfsr 1,1
 18160  0FE6  0846               	movf	(??_doRelMove+3)^(0+128),w
 18161  0FE7  3B81               	subwfb	1,f
 18162  0FE8  317D               	addfsr 1,-3
 18163  0FE9  3001               	movlw	1
 18164  0FEA  07D3               	addwf	doRelMove@j^(0+128),f
 18165  0FEB  3000               	movlw	0
 18166  0FEC  3DD4               	addwfc	(doRelMove@j+1)^(0+128),f
 18167  0FED  0854               	movf	(doRelMove@j+1)^(0+128),w
 18168  0FEE  3A80               	xorlw	128
 18169  0FEF  00C3               	movwf	??_doRelMove^(0+128)
 18170  0FF0  3080               	movlw	128
 18171  0FF1  0243               	subwf	??_doRelMove^(0+128),w
 18172  0FF2  1D03               	skipz
 18173  0FF3  2FF6               	goto	u9465
 18174  0FF4  3018               	movlw	24
 18175  0FF5  0253               	subwf	doRelMove@j^(0+128),w
 18176  0FF6                     u9465:	
 18177  0FF6  1C03               	skipc
 18178  0FF7  2F9D               	goto	l9288
 18179  0FF8                     l9294:	
 18180                           
 18181                           ;main.c: 352: }
 18182                           ;main.c: 353: }
 18183                           ;main.c: 355: if(verboseMove)
 18184  0FF8  0022               	movlb	2	; select bank2
 18185  0FF9  0860               	movf	_verboseMove^(0+256),w
 18186  0FFA  0461               	iorwf	(_verboseMove+1)^(0+256),w
 18187  0FFB  1903               	btfsc	3,2
 18188  0FFC  0008               	return
 18189                           
 18190                           ;main.c: 356: getMotionStatus();
 18191  0FFD  31A5  2542         	fcall	_getMotionStatus
 18192  0FFF  0008               	return
 18193  1000                     __end_of_doRelMove:	
 18194                           
 18195                           	psect	text63
 18196  2542                     __ptext63:	
 18197 ;; *************** function _getMotionStatus *****************
 18198 ;; Defined at:
 18199 ;;		line 554 in file "main.c"
 18200 ;; Parameters:    Size  Location     Type
 18201 ;;		None
 18202 ;; Auto vars:     Size  Location     Type
 18203 ;;		None
 18204 ;; Return value:  Size  Location     Type
 18205 ;;                  2   21[BANK1 ] int 
 18206 ;; Registers used:
 18207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18208 ;; Tracked objects:
 18209 ;;		On entry : 0/0
 18210 ;;		On exit  : 0/0
 18211 ;;		Unchanged: 0/0
 18212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18213 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18216 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18217 ;;Total ram usage:        2 bytes
 18218 ;; Hardware stack levels used:    1
 18219 ;; Hardware stack levels required when called:    9
 18220 ;; This function calls:
 18221 ;;		_printf
 18222 ;; This function is called by:
 18223 ;;		_doRelMove
 18224 ;;		_execCmd
 18225 ;; This function uses a non-reentrant model
 18226 ;;
 18227                           
 18228                           
 18229                           ;psect for function _getMotionStatus
 18230  2542                     _getMotionStatus:	
 18231                           
 18232                           ;main.c: 555: switch(motionType){
 18233                           
 18234                           ;incstack = 0
 18235                           ; Regs used in _getMotionStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18236  2542  2D5E               	goto	l8628
 18237  2543                     l8620:	
 18238                           ;main.c: 556: case REL_MOVE: printf("R\n"); break;
 18239                           
 18240  2543  3041               	movlw	low (STR_31| (0+32768))
 18241  2544  0021               	movlb	1	; select bank1
 18242  2545  00A0               	movwf	printf@f^(0+128)
 18243  2546  30B0               	movlw	high (STR_31| (0+32768))
 18244  2547  00A1               	movwf	(printf@f^(0+128)+1)
 18245  2548  318D  2594  31A5   	fcall	_printf
 18246  254B  2D67               	goto	l8630
 18247  254C                     l8622:	
 18248                           ;main.c: 557: case ABS_MOVE: printf("A\n"); break;
 18249                           
 18250  254C  3038               	movlw	low (STR_5| (0+32768))
 18251  254D  0021               	movlb	1	; select bank1
 18252  254E  00A0               	movwf	printf@f^(0+128)
 18253  254F  30B0               	movlw	high (STR_5| (0+32768))
 18254  2550  00A1               	movwf	(printf@f^(0+128)+1)
 18255  2551  318D  2594  31A5   	fcall	_printf
 18256  2554  2D67               	goto	l8630
 18257  2555                     l8624:	
 18258                           ;main.c: 558: default: printf("N\n"); break;
 18259                           
 18260  2555  303E               	movlw	low (STR_33| (0+32768))
 18261  2556  0021               	movlb	1	; select bank1
 18262  2557  00A0               	movwf	printf@f^(0+128)
 18263  2558  30B0               	movlw	high (STR_33| (0+32768))
 18264  2559  00A1               	movwf	(printf@f^(0+128)+1)
 18265  255A  318D  2594  31A5   	fcall	_printf
 18266                           
 18267                           ;main.c: 559: }
 18268  255D  2D67               	goto	l8630
 18269  255E                     l8628:	
 18270  255E  0020               	movlb	0	; select bank0
 18271  255F  0855               	movf	_motionType,w
 18272                           
 18273                           ; Switch size 1, requested type "space"
 18274                           ; Number of cases is 2, Range of values is 1 to 2
 18275                           ; switch strategies available:
 18276                           ; Name         Instructions Cycles
 18277                           ; simple_byte            7     4 (average)
 18278                           ; direct_byte           13     9 (fixed)
 18279                           ; jumptable            263     9 (fixed)
 18280                           ;	Chosen strategy is simple_byte
 18281  2560  3A01               	xorlw	1	; case 1
 18282  2561  1903               	skipnz
 18283  2562  2D43               	goto	l8620
 18284  2563  3A03               	xorlw	3	; case 2
 18285  2564  1903               	skipnz
 18286  2565  2D4C               	goto	l8622
 18287  2566  2D55               	goto	l8624
 18288  2567                     l8630:	
 18289                           
 18290                           ;main.c: 560: return 0;
 18291  2567  0021               	movlb	1	; select bank1
 18292  2568  01B5               	clrf	?_getMotionStatus^(0+128)
 18293  2569  01B6               	clrf	(?_getMotionStatus+1)^(0+128)
 18294  256A  0008               	return
 18295  256B                     __end_of_getMotionStatus:	
 18296                           
 18297                           	psect	text64
 18298  00E0                     __ptext64:	
 18299 ;; *************** function _doAbsMove *****************
 18300 ;; Defined at:
 18301 ;;		line 288 in file "main.c"
 18302 ;; Parameters:    Size  Location     Type
 18303 ;;		None
 18304 ;; Auto vars:     Size  Location     Type
 18305 ;;  i               2   39[BANK1 ] int 
 18306 ;;  i               2   41[BANK1 ] int 
 18307 ;;  i               2   37[BANK1 ] int 
 18308 ;;  allThere        2   35[BANK1 ] int 
 18309 ;; Return value:  Size  Location     Type
 18310 ;;                  1    wreg      void 
 18311 ;; Registers used:
 18312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18313 ;; Tracked objects:
 18314 ;;		On entry : 0/0
 18315 ;;		On exit  : 0/0
 18316 ;;		Unchanged: 0/0
 18317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18319 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18320 ;;      Temps:          0       0       0       0       0       0      28       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18321 ;;      Totals:         0       0       8       0       0       0      28       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18322 ;;Total ram usage:       36 bytes
 18323 ;; Hardware stack levels used:    1
 18324 ;; Hardware stack levels required when called:   15
 18325 ;; This function calls:
 18326 ;;		_doMove
 18327 ;;		_printf
 18328 ;; This function is called by:
 18329 ;;		_main
 18330 ;; This function uses a non-reentrant model
 18331 ;;
 18332                           
 18333                           
 18334                           ;psect for function _doAbsMove
 18335  00E0                     _doAbsMove:	
 18336                           
 18337                           ;main.c: 291: int allThere=1;
 18338                           
 18339                           ;incstack = 0
 18340                           ; Regs used in _doAbsMove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18341  00E0  3001               	movlw	1
 18342  00E1  0021               	movlb	1	; select bank1
 18343  00E2  00C3               	movwf	doAbsMove@allThere^(0+128)
 18344  00E3  3000               	movlw	0
 18345  00E4  00C4               	movwf	(doAbsMove@allThere^(0+128)+1)
 18346                           
 18347                           ;main.c: 292: for(int i=0;i<24;i++){
 18348  00E5  01C5               	clrf	doAbsMove@i^(0+128)
 18349  00E6  01C6               	clrf	(doAbsMove@i+1)^(0+128)
 18350  00E7  0846               	movf	(doAbsMove@i+1)^(0+128),w
 18351  00E8  3A80               	xorlw	128
 18352  00E9  0025               	movlb	5	; select bank5
 18353  00EA  00C8               	movwf	??_doAbsMove^(0+640)
 18354  00EB  3080               	movlw	128
 18355  00EC  0248               	subwf	??_doAbsMove^(0+640),w
 18356  00ED  1D03               	skipz
 18357  00EE  28F2               	goto	u9485
 18358  00EF  3018               	movlw	24
 18359  00F0  0021               	movlb	1	; select bank1
 18360  00F1  0245               	subwf	doAbsMove@i^(0+128),w
 18361  00F2                     u9485:	
 18362  00F2  1803               	btfsc	3,0
 18363  00F3  2978               	goto	l9314
 18364  00F4                     l9306:	
 18365                           
 18366                           ;main.c: 293: if((activeMask & (1UL << i)) > 0)
 18367  00F4  0021               	movlb	1	; select bank1
 18368  00F5  085C               	movf	_activeMask^(0+128),w
 18369  00F6  0025               	movlb	5	; select bank5
 18370  00F7  00C8               	movwf	??_doAbsMove^(0+640)
 18371  00F8  0021               	movlb	1	; select bank1
 18372  00F9  085D               	movf	(_activeMask+1)^(0+128),w
 18373  00FA  0025               	movlb	5	; select bank5
 18374  00FB  00C9               	movwf	(??_doAbsMove^(0+640)+1)
 18375  00FC  0021               	movlb	1	; select bank1
 18376  00FD  085E               	movf	(_activeMask+2)^(0+128),w
 18377  00FE  0025               	movlb	5	; select bank5
 18378  00FF  00CA               	movwf	(??_doAbsMove^(0+640)+2)
 18379  0100  0021               	movlb	1	; select bank1
 18380  0101  085F               	movf	(_activeMask+3)^(0+128),w
 18381  0102  0025               	movlb	5	; select bank5
 18382  0103  00CB               	movwf	(??_doAbsMove^(0+640)+3)
 18383  0104  3001               	movlw	1
 18384  0105  00CC               	movwf	(??_doAbsMove+4)^(0+640)
 18385  0106  3000               	movlw	0
 18386  0107  00CD               	movwf	((??_doAbsMove+4)^(0+640)+1)
 18387  0108  3000               	movlw	0
 18388  0109  00CE               	movwf	((??_doAbsMove+4)^(0+640)+2)
 18389  010A  3000               	movlw	0
 18390  010B  00CF               	movwf	((??_doAbsMove+4)^(0+640)+3)
 18391  010C  0021               	movlb	1	; select bank1
 18392  010D  0A45               	incf	doAbsMove@i^(0+128),w
 18393  010E  0025               	movlb	5	; select bank5
 18394  010F  2914               	goto	u9490
 18395  0110                     u9495:	
 18396  0110  35CC               	lslf	(??_doAbsMove+4)^(0+640),f
 18397  0111  0DCD               	rlf	((??_doAbsMove+4)^(0+640)+1),f
 18398  0112  0DCE               	rlf	((??_doAbsMove+4)^(0+640)+2),f
 18399  0113  0DCF               	rlf	((??_doAbsMove+4)^(0+640)+3),f
 18400  0114                     u9490:	
 18401  0114  0B89               	decfsz	9,f
 18402  0115  2910               	goto	u9495
 18403  0116  084C               	movf	(??_doAbsMove+4)^(0+640),w
 18404  0117  05C8               	andwf	??_doAbsMove^(0+640),f
 18405  0118  084D               	movf	(??_doAbsMove+5)^(0+640),w
 18406  0119  05C9               	andwf	(??_doAbsMove^(0+640)+1),f
 18407  011A  084E               	movf	(??_doAbsMove+6)^(0+640),w
 18408  011B  05CA               	andwf	(??_doAbsMove^(0+640)+2),f
 18409  011C  084F               	movf	(??_doAbsMove+7)^(0+640),w
 18410  011D  05CB               	andwf	(??_doAbsMove^(0+640)+3),f
 18411  011E  084B               	movf	(??_doAbsMove+3)^(0+640),w
 18412  011F  044A               	iorwf	(??_doAbsMove+2)^(0+640),w
 18413  0120  0449               	iorwf	(??_doAbsMove+1)^(0+640),w
 18414  0121  0448               	iorwf	??_doAbsMove^(0+640),w
 18415  0122  1903               	skipnz
 18416  0123  2966               	goto	l9310
 18417                           
 18418                           ;main.c: 294: allThere &= (currentPositions_steps[i] == absCommand);
 18419  0124  0021               	movlb	1	; select bank1
 18420  0125  0846               	movf	(doAbsMove@i+1)^(0+128),w
 18421  0126  0025               	movlb	5	; select bank5
 18422  0127  00C9               	movwf	(??_doAbsMove^(0+640)+1)
 18423  0128  0021               	movlb	1	; select bank1
 18424  0129  0845               	movf	doAbsMove@i^(0+128),w
 18425  012A  0025               	movlb	5	; select bank5
 18426  012B  00C8               	movwf	??_doAbsMove^(0+640)
 18427  012C  35C8               	lslf	??_doAbsMove^(0+640),f
 18428  012D  0DC9               	rlf	(??_doAbsMove^(0+640)+1),f
 18429  012E  35C8               	lslf	??_doAbsMove^(0+640),f
 18430  012F  0DC9               	rlf	(??_doAbsMove^(0+640)+1),f
 18431  0130  3090               	movlw	144
 18432  0131  00CA               	movwf	(??_doAbsMove+2)^(0+640)
 18433  0132  3027               	movlw	39
 18434  0133  00CB               	movwf	((??_doAbsMove+2)^(0+640)+1)
 18435  0134  0848               	movf	??_doAbsMove^(0+640),w
 18436  0135  074A               	addwf	(??_doAbsMove+2)^(0+640),w
 18437  0136  0086               	movwf	6
 18438  0137  0849               	movf	(??_doAbsMove+1)^(0+640),w
 18439  0138  3D4B               	addwfc	(??_doAbsMove+3)^(0+640),w
 18440  0139  0087               	movwf	7
 18441  013A  3F40               	moviw [0]fsr1
 18442  013B  00CC               	movwf	(??_doAbsMove+4)^(0+640)
 18443  013C  3F41               	moviw [1]fsr1
 18444  013D  00CD               	movwf	((??_doAbsMove+4)^(0+640)+1)
 18445  013E  3F42               	moviw [2]fsr1
 18446  013F  00CE               	movwf	((??_doAbsMove+4)^(0+640)+2)
 18447  0140  3F43               	moviw [3]fsr1
 18448  0141  00CF               	movwf	((??_doAbsMove+4)^(0+640)+3)
 18449  0142  0020               	movlb	0	; select bank0
 18450  0143  0851               	movf	_absCommand+3,w
 18451  0144  0025               	movlb	5	; select bank5
 18452  0145  064F               	xorwf	(??_doAbsMove+7)^(0+640),w
 18453  0146  1D03               	skipz
 18454  0147  2958               	goto	u9515
 18455  0148  0020               	movlb	0	; select bank0
 18456  0149  0850               	movf	_absCommand+2,w
 18457  014A  0025               	movlb	5	; select bank5
 18458  014B  064E               	xorwf	(??_doAbsMove+6)^(0+640),w
 18459  014C  1D03               	skipz
 18460  014D  2958               	goto	u9515
 18461  014E  0020               	movlb	0	; select bank0
 18462  014F  084F               	movf	_absCommand+1,w
 18463  0150  0025               	movlb	5	; select bank5
 18464  0151  064D               	xorwf	(??_doAbsMove+5)^(0+640),w
 18465  0152  1D03               	skipz
 18466  0153  2958               	goto	u9515
 18467  0154  0020               	movlb	0	; select bank0
 18468  0155  084E               	movf	_absCommand,w
 18469  0156  0025               	movlb	5	; select bank5
 18470  0157  064C               	xorwf	(??_doAbsMove+4)^(0+640),w
 18471  0158                     u9515:	
 18472  0158  1D03               	btfss	3,2
 18473  0159  295C               	goto	u9510
 18474  015A  3001               	movlw	1
 18475  015B  295D               	goto	u9520
 18476  015C                     u9510:	
 18477  015C  3000               	movlw	0
 18478  015D                     u9520:	
 18479  015D  00D0               	movwf	(??_doAbsMove+8)^(0+640)
 18480  015E  01D1               	clrf	((??_doAbsMove+8)^(0+640)+1)
 18481  015F  0850               	movf	(??_doAbsMove+8)^(0+640),w
 18482  0160  0021               	movlb	1	; select bank1
 18483  0161  05C3               	andwf	doAbsMove@allThere^(0+128),f
 18484  0162  0025               	movlb	5	; select bank5
 18485  0163  0851               	movf	(??_doAbsMove+9)^(0+640),w
 18486  0164  0021               	movlb	1	; select bank1
 18487  0165  05C4               	andwf	(doAbsMove@allThere+1)^(0+128),f
 18488  0166                     l9310:	
 18489  0166  3001               	movlw	1
 18490  0167  0021               	movlb	1	; select bank1
 18491  0168  07C5               	addwf	doAbsMove@i^(0+128),f
 18492  0169  3000               	movlw	0
 18493  016A  3DC6               	addwfc	(doAbsMove@i+1)^(0+128),f
 18494  016B  0846               	movf	(doAbsMove@i+1)^(0+128),w
 18495  016C  3A80               	xorlw	128
 18496  016D  0025               	movlb	5	; select bank5
 18497  016E  00C8               	movwf	??_doAbsMove^(0+640)
 18498  016F  3080               	movlw	128
 18499  0170  0248               	subwf	??_doAbsMove^(0+640),w
 18500  0171  1D03               	skipz
 18501  0172  2976               	goto	u9535
 18502  0173  3018               	movlw	24
 18503  0174  0021               	movlb	1	; select bank1
 18504  0175  0245               	subwf	doAbsMove@i^(0+128),w
 18505  0176                     u9535:	
 18506  0176  1C03               	skipc
 18507  0177  28F4               	goto	l9306
 18508  0178                     l9314:	
 18509                           
 18510                           ;main.c: 295: }
 18511                           ;main.c: 297: if(allThere){
 18512  0178  0021               	movlb	1	; select bank1
 18513  0179  0843               	movf	doAbsMove@allThere^(0+128),w
 18514  017A  0444               	iorwf	(doAbsMove@allThere+1)^(0+128),w
 18515  017B  1903               	btfsc	3,2
 18516  017C  299E               	goto	l9330
 18517                           
 18518                           ;main.c: 298: printf("abs: all there\n");
 18519  017D  30EE               	movlw	low (STR_6| (0+32768))
 18520  017E  00A0               	movwf	printf@f^(0+128)
 18521  017F  30A8               	movlw	high (STR_6| (0+32768))
 18522  0180  00A1               	movwf	(printf@f^(0+128)+1)
 18523  0181  318D  2594  3180   	fcall	_printf
 18524                           
 18525                           ;main.c: 299: motionType = NONE;
 18526  0184  0020               	movlb	0	; select bank0
 18527  0185  01D5               	clrf	_motionType
 18528                           
 18529                           ;main.c: 300: moveVector_ups = 0;
 18530  0186  3000               	movlw	0
 18531  0187  0021               	movlb	1	; select bank1
 18532  0188  00E7               	movwf	(_moveVector_ups+3)^(0+128)
 18533  0189  3000               	movlw	0
 18534  018A  00E6               	movwf	(_moveVector_ups+2)^(0+128)
 18535  018B  3000               	movlw	0
 18536  018C  00E5               	movwf	(_moveVector_ups+1)^(0+128)
 18537  018D  3000               	movlw	0
 18538  018E  00E4               	movwf	_moveVector_ups^(0+128)
 18539                           
 18540                           ;main.c: 301: moveVector_downs = 0;
 18541  018F  3000               	movlw	0
 18542  0190  00E3               	movwf	(_moveVector_downs+3)^(0+128)
 18543  0191  3000               	movlw	0
 18544  0192  00E2               	movwf	(_moveVector_downs+2)^(0+128)
 18545  0193  3000               	movlw	0
 18546  0194  00E1               	movwf	(_moveVector_downs+1)^(0+128)
 18547  0195  3000               	movlw	0
 18548  0196  00E0               	movwf	_moveVector_downs^(0+128)
 18549                           
 18550                           ;main.c: 302: printf("A\n");
 18551  0197  3038               	movlw	low (STR_5| (0+32768))
 18552  0198  00A0               	movwf	printf@f^(0+128)
 18553  0199  30B0               	movlw	high (STR_5| (0+32768))
 18554  019A  00A1               	movwf	(printf@f^(0+128)+1)
 18555  019B  318D  2594         	fcall	_printf
 18556                           
 18557                           ;main.c: 304: }
 18558                           
 18559                           ;main.c: 303: return;
 18560  019D  0008               	return
 18561  019E                     l9330:	
 18562                           
 18563                           ;main.c: 305: else{
 18564                           ;main.c: 306: for(int i=0;i<24;i++){
 18565  019E  0021               	movlb	1	; select bank1
 18566  019F  01C9               	clrf	doAbsMove@i_1677^(0+128)
 18567  01A0  01CA               	clrf	(doAbsMove@i_1677+1)^(0+128)
 18568  01A1  084A               	movf	(doAbsMove@i_1677+1)^(0+128),w
 18569  01A2  3A80               	xorlw	128
 18570  01A3  0025               	movlb	5	; select bank5
 18571  01A4  00C8               	movwf	??_doAbsMove^(0+640)
 18572  01A5  3080               	movlw	128
 18573  01A6  0248               	subwf	??_doAbsMove^(0+640),w
 18574  01A7  1D03               	skipz
 18575  01A8  29AC               	goto	u9555
 18576  01A9  3018               	movlw	24
 18577  01AA  0021               	movlb	1	; select bank1
 18578  01AB  0249               	subwf	doAbsMove@i_1677^(0+128),w
 18579  01AC                     u9555:	
 18580  01AC  1803               	btfsc	3,0
 18581  01AD  2AE2               	goto	l9342
 18582  01AE                     l9336:	
 18583                           
 18584                           ;main.c: 308: moveVector_ups |= (activeMask & (1UL << i)) & ((currentPositions_steps[i] 
      +                          > absCommand)<<i);
 18585  01AE  0021               	movlb	1	; select bank1
 18586  01AF  085C               	movf	_activeMask^(0+128),w
 18587  01B0  0025               	movlb	5	; select bank5
 18588  01B1  00C8               	movwf	??_doAbsMove^(0+640)
 18589  01B2  0021               	movlb	1	; select bank1
 18590  01B3  085D               	movf	(_activeMask+1)^(0+128),w
 18591  01B4  0025               	movlb	5	; select bank5
 18592  01B5  00C9               	movwf	(??_doAbsMove^(0+640)+1)
 18593  01B6  0021               	movlb	1	; select bank1
 18594  01B7  085E               	movf	(_activeMask+2)^(0+128),w
 18595  01B8  0025               	movlb	5	; select bank5
 18596  01B9  00CA               	movwf	(??_doAbsMove^(0+640)+2)
 18597  01BA  0021               	movlb	1	; select bank1
 18598  01BB  085F               	movf	(_activeMask+3)^(0+128),w
 18599  01BC  0025               	movlb	5	; select bank5
 18600  01BD  00CB               	movwf	(??_doAbsMove^(0+640)+3)
 18601  01BE  0021               	movlb	1	; select bank1
 18602  01BF  084A               	movf	(doAbsMove@i_1677+1)^(0+128),w
 18603  01C0  0025               	movlb	5	; select bank5
 18604  01C1  00CD               	movwf	((??_doAbsMove+4)^(0+640)+1)
 18605  01C2  0021               	movlb	1	; select bank1
 18606  01C3  0849               	movf	doAbsMove@i_1677^(0+128),w
 18607  01C4  0025               	movlb	5	; select bank5
 18608  01C5  00CC               	movwf	(??_doAbsMove+4)^(0+640)
 18609  01C6  35CC               	lslf	(??_doAbsMove+4)^(0+640),f
 18610  01C7  0DCD               	rlf	((??_doAbsMove+4)^(0+640)+1),f
 18611  01C8  35CC               	lslf	(??_doAbsMove+4)^(0+640),f
 18612  01C9  0DCD               	rlf	((??_doAbsMove+4)^(0+640)+1),f
 18613  01CA  3090               	movlw	144
 18614  01CB  00CE               	movwf	(??_doAbsMove+6)^(0+640)
 18615  01CC  3027               	movlw	39
 18616  01CD  00CF               	movwf	((??_doAbsMove+6)^(0+640)+1)
 18617  01CE  084C               	movf	(??_doAbsMove+4)^(0+640),w
 18618  01CF  074E               	addwf	(??_doAbsMove+6)^(0+640),w
 18619  01D0  0086               	movwf	6
 18620  01D1  084D               	movf	(??_doAbsMove+5)^(0+640),w
 18621  01D2  3D4F               	addwfc	(??_doAbsMove+7)^(0+640),w
 18622  01D3  0087               	movwf	7
 18623  01D4  3F40               	moviw [0]fsr1
 18624  01D5  00D0               	movwf	(??_doAbsMove+8)^(0+640)
 18625  01D6  3F41               	moviw [1]fsr1
 18626  01D7  00D1               	movwf	((??_doAbsMove+8)^(0+640)+1)
 18627  01D8  3F42               	moviw [2]fsr1
 18628  01D9  00D2               	movwf	((??_doAbsMove+8)^(0+640)+2)
 18629  01DA  3F43               	moviw [3]fsr1
 18630  01DB  00D3               	movwf	((??_doAbsMove+8)^(0+640)+3)
 18631  01DC  0020               	movlb	0	; select bank0
 18632  01DD  0851               	movf	_absCommand+3,w
 18633  01DE  3A80               	xorlw	128
 18634  01DF  0025               	movlb	5	; select bank5
 18635  01E0  00D4               	movwf	(??_doAbsMove+12)^(0+640)
 18636  01E1  0853               	movf	(??_doAbsMove+11)^(0+640),w
 18637  01E2  3A80               	xorlw	128
 18638  01E3  0254               	subwf	(??_doAbsMove+12)^(0+640),w
 18639  01E4  0020               	movlb	0	; select bank0
 18640  01E5  1D03               	skipz
 18641  01E6  29F7               	goto	u9563
 18642  01E7  0025               	movlb	5	; select bank5
 18643  01E8  0852               	movf	(??_doAbsMove+10)^(0+640),w
 18644  01E9  0020               	movlb	0	; select bank0
 18645  01EA  0250               	subwf	_absCommand+2,w
 18646  01EB  1D03               	skipz
 18647  01EC  29F7               	goto	u9563
 18648  01ED  0025               	movlb	5	; select bank5
 18649  01EE  0851               	movf	(??_doAbsMove+9)^(0+640),w
 18650  01EF  0020               	movlb	0	; select bank0
 18651  01F0  024F               	subwf	_absCommand+1,w
 18652  01F1  1D03               	skipz
 18653  01F2  29F7               	goto	u9563
 18654  01F3  0025               	movlb	5	; select bank5
 18655  01F4  0850               	movf	(??_doAbsMove+8)^(0+640),w
 18656  01F5  0020               	movlb	0	; select bank0
 18657  01F6  024E               	subwf	_absCommand,w
 18658  01F7                     u9563:	
 18659  01F7  1803               	btfsc	3,0
 18660  01F8  29FB               	goto	u9560
 18661  01F9  3001               	movlw	1
 18662  01FA  29FC               	goto	u9570
 18663  01FB                     u9560:	
 18664  01FB  3000               	movlw	0
 18665  01FC                     u9570:	
 18666  01FC  0025               	movlb	5	; select bank5
 18667  01FD  00D5               	movwf	(??_doAbsMove+13)^(0+640)
 18668  01FE  01D6               	clrf	((??_doAbsMove+13)^(0+640)+1)
 18669  01FF  0021               	movlb	1	; select bank1
 18670  0200  0A49               	incf	doAbsMove@i_1677^(0+128),w
 18671  0201  0025               	movlb	5	; select bank5
 18672  0202  2A05               	goto	u9584
 18673  0203                     u9585:	
 18674  0203  35D5               	lslf	(??_doAbsMove+13)^(0+640),f
 18675  0204  0DD6               	rlf	((??_doAbsMove+13)^(0+640)+1),f
 18676  0205                     u9584:	
 18677  0205  0B89               	decfsz	9,f
 18678  0206  2A03               	goto	u9585
 18679  0207  0855               	movf	(??_doAbsMove+13)^(0+640),w
 18680  0208  00D7               	movwf	(??_doAbsMove+15)^(0+640)
 18681  0209  0856               	movf	(??_doAbsMove+14)^(0+640),w
 18682  020A  00D8               	movwf	((??_doAbsMove+15)^(0+640)+1)
 18683  020B  3000               	movlw	0
 18684  020C  1BD8               	btfsc	((??_doAbsMove+15)^(0+640)+1),7
 18685  020D  30FF               	movlw	255
 18686  020E  00D9               	movwf	((??_doAbsMove+15)^(0+640)+2)
 18687  020F  00DA               	movwf	((??_doAbsMove+15)^(0+640)+3)
 18688  0210  3001               	movlw	1
 18689  0211  00DB               	movwf	(??_doAbsMove+19)^(0+640)
 18690  0212  3000               	movlw	0
 18691  0213  00DC               	movwf	((??_doAbsMove+19)^(0+640)+1)
 18692  0214  3000               	movlw	0
 18693  0215  00DD               	movwf	((??_doAbsMove+19)^(0+640)+2)
 18694  0216  3000               	movlw	0
 18695  0217  00DE               	movwf	((??_doAbsMove+19)^(0+640)+3)
 18696  0218  0021               	movlb	1	; select bank1
 18697  0219  0A49               	incf	doAbsMove@i_1677^(0+128),w
 18698  021A  0025               	movlb	5	; select bank5
 18699  021B  2A20               	goto	u9590
 18700  021C                     u9595:	
 18701  021C  35DB               	lslf	(??_doAbsMove+19)^(0+640),f
 18702  021D  0DDC               	rlf	((??_doAbsMove+19)^(0+640)+1),f
 18703  021E  0DDD               	rlf	((??_doAbsMove+19)^(0+640)+2),f
 18704  021F  0DDE               	rlf	((??_doAbsMove+19)^(0+640)+3),f
 18705  0220                     u9590:	
 18706  0220  0B89               	decfsz	9,f
 18707  0221  2A1C               	goto	u9595
 18708  0222  085B               	movf	(??_doAbsMove+19)^(0+640),w
 18709  0223  05D7               	andwf	(??_doAbsMove+15)^(0+640),f
 18710  0224  085C               	movf	(??_doAbsMove+20)^(0+640),w
 18711  0225  05D8               	andwf	((??_doAbsMove+15)^(0+640)+1),f
 18712  0226  085D               	movf	(??_doAbsMove+21)^(0+640),w
 18713  0227  05D9               	andwf	((??_doAbsMove+15)^(0+640)+2),f
 18714  0228  085E               	movf	(??_doAbsMove+22)^(0+640),w
 18715  0229  05DA               	andwf	((??_doAbsMove+15)^(0+640)+3),f
 18716  022A  0857               	movf	(??_doAbsMove+15)^(0+640),w
 18717  022B  05C8               	andwf	??_doAbsMove^(0+640),f
 18718  022C  0858               	movf	(??_doAbsMove+16)^(0+640),w
 18719  022D  05C9               	andwf	(??_doAbsMove^(0+640)+1),f
 18720  022E  0859               	movf	(??_doAbsMove+17)^(0+640),w
 18721  022F  05CA               	andwf	(??_doAbsMove^(0+640)+2),f
 18722  0230  085A               	movf	(??_doAbsMove+18)^(0+640),w
 18723  0231  05CB               	andwf	(??_doAbsMove^(0+640)+3),f
 18724  0232  0848               	movf	??_doAbsMove^(0+640),w
 18725  0233  0021               	movlb	1	; select bank1
 18726  0234  04E4               	iorwf	_moveVector_ups^(0+128),f
 18727  0235  0025               	movlb	5	; select bank5
 18728  0236  0849               	movf	(??_doAbsMove+1)^(0+640),w
 18729  0237  0021               	movlb	1	; select bank1
 18730  0238  04E5               	iorwf	(_moveVector_ups+1)^(0+128),f
 18731  0239  0025               	movlb	5	; select bank5
 18732  023A  084A               	movf	(??_doAbsMove+2)^(0+640),w
 18733  023B  0021               	movlb	1	; select bank1
 18734  023C  04E6               	iorwf	(_moveVector_ups+2)^(0+128),f
 18735  023D  0025               	movlb	5	; select bank5
 18736  023E  084B               	movf	(??_doAbsMove+3)^(0+640),w
 18737  023F  0021               	movlb	1	; select bank1
 18738  0240  04E7               	iorwf	(_moveVector_ups+3)^(0+128),f
 18739                           
 18740                           ;main.c: 309: moveVector_downs |= (activeMask & (1UL << i)) & ((currentPositions_steps[i
      +                          ] < absCommand)<<i);
 18741  0241  085C               	movf	_activeMask^(0+128),w
 18742  0242  0025               	movlb	5	; select bank5
 18743  0243  00C8               	movwf	??_doAbsMove^(0+640)
 18744  0244  0021               	movlb	1	; select bank1
 18745  0245  085D               	movf	(_activeMask+1)^(0+128),w
 18746  0246  0025               	movlb	5	; select bank5
 18747  0247  00C9               	movwf	(??_doAbsMove^(0+640)+1)
 18748  0248  0021               	movlb	1	; select bank1
 18749  0249  085E               	movf	(_activeMask+2)^(0+128),w
 18750  024A  0025               	movlb	5	; select bank5
 18751  024B  00CA               	movwf	(??_doAbsMove^(0+640)+2)
 18752  024C  0021               	movlb	1	; select bank1
 18753  024D  085F               	movf	(_activeMask+3)^(0+128),w
 18754  024E  0025               	movlb	5	; select bank5
 18755  024F  00CB               	movwf	(??_doAbsMove^(0+640)+3)
 18756  0250  0021               	movlb	1	; select bank1
 18757  0251  084A               	movf	(doAbsMove@i_1677+1)^(0+128),w
 18758  0252  0025               	movlb	5	; select bank5
 18759  0253  00CD               	movwf	((??_doAbsMove+4)^(0+640)+1)
 18760  0254  0021               	movlb	1	; select bank1
 18761  0255  0849               	movf	doAbsMove@i_1677^(0+128),w
 18762  0256  0025               	movlb	5	; select bank5
 18763  0257  00CC               	movwf	(??_doAbsMove+4)^(0+640)
 18764  0258  35CC               	lslf	(??_doAbsMove+4)^(0+640),f
 18765  0259  0DCD               	rlf	((??_doAbsMove+4)^(0+640)+1),f
 18766  025A  35CC               	lslf	(??_doAbsMove+4)^(0+640),f
 18767  025B  0DCD               	rlf	((??_doAbsMove+4)^(0+640)+1),f
 18768  025C  3090               	movlw	144
 18769  025D  00CE               	movwf	(??_doAbsMove+6)^(0+640)
 18770  025E  3027               	movlw	39
 18771  025F  00CF               	movwf	((??_doAbsMove+6)^(0+640)+1)
 18772  0260  084C               	movf	(??_doAbsMove+4)^(0+640),w
 18773  0261  074E               	addwf	(??_doAbsMove+6)^(0+640),w
 18774  0262  0086               	movwf	6
 18775  0263  084D               	movf	(??_doAbsMove+5)^(0+640),w
 18776  0264  3D4F               	addwfc	(??_doAbsMove+7)^(0+640),w
 18777  0265  0087               	movwf	7
 18778  0266  3F40               	moviw [0]fsr1
 18779  0267  00D0               	movwf	(??_doAbsMove+8)^(0+640)
 18780  0268  3F41               	moviw [1]fsr1
 18781  0269  00D1               	movwf	((??_doAbsMove+8)^(0+640)+1)
 18782  026A  3F42               	moviw [2]fsr1
 18783  026B  00D2               	movwf	((??_doAbsMove+8)^(0+640)+2)
 18784  026C  3F43               	moviw [3]fsr1
 18785  026D  00D3               	movwf	((??_doAbsMove+8)^(0+640)+3)
 18786  026E  0853               	movf	(??_doAbsMove+11)^(0+640),w
 18787  026F  3A80               	xorlw	128
 18788  0270  00D4               	movwf	(??_doAbsMove+12)^(0+640)
 18789  0271  0020               	movlb	0	; select bank0
 18790  0272  0851               	movf	_absCommand+3,w
 18791  0273  3A80               	xorlw	128
 18792  0274  0025               	movlb	5	; select bank5
 18793  0275  0254               	subwf	(??_doAbsMove+12)^(0+640),w
 18794  0276  1D03               	skipz
 18795  0277  2A88               	goto	u9603
 18796  0278  0020               	movlb	0	; select bank0
 18797  0279  0850               	movf	_absCommand+2,w
 18798  027A  0025               	movlb	5	; select bank5
 18799  027B  0252               	subwf	(??_doAbsMove+10)^(0+640),w
 18800  027C  1D03               	skipz
 18801  027D  2A88               	goto	u9603
 18802  027E  0020               	movlb	0	; select bank0
 18803  027F  084F               	movf	_absCommand+1,w
 18804  0280  0025               	movlb	5	; select bank5
 18805  0281  0251               	subwf	(??_doAbsMove+9)^(0+640),w
 18806  0282  1D03               	skipz
 18807  0283  2A88               	goto	u9603
 18808  0284  0020               	movlb	0	; select bank0
 18809  0285  084E               	movf	_absCommand,w
 18810  0286  0025               	movlb	5	; select bank5
 18811  0287  0250               	subwf	(??_doAbsMove+8)^(0+640),w
 18812  0288                     u9603:	
 18813  0288  1803               	btfsc	3,0
 18814  0289  2A8C               	goto	u9600
 18815  028A  3001               	movlw	1
 18816  028B  2A8D               	goto	u9610
 18817  028C                     u9600:	
 18818  028C  3000               	movlw	0
 18819  028D                     u9610:	
 18820  028D  00D5               	movwf	(??_doAbsMove+13)^(0+640)
 18821  028E  01D6               	clrf	((??_doAbsMove+13)^(0+640)+1)
 18822  028F  0021               	movlb	1	; select bank1
 18823  0290  0A49               	incf	doAbsMove@i_1677^(0+128),w
 18824  0291  0025               	movlb	5	; select bank5
 18825  0292  2A95               	goto	u9624
 18826  0293                     u9625:	
 18827  0293  35D5               	lslf	(??_doAbsMove+13)^(0+640),f
 18828  0294  0DD6               	rlf	((??_doAbsMove+13)^(0+640)+1),f
 18829  0295                     u9624:	
 18830  0295  0B89               	decfsz	9,f
 18831  0296  2A93               	goto	u9625
 18832  0297  0855               	movf	(??_doAbsMove+13)^(0+640),w
 18833  0298  00D7               	movwf	(??_doAbsMove+15)^(0+640)
 18834  0299  0856               	movf	(??_doAbsMove+14)^(0+640),w
 18835  029A  00D8               	movwf	((??_doAbsMove+15)^(0+640)+1)
 18836  029B  3000               	movlw	0
 18837  029C  1BD8               	btfsc	((??_doAbsMove+15)^(0+640)+1),7
 18838  029D  30FF               	movlw	255
 18839  029E  00D9               	movwf	((??_doAbsMove+15)^(0+640)+2)
 18840  029F  00DA               	movwf	((??_doAbsMove+15)^(0+640)+3)
 18841  02A0  3001               	movlw	1
 18842  02A1  00DB               	movwf	(??_doAbsMove+19)^(0+640)
 18843  02A2  3000               	movlw	0
 18844  02A3  00DC               	movwf	((??_doAbsMove+19)^(0+640)+1)
 18845  02A4  3000               	movlw	0
 18846  02A5  00DD               	movwf	((??_doAbsMove+19)^(0+640)+2)
 18847  02A6  3000               	movlw	0
 18848  02A7  00DE               	movwf	((??_doAbsMove+19)^(0+640)+3)
 18849  02A8  0021               	movlb	1	; select bank1
 18850  02A9  0A49               	incf	doAbsMove@i_1677^(0+128),w
 18851  02AA  0025               	movlb	5	; select bank5
 18852  02AB  2AB0               	goto	u9630
 18853  02AC                     u9635:	
 18854  02AC  35DB               	lslf	(??_doAbsMove+19)^(0+640),f
 18855  02AD  0DDC               	rlf	((??_doAbsMove+19)^(0+640)+1),f
 18856  02AE  0DDD               	rlf	((??_doAbsMove+19)^(0+640)+2),f
 18857  02AF  0DDE               	rlf	((??_doAbsMove+19)^(0+640)+3),f
 18858  02B0                     u9630:	
 18859  02B0  0B89               	decfsz	9,f
 18860  02B1  2AAC               	goto	u9635
 18861  02B2  085B               	movf	(??_doAbsMove+19)^(0+640),w
 18862  02B3  05D7               	andwf	(??_doAbsMove+15)^(0+640),f
 18863  02B4  085C               	movf	(??_doAbsMove+20)^(0+640),w
 18864  02B5  05D8               	andwf	((??_doAbsMove+15)^(0+640)+1),f
 18865  02B6  085D               	movf	(??_doAbsMove+21)^(0+640),w
 18866  02B7  05D9               	andwf	((??_doAbsMove+15)^(0+640)+2),f
 18867  02B8  085E               	movf	(??_doAbsMove+22)^(0+640),w
 18868  02B9  05DA               	andwf	((??_doAbsMove+15)^(0+640)+3),f
 18869  02BA  0857               	movf	(??_doAbsMove+15)^(0+640),w
 18870  02BB  05C8               	andwf	??_doAbsMove^(0+640),f
 18871  02BC  0858               	movf	(??_doAbsMove+16)^(0+640),w
 18872  02BD  05C9               	andwf	(??_doAbsMove^(0+640)+1),f
 18873  02BE  0859               	movf	(??_doAbsMove+17)^(0+640),w
 18874  02BF  05CA               	andwf	(??_doAbsMove^(0+640)+2),f
 18875  02C0  085A               	movf	(??_doAbsMove+18)^(0+640),w
 18876  02C1  05CB               	andwf	(??_doAbsMove^(0+640)+3),f
 18877  02C2  0848               	movf	??_doAbsMove^(0+640),w
 18878  02C3  0021               	movlb	1	; select bank1
 18879  02C4  04E0               	iorwf	_moveVector_downs^(0+128),f
 18880  02C5  0025               	movlb	5	; select bank5
 18881  02C6  0849               	movf	(??_doAbsMove+1)^(0+640),w
 18882  02C7  0021               	movlb	1	; select bank1
 18883  02C8  04E1               	iorwf	(_moveVector_downs+1)^(0+128),f
 18884  02C9  0025               	movlb	5	; select bank5
 18885  02CA  084A               	movf	(??_doAbsMove+2)^(0+640),w
 18886  02CB  0021               	movlb	1	; select bank1
 18887  02CC  04E2               	iorwf	(_moveVector_downs+2)^(0+128),f
 18888  02CD  0025               	movlb	5	; select bank5
 18889  02CE  084B               	movf	(??_doAbsMove+3)^(0+640),w
 18890  02CF  0021               	movlb	1	; select bank1
 18891  02D0  04E3               	iorwf	(_moveVector_downs+3)^(0+128),f
 18892  02D1  3001               	movlw	1
 18893  02D2  07C9               	addwf	doAbsMove@i_1677^(0+128),f
 18894  02D3  3000               	movlw	0
 18895  02D4  3DCA               	addwfc	(doAbsMove@i_1677+1)^(0+128),f
 18896  02D5  084A               	movf	(doAbsMove@i_1677+1)^(0+128),w
 18897  02D6  3A80               	xorlw	128
 18898  02D7  0025               	movlb	5	; select bank5
 18899  02D8  00C8               	movwf	??_doAbsMove^(0+640)
 18900  02D9  3080               	movlw	128
 18901  02DA  0248               	subwf	??_doAbsMove^(0+640),w
 18902  02DB  1D03               	skipz
 18903  02DC  2AE0               	goto	u9645
 18904  02DD  3018               	movlw	24
 18905  02DE  0021               	movlb	1	; select bank1
 18906  02DF  0249               	subwf	doAbsMove@i_1677^(0+128),w
 18907  02E0                     u9645:	
 18908  02E0  1C03               	skipc
 18909  02E1  29AE               	goto	l9336
 18910  02E2                     l9342:	
 18911                           
 18912                           ;main.c: 311: }
 18913                           ;main.c: 312: doMove();
 18914  02E2  3188  202F  3180   	fcall	_doMove
 18915                           
 18916                           ;main.c: 314: for(int i=0;i<24;i++)
 18917  02E5  0021               	movlb	1	; select bank1
 18918  02E6  01C7               	clrf	doAbsMove@i_1679^(0+128)
 18919  02E7  01C8               	clrf	(doAbsMove@i_1679+1)^(0+128)
 18920  02E8                     L38:	
 18921  02E8  0848               	movf	(doAbsMove@i_1679+1)^(0+128),w
 18922  02E9  3A80               	xorlw	128
 18923  02EA  0025               	movlb	5	; select bank5
 18924  02EB  00C8               	movwf	??_doAbsMove^(0+640)
 18925  02EC  3080               	movlw	128
 18926  02ED  0248               	subwf	??_doAbsMove^(0+640),w
 18927  02EE  1D03               	skipz
 18928  02EF  2AF3               	goto	u9655
 18929  02F0  3018               	movlw	24
 18930  02F1  0021               	movlb	1	; select bank1
 18931  02F2  0247               	subwf	doAbsMove@i_1679^(0+128),w
 18932  02F3                     u9655:	
 18933  02F3  1803               	btfsc	3,0
 18934  02F4  0008               	return
 18935                           
 18936                           ;main.c: 315: currentPositions_steps[i] += ((moveVector_downs & (1UL << i)) > 0) - ((mov
      +                          eVector_ups & (1UL << i)) > 0);
 18937  02F5  0021               	movlb	1	; select bank1
 18938  02F6  0864               	movf	_moveVector_ups^(0+128),w
 18939  02F7  0025               	movlb	5	; select bank5
 18940  02F8  00C8               	movwf	??_doAbsMove^(0+640)
 18941  02F9  0021               	movlb	1	; select bank1
 18942  02FA  0865               	movf	(_moveVector_ups+1)^(0+128),w
 18943  02FB  0025               	movlb	5	; select bank5
 18944  02FC  00C9               	movwf	(??_doAbsMove^(0+640)+1)
 18945  02FD  0021               	movlb	1	; select bank1
 18946  02FE  0866               	movf	(_moveVector_ups+2)^(0+128),w
 18947  02FF  0025               	movlb	5	; select bank5
 18948  0300  00CA               	movwf	(??_doAbsMove^(0+640)+2)
 18949  0301  0021               	movlb	1	; select bank1
 18950  0302  0867               	movf	(_moveVector_ups+3)^(0+128),w
 18951  0303  0025               	movlb	5	; select bank5
 18952  0304  00CB               	movwf	(??_doAbsMove^(0+640)+3)
 18953  0305  3001               	movlw	1
 18954  0306  00CC               	movwf	(??_doAbsMove+4)^(0+640)
 18955  0307  3000               	movlw	0
 18956  0308  00CD               	movwf	((??_doAbsMove+4)^(0+640)+1)
 18957  0309  3000               	movlw	0
 18958  030A  00CE               	movwf	((??_doAbsMove+4)^(0+640)+2)
 18959  030B  3000               	movlw	0
 18960  030C  00CF               	movwf	((??_doAbsMove+4)^(0+640)+3)
 18961  030D  0021               	movlb	1	; select bank1
 18962  030E  0A47               	incf	doAbsMove@i_1679^(0+128),w
 18963  030F  0025               	movlb	5	; select bank5
 18964  0310  2B15               	goto	u9660
 18965  0311                     u9665:	
 18966  0311  35CC               	lslf	(??_doAbsMove+4)^(0+640),f
 18967  0312  0DCD               	rlf	((??_doAbsMove+4)^(0+640)+1),f
 18968  0313  0DCE               	rlf	((??_doAbsMove+4)^(0+640)+2),f
 18969  0314  0DCF               	rlf	((??_doAbsMove+4)^(0+640)+3),f
 18970  0315                     u9660:	
 18971  0315  0B89               	decfsz	9,f
 18972  0316  2B11               	goto	u9665
 18973  0317  084C               	movf	(??_doAbsMove+4)^(0+640),w
 18974  0318  05C8               	andwf	??_doAbsMove^(0+640),f
 18975  0319  084D               	movf	(??_doAbsMove+5)^(0+640),w
 18976  031A  05C9               	andwf	(??_doAbsMove^(0+640)+1),f
 18977  031B  084E               	movf	(??_doAbsMove+6)^(0+640),w
 18978  031C  05CA               	andwf	(??_doAbsMove^(0+640)+2),f
 18979  031D  084F               	movf	(??_doAbsMove+7)^(0+640),w
 18980  031E  05CB               	andwf	(??_doAbsMove^(0+640)+3),f
 18981  031F  084B               	movf	(??_doAbsMove+3)^(0+640),w
 18982  0320  044A               	iorwf	(??_doAbsMove+2)^(0+640),w
 18983  0321  0449               	iorwf	(??_doAbsMove+1)^(0+640),w
 18984  0322  0448               	iorwf	??_doAbsMove^(0+640),w
 18985  0323  1903               	btfsc	3,2
 18986  0324  2B27               	goto	u9670
 18987  0325  3001               	movlw	1
 18988  0326  2B28               	goto	u9680
 18989  0327                     u9670:	
 18990  0327  3000               	movlw	0
 18991  0328                     u9680:	
 18992  0328  00D0               	movwf	(??_doAbsMove+8)^(0+640)
 18993  0329  01D1               	clrf	((??_doAbsMove+8)^(0+640)+1)
 18994  032A  09D0               	comf	(??_doAbsMove+8)^(0+640),f
 18995  032B  09D1               	comf	((??_doAbsMove+8)^(0+640)+1),f
 18996  032C  0AD0               	incf	(??_doAbsMove+8)^(0+640),f
 18997  032D  1903               	skipnz
 18998  032E  0AD1               	incf	((??_doAbsMove+8)^(0+640)+1),f
 18999  032F  0021               	movlb	1	; select bank1
 19000  0330  0860               	movf	_moveVector_downs^(0+128),w
 19001  0331  0025               	movlb	5	; select bank5
 19002  0332  00D2               	movwf	(??_doAbsMove+10)^(0+640)
 19003  0333  0021               	movlb	1	; select bank1
 19004  0334  0861               	movf	(_moveVector_downs+1)^(0+128),w
 19005  0335  0025               	movlb	5	; select bank5
 19006  0336  00D3               	movwf	((??_doAbsMove+10)^(0+640)+1)
 19007  0337  0021               	movlb	1	; select bank1
 19008  0338  0862               	movf	(_moveVector_downs+2)^(0+128),w
 19009  0339  0025               	movlb	5	; select bank5
 19010  033A  00D4               	movwf	((??_doAbsMove+10)^(0+640)+2)
 19011  033B  0021               	movlb	1	; select bank1
 19012  033C  0863               	movf	(_moveVector_downs+3)^(0+128),w
 19013  033D  0025               	movlb	5	; select bank5
 19014  033E  00D5               	movwf	((??_doAbsMove+10)^(0+640)+3)
 19015  033F  3001               	movlw	1
 19016  0340  00D6               	movwf	(??_doAbsMove+14)^(0+640)
 19017  0341  3000               	movlw	0
 19018  0342  00D7               	movwf	((??_doAbsMove+14)^(0+640)+1)
 19019  0343  3000               	movlw	0
 19020  0344  00D8               	movwf	((??_doAbsMove+14)^(0+640)+2)
 19021  0345  3000               	movlw	0
 19022  0346  00D9               	movwf	((??_doAbsMove+14)^(0+640)+3)
 19023  0347  0021               	movlb	1	; select bank1
 19024  0348  0A47               	incf	doAbsMove@i_1679^(0+128),w
 19025  0349  0025               	movlb	5	; select bank5
 19026  034A  2B4F               	goto	u9690
 19027  034B                     u9695:	
 19028  034B  35D6               	lslf	(??_doAbsMove+14)^(0+640),f
 19029  034C  0DD7               	rlf	((??_doAbsMove+14)^(0+640)+1),f
 19030  034D  0DD8               	rlf	((??_doAbsMove+14)^(0+640)+2),f
 19031  034E  0DD9               	rlf	((??_doAbsMove+14)^(0+640)+3),f
 19032  034F                     u9690:	
 19033  034F  0B89               	decfsz	9,f
 19034  0350  2B4B               	goto	u9695
 19035  0351  0856               	movf	(??_doAbsMove+14)^(0+640),w
 19036  0352  05D2               	andwf	(??_doAbsMove+10)^(0+640),f
 19037  0353  0857               	movf	(??_doAbsMove+15)^(0+640),w
 19038  0354  05D3               	andwf	((??_doAbsMove+10)^(0+640)+1),f
 19039  0355  0858               	movf	(??_doAbsMove+16)^(0+640),w
 19040  0356  05D4               	andwf	((??_doAbsMove+10)^(0+640)+2),f
 19041  0357  0859               	movf	(??_doAbsMove+17)^(0+640),w
 19042  0358  05D5               	andwf	((??_doAbsMove+10)^(0+640)+3),f
 19043  0359  0855               	movf	(??_doAbsMove+13)^(0+640),w
 19044  035A  0454               	iorwf	(??_doAbsMove+12)^(0+640),w
 19045  035B  0453               	iorwf	(??_doAbsMove+11)^(0+640),w
 19046  035C  0452               	iorwf	(??_doAbsMove+10)^(0+640),w
 19047  035D  1903               	btfsc	3,2
 19048  035E  2B61               	goto	u9700
 19049  035F  3001               	movlw	1
 19050  0360  2B62               	goto	u9710
 19051  0361                     u9700:	
 19052  0361  3000               	movlw	0
 19053  0362                     u9710:	
 19054  0362  0750               	addwf	(??_doAbsMove+8)^(0+640),w
 19055  0363  00DA               	movwf	(??_doAbsMove+18)^(0+640)
 19056  0364  0851               	movf	(??_doAbsMove+9)^(0+640),w
 19057  0365  1803               	skipnc
 19058  0366  0A51               	incf	(??_doAbsMove+9)^(0+640),w
 19059  0367  00DB               	movwf	((??_doAbsMove+18)^(0+640)+1)
 19060  0368  085A               	movf	(??_doAbsMove+18)^(0+640),w
 19061  0369  00DC               	movwf	(??_doAbsMove+20)^(0+640)
 19062  036A  085B               	movf	(??_doAbsMove+19)^(0+640),w
 19063  036B  00DD               	movwf	((??_doAbsMove+20)^(0+640)+1)
 19064  036C  3000               	movlw	0
 19065  036D  1BDD               	btfsc	((??_doAbsMove+20)^(0+640)+1),7
 19066  036E  30FF               	movlw	255
 19067  036F  00DE               	movwf	((??_doAbsMove+20)^(0+640)+2)
 19068  0370  00DF               	movwf	((??_doAbsMove+20)^(0+640)+3)
 19069  0371  0021               	movlb	1	; select bank1
 19070  0372  0848               	movf	(doAbsMove@i_1679+1)^(0+128),w
 19071  0373  0025               	movlb	5	; select bank5
 19072  0374  00E1               	movwf	((??_doAbsMove+24)^(0+640)+1)
 19073  0375  0021               	movlb	1	; select bank1
 19074  0376  0847               	movf	doAbsMove@i_1679^(0+128),w
 19075  0377  0025               	movlb	5	; select bank5
 19076  0378  00E0               	movwf	(??_doAbsMove+24)^(0+640)
 19077  0379  35E0               	lslf	(??_doAbsMove+24)^(0+640),f
 19078  037A  0DE1               	rlf	((??_doAbsMove+24)^(0+640)+1),f
 19079  037B  35E0               	lslf	(??_doAbsMove+24)^(0+640),f
 19080  037C  0DE1               	rlf	((??_doAbsMove+24)^(0+640)+1),f
 19081  037D  3090               	movlw	144
 19082  037E  00E2               	movwf	(??_doAbsMove+26)^(0+640)
 19083  037F  3027               	movlw	39
 19084  0380  00E3               	movwf	((??_doAbsMove+26)^(0+640)+1)
 19085  0381  0860               	movf	(??_doAbsMove+24)^(0+640),w
 19086  0382  0762               	addwf	(??_doAbsMove+26)^(0+640),w
 19087  0383  0086               	movwf	6
 19088  0384  0861               	movf	(??_doAbsMove+25)^(0+640),w
 19089  0385  3D63               	addwfc	(??_doAbsMove+27)^(0+640),w
 19090  0386  0087               	movwf	7
 19091  0387  085C               	movf	(??_doAbsMove+20)^(0+640),w
 19092  0388  0781               	addwf	1,f
 19093  0389  3141               	addfsr 1,1
 19094  038A  085D               	movf	(??_doAbsMove+21)^(0+640),w
 19095  038B  3D81               	addwfc	1,f
 19096  038C  3141               	addfsr 1,1
 19097  038D  085E               	movf	(??_doAbsMove+22)^(0+640),w
 19098  038E  3D81               	addwfc	1,f
 19099  038F  3141               	addfsr 1,1
 19100  0390  085F               	movf	(??_doAbsMove+23)^(0+640),w
 19101  0391  3D81               	addwfc	1,f
 19102  0392  3001               	movlw	1
 19103  0393  0021               	movlb	1	; select bank1
 19104  0394  07C7               	addwf	doAbsMove@i_1679^(0+128),f
 19105  0395  3000               	movlw	0
 19106  0396  3DC8               	addwfc	(doAbsMove@i_1679+1)^(0+128),f
 19107  0397  2AE8               	goto	L38
 19108  0398                     __end_of_doAbsMove:	
 19109                           
 19110                           	psect	text65
 19111  082F                     __ptext65:	
 19112 ;; *************** function _doMove *****************
 19113 ;; Defined at:
 19114 ;;		line 212 in file "main.c"
 19115 ;; Parameters:    Size  Location     Type
 19116 ;;		None
 19117 ;; Auto vars:     Size  Location     Type
 19118 ;;  t               2   33[BANK1 ] int 
 19119 ;;  t               2   31[BANK1 ] int 
 19120 ;; Return value:  Size  Location     Type
 19121 ;;                  2   28[BANK1 ] int 
 19122 ;; Registers used:
 19123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19124 ;; Tracked objects:
 19125 ;;		On entry : 0/0
 19126 ;;		On exit  : 0/0
 19127 ;;		Unchanged: 0/0
 19128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19129 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19130 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19131 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19132 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19133 ;;Total ram usage:        7 bytes
 19134 ;; Hardware stack levels used:    1
 19135 ;; Hardware stack levels required when called:   14
 19136 ;; This function calls:
 19137 ;;		_LEDsOn
 19138 ;;		_TMR0_StartTimer
 19139 ;;		_TMR2_StartTimer
 19140 ;;		_TMR4_StartTimer
 19141 ;;		_calcHeaterPins
 19142 ;;		_drv_write_DC
 19143 ;;		_drv_write_wvfrm
 19144 ;; This function is called by:
 19145 ;;		_doAbsMove
 19146 ;;		_doRelMove
 19147 ;;		_execCmd
 19148 ;; This function uses a non-reentrant model
 19149 ;;
 19150                           
 19151                           
 19152                           ;psect for function _doMove
 19153  082F                     _doMove:	
 19154                           
 19155                           ;main.c: 214: calcHeaterPins();
 19156                           
 19157                           ;incstack = 0
 19158                           ; Regs used in _doMove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19159  082F  3195  2505  3188   	fcall	_calcHeaterPins
 19160                           
 19161                           ;main.c: 216: do { LATCbits.LATC1 = 1; } while(0);
 19162  0832  0022               	movlb	2	; select bank2
 19163  0833  148E               	bsf	14,1	;volatile
 19164                           
 19165                           ;main.c: 217: LEDsOn(first_top, 1);
 19166  0834  0855               	movf	(_first_top+3)^(0+256),w
 19167  0835  0020               	movlb	0	; select bank0
 19168  0836  00C7               	movwf	LEDsOn@LEDpins+3
 19169  0837  0022               	movlb	2	; select bank2
 19170  0838  0854               	movf	(_first_top+2)^(0+256),w
 19171  0839  0020               	movlb	0	; select bank0
 19172  083A  00C6               	movwf	LEDsOn@LEDpins+2
 19173  083B  0022               	movlb	2	; select bank2
 19174  083C  0853               	movf	(_first_top+1)^(0+256),w
 19175  083D  0020               	movlb	0	; select bank0
 19176  083E  00C5               	movwf	LEDsOn@LEDpins+1
 19177  083F  0022               	movlb	2	; select bank2
 19178  0840  0852               	movf	_first_top^(0+256),w
 19179  0841  0020               	movlb	0	; select bank0
 19180  0842  00C4               	movwf	LEDsOn@LEDpins
 19181  0843  3001               	movlw	1
 19182  0844  00C8               	movwf	LEDsOn@topOrBottom
 19183  0845  3000               	movlw	0
 19184  0846  00C9               	movwf	LEDsOn@topOrBottom+1
 19185  0847  31A3  23F8  3188   	fcall	_LEDsOn
 19186                           
 19187                           ;main.c: 218: LEDsOn(first_bottom,2);
 19188  084A  0022               	movlb	2	; select bank2
 19189  084B  0859               	movf	(_first_bottom+3)^(0+256),w
 19190  084C  0020               	movlb	0	; select bank0
 19191  084D  00C7               	movwf	LEDsOn@LEDpins+3
 19192  084E  0022               	movlb	2	; select bank2
 19193  084F  0858               	movf	(_first_bottom+2)^(0+256),w
 19194  0850  0020               	movlb	0	; select bank0
 19195  0851  00C6               	movwf	LEDsOn@LEDpins+2
 19196  0852  0022               	movlb	2	; select bank2
 19197  0853  0857               	movf	(_first_bottom+1)^(0+256),w
 19198  0854  0020               	movlb	0	; select bank0
 19199  0855  00C5               	movwf	LEDsOn@LEDpins+1
 19200  0856  0022               	movlb	2	; select bank2
 19201  0857  0856               	movf	_first_bottom^(0+256),w
 19202  0858  0020               	movlb	0	; select bank0
 19203  0859  00C4               	movwf	LEDsOn@LEDpins
 19204  085A  3002               	movlw	2
 19205  085B  00C8               	movwf	LEDsOn@topOrBottom
 19206  085C  3000               	movlw	0
 19207  085D  00C9               	movwf	LEDsOn@topOrBottom+1
 19208  085E  31A3  23F8  3188   	fcall	_LEDsOn
 19209                           
 19210                           ;main.c: 219: do { LATCbits.LATC1 = 0; } while(0);
 19211  0861  0022               	movlb	2	; select bank2
 19212  0862  108E               	bcf	14,1	;volatile
 19213                           
 19214                           ;main.c: 220: for(int t=0; t<heater_pre_time_ms; t++) _delay((unsigned long)((1)*(100000
      +                          0/4000.0)));
 19215  0863  0021               	movlb	1	; select bank1
 19216  0864  01BF               	clrf	doMove@t^(0+128)
 19217  0865  01C0               	clrf	(doMove@t+1)^(0+128)
 19218  0866                     l1137:	
 19219  0866  0840               	movf	(doMove@t+1)^(0+128),w
 19220  0867  3A80               	xorlw	128
 19221  0868  00BE               	movwf	??_doMove^(0+128)
 19222  0869  086D               	movf	(_heater_pre_time_ms+1)^(0+128),w
 19223  086A  3A80               	xorlw	128
 19224  086B  023E               	subwf	??_doMove^(0+128),w
 19225  086C  1D03               	skipz
 19226  086D  2870               	goto	u8625
 19227  086E  086C               	movf	_heater_pre_time_ms^(0+128),w
 19228  086F  023F               	subwf	doMove@t^(0+128),w
 19229  0870                     u8625:	
 19230  0870  1803               	btfsc	3,0
 19231  0871  287C               	goto	l8584
 19232  0872  3053               	movlw	83
 19233  0873                     u10117:	
 19234  0873  0B89               	decfsz	9,f
 19235  0874  2873               	goto	u10117
 19236  0875  0000               	nop
 19237  0876  3001               	movlw	1
 19238  0877  0021               	movlb	1	; select bank1
 19239  0878  07BF               	addwf	doMove@t^(0+128),f
 19240  0879  3000               	movlw	0
 19241  087A  3DC0               	addwfc	(doMove@t+1)^(0+128),f
 19242  087B  2866               	goto	l1137
 19243  087C                     l8584:	
 19244                           
 19245                           ;main.c: 221: TMR2_StartTimer();
 19246  087C  31AF  2760  3188   	fcall	_TMR2_StartTimer
 19247                           
 19248                           ;main.c: 222: TMR0_StartTimer();
 19249  087F  31AF  275D  3188   	fcall	_TMR0_StartTimer
 19250                           
 19251                           ;main.c: 224: drv_write_wvfrm(1);
 19252  0882  3001               	movlw	1
 19253  0883  31A2  227E  3188   	fcall	_drv_write_wvfrm
 19254                           
 19255                           ;main.c: 225: drv_write_DC(drv_peak_val, piezo_on_time_ms);
 19256  0886  0021               	movlb	1	; select bank1
 19257  0887  086F               	movf	(_drv_peak_val+1)^(0+128),w
 19258  0888  00B6               	movwf	(drv_write_DC@val+1)^(0+128)
 19259  0889  086E               	movf	_drv_peak_val^(0+128),w
 19260  088A  00B5               	movwf	drv_write_DC@val^(0+128)
 19261  088B  086B               	movf	(_piezo_on_time_ms+1)^(0+128),w
 19262  088C  00B8               	movwf	(drv_write_DC@duration_ms+1)^(0+128)
 19263  088D  086A               	movf	_piezo_on_time_ms^(0+128),w
 19264  088E  00B7               	movwf	drv_write_DC@duration_ms^(0+128)
 19265  088F  31A7  274D  3188   	fcall	_drv_write_DC
 19266                           
 19267                           ;main.c: 226: drv_write_wvfrm(0);
 19268  0892  3000               	movlw	0
 19269  0893  31A2  227E  3188   	fcall	_drv_write_wvfrm
 19270                           
 19271                           ;main.c: 227: for(int t=0; t<heater_post_time_ms; t++) _delay((unsigned long)((1)*(10000
      +                          00/4000.0)));
 19272  0896  0021               	movlb	1	; select bank1
 19273  0897  01C1               	clrf	doMove@t_1662^(0+128)
 19274  0898  01C2               	clrf	(doMove@t_1662+1)^(0+128)
 19275  0899                     l1140:	
 19276  0899  0842               	movf	(doMove@t_1662+1)^(0+128),w
 19277  089A  3A80               	xorlw	128
 19278  089B  00BE               	movwf	??_doMove^(0+128)
 19279  089C  0022               	movlb	2	; select bank2
 19280  089D  086B               	movf	(_heater_post_time_ms+1)^(0+256),w
 19281  089E  3A80               	xorlw	128
 19282  089F  0021               	movlb	1	; select bank1
 19283  08A0  023E               	subwf	??_doMove^(0+128),w
 19284  08A1  1D03               	skipz
 19285  08A2  28A7               	goto	u8635
 19286  08A3  0022               	movlb	2	; select bank2
 19287  08A4  086A               	movf	_heater_post_time_ms^(0+256),w
 19288  08A5  0021               	movlb	1	; select bank1
 19289  08A6  0241               	subwf	doMove@t_1662^(0+128),w
 19290  08A7                     u8635:	
 19291  08A7  1803               	btfsc	3,0
 19292  08A8  28B3               	goto	l1143
 19293  08A9  3053               	movlw	83
 19294  08AA                     u10127:	
 19295  08AA  0B89               	decfsz	9,f
 19296  08AB  28AA               	goto	u10127
 19297  08AC  0000               	nop
 19298  08AD  3001               	movlw	1
 19299  08AE  0021               	movlb	1	; select bank1
 19300  08AF  07C1               	addwf	doMove@t_1662^(0+128),f
 19301  08B0  3000               	movlw	0
 19302  08B1  3DC2               	addwfc	(doMove@t_1662+1)^(0+128),f
 19303  08B2  2899               	goto	l1140
 19304  08B3                     l1143:	
 19305                           ;main.c: 229: do { LATCbits.LATC1 = 1; } while(0);
 19306                           
 19307  08B3  0022               	movlb	2	; select bank2
 19308  08B4  148E               	bsf	14,1	;volatile
 19309                           
 19310                           ;main.c: 231: TMR4_StartTimer();
 19311  08B5  31AF  2763         	fcall	_TMR4_StartTimer
 19312                           
 19313                           ;main.c: 232: interpulseWait = 1;
 19314  08B7  3001               	movlw	1
 19315  08B8  0022               	movlb	2	; select bank2
 19316  08B9  00E6               	movwf	_interpulseWait^(0+256)
 19317  08BA  3000               	movlw	0
 19318  08BB  00E7               	movwf	(_interpulseWait^(0+256)+1)
 19319                           
 19320                           ;main.c: 233: return 0;
 19321  08BC  0021               	movlb	1	; select bank1
 19322  08BD  01BC               	clrf	?_doMove^(0+128)
 19323  08BE  01BD               	clrf	(?_doMove+1)^(0+128)
 19324  08BF  0008               	return
 19325  08C0                     __end_of_doMove:	
 19326                           
 19327                           	psect	text66
 19328  227E                     __ptext66:	
 19329 ;; *************** function _drv_write_wvfrm *****************
 19330 ;; Defined at:
 19331 ;;		line 77 in file "drv2665.c"
 19332 ;; Parameters:    Size  Location     Type
 19333 ;;  upOrDown        1    wreg     unsigned char 
 19334 ;; Auto vars:     Size  Location     Type
 19335 ;;  upOrDown        1   26[BANK0 ] unsigned char 
 19336 ;; Return value:  Size  Location     Type
 19337 ;;                  1    wreg      void 
 19338 ;; Registers used:
 19339 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19340 ;; Tracked objects:
 19341 ;;		On entry : 0/0
 19342 ;;		On exit  : 0/0
 19343 ;;		Unchanged: 0/0
 19344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19348 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19349 ;;Total ram usage:        1 bytes
 19350 ;; Hardware stack levels used:    1
 19351 ;; Hardware stack levels required when called:   12
 19352 ;; This function calls:
 19353 ;;		_i2c_masterOperation
 19354 ;;		_i2c_setBuffer
 19355 ;; This function is called by:
 19356 ;;		_doMove
 19357 ;; This function uses a non-reentrant model
 19358 ;;
 19359                           
 19360                           
 19361                           ;psect for function _drv_write_wvfrm
 19362  227E                     _drv_write_wvfrm:	
 19363                           
 19364                           ;incstack = 0
 19365                           ; Regs used in _drv_write_wvfrm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19366                           ;drv_write_wvfrm@upOrDown stored from wreg
 19367  227E  0020               	movlb	0	; select bank0
 19368  227F  00BA               	movwf	drv_write_wvfrm@upOrDown
 19369                           
 19370                           ;drv2665.c: 80: if (upOrDown)
 19371  2280  083A               	movf	drv_write_wvfrm@upOrDown,w
 19372  2281  1903               	btfsc	3,2
 19373  2282  2A87               	goto	l8388
 19374                           
 19375                           ;drv2665.c: 81: i2c_setBuffer(&drv_fifo_upstroke, (sizeof(drv_fifo_upstroke) / sizeof((d
      +                          rv_fifo_upstroke)[0])));
 19376  2283  3020               	movlw	low _drv_fifo_upstroke
 19377  2284  00B1               	movwf	i2c_setBuffer@buffer
 19378  2285  3002               	movlw	high _drv_fifo_upstroke
 19379  2286  2A8B               	goto	L39
 19380  2287                     l8388:	
 19381                           
 19382                           ;drv2665.c: 82: else
 19383                           ;drv2665.c: 83: i2c_setBuffer(&drv_fifo_downstroke, (sizeof(drv_fifo_downstroke) / sizeo
      +                          f((drv_fifo_downstroke)[0])));
 19384  2287  30A0               	movlw	low _drv_fifo_downstroke
 19385  2288  0020               	movlb	0	; select bank0
 19386  2289  00B1               	movwf	i2c_setBuffer@buffer
 19387  228A  3002               	movlw	high _drv_fifo_downstroke
 19388  228B                     L39:	
 19389  228B  00B2               	movwf	i2c_setBuffer@buffer+1
 19390  228C  3028               	movlw	40
 19391  228D  00B3               	movwf	i2c_setBuffer@bufferSize
 19392  228E  3000               	movlw	0
 19393  228F  00B4               	movwf	i2c_setBuffer@bufferSize+1
 19394  2290  31A2  2221  31A2   	fcall	_i2c_setBuffer
 19395                           
 19396                           ;drv2665.c: 84: i2c_masterOperation(0);
 19397  2293  3000               	movlw	0
 19398  2294  31A4  245F         	fcall	_i2c_masterOperation
 19399  2296  0008               	return
 19400  2297                     __end_of_drv_write_wvfrm:	
 19401                           
 19402                           	psect	text67
 19403  274D                     __ptext67:	
 19404 ;; *************** function _drv_write_DC *****************
 19405 ;; Defined at:
 19406 ;;		line 109 in file "drv2665.c"
 19407 ;; Parameters:    Size  Location     Type
 19408 ;;  val             2   21[BANK1 ] int 
 19409 ;;  duration_ms     2   23[BANK1 ] int 
 19410 ;; Auto vars:     Size  Location     Type
 19411 ;;  i               2   26[BANK1 ] int 
 19412 ;; Return value:  Size  Location     Type
 19413 ;;                  1    wreg      void 
 19414 ;; Registers used:
 19415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19416 ;; Tracked objects:
 19417 ;;		On entry : 0/0
 19418 ;;		On exit  : 0/0
 19419 ;;		Unchanged: 0/0
 19420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19421 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19422 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19423 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19424 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19425 ;;Total ram usage:        7 bytes
 19426 ;; Hardware stack levels used:    1
 19427 ;; Hardware stack levels required when called:   13
 19428 ;; This function calls:
 19429 ;;		___awdiv
 19430 ;;		_drv_write
 19431 ;; This function is called by:
 19432 ;;		_doMove
 19433 ;; This function uses a non-reentrant model
 19434 ;;
 19435                           
 19436                           
 19437                           ;psect for function _drv_write_DC
 19438  274D                     _drv_write_DC:	
 19439                           
 19440                           ;drv2665.c: 119: for(int i=0;i<duration_ms/5; i++){
 19441                           
 19442                           ;incstack = 0
 19443                           ; Regs used in _drv_write_DC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19444  274D  0021               	movlb	1	; select bank1
 19445  274E  01BA               	clrf	drv_write_DC@i^(0+128)
 19446  274F  01BB               	clrf	(drv_write_DC@i+1)^(0+128)
 19447  2750                     l8400:	
 19448  2750  3005               	movlw	5
 19449  2751  0020               	movlb	0	; select bank0
 19450  2752  00B7               	movwf	___awdiv@divisor
 19451  2753  3000               	movlw	0
 19452  2754  00B8               	movwf	___awdiv@divisor+1
 19453  2755  0021               	movlb	1	; select bank1
 19454  2756  0838               	movf	(drv_write_DC@duration_ms+1)^(0+128),w
 19455  2757  0020               	movlb	0	; select bank0
 19456  2758  00BA               	movwf	___awdiv@dividend+1
 19457  2759  0021               	movlb	1	; select bank1
 19458  275A  0837               	movf	drv_write_DC@duration_ms^(0+128),w
 19459  275B  0020               	movlb	0	; select bank0
 19460  275C  00B9               	movwf	___awdiv@dividend
 19461  275D  319C  24CD  31A7   	fcall	___awdiv
 19462  2760  0021               	movlb	1	; select bank1
 19463  2761  083B               	movf	(drv_write_DC@i+1)^(0+128),w
 19464  2762  3A80               	xorlw	128
 19465  2763  00B9               	movwf	??_drv_write_DC^(0+128)
 19466  2764  0020               	movlb	0	; select bank0
 19467  2765  0838               	movf	?___awdiv+1,w
 19468  2766  3A80               	xorlw	128
 19469  2767  0021               	movlb	1	; select bank1
 19470  2768  0239               	subwf	??_drv_write_DC^(0+128),w
 19471  2769  1D03               	skipz
 19472  276A  2F6F               	goto	u8435
 19473  276B  0020               	movlb	0	; select bank0
 19474  276C  0837               	movf	?___awdiv,w
 19475  276D  0021               	movlb	1	; select bank1
 19476  276E  023A               	subwf	drv_write_DC@i^(0+128),w
 19477  276F                     u8435:	
 19478  276F  1803               	btfsc	3,0
 19479  2770  0008               	return
 19480                           
 19481                           ;drv2665.c: 120: drv_write(0x0b, val);
 19482  2771  0021               	movlb	1	; select bank1
 19483  2772  0835               	movf	drv_write_DC@val^(0+128),w
 19484  2773  00B9               	movwf	??_drv_write_DC^(0+128)
 19485  2774  0839               	movf	??_drv_write_DC^(0+128),w
 19486  2775  0020               	movlb	0	; select bank0
 19487  2776  00C9               	movwf	drv_write@data
 19488  2777  300B               	movlw	11
 19489  2778  31A4  2483  31A7   	fcall	_drv_write
 19490                           
 19491                           ;drv2665.c: 121: _delay((unsigned long)((20)*(1000000/4000000.0)));
 19492  277B  3200               	nop2	;2 cycle nop
 19493  277C  3200               	nop2	;2 cycle nop
 19494  277D  0000               	nop
 19495  277E  3001               	movlw	1
 19496  277F  0021               	movlb	1	; select bank1
 19497  2780  07BA               	addwf	drv_write_DC@i^(0+128),f
 19498  2781  3000               	movlw	0
 19499  2782  3DBB               	addwfc	(drv_write_DC@i+1)^(0+128),f
 19500  2783  2F50               	goto	l8400
 19501  2784                     __end_of_drv_write_DC:	
 19502                           
 19503                           	psect	text68
 19504  2483                     __ptext68:	
 19505 ;; *************** function _drv_write *****************
 19506 ;; Defined at:
 19507 ;;		line 59 in file "drv2665.c"
 19508 ;; Parameters:    Size  Location     Type
 19509 ;;  reg             1    wreg     unsigned char 
 19510 ;;  data            1   41[BANK0 ] unsigned char 
 19511 ;; Auto vars:     Size  Location     Type
 19512 ;;  reg             1   43[BANK0 ] unsigned char 
 19513 ;;  buff            2   44[BANK0 ] unsigned char [2]
 19514 ;; Return value:  Size  Location     Type
 19515 ;;                  1    wreg      void 
 19516 ;; Registers used:
 19517 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19518 ;; Tracked objects:
 19519 ;;		On entry : 0/0
 19520 ;;		On exit  : 0/0
 19521 ;;		Unchanged: 0/0
 19522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19523 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19524 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19526 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19527 ;;Total ram usage:        5 bytes
 19528 ;; Hardware stack levels used:    1
 19529 ;; Hardware stack levels required when called:   12
 19530 ;; This function calls:
 19531 ;;		_i2c_masterOperation
 19532 ;;		_i2c_setBuffer
 19533 ;;		_printf
 19534 ;; This function is called by:
 19535 ;;		_setDrvGain
 19536 ;;		_drv_init
 19537 ;;		_drv_reset
 19538 ;;		_drv_write_DC
 19539 ;;		_drv_outputSine
 19540 ;;		_drv_outputWave
 19541 ;; This function uses a non-reentrant model
 19542 ;;
 19543                           
 19544                           
 19545                           ;psect for function _drv_write
 19546  2483                     _drv_write:	
 19547                           
 19548                           ;incstack = 0
 19549                           ; Regs used in _drv_write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19550                           ;drv_write@reg stored from wreg
 19551  2483  0020               	movlb	0	; select bank0
 19552  2484  00CB               	movwf	drv_write@reg
 19553                           
 19554                           ;drv2665.c: 64: uint8_t buff[2];
 19555                           ;drv2665.c: 66: buff[0] = reg;
 19556  2485  084B               	movf	drv_write@reg,w
 19557  2486  00CA               	movwf	??_drv_write
 19558  2487  084A               	movf	??_drv_write,w
 19559  2488  00CC               	movwf	drv_write@buff
 19560                           
 19561                           ;drv2665.c: 67: buff[1] = data;
 19562  2489  0849               	movf	drv_write@data,w
 19563  248A  00CA               	movwf	??_drv_write
 19564  248B  084A               	movf	??_drv_write,w
 19565  248C  00CD               	movwf	drv_write@buff+1
 19566                           
 19567                           ;drv2665.c: 70: i2c_setBuffer(buff, 2);
 19568  248D  304C               	movlw	low drv_write@buff
 19569  248E  00B1               	movwf	i2c_setBuffer@buffer
 19570  248F  3000               	movlw	high drv_write@buff
 19571  2490  00B2               	movwf	i2c_setBuffer@buffer+1
 19572  2491  3002               	movlw	2
 19573  2492  00B3               	movwf	i2c_setBuffer@bufferSize
 19574  2493  3000               	movlw	0
 19575  2494  00B4               	movwf	i2c_setBuffer@bufferSize+1
 19576  2495  31A2  2221  31A4   	fcall	_i2c_setBuffer
 19577                           
 19578                           ;drv2665.c: 71: if(i2c_masterOperation(0) != I2C_NOERR)
 19579  2498  3000               	movlw	0
 19580  2499  31A4  245F  31A4   	fcall	_i2c_masterOperation
 19581  249C  3A00               	xorlw	0
 19582  249D  1903               	skipnz
 19583  249E  0008               	return
 19584                           
 19585                           ;drv2665.c: 72: printf("drv_write error!\n");
 19586  249F  30CB               	movlw	low (STR_49| (0+32768))
 19587  24A0  0021               	movlb	1	; select bank1
 19588  24A1  00A0               	movwf	printf@f^(0+128)
 19589  24A2  30A8               	movlw	high (STR_49| (0+32768))
 19590  24A3  00A1               	movwf	(printf@f^(0+128)+1)
 19591  24A4  318D  2594         	fcall	_printf
 19592  24A6  0008               	return
 19593  24A7                     __end_of_drv_write:	
 19594                           
 19595                           	psect	text69
 19596  0D94                     __ptext69:	
 19597 ;; *************** function _printf *****************
 19598 ;; Defined at:
 19599 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 19600 ;; Parameters:    Size  Location     Type
 19601 ;;  f               2    0[BANK1 ] PTR const unsigned char 
 19602 ;;		 -> STR_80(23), STR_79(3), STR_51(17), STR_50(18), 
 19603 ;;		 -> STR_49(18), STR_48(28), STR_47(9), STR_46(9), 
 19604 ;;		 -> STR_45(25), STR_44(11), STR_43(8), STR_42(8), 
 19605 ;;		 -> STR_41(8), STR_40(31), STR_39(11), STR_38(8), 
 19606 ;;		 -> STR_37(8), STR_36(8), STR_35(26), STR_34(30), 
 19607 ;;		 -> STR_33(3), STR_32(3), STR_31(3), STR_30(2), 
 19608 ;;		 -> STR_29(4), STR_28(2), STR_27(4), STR_26(3), 
 19609 ;;		 -> STR_25(3), STR_24(3), STR_23(3), STR_22(3), 
 19610 ;;		 -> STR_21(3), STR_20(3), STR_19(3), STR_18(3), 
 19611 ;;		 -> STR_17(3), STR_16(3), STR_15(3), STR_14(3), 
 19612 ;;		 -> STR_13(3), STR_12(3), STR_11(3), STR_10(4), 
 19613 ;;		 -> STR_9(3), STR_8(3), STR_7(3), STR_6(16), 
 19614 ;;		 -> STR_5(3), STR_4(16), STR_3(2), STR_2(4), 
 19615 ;;		 -> STR_1(4), 
 19616 ;; Auto vars:     Size  Location     Type
 19617 ;;  val             4   14[BANK1 ] unsigned long 
 19618 ;;  tmpval          4    0        struct .
 19619 ;;  prec            2   12[BANK1 ] int 
 19620 ;;  cp              2    0        PTR const unsigned char 
 19621 ;;  len             2    0        unsigned int 
 19622 ;;  c               1   20[BANK1 ] char 
 19623 ;;  ap              1   19[BANK1 ] PTR void [1]
 19624 ;;		 -> ?_printf(2), 
 19625 ;;  flag            1   18[BANK1 ] unsigned char 
 19626 ;; Return value:  Size  Location     Type
 19627 ;;                  2    0[BANK1 ] int 
 19628 ;; Registers used:
 19629 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19630 ;; Tracked objects:
 19631 ;;		On entry : 0/0
 19632 ;;		On exit  : 0/0
 19633 ;;		Unchanged: 0/0
 19634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19635 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19636 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19637 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19638 ;;      Totals:         0       0      21       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19639 ;;Total ram usage:       21 bytes
 19640 ;; Hardware stack levels used:    1
 19641 ;; Hardware stack levels required when called:    8
 19642 ;; This function calls:
 19643 ;;		___lldiv
 19644 ;;		___llmod
 19645 ;;		_putch
 19646 ;; This function is called by:
 19647 ;;		_LED_test_openshort
 19648 ;;		_LED_getData
 19649 ;;		_stop
 19650 ;;		_doAbsMove
 19651 ;;		_doRelMove
 19652 ;;		_zeroPosition
 19653 ;;		_getPosition
 19654 ;;		_setDrvPeak
 19655 ;;		_setDrvGain
 19656 ;;		_setDrvPiezoOnTime
 19657 ;;		_setHeaterPreTime
 19658 ;;		_setHeaterPostTime
 19659 ;;		_setH1OffTime
 19660 ;;		_setH2OnTime
 19661 ;;		_setLEDBrightnessRange
 19662 ;;		_setLEDPwr
 19663 ;;		_setHeaterToggle
 19664 ;;		_timedActiveHeatOn
 19665 ;;		_setActive
 19666 ;;		_setMoveMask
 19667 ;;		_getActive
 19668 ;;		_getMoveMask
 19669 ;;		_getMotionStatus
 19670 ;;		_commCheck
 19671 ;;		_drv_write
 19672 ;;		_drv_read
 19673 ;;		_execCmd
 19674 ;; This function uses a non-reentrant model
 19675 ;;
 19676                           
 19677                           
 19678                           ;psect for function _printf
 19679  0D94                     _printf:	
 19680                           
 19681                           ;doprnt.c: 466: va_list ap;
 19682                           ;doprnt.c: 499: signed char c;
 19683                           ;doprnt.c: 504: int prec;
 19684                           ;doprnt.c: 508: unsigned char flag;
 19685                           ;doprnt.c: 523: union {
 19686                           ;doprnt.c: 524: unsigned long vd;
 19687                           ;doprnt.c: 525: double integ;
 19688                           ;doprnt.c: 526: } tmpval;
 19689                           ;doprnt.c: 528: unsigned long val;
 19690                           ;doprnt.c: 529: unsigned len;
 19691                           ;doprnt.c: 530: const char * cp;
 19692                           ;doprnt.c: 533: *ap = __va_start();
 19693                           
 19694                           ;incstack = 0
 19695                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19696  0D94  30A2               	movlw	(low ((?_printf| 0+2)))& (0+255)
 19697  0D95  0021               	movlb	1	; select bank1
 19698  0D96  00A6               	movwf	??_printf^(0+128)
 19699  0D97  0826               	movf	??_printf^(0+128),w
 19700  0D98  00B3               	movwf	printf@ap^(0+128)
 19701  0D99                     l7934:	
 19702                           ;doprnt.c: 536: while(c = *f++) {
 19703                           
 19704  0D99  0021               	movlb	1	; select bank1
 19705  0D9A  0821               	movf	(printf@f+1)^(0+128),w
 19706  0D9B  00A7               	movwf	(??_printf^(0+128)+1)
 19707  0D9C  0820               	movf	printf@f^(0+128),w
 19708  0D9D  00A6               	movwf	??_printf^(0+128)
 19709  0D9E  0AA0               	incf	printf@f^(0+128),f
 19710  0D9F  1903               	skipnz
 19711  0DA0  0AA1               	incf	(printf@f+1)^(0+128),f
 19712  0DA1  0826               	movf	??_printf^(0+128),w
 19713  0DA2  0084               	movwf	4
 19714  0DA3  0827               	movf	(??_printf+1)^(0+128),w
 19715  0DA4  0085               	movwf	5
 19716  0DA5  0800               	movf	0,w	;code access
 19717  0DA6  00A8               	movwf	(??_printf+2)^(0+128)
 19718  0DA7  0828               	movf	(??_printf+2)^(0+128),w
 19719  0DA8  00B4               	movwf	printf@c^(0+128)
 19720  0DA9  0834               	movf	printf@c^(0+128),w
 19721  0DAA  1903               	btfsc	3,2
 19722  0DAB  0008               	return
 19723                           
 19724                           ;doprnt.c: 538: if(c != '%')
 19725  0DAC  3025               	movlw	37
 19726  0DAD  0634               	xorwf	printf@c^(0+128),w
 19727  0DAE  1903               	btfsc	3,2
 19728  0DAF  2DB5               	goto	l7880
 19729                           
 19730                           ;doprnt.c: 540: {
 19731                           ;doprnt.c: 541: (putch(c) );
 19732  0DB0  0834               	movf	printf@c^(0+128),w
 19733  0DB1  31AF  27E6  318D   	fcall	_putch
 19734                           
 19735                           ;doprnt.c: 542: continue;
 19736  0DB4  2D99               	goto	l7934
 19737  0DB5                     l7880:	
 19738                           
 19739                           ;doprnt.c: 543: }
 19740                           ;doprnt.c: 548: flag = 0;
 19741  0DB5  0021               	movlb	1	; select bank1
 19742  0DB6  01B2               	clrf	printf@flag^(0+128)
 19743                           
 19744                           ;doprnt.c: 635: switch(c = *f++) {
 19745                           
 19746                           ;doprnt.c: 633: loop:
 19747  0DB7  2DBC               	goto	l7884
 19748  0DB8                     l1619:	
 19749                           ;doprnt.c: 641: case 'l':
 19750                           
 19751                           ;doprnt.c: 638: goto alldone;
 19752                           
 19753                           ;doprnt.c: 637: case 0:
 19754                           
 19755                           
 19756                           ;doprnt.c: 643: flag |= 0x10;
 19757  0DB8  1632               	bsf	printf@flag^(0+128),4
 19758                           
 19759                           ;doprnt.c: 644: goto loop;
 19760  0DB9  2DBC               	goto	l7884
 19761  0DBA                     l1624:	
 19762                           ;doprnt.c: 817: case 'u':
 19763                           
 19764                           ;doprnt.c: 813: continue;
 19765                           
 19766                           ;doprnt.c: 802: default:
 19767                           
 19768                           ;doprnt.c: 698: case 'i':
 19769                           ;doprnt.c: 699: break;
 19770                           
 19771                           ;doprnt.c: 697: case 'd':
 19772                           
 19773                           
 19774                           ;doprnt.c: 818: flag |= 0x40;
 19775  0DBA  1732               	bsf	printf@flag^(0+128),6
 19776                           
 19777                           ;doprnt.c: 822: }
 19778                           
 19779                           ;doprnt.c: 819: break;
 19780  0DBB  2DD9               	goto	l1622
 19781  0DBC                     l7884:	
 19782  0DBC  0821               	movf	(printf@f+1)^(0+128),w
 19783  0DBD  00A7               	movwf	(??_printf^(0+128)+1)
 19784  0DBE  0820               	movf	printf@f^(0+128),w
 19785  0DBF  00A6               	movwf	??_printf^(0+128)
 19786  0DC0  0AA0               	incf	printf@f^(0+128),f
 19787  0DC1  1903               	skipnz
 19788  0DC2  0AA1               	incf	(printf@f+1)^(0+128),f
 19789  0DC3  0826               	movf	??_printf^(0+128),w
 19790  0DC4  0084               	movwf	4
 19791  0DC5  0827               	movf	(??_printf+1)^(0+128),w
 19792  0DC6  0085               	movwf	5
 19793  0DC7  0800               	movf	0,w	;code access
 19794  0DC8  00B4               	movwf	printf@c^(0+128)
 19795                           
 19796                           ; Switch size 1, requested type "space"
 19797                           ; Number of cases is 5, Range of values is 0 to 117
 19798                           ; switch strategies available:
 19799                           ; Name         Instructions Cycles
 19800                           ; simple_byte           16     9 (average)
 19801                           ; direct_byte          242     6 (fixed)
 19802                           ; jumptable            260     6 (fixed)
 19803                           ;	Chosen strategy is simple_byte
 19804  0DC9  3A00               	xorlw	0	; case 0
 19805  0DCA  1903               	skipnz
 19806  0DCB  2EC5               	goto	l1640
 19807  0DCC  3A64               	xorlw	100	; case 100
 19808  0DCD  1903               	skipnz
 19809  0DCE  2DD9               	goto	l1622
 19810  0DCF  3A0D               	xorlw	13	; case 105
 19811  0DD0  1903               	skipnz
 19812  0DD1  2DD9               	goto	l1622
 19813  0DD2  3A05               	xorlw	5	; case 108
 19814  0DD3  1903               	skipnz
 19815  0DD4  2DB8               	goto	l1619
 19816  0DD5  3A19               	xorlw	25	; case 117
 19817  0DD6  1903               	skipnz
 19818  0DD7  2DBA               	goto	l1624
 19819  0DD8  2D99               	goto	l7934
 19820  0DD9                     l1622:	
 19821                           
 19822                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19823  0DD9  1B32               	btfsc	printf@flag^(0+128),6
 19824  0DDA  2E10               	goto	l1625
 19825                           
 19826                           ;doprnt.c: 1253: {
 19827                           ;doprnt.c: 1255: if(flag & 0x10)
 19828  0DDB  1E32               	btfss	printf@flag^(0+128),4
 19829  0DDC  2DEA               	goto	l7892
 19830                           
 19831                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
 19832  0DDD  0833               	movf	printf@ap^(0+128),w
 19833  0DDE  0086               	movwf	6
 19834  0DDF  0187               	clrf	7
 19835  0DE0  3F40               	moviw [0]fsr1
 19836  0DE1  00AE               	movwf	printf@val^(0+128)
 19837  0DE2  3F41               	moviw [1]fsr1
 19838  0DE3  00AF               	movwf	(printf@val+1)^(0+128)
 19839  0DE4  3F42               	moviw [2]fsr1
 19840  0DE5  00B0               	movwf	(printf@val+2)^(0+128)
 19841  0DE6  3F43               	moviw [3]fsr1
 19842  0DE7  00B1               	movwf	(printf@val+3)^(0+128)
 19843  0DE8  3004               	movlw	4
 19844  0DE9  2DFB               	goto	L40
 19845  0DEA                     l7892:	
 19846                           
 19847                           ;doprnt.c: 1257: else
 19848                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 19849  0DEA  0833               	movf	printf@ap^(0+128),w
 19850  0DEB  0086               	movwf	6
 19851  0DEC  0187               	clrf	7
 19852  0DED  3F40               	moviw [0]fsr1
 19853  0DEE  00A6               	movwf	??_printf^(0+128)
 19854  0DEF  3F41               	moviw [1]fsr1
 19855  0DF0  00A7               	movwf	(??_printf^(0+128)+1)
 19856  0DF1  0826               	movf	??_printf^(0+128),w
 19857  0DF2  00AE               	movwf	printf@val^(0+128)
 19858  0DF3  0827               	movf	(??_printf+1)^(0+128),w
 19859  0DF4  00AF               	movwf	(printf@val+1)^(0+128)
 19860  0DF5  0D89               	rlf	9,f
 19861  0DF6  3B89               	subwfb	9,f
 19862  0DF7  0989               	comf	9,f
 19863  0DF8  00B0               	movwf	(printf@val+2)^(0+128)
 19864  0DF9  00B1               	movwf	(printf@val+3)^(0+128)
 19865  0DFA  3002               	movlw	2
 19866  0DFB                     L40:	
 19867  0DFB  00A6               	movwf	??_printf^(0+128)
 19868  0DFC  0826               	movf	??_printf^(0+128),w
 19869  0DFD  07B3               	addwf	printf@ap^(0+128),f
 19870                           
 19871                           ;doprnt.c: 1261: if((long)val < 0) {
 19872  0DFE  1FB1               	btfss	(printf@val+3)^(0+128),7
 19873  0DFF  2E30               	goto	l7910
 19874                           
 19875                           ;doprnt.c: 1262: flag |= 0x03;
 19876  0E00  3003               	movlw	3
 19877  0E01  00A6               	movwf	??_printf^(0+128)
 19878  0E02  0826               	movf	??_printf^(0+128),w
 19879  0E03  04B2               	iorwf	printf@flag^(0+128),f
 19880                           
 19881                           ;doprnt.c: 1263: val = -val;
 19882  0E04  09AE               	comf	printf@val^(0+128),f
 19883  0E05  09AF               	comf	(printf@val+1)^(0+128),f
 19884  0E06  09B0               	comf	(printf@val+2)^(0+128),f
 19885  0E07  09B1               	comf	(printf@val+3)^(0+128),f
 19886  0E08  0AAE               	incf	printf@val^(0+128),f
 19887  0E09  1903               	skipnz
 19888  0E0A  0AAF               	incf	(printf@val+1)^(0+128),f
 19889  0E0B  1903               	skipnz
 19890  0E0C  0AB0               	incf	(printf@val+2)^(0+128),f
 19891  0E0D  1903               	skipnz
 19892  0E0E  0AB1               	incf	(printf@val+3)^(0+128),f
 19893                           
 19894                           ;doprnt.c: 1264: }
 19895                           ;doprnt.c: 1266: }
 19896  0E0F  2E30               	goto	l7910
 19897  0E10                     l1625:	
 19898                           
 19899                           ;doprnt.c: 1268: else
 19900                           ;doprnt.c: 1273: {
 19901                           ;doprnt.c: 1281: if(flag & 0x10)
 19902  0E10  1E32               	btfss	printf@flag^(0+128),4
 19903  0E11  2E1F               	goto	l7906
 19904                           
 19905                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
 19906  0E12  0833               	movf	printf@ap^(0+128),w
 19907  0E13  0086               	movwf	6
 19908  0E14  0187               	clrf	7
 19909  0E15  3F40               	moviw [0]fsr1
 19910  0E16  00AE               	movwf	printf@val^(0+128)
 19911  0E17  3F41               	moviw [1]fsr1
 19912  0E18  00AF               	movwf	(printf@val+1)^(0+128)
 19913  0E19  3F42               	moviw [2]fsr1
 19914  0E1A  00B0               	movwf	(printf@val+2)^(0+128)
 19915  0E1B  3F43               	moviw [3]fsr1
 19916  0E1C  00B1               	movwf	(printf@val+3)^(0+128)
 19917  0E1D  3004               	movlw	4
 19918  0E1E  2E2D               	goto	L41
 19919  0E1F                     l7906:	
 19920                           
 19921                           ;doprnt.c: 1283: else
 19922                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19923  0E1F  0833               	movf	printf@ap^(0+128),w
 19924  0E20  0086               	movwf	6
 19925  0E21  0187               	clrf	7
 19926  0E22  3F40               	moviw [0]fsr1
 19927  0E23  00A6               	movwf	??_printf^(0+128)
 19928  0E24  3F41               	moviw [1]fsr1
 19929  0E25  00A7               	movwf	(??_printf^(0+128)+1)
 19930  0E26  0826               	movf	??_printf^(0+128),w
 19931  0E27  00AE               	movwf	printf@val^(0+128)
 19932  0E28  0827               	movf	(??_printf+1)^(0+128),w
 19933  0E29  00AF               	movwf	(printf@val^(0+128)+1)
 19934  0E2A  01B0               	clrf	(printf@val^(0+128)+2)
 19935  0E2B  01B1               	clrf	(printf@val^(0+128)+3)
 19936  0E2C  3002               	movlw	2
 19937  0E2D                     L41:	
 19938  0E2D  00A6               	movwf	??_printf^(0+128)
 19939  0E2E  0826               	movf	??_printf^(0+128),w
 19940  0E2F  07B3               	addwf	printf@ap^(0+128),f
 19941  0E30                     l7910:	
 19942                           
 19943                           ;doprnt.c: 1287: }
 19944                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19945  0E30  01B4               	clrf	printf@c^(0+128)
 19946  0E31  0AB4               	incf	printf@c^(0+128),f
 19947  0E32  300A               	movlw	10
 19948  0E33  0634               	xorwf	printf@c^(0+128),w
 19949  0E34  1903               	btfsc	3,2
 19950  0E35  2E63               	goto	l7922
 19951  0E36                     l7916:	
 19952                           
 19953                           ;doprnt.c: 1306: if(val < dpowers[c])
 19954  0E36  0834               	movf	printf@c^(0+128),w
 19955  0E37  00A6               	movwf	??_printf^(0+128)
 19956  0E38  01A7               	clrf	(??_printf^(0+128)+1)
 19957  0E39  35A6               	lslf	??_printf^(0+128),f
 19958  0E3A  0DA7               	rlf	(??_printf^(0+128)+1),f
 19959  0E3B  35A6               	lslf	??_printf^(0+128),f
 19960  0E3C  0DA7               	rlf	(??_printf^(0+128)+1),f
 19961  0E3D  3000               	movlw	low (_dpowers| (0+32768))
 19962  0E3E  0726               	addwf	??_printf^(0+128),w
 19963  0E3F  0084               	movwf	4
 19964  0E40  30A8               	movlw	high (_dpowers| (0+32768))
 19965  0E41  3D27               	addwfc	(??_printf+1)^(0+128),w
 19966  0E42  0085               	movwf	5
 19967  0E43  3F00               	moviw [0]fsr0
 19968  0E44  00A8               	movwf	(??_printf+2)^(0+128)
 19969  0E45  3F01               	moviw [1]fsr0
 19970  0E46  00A9               	movwf	((??_printf+2)^(0+128)+1)
 19971  0E47  3F02               	moviw [2]fsr0
 19972  0E48  00AA               	movwf	((??_printf+2)^(0+128)+2)
 19973  0E49  3F03               	moviw [3]fsr0
 19974  0E4A  00AB               	movwf	((??_printf+2)^(0+128)+3)
 19975  0E4B  082B               	movf	(??_printf+5)^(0+128),w
 19976  0E4C  0231               	subwf	(printf@val+3)^(0+128),w
 19977  0E4D  1D03               	skipz
 19978  0E4E  2E59               	goto	u7505
 19979  0E4F  082A               	movf	(??_printf+4)^(0+128),w
 19980  0E50  0230               	subwf	(printf@val+2)^(0+128),w
 19981  0E51  1D03               	skipz
 19982  0E52  2E59               	goto	u7505
 19983  0E53  0829               	movf	(??_printf+3)^(0+128),w
 19984  0E54  022F               	subwf	(printf@val+1)^(0+128),w
 19985  0E55  1D03               	skipz
 19986  0E56  2E59               	goto	u7505
 19987  0E57  0828               	movf	(??_printf+2)^(0+128),w
 19988  0E58  022E               	subwf	printf@val^(0+128),w
 19989  0E59                     u7505:	
 19990  0E59  1C03               	btfss	3,0
 19991  0E5A  2E63               	goto	l7922
 19992                           
 19993                           ;doprnt.c: 1307: break;
 19994  0E5B  3001               	movlw	1
 19995  0E5C  00A6               	movwf	??_printf^(0+128)
 19996  0E5D  0826               	movf	??_printf^(0+128),w
 19997  0E5E  07B4               	addwf	printf@c^(0+128),f
 19998  0E5F  300A               	movlw	10
 19999  0E60  0634               	xorwf	printf@c^(0+128),w
 20000  0E61  1D03               	btfss	3,2
 20001  0E62  2E36               	goto	l7916
 20002  0E63                     l7922:	
 20003                           
 20004                           ;doprnt.c: 1422: {
 20005                           ;doprnt.c: 1438: if(flag & 0x03)
 20006  0E63  0832               	movf	printf@flag^(0+128),w
 20007  0E64  3903               	andlw	3
 20008  0E65  1903               	btfsc	3,2
 20009  0E66  2E6B               	goto	l7926
 20010                           
 20011                           ;doprnt.c: 1439: (putch('-') );
 20012  0E67  302D               	movlw	45
 20013  0E68  31AF  27E6  318D   	fcall	_putch
 20014  0E6B                     l7926:	
 20015                           
 20016                           ;doprnt.c: 1469: }
 20017                           ;doprnt.c: 1472: prec = c;
 20018  0E6B  0021               	movlb	1	; select bank1
 20019  0E6C  0834               	movf	printf@c^(0+128),w
 20020  0E6D  00AC               	movwf	printf@prec^(0+128)
 20021  0E6E  01AD               	clrf	(printf@prec+1)^(0+128)
 20022  0E6F  1BAC               	btfsc	printf@prec^(0+128),7
 20023  0E70  03AD               	decf	(printf@prec+1)^(0+128),f
 20024  0E71                     l7932:	
 20025                           ;doprnt.c: 1474: while(prec--) {
 20026                           
 20027  0E71  30FF               	movlw	255
 20028  0E72  0021               	movlb	1	; select bank1
 20029  0E73  07AC               	addwf	printf@prec^(0+128),f
 20030  0E74  30FF               	movlw	255
 20031  0E75  3DAD               	addwfc	(printf@prec+1)^(0+128),f
 20032  0E76  0A2C               	incf	printf@prec^(0+128),w
 20033  0E77  1903               	btfsc	3,2
 20034  0E78  0A2D               	incf	(printf@prec+1)^(0+128),w
 20035  0E79  1903               	btfsc	3,2
 20036  0E7A  2D99               	goto	l7934
 20037                           
 20038                           ;doprnt.c: 1478: {
 20039                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 20040  0E7B  3000               	movlw	0
 20041  0E7C  0020               	movlb	0	; select bank0
 20042  0E7D  00C2               	movwf	___llmod@divisor+3
 20043  0E7E  3000               	movlw	0
 20044  0E7F  00C1               	movwf	___llmod@divisor+2
 20045  0E80  3000               	movlw	0
 20046  0E81  00C0               	movwf	___llmod@divisor+1
 20047  0E82  300A               	movlw	10
 20048  0E83  00BF               	movwf	___llmod@divisor
 20049  0E84  0021               	movlb	1	; select bank1
 20050  0E85  082D               	movf	(printf@prec+1)^(0+128),w
 20051  0E86  0085               	movwf	5
 20052  0E87  082C               	movf	printf@prec^(0+128),w
 20053  0E88  0084               	movwf	4
 20054  0E89  3584               	lslf	4,f
 20055  0E8A  0D85               	rlf	5,f
 20056  0E8B  3584               	lslf	4,f
 20057  0E8C  0D85               	rlf	5,f
 20058  0E8D  3000               	movlw	low (_dpowers| (0+32768))
 20059  0E8E  0784               	addwf	4,f
 20060  0E8F  30A8               	movlw	high (_dpowers| (0+32768))
 20061  0E90  3D85               	addwfc	5,f
 20062  0E91  3F00               	moviw [0]fsr0
 20063  0E92  0020               	movlb	0	; select bank0
 20064  0E93  00B1               	movwf	___lldiv@divisor
 20065  0E94  3F01               	moviw [1]fsr0
 20066  0E95  00B2               	movwf	___lldiv@divisor+1
 20067  0E96  3F02               	moviw [2]fsr0
 20068  0E97  00B3               	movwf	___lldiv@divisor+2
 20069  0E98  3F03               	moviw [3]fsr0
 20070  0E99  00B4               	movwf	___lldiv@divisor+3
 20071  0E9A  0021               	movlb	1	; select bank1
 20072  0E9B  0831               	movf	(printf@val+3)^(0+128),w
 20073  0E9C  0020               	movlb	0	; select bank0
 20074  0E9D  00B8               	movwf	___lldiv@dividend+3
 20075  0E9E  0021               	movlb	1	; select bank1
 20076  0E9F  0830               	movf	(printf@val+2)^(0+128),w
 20077  0EA0  0020               	movlb	0	; select bank0
 20078  0EA1  00B7               	movwf	___lldiv@dividend+2
 20079  0EA2  0021               	movlb	1	; select bank1
 20080  0EA3  082F               	movf	(printf@val+1)^(0+128),w
 20081  0EA4  0020               	movlb	0	; select bank0
 20082  0EA5  00B6               	movwf	___lldiv@dividend+1
 20083  0EA6  0021               	movlb	1	; select bank1
 20084  0EA7  082E               	movf	printf@val^(0+128),w
 20085  0EA8  0020               	movlb	0	; select bank0
 20086  0EA9  00B5               	movwf	___lldiv@dividend
 20087  0EAA  319D  2571  318D   	fcall	___lldiv
 20088  0EAD  0020               	movlb	0	; select bank0
 20089  0EAE  0834               	movf	?___lldiv+3,w
 20090  0EAF  00C6               	movwf	___llmod@dividend+3
 20091  0EB0  0833               	movf	?___lldiv+2,w
 20092  0EB1  00C5               	movwf	___llmod@dividend+2
 20093  0EB2  0832               	movf	?___lldiv+1,w
 20094  0EB3  00C4               	movwf	___llmod@dividend+1
 20095  0EB4  0831               	movf	?___lldiv,w
 20096  0EB5  00C3               	movwf	___llmod@dividend
 20097  0EB6  3199  2154  318D   	fcall	___llmod
 20098  0EB9  0020               	movlb	0	; select bank0
 20099  0EBA  083F               	movf	?___llmod,w
 20100  0EBB  3E30               	addlw	48
 20101  0EBC  0021               	movlb	1	; select bank1
 20102  0EBD  00A6               	movwf	??_printf^(0+128)
 20103  0EBE  0826               	movf	??_printf^(0+128),w
 20104  0EBF  00B4               	movwf	printf@c^(0+128)
 20105                           
 20106                           ;doprnt.c: 1523: }
 20107                           ;doprnt.c: 1524: (putch(c) );
 20108  0EC0  0834               	movf	printf@c^(0+128),w
 20109  0EC1  31AF  27E6  318D   	fcall	_putch
 20110  0EC4  2E71               	goto	l7932
 20111  0EC5                     l1640:	
 20112                           ;doprnt.c: 1540: return 0;
 20113                           ;	Return value of _printf is never used
 20114                           
 20115                           ;doprnt.c: 1525: }
 20116                           ;doprnt.c: 1533: }
 20117                           ;doprnt.c: 1535: alldone:
 20118                           
 20119  0EC5  0008               	return
 20120  0EC6                     __end_of_printf:	
 20121                           
 20122                           	psect	text70
 20123  2FE6                     __ptext70:	
 20124 ;; *************** function _putch *****************
 20125 ;; Defined at:
 20126 ;;		line 156 in file "mcc_generated_files/eusart.c"
 20127 ;; Parameters:    Size  Location     Type
 20128 ;;  txData          1    wreg     unsigned char 
 20129 ;; Auto vars:     Size  Location     Type
 20130 ;;  txData          1   19[BANK0 ] unsigned char 
 20131 ;; Return value:  Size  Location     Type
 20132 ;;                  1    wreg      void 
 20133 ;; Registers used:
 20134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20135 ;; Tracked objects:
 20136 ;;		On entry : 0/0
 20137 ;;		On exit  : 0/0
 20138 ;;		Unchanged: 0/0
 20139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20141 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20143 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20144 ;;Total ram usage:        1 bytes
 20145 ;; Hardware stack levels used:    1
 20146 ;; Hardware stack levels required when called:    7
 20147 ;; This function calls:
 20148 ;;		_EUSART_Write
 20149 ;; This function is called by:
 20150 ;;		_printf
 20151 ;; This function uses a non-reentrant model
 20152 ;;
 20153                           
 20154                           
 20155                           ;psect for function _putch
 20156  2FE6                     _putch:	
 20157                           
 20158                           ;incstack = 0
 20159                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20160                           ;putch@txData stored from wreg
 20161  2FE6  0020               	movlb	0	; select bank0
 20162  2FE7  00B3               	movwf	putch@txData
 20163                           
 20164                           ;eusart.c: 158: EUSART_Write(txData);
 20165  2FE8  0833               	movf	putch@txData,w
 20166  2FE9  31A4  24A7         	fcall	_EUSART_Write
 20167  2FEB  0008               	return
 20168  2FEC                     __end_of_putch:	
 20169                           
 20170                           	psect	text71
 20171  24A7                     __ptext71:	
 20172 ;; *************** function _EUSART_Write *****************
 20173 ;; Defined at:
 20174 ;;		line 128 in file "mcc_generated_files/eusart.c"
 20175 ;; Parameters:    Size  Location     Type
 20176 ;;  txData          1    wreg     unsigned char 
 20177 ;; Auto vars:     Size  Location     Type
 20178 ;;  txData          1   18[BANK0 ] unsigned char 
 20179 ;; Return value:  Size  Location     Type
 20180 ;;                  1    wreg      void 
 20181 ;; Registers used:
 20182 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20183 ;; Tracked objects:
 20184 ;;		On entry : 0/0
 20185 ;;		On exit  : 0/0
 20186 ;;		Unchanged: 0/0
 20187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20189 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20190 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20191 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20192 ;;Total ram usage:        2 bytes
 20193 ;; Hardware stack levels used:    1
 20194 ;; Hardware stack levels required when called:    6
 20195 ;; This function calls:
 20196 ;;		Nothing
 20197 ;; This function is called by:
 20198 ;;		_putch
 20199 ;; This function uses a non-reentrant model
 20200 ;;
 20201                           
 20202                           
 20203                           ;psect for function _EUSART_Write
 20204  24A7                     _EUSART_Write:	
 20205                           
 20206                           ;incstack = 0
 20207                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 20208                           ;EUSART_Write@txData stored from wreg
 20209  24A7  0020               	movlb	0	; select bank0
 20210  24A8  00B2               	movwf	EUSART_Write@txData
 20211  24A9                     l7590:	
 20212                           ;eusart.c: 131: {
 20213                           
 20214                           ;eusart.c: 130: while(0 == eusartTxBufferRemaining)
 20215                           
 20216  24A9  085E               	movf	_eusartTxBufferRemaining,w	;volatile
 20217  24AA  1903               	btfsc	3,2
 20218  24AB  2CA9               	goto	l7590
 20219                           
 20220                           ;eusart.c: 132: }
 20221                           ;eusart.c: 134: if(0 == PIE1bits.TXIE)
 20222  24AC  0021               	movlb	1	; select bank1
 20223  24AD  1A11               	btfsc	17,4	;volatile
 20224  24AE  2CB4               	goto	l442
 20225                           
 20226                           ;eusart.c: 135: {
 20227                           ;eusart.c: 136: TX1REG = txData;
 20228  24AF  0020               	movlb	0	; select bank0
 20229  24B0  0832               	movf	EUSART_Write@txData,w
 20230  24B1  0023               	movlb	3	; select bank3
 20231  24B2  009A               	movwf	26	;volatile
 20232                           
 20233                           ;eusart.c: 137: }
 20234  24B3  2CC9               	goto	l7604
 20235  24B4                     l442:	
 20236                           
 20237                           ;eusart.c: 138: else
 20238                           ;eusart.c: 139: {
 20239                           ;eusart.c: 140: PIE1bits.TXIE = 0;
 20240  24B4  1211               	bcf	17,4	;volatile
 20241                           
 20242                           ;eusart.c: 141: eusartTxBuffer[eusartTxHead++] = txData;
 20243  24B5  0020               	movlb	0	; select bank0
 20244  24B6  0832               	movf	EUSART_Write@txData,w
 20245  24B7  00B1               	movwf	??_EUSART_Write
 20246  24B8  087D               	movf	_eusartTxHead,w
 20247  24B9  3EA8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 20248  24BA  0086               	movwf	6
 20249  24BB  3001               	movlw	1	; select bank3/4
 20250  24BC  0087               	movwf	7
 20251  24BD  0831               	movf	??_EUSART_Write,w
 20252  24BE  0081               	movwf	1
 20253  24BF  3001               	movlw	1
 20254  24C0  00B1               	movwf	??_EUSART_Write
 20255  24C1  0831               	movf	??_EUSART_Write,w
 20256  24C2  07FD               	addwf	_eusartTxHead,f	;volatile
 20257                           
 20258                           ;eusart.c: 142: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 20259  24C3  3008               	movlw	8
 20260  24C4  027D               	subwf	_eusartTxHead,w	;volatile
 20261  24C5  1803               	btfsc	3,0
 20262                           
 20263                           ;eusart.c: 143: {
 20264                           ;eusart.c: 144: eusartTxHead = 0;
 20265  24C6  01FD               	clrf	_eusartTxHead	;volatile
 20266                           
 20267                           ;eusart.c: 145: }
 20268                           ;eusart.c: 146: eusartTxBufferRemaining--;
 20269  24C7  3001               	movlw	1
 20270  24C8  02DE               	subwf	_eusartTxBufferRemaining,f	;volatile
 20271  24C9                     l7604:	
 20272                           
 20273                           ;eusart.c: 147: }
 20274                           ;eusart.c: 148: PIE1bits.TXIE = 1;
 20275  24C9  0021               	movlb	1	; select bank1
 20276  24CA  1611               	bsf	17,4	;volatile
 20277  24CB  0008               	return
 20278  24CC                     __end_of_EUSART_Write:	
 20279                           
 20280                           	psect	text72
 20281  1954                     __ptext72:	
 20282 ;; *************** function ___llmod *****************
 20283 ;; Defined at:
 20284 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 20285 ;; Parameters:    Size  Location     Type
 20286 ;;  divisor         4   31[BANK0 ] unsigned long 
 20287 ;;  dividend        4   35[BANK0 ] unsigned long 
 20288 ;; Auto vars:     Size  Location     Type
 20289 ;;  counter         1   40[BANK0 ] unsigned char 
 20290 ;; Return value:  Size  Location     Type
 20291 ;;                  4   31[BANK0 ] unsigned long 
 20292 ;; Registers used:
 20293 ;;		wreg, status,2, status,0
 20294 ;; Tracked objects:
 20295 ;;		On entry : 0/0
 20296 ;;		On exit  : 0/0
 20297 ;;		Unchanged: 0/0
 20298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20299 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20300 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20301 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20302 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20303 ;;Total ram usage:       10 bytes
 20304 ;; Hardware stack levels used:    1
 20305 ;; Hardware stack levels required when called:    6
 20306 ;; This function calls:
 20307 ;;		Nothing
 20308 ;; This function is called by:
 20309 ;;		_printf
 20310 ;; This function uses a non-reentrant model
 20311 ;;
 20312                           
 20313                           
 20314                           ;psect for function ___llmod
 20315  1954                     ___llmod:	
 20316                           
 20317                           ;incstack = 0
 20318                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 20319  1954  0020               	movlb	0	; select bank0
 20320  1955  0842               	movf	___llmod@divisor+3,w
 20321  1956  0441               	iorwf	___llmod@divisor+2,w
 20322  1957  0440               	iorwf	___llmod@divisor+1,w
 20323  1958  043F               	iorwf	___llmod@divisor,w
 20324  1959  1903               	skipnz
 20325  195A  298E               	goto	l7838
 20326  195B  01C8               	clrf	___llmod@counter
 20327  195C  0AC8               	incf	___llmod@counter,f
 20328  195D                     l7828:	
 20329  195D  1BC2               	btfsc	___llmod@divisor+3,7
 20330  195E  296B               	goto	l7830
 20331  195F  3001               	movlw	1
 20332  1960                     u7275:	
 20333  1960  35BF               	lslf	___llmod@divisor,f
 20334  1961  0DC0               	rlf	___llmod@divisor+1,f
 20335  1962  0DC1               	rlf	___llmod@divisor+2,f
 20336  1963  0DC2               	rlf	___llmod@divisor+3,f
 20337  1964  0B89               	decfsz	9,f
 20338  1965  2960               	goto	u7275
 20339  1966  3001               	movlw	1
 20340  1967  00C7               	movwf	??___llmod
 20341  1968  0847               	movf	??___llmod,w
 20342  1969  07C8               	addwf	___llmod@counter,f
 20343  196A  295D               	goto	l7828
 20344  196B                     l7830:	
 20345  196B  0842               	movf	___llmod@divisor+3,w
 20346  196C  0246               	subwf	___llmod@dividend+3,w
 20347  196D  1D03               	skipz
 20348  196E  2979               	goto	u7295
 20349  196F  0841               	movf	___llmod@divisor+2,w
 20350  1970  0245               	subwf	___llmod@dividend+2,w
 20351  1971  1D03               	skipz
 20352  1972  2979               	goto	u7295
 20353  1973  0840               	movf	___llmod@divisor+1,w
 20354  1974  0244               	subwf	___llmod@dividend+1,w
 20355  1975  1D03               	skipz
 20356  1976  2979               	goto	u7295
 20357  1977  083F               	movf	___llmod@divisor,w
 20358  1978  0243               	subwf	___llmod@dividend,w
 20359  1979                     u7295:	
 20360  1979  1C03               	skipc
 20361  197A  2983               	goto	l7834
 20362  197B  083F               	movf	___llmod@divisor,w
 20363  197C  02C3               	subwf	___llmod@dividend,f
 20364  197D  0840               	movf	___llmod@divisor+1,w
 20365  197E  3BC4               	subwfb	___llmod@dividend+1,f
 20366  197F  0841               	movf	___llmod@divisor+2,w
 20367  1980  3BC5               	subwfb	___llmod@dividend+2,f
 20368  1981  0842               	movf	___llmod@divisor+3,w
 20369  1982  3BC6               	subwfb	___llmod@dividend+3,f
 20370  1983                     l7834:	
 20371  1983  3001               	movlw	1
 20372  1984                     u7305:	
 20373  1984  36C2               	lsrf	___llmod@divisor+3,f
 20374  1985  0CC1               	rrf	___llmod@divisor+2,f
 20375  1986  0CC0               	rrf	___llmod@divisor+1,f
 20376  1987  0CBF               	rrf	___llmod@divisor,f
 20377  1988  0B89               	decfsz	9,f
 20378  1989  2984               	goto	u7305
 20379  198A  3001               	movlw	1
 20380  198B  02C8               	subwf	___llmod@counter,f
 20381  198C  1D03               	btfss	3,2
 20382  198D  296B               	goto	l7830
 20383  198E                     l7838:	
 20384  198E  0846               	movf	___llmod@dividend+3,w
 20385  198F  00C2               	movwf	?___llmod+3
 20386  1990  0845               	movf	___llmod@dividend+2,w
 20387  1991  00C1               	movwf	?___llmod+2
 20388  1992  0844               	movf	___llmod@dividend+1,w
 20389  1993  00C0               	movwf	?___llmod+1
 20390  1994  0843               	movf	___llmod@dividend,w
 20391  1995  00BF               	movwf	?___llmod
 20392  1996  0008               	return
 20393  1997                     __end_of___llmod:	
 20394                           
 20395                           	psect	text73
 20396  1D71                     __ptext73:	
 20397 ;; *************** function ___lldiv *****************
 20398 ;; Defined at:
 20399 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 20400 ;; Parameters:    Size  Location     Type
 20401 ;;  divisor         4   17[BANK0 ] unsigned long 
 20402 ;;  dividend        4   21[BANK0 ] unsigned long 
 20403 ;; Auto vars:     Size  Location     Type
 20404 ;;  quotient        4   26[BANK0 ] unsigned long 
 20405 ;;  counter         1   30[BANK0 ] unsigned char 
 20406 ;; Return value:  Size  Location     Type
 20407 ;;                  4   17[BANK0 ] unsigned long 
 20408 ;; Registers used:
 20409 ;;		wreg, status,2, status,0
 20410 ;; Tracked objects:
 20411 ;;		On entry : 0/0
 20412 ;;		On exit  : 0/0
 20413 ;;		Unchanged: 0/0
 20414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20415 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20416 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20418 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20419 ;;Total ram usage:       14 bytes
 20420 ;; Hardware stack levels used:    1
 20421 ;; Hardware stack levels required when called:    6
 20422 ;; This function calls:
 20423 ;;		Nothing
 20424 ;; This function is called by:
 20425 ;;		_printf
 20426 ;; This function uses a non-reentrant model
 20427 ;;
 20428                           
 20429                           
 20430                           ;psect for function ___lldiv
 20431  1D71                     ___lldiv:	
 20432                           
 20433                           ;incstack = 0
 20434                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 20435  1D71  3000               	movlw	0
 20436  1D72  0020               	movlb	0	; select bank0
 20437  1D73  00BD               	movwf	___lldiv@quotient+3
 20438  1D74  3000               	movlw	0
 20439  1D75  00BC               	movwf	___lldiv@quotient+2
 20440  1D76  3000               	movlw	0
 20441  1D77  00BB               	movwf	___lldiv@quotient+1
 20442  1D78  3000               	movlw	0
 20443  1D79  00BA               	movwf	___lldiv@quotient
 20444  1D7A  0834               	movf	___lldiv@divisor+3,w
 20445  1D7B  0433               	iorwf	___lldiv@divisor+2,w
 20446  1D7C  0432               	iorwf	___lldiv@divisor+1,w
 20447  1D7D  0431               	iorwf	___lldiv@divisor,w
 20448  1D7E  1903               	skipnz
 20449  1D7F  2DBB               	goto	l7818
 20450  1D80  01BE               	clrf	___lldiv@counter
 20451  1D81  0ABE               	incf	___lldiv@counter,f
 20452  1D82                     l7804:	
 20453  1D82  1BB4               	btfsc	___lldiv@divisor+3,7
 20454  1D83  2D90               	goto	l7806
 20455  1D84  3001               	movlw	1
 20456  1D85                     u7205:	
 20457  1D85  35B1               	lslf	___lldiv@divisor,f
 20458  1D86  0DB2               	rlf	___lldiv@divisor+1,f
 20459  1D87  0DB3               	rlf	___lldiv@divisor+2,f
 20460  1D88  0DB4               	rlf	___lldiv@divisor+3,f
 20461  1D89  0B89               	decfsz	9,f
 20462  1D8A  2D85               	goto	u7205
 20463  1D8B  3001               	movlw	1
 20464  1D8C  00B9               	movwf	??___lldiv
 20465  1D8D  0839               	movf	??___lldiv,w
 20466  1D8E  07BE               	addwf	___lldiv@counter,f
 20467  1D8F  2D82               	goto	l7804
 20468  1D90                     l7806:	
 20469  1D90  3001               	movlw	1
 20470  1D91                     u7225:	
 20471  1D91  35BA               	lslf	___lldiv@quotient,f
 20472  1D92  0DBB               	rlf	___lldiv@quotient+1,f
 20473  1D93  0DBC               	rlf	___lldiv@quotient+2,f
 20474  1D94  0DBD               	rlf	___lldiv@quotient+3,f
 20475  1D95  0B89               	decfsz	9,f
 20476  1D96  2D91               	goto	u7225
 20477  1D97  0834               	movf	___lldiv@divisor+3,w
 20478  1D98  0238               	subwf	___lldiv@dividend+3,w
 20479  1D99  1D03               	skipz
 20480  1D9A  2DA5               	goto	u7235
 20481  1D9B  0833               	movf	___lldiv@divisor+2,w
 20482  1D9C  0237               	subwf	___lldiv@dividend+2,w
 20483  1D9D  1D03               	skipz
 20484  1D9E  2DA5               	goto	u7235
 20485  1D9F  0832               	movf	___lldiv@divisor+1,w
 20486  1DA0  0236               	subwf	___lldiv@dividend+1,w
 20487  1DA1  1D03               	skipz
 20488  1DA2  2DA5               	goto	u7235
 20489  1DA3  0831               	movf	___lldiv@divisor,w
 20490  1DA4  0235               	subwf	___lldiv@dividend,w
 20491  1DA5                     u7235:	
 20492  1DA5  1C03               	skipc
 20493  1DA6  2DB0               	goto	l7814
 20494  1DA7  0831               	movf	___lldiv@divisor,w
 20495  1DA8  02B5               	subwf	___lldiv@dividend,f
 20496  1DA9  0832               	movf	___lldiv@divisor+1,w
 20497  1DAA  3BB6               	subwfb	___lldiv@dividend+1,f
 20498  1DAB  0833               	movf	___lldiv@divisor+2,w
 20499  1DAC  3BB7               	subwfb	___lldiv@dividend+2,f
 20500  1DAD  0834               	movf	___lldiv@divisor+3,w
 20501  1DAE  3BB8               	subwfb	___lldiv@dividend+3,f
 20502  1DAF  143A               	bsf	___lldiv@quotient,0
 20503  1DB0                     l7814:	
 20504  1DB0  3001               	movlw	1
 20505  1DB1                     u7245:	
 20506  1DB1  36B4               	lsrf	___lldiv@divisor+3,f
 20507  1DB2  0CB3               	rrf	___lldiv@divisor+2,f
 20508  1DB3  0CB2               	rrf	___lldiv@divisor+1,f
 20509  1DB4  0CB1               	rrf	___lldiv@divisor,f
 20510  1DB5  0B89               	decfsz	9,f
 20511  1DB6  2DB1               	goto	u7245
 20512  1DB7  3001               	movlw	1
 20513  1DB8  02BE               	subwf	___lldiv@counter,f
 20514  1DB9  1D03               	btfss	3,2
 20515  1DBA  2D90               	goto	l7806
 20516  1DBB                     l7818:	
 20517  1DBB  083D               	movf	___lldiv@quotient+3,w
 20518  1DBC  00B4               	movwf	?___lldiv+3
 20519  1DBD  083C               	movf	___lldiv@quotient+2,w
 20520  1DBE  00B3               	movwf	?___lldiv+2
 20521  1DBF  083B               	movf	___lldiv@quotient+1,w
 20522  1DC0  00B2               	movwf	?___lldiv+1
 20523  1DC1  083A               	movf	___lldiv@quotient,w
 20524  1DC2  00B1               	movwf	?___lldiv
 20525  1DC3  0008               	return
 20526  1DC4                     __end_of___lldiv:	
 20527                           
 20528                           	psect	text74
 20529  2221                     __ptext74:	
 20530 ;; *************** function _i2c_setBuffer *****************
 20531 ;; Defined at:
 20532 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 20533 ;; Parameters:    Size  Location     Type
 20534 ;;  buffer          2   17[BANK0 ] PTR void 
 20535 ;;		 -> drv_read@reg(1), drv_read@buff(1), drv_fifo_downstroke(40), drv_fifo_upstroke(40), 
 20536 ;;		 -> drv_write@buff(2), 
 20537 ;;  bufferSize      2   19[BANK0 ] unsigned int 
 20538 ;; Auto vars:     Size  Location     Type
 20539 ;;		None
 20540 ;; Return value:  Size  Location     Type
 20541 ;;                  1    wreg      void 
 20542 ;; Registers used:
 20543 ;;		wreg
 20544 ;; Tracked objects:
 20545 ;;		On entry : 0/0
 20546 ;;		On exit  : 0/0
 20547 ;;		Unchanged: 0/0
 20548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20549 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20552 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20553 ;;Total ram usage:        4 bytes
 20554 ;; Hardware stack levels used:    1
 20555 ;; Hardware stack levels required when called:    6
 20556 ;; This function calls:
 20557 ;;		Nothing
 20558 ;; This function is called by:
 20559 ;;		_drv_write
 20560 ;;		_drv_write_wvfrm
 20561 ;;		_drv_read
 20562 ;; This function uses a non-reentrant model
 20563 ;;
 20564                           
 20565                           
 20566                           ;psect for function _i2c_setBuffer
 20567  2221                     _i2c_setBuffer:	
 20568                           
 20569                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 20570                           
 20571                           ;incstack = 0
 20572                           ; Regs used in _i2c_setBuffer: [wreg]
 20573  2221  0022               	movlb	2	; select bank2
 20574  2222  1D20               	btfss	_i2c_status^(0+256),2
 20575  2223  0008               	return
 20576                           
 20577                           ;i2c_master.c: 187: {
 20578                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 20579  2224  0020               	movlb	0	; select bank0
 20580  2225  0832               	movf	i2c_setBuffer@buffer+1,w
 20581  2226  0022               	movlb	2	; select bank2
 20582  2227  00A3               	movwf	((low ((_i2c_status| (0+256)+2))+1))^0
 20583  2228  0020               	movlb	0	; select bank0
 20584  2229  0831               	movf	i2c_setBuffer@buffer,w
 20585  222A  0022               	movlb	2	; select bank2
 20586  222B  00A2               	movwf	(low ((_i2c_status| (0+256)+2)))^0
 20587                           
 20588                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 20589  222C  0020               	movlb	0	; select bank0
 20590  222D  0834               	movf	i2c_setBuffer@bufferSize+1,w
 20591  222E  0022               	movlb	2	; select bank2
 20592  222F  00A5               	movwf	((_i2c_status+1)^(0+256)+4)
 20593  2230  0020               	movlb	0	; select bank0
 20594  2231  0833               	movf	i2c_setBuffer@bufferSize,w
 20595  2232  0022               	movlb	2	; select bank2
 20596  2233  00A4               	movwf	(_i2c_status^(0+256)+4)
 20597                           
 20598                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 20599  2234  1120               	bcf	_i2c_status^(0+256),2
 20600  2235  0008               	return
 20601  2236                     __end_of_i2c_setBuffer:	
 20602                           
 20603                           	psect	text75
 20604  245F                     __ptext75:	
 20605 ;; *************** function _i2c_masterOperation *****************
 20606 ;; Defined at:
 20607 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
 20608 ;; Parameters:    Size  Location     Type
 20609 ;;  read            1    wreg     unsigned char 
 20610 ;; Auto vars:     Size  Location     Type
 20611 ;;  read            1   24[BANK0 ] unsigned char 
 20612 ;;  ret             1   25[BANK0 ] enum E8193
 20613 ;; Return value:  Size  Location     Type
 20614 ;;                  1    wreg      enum E8193
 20615 ;; Registers used:
 20616 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20617 ;; Tracked objects:
 20618 ;;		On entry : 0/0
 20619 ;;		On exit  : 0/0
 20620 ;;		Unchanged: 0/0
 20621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20623 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20624 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20625 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20626 ;;Total ram usage:        3 bytes
 20627 ;; Hardware stack levels used:    1
 20628 ;; Hardware stack levels required when called:   11
 20629 ;; This function calls:
 20630 ;;		_i2c1_driver_start
 20631 ;;		_i2c_poller
 20632 ;;		_mssp1_IRQisEnabled
 20633 ;; This function is called by:
 20634 ;;		_drv_write
 20635 ;;		_drv_write_wvfrm
 20636 ;;		_drv_read
 20637 ;;		_i2c_masterRead
 20638 ;;		_i2c_masterWrite
 20639 ;; This function uses a non-reentrant model
 20640 ;;
 20641                           
 20642                           
 20643                           ;psect for function _i2c_masterOperation
 20644  245F                     _i2c_masterOperation:	
 20645                           
 20646                           ;incstack = 0
 20647                           ; Regs used in _i2c_masterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20648                           ;i2c_masterOperation@read stored from wreg
 20649  245F  0020               	movlb	0	; select bank0
 20650  2460  00B8               	movwf	i2c_masterOperation@read
 20651                           
 20652                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
 20653  2461  01B9               	clrf	i2c_masterOperation@ret
 20654  2462  0AB9               	incf	i2c_masterOperation@ret,f
 20655                           
 20656                           ;i2c_master.c: 196: if(!i2c_status.busy)
 20657  2463  0022               	movlb	2	; select bank2
 20658  2464  1820               	btfsc	_i2c_status^(0+256),0
 20659  2465  2C80               	goto	l8078
 20660                           
 20661                           ;i2c_master.c: 197: {
 20662                           ;i2c_master.c: 198: i2c_status.busy = 1;
 20663  2466  1420               	bsf	_i2c_status^(0+256),0
 20664                           
 20665                           ;i2c_master.c: 199: ret = I2C_NOERR;
 20666  2467  0020               	movlb	0	; select bank0
 20667  2468  01B9               	clrf	i2c_masterOperation@ret
 20668                           
 20669                           ;i2c_master.c: 201: if(read)
 20670  2469  0838               	movf	i2c_masterOperation@read,w
 20671  246A  1903               	btfsc	3,2
 20672  246B  2C70               	goto	l8072
 20673                           
 20674                           ;i2c_master.c: 202: {
 20675                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
 20676  246C  0022               	movlb	2	; select bank2
 20677  246D  01AA               	clrf	(_i2c_status^(0+256)+10)
 20678  246E  0AAA               	incf	(_i2c_status^(0+256)+10),f
 20679                           
 20680                           ;i2c_master.c: 204: }
 20681  246F  2C76               	goto	l8074
 20682  2470                     l8072:	
 20683                           
 20684                           ;i2c_master.c: 205: else
 20685                           ;i2c_master.c: 206: {
 20686                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
 20687  2470  3002               	movlw	2
 20688  2471  0020               	movlb	0	; select bank0
 20689  2472  00B7               	movwf	??_i2c_masterOperation
 20690  2473  0837               	movf	??_i2c_masterOperation,w
 20691  2474  0022               	movlb	2	; select bank2
 20692  2475  00AA               	movwf	(_i2c_status^(0+256)+10)
 20693  2476                     l8074:	
 20694                           
 20695                           ;i2c_master.c: 208: }
 20696                           ;i2c_master.c: 209: i2c1_driver_start();
 20697  2476  31AF  2766  31A4   	fcall	_i2c1_driver_start
 20698                           
 20699                           ;i2c_master.c: 211: if(! mssp1_IRQisEnabled())
 20700  2479  31A0  20E8  31A4   	fcall	_mssp1_IRQisEnabled
 20701  247C  1803               	btfsc	3,0
 20702  247D  2C80               	goto	l8078
 20703                           
 20704                           ;i2c_master.c: 212: i2c_poller();
 20705  247E  31A1  2127         	fcall	_i2c_poller
 20706  2480                     l8078:	
 20707                           
 20708                           ;i2c_master.c: 213: }
 20709                           ;i2c_master.c: 214: return ret;
 20710  2480  0020               	movlb	0	; select bank0
 20711  2481  0839               	movf	i2c_masterOperation@ret,w
 20712  2482  0008               	return
 20713  2483                     __end_of_i2c_masterOperation:	
 20714                           
 20715                           	psect	text76
 20716  20E8                     __ptext76:	
 20717 ;; *************** function _mssp1_IRQisEnabled *****************
 20718 ;; Defined at:
 20719 ;;		line 43 in file "mcc_generated_files/i2c1_driver.c"
 20720 ;; Parameters:    Size  Location     Type
 20721 ;;		None
 20722 ;; Auto vars:     Size  Location     Type
 20723 ;;		None
 20724 ;; Return value:  Size  Location     Type
 20725 ;;		None               void
 20726 ;; Registers used:
 20727 ;;		wreg, status,2, status,0
 20728 ;; Tracked objects:
 20729 ;;		On entry : 0/0
 20730 ;;		On exit  : 0/0
 20731 ;;		Unchanged: 0/0
 20732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20735 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20736 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20737 ;;Total ram usage:        2 bytes
 20738 ;; Hardware stack levels used:    1
 20739 ;; Hardware stack levels required when called:    6
 20740 ;; This function calls:
 20741 ;;		Nothing
 20742 ;; This function is called by:
 20743 ;;		_i2c_masterOperation
 20744 ;; This function uses a non-reentrant model
 20745 ;;
 20746                           
 20747                           
 20748                           ;psect for function _mssp1_IRQisEnabled
 20749  20E8                     _mssp1_IRQisEnabled:	
 20750                           
 20751                           ;i2c1_driver.c: 45: return PIE1bits.SSP1IE;
 20752                           
 20753                           ;incstack = 0
 20754                           ; Regs used in _mssp1_IRQisEnabled: [wreg+status,2+status,0]
 20755  20E8  0021               	movlb	1	; select bank1
 20756  20E9  0C11               	rrf	17,w	;volatile
 20757  20EA  0020               	movlb	0	; select bank0
 20758  20EB  00B1               	movwf	??_mssp1_IRQisEnabled
 20759  20EC  0CB1               	rrf	??_mssp1_IRQisEnabled,f
 20760  20ED  0C31               	rrf	??_mssp1_IRQisEnabled,w
 20761  20EE  3901               	andlw	1
 20762  20EF  00B2               	movwf	??_mssp1_IRQisEnabled+1
 20763  20F0  0C32               	rrf	??_mssp1_IRQisEnabled+1,w
 20764  20F1  0008               	return
 20765  20F2                     __end_of_mssp1_IRQisEnabled:	
 20766                           
 20767                           	psect	text77
 20768  2127                     __ptext77:	
 20769 ;; *************** function _i2c_poller *****************
 20770 ;; Defined at:
 20771 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
 20772 ;; Parameters:    Size  Location     Type
 20773 ;;		None
 20774 ;; Auto vars:     Size  Location     Type
 20775 ;;		None
 20776 ;; Return value:  Size  Location     Type
 20777 ;;                  1    wreg      void 
 20778 ;; Registers used:
 20779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20780 ;; Tracked objects:
 20781 ;;		On entry : 0/0
 20782 ;;		On exit  : 0/0
 20783 ;;		Unchanged: 0/0
 20784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20789 ;;Total ram usage:        0 bytes
 20790 ;; Hardware stack levels used:    1
 20791 ;; Hardware stack levels required when called:   10
 20792 ;; This function calls:
 20793 ;;		_i2c_ISR
 20794 ;;		_mssp1_waitForEvent
 20795 ;; This function is called by:
 20796 ;;		_i2c_masterOperation
 20797 ;; This function uses a non-reentrant model
 20798 ;;
 20799                           
 20800                           
 20801                           ;psect for function _i2c_poller
 20802  2127                     _i2c_poller:	
 20803  2127                     l7948:	
 20804                           ;i2c_master.c: 232: while(i2c_status.busy)
 20805                           
 20806                           ;incstack = 0
 20807                           ; Regs used in _i2c_poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20808                           
 20809  2127  0022               	movlb	2	; select bank2
 20810  2128  1C20               	btfss	_i2c_status^(0+256),0
 20811  2129  0008               	return
 20812                           
 20813                           ;i2c_master.c: 233: {
 20814                           ;i2c_master.c: 234: mssp1_waitForEvent((0));
 20815  212A  3000               	movlw	0
 20816  212B  31A1  211C  31A1   	fcall	_mssp1_waitForEvent
 20817                           
 20818                           ;i2c_master.c: 235: i2c_ISR();
 20819  212E  31A4  24CC  31A1   	fcall	_i2c_ISR
 20820  2131  2927               	goto	l7948
 20821  2132                     __end_of_i2c_poller:	
 20822                           
 20823                           	psect	text78
 20824  211C                     __ptext78:	
 20825 ;; *************** function _mssp1_waitForEvent *****************
 20826 ;; Defined at:
 20827 ;;		line 68 in file "mcc_generated_files/i2c1_driver.c"
 20828 ;; Parameters:    Size  Location     Type
 20829 ;;  timeout         1    wreg     PTR unsigned int 
 20830 ;;		 -> NULL(0), 
 20831 ;; Auto vars:     Size  Location     Type
 20832 ;;  timeout         1   17[BANK0 ] PTR unsigned int 
 20833 ;;		 -> NULL(0), 
 20834 ;; Return value:  Size  Location     Type
 20835 ;;                  1    wreg      void 
 20836 ;; Registers used:
 20837 ;;		wreg
 20838 ;; Tracked objects:
 20839 ;;		On entry : 0/0
 20840 ;;		On exit  : 0/0
 20841 ;;		Unchanged: 0/0
 20842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20844 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20846 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20847 ;;Total ram usage:        1 bytes
 20848 ;; Hardware stack levels used:    1
 20849 ;; Hardware stack levels required when called:    6
 20850 ;; This function calls:
 20851 ;;		Nothing
 20852 ;; This function is called by:
 20853 ;;		_i2c_poller
 20854 ;; This function uses a non-reentrant model
 20855 ;;
 20856                           
 20857                           
 20858                           ;psect for function _mssp1_waitForEvent
 20859  211C                     _mssp1_waitForEvent:	
 20860                           
 20861                           ;i2c1_driver.c: 73: if(PIR1bits.SSP1IF == 0)
 20862                           
 20863                           ;incstack = 0
 20864                           ; Regs used in _mssp1_waitForEvent: [wreg]
 20865  211C  0020               	movlb	0	; select bank0
 20866  211D  1991               	btfsc	17,3	;volatile
 20867  211E  0008               	return
 20868  211F                     l529:	
 20869                           ;i2c1_driver.c: 74: {
 20870                           ;i2c1_driver.c: 75: while(1)
 20871                           
 20872                           
 20873                           ;i2c1_driver.c: 76: {
 20874                           ;i2c1_driver.c: 77: if(PIR1bits.SSP1IF) break;
 20875  211F  0020               	movlb	0	; select bank0
 20876  2120  1991               	btfsc	17,3	;volatile
 20877  2121  0008               	return
 20878                           
 20879                           ;i2c1_driver.c: 78: _delay((unsigned long)((100)*(1000000/4000000.0)));
 20880  2122  3008               	movlw	8
 20881  2123                     u10137:	
 20882  2123  0B89               	decfsz	9,f
 20883  2124  2923               	goto	u10137
 20884  2125  0000               	nop
 20885  2126  291F               	goto	l529
 20886  2127                     __end_of_mssp1_waitForEvent:	
 20887                           
 20888                           	psect	text79
 20889  24CC                     __ptext79:	
 20890 ;; *************** function _i2c_ISR *****************
 20891 ;; Defined at:
 20892 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 20893 ;; Parameters:    Size  Location     Type
 20894 ;;		None
 20895 ;; Auto vars:     Size  Location     Type
 20896 ;;		None
 20897 ;; Return value:  Size  Location     Type
 20898 ;;                  1    wreg      void 
 20899 ;; Registers used:
 20900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20901 ;; Tracked objects:
 20902 ;;		On entry : 0/0
 20903 ;;		On exit  : 0/0
 20904 ;;		Unchanged: 0/0
 20905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20908 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20909 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20910 ;;Total ram usage:        1 bytes
 20911 ;; Hardware stack levels used:    1
 20912 ;; Hardware stack levels required when called:    9
 20913 ;; This function calls:
 20914 ;;		_do_I2C_DO_ACK
 20915 ;;		_do_I2C_DO_ADDRESS_NACK
 20916 ;;		_do_I2C_DO_NACK_RESTART
 20917 ;;		_do_I2C_DO_NACK_STOP
 20918 ;;		_do_I2C_IDLE
 20919 ;;		_do_I2C_RCEN
 20920 ;;		_do_I2C_RESET
 20921 ;;		_do_I2C_RX
 20922 ;;		_do_I2C_SEND_ADR_READ
 20923 ;;		_do_I2C_SEND_ADR_WRITE
 20924 ;;		_do_I2C_SEND_RESTART
 20925 ;;		_do_I2C_SEND_RESTART_READ
 20926 ;;		_do_I2C_SEND_RESTART_WRITE
 20927 ;;		_do_I2C_SEND_STOP
 20928 ;;		_do_I2C_TX
 20929 ;;		_do_I2C_TX_EMPTY
 20930 ;;		_i2c1_driver_isNACK
 20931 ;;		_mssp1_clearIRQ
 20932 ;; This function is called by:
 20933 ;;		_i2c_open
 20934 ;;		_i2c_poller
 20935 ;;		_INTERRUPT_InterruptManager
 20936 ;; This function uses a non-reentrant model
 20937 ;;
 20938                           
 20939                           
 20940                           ;psect for function _i2c_ISR
 20941  24CC                     _i2c_ISR:	
 20942                           
 20943                           ;Skip over the trampoline to the duplicate function for level 1
 20944  24CC  1C7E               	btfss	126,0
 20945  24CD  2CD0               	goto	l7756
 20946  24CE  31A3  2B97         	ljmp	i1l9356
 20947  24D0                     _i2c_ISR$intlevel0:	
 20948  24D0                     l7756:	
 20949                           ;incstack = 0
 20950                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20951                           
 20952                           
 20953                           ;i2c_master.c: 421: mssp1_clearIRQ();
 20954  24D0  31AF  2778  31A4   	fcall	_mssp1_clearIRQ
 20955                           
 20956                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
 20957  24D3  0022               	movlb	2	; select bank2
 20958  24D4  1DA0               	btfss	_i2c_status^(0+256),3
 20959  24D5  2CE1               	goto	l7764
 20960  24D6  31A1  2189  31A4   	fcall	_i2c1_driver_isNACK
 20961  24D9  1C03               	btfss	3,0
 20962  24DA  2CE1               	goto	l7764
 20963                           
 20964                           ;i2c_master.c: 428: {
 20965                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
 20966  24DB  300F               	movlw	15
 20967  24DC  0020               	movlb	0	; select bank0
 20968  24DD  00B6               	movwf	??_i2c_ISR
 20969  24DE  0836               	movf	??_i2c_ISR,w
 20970  24DF  0022               	movlb	2	; select bank2
 20971  24E0  00AA               	movwf	(_i2c_status^(0+256)+10)
 20972  24E1                     l7764:	
 20973                           
 20974                           ;i2c_master.c: 430: }
 20975                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
 20976  24E1  0022               	movlb	2	; select bank2
 20977  24E2  352A               	lslf	(_i2c_status^(0+256)+10),w
 20978  24E3  3E48               	addlw	(low (_fsmStateTable| (0+512)))& (0+255)
 20979  24E4  0086               	movwf	6
 20980  24E5  3002               	movlw	2	; select bank4/5
 20981  24E6  0087               	movwf	7
 20982  24E7  3F41               	moviw [1]fsr1
 20983  24E8  008A               	movwf	10
 20984  24E9  3F40               	moviw [0]fsr1
 20985  24EA  000A               	callw
 20986  24EB  31A4               	pagesel	$
 20987  24EC  0020               	movlb	0	; select bank0
 20988  24ED  00B6               	movwf	??_i2c_ISR
 20989  24EE  0836               	movf	??_i2c_ISR,w
 20990  24EF  0022               	movlb	2	; select bank2
 20991  24F0  00AA               	movwf	(_i2c_status^(0+256)+10)
 20992  24F1  0008               	return
 20993  24F2                     __end_of_i2c_ISR:	
 20994                           
 20995                           	psect	text80
 20996  2F78                     __ptext80:	
 20997 ;; *************** function _mssp1_clearIRQ *****************
 20998 ;; Defined at:
 20999 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 21000 ;; Parameters:    Size  Location     Type
 21001 ;;		None
 21002 ;; Auto vars:     Size  Location     Type
 21003 ;;		None
 21004 ;; Return value:  Size  Location     Type
 21005 ;;                  1    wreg      void 
 21006 ;; Registers used:
 21007 ;;		None
 21008 ;; Tracked objects:
 21009 ;;		On entry : 0/0
 21010 ;;		On exit  : 0/0
 21011 ;;		Unchanged: 0/0
 21012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21017 ;;Total ram usage:        0 bytes
 21018 ;; Hardware stack levels used:    1
 21019 ;; Hardware stack levels required when called:    6
 21020 ;; This function calls:
 21021 ;;		Nothing
 21022 ;; This function is called by:
 21023 ;;		_i2c_open
 21024 ;;		_i2c_ISR
 21025 ;;		_i2c_close
 21026 ;; This function uses a non-reentrant model
 21027 ;;
 21028                           
 21029                           
 21030                           ;psect for function _mssp1_clearIRQ
 21031  2F78                     _mssp1_clearIRQ:	
 21032                           
 21033                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
 21034                           
 21035                           ;incstack = 0
 21036                           ; Regs used in _mssp1_clearIRQ: []
 21037  2F78  0020               	movlb	0	; select bank0
 21038  2F79  1191               	bcf	17,3	;volatile
 21039  2F7A  0008               	return
 21040  2F7B                     __end_of_mssp1_clearIRQ:	
 21041                           
 21042                           	psect	text81
 21043  1A21                     __ptext81:	
 21044 ;; *************** function _do_I2C_RX *****************
 21045 ;; Defined at:
 21046 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 21047 ;; Parameters:    Size  Location     Type
 21048 ;;		None
 21049 ;; Auto vars:     Size  Location     Type
 21050 ;;		None
 21051 ;; Return value:  Size  Location     Type
 21052 ;;                  1    wreg      enum E8364
 21053 ;; Registers used:
 21054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21055 ;; Tracked objects:
 21056 ;;		On entry : 0/0
 21057 ;;		On exit  : 0/0
 21058 ;;		Unchanged: 0/0
 21059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21062 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21063 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21064 ;;Total ram usage:        1 bytes
 21065 ;; Hardware stack levels used:    1
 21066 ;; Hardware stack levels required when called:    8
 21067 ;; This function calls:
 21068 ;;		_do_I2C_DO_NACK_RESTART
 21069 ;;		_do_I2C_DO_NACK_STOP
 21070 ;;		_i2c1_driver_getRXData
 21071 ;;		_i2c1_driver_sendACK
 21072 ;;		_returnReset
 21073 ;;		_returnStop
 21074 ;; This function is called by:
 21075 ;;		_i2c_ISR
 21076 ;;		i1_i2c_ISR
 21077 ;; This function uses a non-reentrant model
 21078 ;;
 21079                           
 21080                           
 21081                           ;psect for function _do_I2C_RX
 21082  1A21                     _do_I2C_RX:	
 21083                           
 21084                           ;Skip over the trampoline to the duplicate function for level 1
 21085  1A21  1C7E               	btfss	126,0
 21086  1A22  2A25               	goto	l7702
 21087  1A23  3199  2914         	ljmp	i1l9002
 21088  1A25                     _do_I2C_RX$intlevel0:	
 21089  1A25                     l7702:	
 21090                           ;incstack = 0
 21091                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21092                           
 21093                           
 21094                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
 21095  1A25  31AF  2772  319A   	fcall	_i2c1_driver_getRXData
 21096  1A28  0020               	movlb	0	; select bank0
 21097  1A29  00B1               	movwf	??_do_I2C_RX
 21098  1A2A  0022               	movlb	2	; select bank2
 21099  1A2B  0822               	movf	(low ((_i2c_status| (0+256)+2)))^0,w
 21100  1A2C  0086               	movwf	6
 21101  1A2D  0823               	movf	((low ((_i2c_status| (0+256)+2))+1))^0,w
 21102  1A2E  0087               	movwf	7
 21103  1A2F  0020               	movlb	0	; select bank0
 21104  1A30  0831               	movf	??_do_I2C_RX,w
 21105  1A31  0081               	movwf	1
 21106  1A32  3001               	movlw	1
 21107  1A33  0022               	movlb	2	; select bank2
 21108  1A34  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^0,f
 21109  1A35  3000               	movlw	0
 21110  1A36  3DA3               	addwfc	((low ((_i2c_status| (0+256)+2))+1))^0,f
 21111                           
 21112                           ;i2c_master.c: 360: if(--i2c_status.data_length)
 21113  1A37  3001               	movlw	1
 21114  1A38  02A4               	subwf	(_i2c_status^(0+256)+4),f
 21115  1A39  3000               	movlw	0
 21116  1A3A  3BA5               	subwfb	((_i2c_status+1)^(0+256)+4),f
 21117  1A3B  0824               	movf	(_i2c_status^(0+256)+4),w
 21118  1A3C  0425               	iorwf	((_i2c_status+1)^(0+256)+4),w
 21119  1A3D  1903               	btfsc	3,2
 21120  1A3E  2A43               	goto	l790
 21121                           
 21122                           ;i2c_master.c: 361: {
 21123                           ;i2c_master.c: 362: i2c1_driver_sendACK();
 21124  1A3F  31AF  27A3         	fcall	_i2c1_driver_sendACK
 21125                           
 21126                           ;i2c_master.c: 363: return I2C_RCEN;
 21127  1A41  3005               	movlw	5
 21128                           
 21129                           ;i2c_master.c: 364: }
 21130  1A42  0008               	return
 21131  1A43                     l790:	
 21132                           
 21133                           ;i2c_master.c: 365: else
 21134                           ;i2c_master.c: 366: {
 21135                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
 21136  1A43  1520               	bsf	_i2c_status^(0+256),2
 21137                           
 21138                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 21139  1A44  2A4B               	goto	l7726
 21140  1A45                     l7716:	
 21141                           ;i2c_master.c: 369: {
 21142                           ;i2c_master.c: 370: case i2c_restart_write:
 21143                           
 21144                           
 21145                           ;i2c_master.c: 371: case i2c_restart_read:
 21146                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
 21147  1A45  31A0  2072         	fcall	_do_I2C_DO_NACK_RESTART
 21148  1A47  0008               	return
 21149  1A48                     l7720:	
 21150                           ;i2c_master.c: 374: case i2c_continue:
 21151                           
 21152                           ;i2c_master.c: 373: default:
 21153                           
 21154                           
 21155                           ;i2c_master.c: 375: case i2c_stop:
 21156                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
 21157  1A48  31A0  206A         	fcall	_do_I2C_DO_NACK_STOP
 21158                           
 21159                           ;i2c_master.c: 377: }
 21160  1A4A  0008               	return
 21161  1A4B                     l7726:	
 21162  1A4B  0022               	movlb	2	; select bank2
 21163  1A4C  0838               	movf	(low ((_i2c_status| (0+256)+24)))^0,w
 21164  1A4D  0020               	movlb	0	; select bank0
 21165  1A4E  00B1               	movwf	??_do_I2C_RX
 21166  1A4F  0831               	movf	??_do_I2C_RX,w
 21167  1A50  00B1               	movwf	returnReset@p
 21168  1A51  300C               	movlw	12
 21169  1A52  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 21170  1A53  0086               	movwf	6
 21171  1A54  3001               	movlw	1	; select bank2/3
 21172  1A55  0087               	movwf	7
 21173  1A56  3F41               	moviw [1]fsr1
 21174  1A57  008A               	movwf	10
 21175  1A58  3F40               	moviw [0]fsr1
 21176  1A59  000A               	callw
 21177  1A5A  319A               	pagesel	$
 21178                           
 21179                           ; Switch size 1, requested type "space"
 21180                           ; Number of cases is 4, Range of values is 1 to 4
 21181                           ; switch strategies available:
 21182                           ; Name         Instructions Cycles
 21183                           ; simple_byte           13     7 (average)
 21184                           ; direct_byte           17     9 (fixed)
 21185                           ; jumptable            263     9 (fixed)
 21186                           ;	Chosen strategy is simple_byte
 21187  1A5B  3A01               	xorlw	1	; case 1
 21188  1A5C  1903               	skipnz
 21189  1A5D  2A48               	goto	l7720
 21190  1A5E  3A03               	xorlw	3	; case 2
 21191  1A5F  1903               	skipnz
 21192  1A60  2A45               	goto	l7716
 21193  1A61  3A01               	xorlw	1	; case 3
 21194  1A62  1903               	skipnz
 21195  1A63  2A45               	goto	l7716
 21196  1A64  3A07               	xorlw	7	; case 4
 21197  1A65  1903               	skipnz
 21198  1A66  2A48               	goto	l7720
 21199  1A67  2A48               	goto	l7720
 21200  1A68  0008               	return
 21201  1A69                     __end_of_do_I2C_RX:	
 21202                           
 21203                           	psect	text82
 21204  1E1C                     __ptext82:	
 21205 ;; *************** function _do_I2C_TX *****************
 21206 ;; Defined at:
 21207 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 21208 ;; Parameters:    Size  Location     Type
 21209 ;;		None
 21210 ;; Auto vars:     Size  Location     Type
 21211 ;;		None
 21212 ;; Return value:  Size  Location     Type
 21213 ;;                  1    wreg      enum E8364
 21214 ;; Registers used:
 21215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21216 ;; Tracked objects:
 21217 ;;		On entry : 0/0
 21218 ;;		On exit  : 0/0
 21219 ;;		Unchanged: 0/0
 21220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21222 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21223 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21224 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21225 ;;Total ram usage:        4 bytes
 21226 ;; Hardware stack levels used:    1
 21227 ;; Hardware stack levels required when called:    8
 21228 ;; This function calls:
 21229 ;;		_do_I2C_SEND_RESTART_READ
 21230 ;;		_do_I2C_SEND_RESTART_WRITE
 21231 ;;		_do_I2C_SEND_STOP
 21232 ;;		_i2c1_driver_TXData
 21233 ;;		_i2c1_driver_isNACK
 21234 ;;		_returnReset
 21235 ;;		_returnStop
 21236 ;; This function is called by:
 21237 ;;		_i2c_ISR
 21238 ;;		i1_i2c_ISR
 21239 ;; This function uses a non-reentrant model
 21240 ;;
 21241                           
 21242                           
 21243                           ;psect for function _do_I2C_TX
 21244  1E1C                     _do_I2C_TX:	
 21245                           
 21246                           ;Skip over the trampoline to the duplicate function for level 1
 21247  1E1C  1C7E               	btfss	126,0
 21248  1E1D  2E20               	goto	l7672
 21249  1E1E  319B  2BE3         	ljmp	i1l8972
 21250  1E20                     _do_I2C_TX$intlevel0:	
 21251  1E20                     l7672:	
 21252                           ;incstack = 0
 21253                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21254                           
 21255                           
 21256                           ;i2c_master.c: 335: if(i2c1_driver_isNACK())
 21257  1E20  31A1  2189  319E   	fcall	_i2c1_driver_isNACK
 21258  1E23  1803               	btfsc	3,0
 21259  1E24  2E2F               	goto	l7690
 21260  1E25  2E4D               	goto	l774
 21261  1E26                     l7676:	
 21262                           ;i2c_master.c: 338: {
 21263                           ;i2c_master.c: 339: case i2c_restart_read:
 21264                           
 21265                           ;i2c_master.c: 336: {
 21266                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
 21267                           
 21268                           
 21269                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
 21270  1E26  31A0  2042         	fcall	_do_I2C_SEND_RESTART_READ
 21271  1E28  0008               	return
 21272  1E29                     l7680:	
 21273                           ;i2c_master.c: 341: case i2c_restart_write:
 21274                           
 21275                           
 21276                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
 21277  1E29  31A0  204A         	fcall	_do_I2C_SEND_RESTART_WRITE
 21278  1E2B  0008               	return
 21279  1E2C                     l7684:	
 21280                           ;i2c_master.c: 344: case i2c_continue:
 21281                           
 21282                           ;i2c_master.c: 343: default:
 21283                           
 21284                           
 21285                           ;i2c_master.c: 345: case i2c_stop:
 21286                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
 21287  1E2C  31A0  205A         	fcall	_do_I2C_SEND_STOP
 21288                           
 21289                           ;i2c_master.c: 347: }
 21290  1E2E  0008               	return
 21291  1E2F                     l7690:	
 21292  1E2F  0022               	movlb	2	; select bank2
 21293  1E30  083B               	movf	(low ((_i2c_status| (0+256)+27)))^0,w
 21294  1E31  0020               	movlb	0	; select bank0
 21295  1E32  00B2               	movwf	??_do_I2C_TX
 21296  1E33  0832               	movf	??_do_I2C_TX,w
 21297  1E34  00B1               	movwf	returnReset@p
 21298  1E35  3012               	movlw	18
 21299  1E36  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 21300  1E37  0086               	movwf	6
 21301  1E38  3001               	movlw	1	; select bank2/3
 21302  1E39  0087               	movwf	7
 21303  1E3A  3F41               	moviw [1]fsr1
 21304  1E3B  008A               	movwf	10
 21305  1E3C  3F40               	moviw [0]fsr1
 21306  1E3D  000A               	callw
 21307  1E3E  319E               	pagesel	$
 21308                           
 21309                           ; Switch size 1, requested type "space"
 21310                           ; Number of cases is 4, Range of values is 1 to 4
 21311                           ; switch strategies available:
 21312                           ; Name         Instructions Cycles
 21313                           ; simple_byte           13     7 (average)
 21314                           ; direct_byte           17     9 (fixed)
 21315                           ; jumptable            263     9 (fixed)
 21316                           ;	Chosen strategy is simple_byte
 21317  1E3F  3A01               	xorlw	1	; case 1
 21318  1E40  1903               	skipnz
 21319  1E41  2E2C               	goto	l7684
 21320  1E42  3A03               	xorlw	3	; case 2
 21321  1E43  1903               	skipnz
 21322  1E44  2E26               	goto	l7676
 21323  1E45  3A01               	xorlw	1	; case 3
 21324  1E46  1903               	skipnz
 21325  1E47  2E29               	goto	l7680
 21326  1E48  3A07               	xorlw	7	; case 4
 21327  1E49  1903               	skipnz
 21328  1E4A  2E2C               	goto	l7684
 21329  1E4B  2E2C               	goto	l7684
 21330                           
 21331                           ;i2c_master.c: 348: }
 21332  1E4C  0008               	return
 21333  1E4D                     l774:	
 21334                           
 21335                           ;i2c_master.c: 349: else
 21336                           ;i2c_master.c: 350: {
 21337                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
 21338  1E4D  0022               	movlb	2	; select bank2
 21339  1E4E  11A0               	bcf	_i2c_status^(0+256),3
 21340                           
 21341                           ;i2c_master.c: 352: i2c1_driver_TXData(*i2c_status.data_ptr++);
 21342  1E4F  0823               	movf	((low ((_i2c_status| (0+256)+2))+1))^0,w
 21343  1E50  0020               	movlb	0	; select bank0
 21344  1E51  00B3               	movwf	??_do_I2C_TX+1
 21345  1E52  0022               	movlb	2	; select bank2
 21346  1E53  0822               	movf	(low ((_i2c_status| (0+256)+2)))^0,w
 21347  1E54  0020               	movlb	0	; select bank0
 21348  1E55  00B2               	movwf	??_do_I2C_TX
 21349  1E56  0022               	movlb	2	; select bank2
 21350  1E57  0AA2               	incf	(low ((_i2c_status| (0+256)+2)))^0,f
 21351  1E58  1903               	skipnz
 21352  1E59  0AA3               	incf	((low ((_i2c_status| (0+256)+2))+1))^0,f
 21353  1E5A  0020               	movlb	0	; select bank0
 21354  1E5B  0832               	movf	??_do_I2C_TX,w
 21355  1E5C  0086               	movwf	6
 21356  1E5D  0833               	movf	??_do_I2C_TX+1,w
 21357  1E5E  0087               	movwf	7
 21358  1E5F  0801               	movf	1,w
 21359  1E60  31AF  27E0  319E   	fcall	_i2c1_driver_TXData
 21360                           
 21361                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
 21362  1E63  3001               	movlw	1
 21363  1E64  0022               	movlb	2	; select bank2
 21364  1E65  02A4               	subwf	(_i2c_status^(0+256)+4),f
 21365  1E66  3000               	movlw	0
 21366  1E67  3BA5               	subwfb	((_i2c_status+1)^(0+256)+4),f
 21367  1E68  0824               	movf	(_i2c_status^(0+256)+4),w
 21368  1E69  0425               	iorwf	((_i2c_status+1)^(0+256)+4),w
 21369  1E6A  1D03               	btfss	3,2
 21370  1E6B  2E6E               	goto	l7698
 21371  1E6C  3006               	movlw	6
 21372  1E6D  2E6F               	goto	L42
 21373  1E6E                     l7698:	
 21374  1E6E  3003               	movlw	3
 21375  1E6F                     L42:	
 21376  1E6F  0020               	movlb	0	; select bank0
 21377  1E70  00B4               	movwf	_do_I2C_TX$1204
 21378  1E71  3000               	movlw	0
 21379  1E72  00B5               	movwf	_do_I2C_TX$1204+1
 21380  1E73  0834               	movf	_do_I2C_TX$1204,w
 21381  1E74  0008               	return
 21382  1E75                     __end_of_do_I2C_TX:	
 21383                           
 21384                           	psect	text83
 21385  25BE                     __ptext83:	
 21386 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 21387 ;; Defined at:
 21388 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 21389 ;; Parameters:    Size  Location     Type
 21390 ;;		None
 21391 ;; Auto vars:     Size  Location     Type
 21392 ;;		None
 21393 ;; Return value:  Size  Location     Type
 21394 ;;                  1    wreg      enum E8364
 21395 ;; Registers used:
 21396 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21397 ;; Tracked objects:
 21398 ;;		On entry : 0/0
 21399 ;;		On exit  : 0/0
 21400 ;;		Unchanged: 0/0
 21401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21404 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21406 ;;Total ram usage:        1 bytes
 21407 ;; Hardware stack levels used:    1
 21408 ;; Hardware stack levels required when called:    8
 21409 ;; This function calls:
 21410 ;;		_do_I2C_SEND_RESTART
 21411 ;;		_do_I2C_SEND_STOP
 21412 ;;		_returnReset
 21413 ;;		_returnStop
 21414 ;; This function is called by:
 21415 ;;		_i2c_ISR
 21416 ;;		i1_i2c_ISR
 21417 ;; This function uses a non-reentrant model
 21418 ;;
 21419                           
 21420                           
 21421                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 21422  25BE                     _do_I2C_DO_ADDRESS_NACK:	
 21423                           
 21424                           ;Skip over the trampoline to the duplicate function for level 1
 21425  25BE  1C7E               	btfss	126,0
 21426  25BF  2DC2               	goto	l7656
 21427  25C0  31A4  2C3B         	ljmp	i1l8956
 21428  25C2                     _do_I2C_DO_ADDRESS_NACK$intlevel0:	
 21429  25C2                     l7656:	
 21430                           ;incstack = 0
 21431                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21432                           
 21433                           
 21434                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
 21435  25C2  0022               	movlb	2	; select bank2
 21436  25C3  11A0               	bcf	_i2c_status^(0+256),3
 21437                           
 21438                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
 21439  25C4  3002               	movlw	2
 21440  25C5  0020               	movlb	0	; select bank0
 21441  25C6  00B1               	movwf	??_do_I2C_DO_ADDRESS_NACK
 21442  25C7  0831               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 21443  25C8  0022               	movlb	2	; select bank2
 21444  25C9  00AB               	movwf	(_i2c_status^(0+256)+11)
 21445                           
 21446                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
 21447  25CA  2DD1               	goto	l7670
 21448  25CB                     l7660:	
 21449                           ;i2c_master.c: 324: {
 21450                           ;i2c_master.c: 325: case i2c_restart_read:
 21451                           
 21452                           
 21453                           ;i2c_master.c: 326: case i2c_restart_write:
 21454                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
 21455  25CB  31A0  2052         	fcall	_do_I2C_SEND_RESTART
 21456  25CD  0008               	return
 21457  25CE                     l7664:	
 21458                           ;i2c_master.c: 328: default:
 21459                           
 21460                           
 21461                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
 21462  25CE  31A0  205A         	fcall	_do_I2C_SEND_STOP
 21463                           
 21464                           ;i2c_master.c: 330: }
 21465  25D0  0008               	return
 21466  25D1                     l7670:	
 21467  25D1  0022               	movlb	2	; select bank2
 21468  25D2  083A               	movf	(low ((_i2c_status| (0+256)+26)))^0,w
 21469  25D3  0020               	movlb	0	; select bank0
 21470  25D4  00B1               	movwf	??_do_I2C_DO_ADDRESS_NACK
 21471  25D5  0831               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 21472  25D6  00B1               	movwf	returnReset@p
 21473  25D7  3010               	movlw	16
 21474  25D8  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 21475  25D9  0086               	movwf	6
 21476  25DA  3001               	movlw	1	; select bank2/3
 21477  25DB  0087               	movwf	7
 21478  25DC  3F41               	moviw [1]fsr1
 21479  25DD  008A               	movwf	10
 21480  25DE  3F40               	moviw [0]fsr1
 21481  25DF  000A               	callw
 21482  25E0  31A5               	pagesel	$
 21483                           
 21484                           ; Switch size 1, requested type "space"
 21485                           ; Number of cases is 2, Range of values is 2 to 3
 21486                           ; switch strategies available:
 21487                           ; Name         Instructions Cycles
 21488                           ; simple_byte            7     4 (average)
 21489                           ; direct_byte           13     9 (fixed)
 21490                           ; jumptable            263     9 (fixed)
 21491                           ;	Chosen strategy is simple_byte
 21492  25E1  3A02               	xorlw	2	; case 2
 21493  25E2  1903               	skipnz
 21494  25E3  2DCB               	goto	l7660
 21495  25E4  3A01               	xorlw	1	; case 3
 21496  25E5  1903               	skipnz
 21497  25E6  2DCB               	goto	l7660
 21498  25E7  2DCE               	goto	l7664
 21499  25E8  0008               	return
 21500  25E9                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 21501                           
 21502                           	psect	text84
 21503  2072                     __ptext84:	
 21504 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 21505 ;; Defined at:
 21506 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 21507 ;; Parameters:    Size  Location     Type
 21508 ;;		None
 21509 ;; Auto vars:     Size  Location     Type
 21510 ;;		None
 21511 ;; Return value:  Size  Location     Type
 21512 ;;                  1    wreg      enum E8364
 21513 ;; Registers used:
 21514 ;;		wreg, status,2, status,0, pclath, cstack
 21515 ;; Tracked objects:
 21516 ;;		On entry : 0/0
 21517 ;;		On exit  : 0/0
 21518 ;;		Unchanged: 0/0
 21519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21524 ;;Total ram usage:        0 bytes
 21525 ;; Hardware stack levels used:    1
 21526 ;; Hardware stack levels required when called:    7
 21527 ;; This function calls:
 21528 ;;		_i2c1_driver_sendNACK
 21529 ;; This function is called by:
 21530 ;;		_do_I2C_RX
 21531 ;;		_i2c_ISR
 21532 ;;		i1_i2c_ISR
 21533 ;; This function uses a non-reentrant model
 21534 ;;
 21535                           
 21536                           
 21537                           ;psect for function _do_I2C_DO_NACK_RESTART
 21538  2072                     _do_I2C_DO_NACK_RESTART:	
 21539                           
 21540                           ;Skip over the trampoline to the duplicate function for level 1
 21541  2072  1C7E               	btfss	126,0
 21542  2073  2876               	goto	l7574
 21543  2074  31AF  2F9B         	ljmp	i1l8536
 21544  2076                     _do_I2C_DO_NACK_RESTART$intlevel0:	
 21545  2076                     l7574:	
 21546                           ;incstack = 0
 21547                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 21548                           
 21549                           
 21550                           ;i2c_master.c: 313: i2c1_driver_sendNACK();
 21551  2076  31AF  27A7         	fcall	_i2c1_driver_sendNACK
 21552                           
 21553                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
 21554  2078  3009               	movlw	9
 21555  2079  0008               	return
 21556  207A                     __end_of_do_I2C_DO_NACK_RESTART:	
 21557                           
 21558                           	psect	text85
 21559  206A                     __ptext85:	
 21560 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 21561 ;; Defined at:
 21562 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 21563 ;; Parameters:    Size  Location     Type
 21564 ;;		None
 21565 ;; Auto vars:     Size  Location     Type
 21566 ;;		None
 21567 ;; Return value:  Size  Location     Type
 21568 ;;                  1    wreg      enum E8364
 21569 ;; Registers used:
 21570 ;;		wreg, status,2, status,0, pclath, cstack
 21571 ;; Tracked objects:
 21572 ;;		On entry : 0/0
 21573 ;;		On exit  : 0/0
 21574 ;;		Unchanged: 0/0
 21575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21580 ;;Total ram usage:        0 bytes
 21581 ;; Hardware stack levels used:    1
 21582 ;; Hardware stack levels required when called:    7
 21583 ;; This function calls:
 21584 ;;		_i2c1_driver_sendNACK
 21585 ;; This function is called by:
 21586 ;;		_do_I2C_RX
 21587 ;;		_i2c_ISR
 21588 ;;		i1_i2c_ISR
 21589 ;; This function uses a non-reentrant model
 21590 ;;
 21591                           
 21592                           
 21593                           ;psect for function _do_I2C_DO_NACK_STOP
 21594  206A                     _do_I2C_DO_NACK_STOP:	
 21595                           
 21596                           ;Skip over the trampoline to the duplicate function for level 1
 21597  206A  1C7E               	btfss	126,0
 21598  206B  286E               	goto	l7568
 21599  206C  31AF  2F97         	ljmp	i1l8530
 21600  206E                     _do_I2C_DO_NACK_STOP$intlevel0:	
 21601  206E                     l7568:	
 21602                           ;incstack = 0
 21603                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 21604                           
 21605                           
 21606                           ;i2c_master.c: 307: i2c1_driver_sendNACK();
 21607  206E  31AF  27A7         	fcall	_i2c1_driver_sendNACK
 21608                           
 21609                           ;i2c_master.c: 308: return I2C_SEND_STOP;
 21610  2070  300A               	movlw	10
 21611  2071  0008               	return
 21612  2072                     __end_of_do_I2C_DO_NACK_STOP:	
 21613                           
 21614                           	psect	text86
 21615  2062                     __ptext86:	
 21616 ;; *************** function _do_I2C_DO_ACK *****************
 21617 ;; Defined at:
 21618 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 21619 ;; Parameters:    Size  Location     Type
 21620 ;;		None
 21621 ;; Auto vars:     Size  Location     Type
 21622 ;;		None
 21623 ;; Return value:  Size  Location     Type
 21624 ;;                  1    wreg      enum E8364
 21625 ;; Registers used:
 21626 ;;		wreg, status,2, status,0, pclath, cstack
 21627 ;; Tracked objects:
 21628 ;;		On entry : 0/0
 21629 ;;		On exit  : 0/0
 21630 ;;		Unchanged: 0/0
 21631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21636 ;;Total ram usage:        0 bytes
 21637 ;; Hardware stack levels used:    1
 21638 ;; Hardware stack levels required when called:    7
 21639 ;; This function calls:
 21640 ;;		_i2c1_driver_sendACK
 21641 ;; This function is called by:
 21642 ;;		_i2c_ISR
 21643 ;;		i1_i2c_ISR
 21644 ;; This function uses a non-reentrant model
 21645 ;;
 21646                           
 21647                           
 21648                           ;psect for function _do_I2C_DO_ACK
 21649  2062                     _do_I2C_DO_ACK:	
 21650                           
 21651                           ;Skip over the trampoline to the duplicate function for level 1
 21652  2062  1C7E               	btfss	126,0
 21653  2063  2866               	goto	l7650
 21654  2064  31AF  2F93         	ljmp	i1l8950
 21655  2066                     _do_I2C_DO_ACK$intlevel0:	
 21656  2066                     l7650:	
 21657                           ;incstack = 0
 21658                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 21659                           
 21660                           
 21661                           ;i2c_master.c: 301: i2c1_driver_sendACK();
 21662  2066  31AF  27A3         	fcall	_i2c1_driver_sendACK
 21663                           
 21664                           ;i2c_master.c: 302: return I2C_RCEN;
 21665  2068  3005               	movlw	5
 21666  2069  0008               	return
 21667  206A                     __end_of_do_I2C_DO_ACK:	
 21668                           
 21669                           	psect	text87
 21670  20DE                     __ptext87:	
 21671 ;; *************** function _do_I2C_RCEN *****************
 21672 ;; Defined at:
 21673 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 21674 ;; Parameters:    Size  Location     Type
 21675 ;;		None
 21676 ;; Auto vars:     Size  Location     Type
 21677 ;;		None
 21678 ;; Return value:  Size  Location     Type
 21679 ;;                  1    wreg      enum E8364
 21680 ;; Registers used:
 21681 ;;		wreg, status,2, status,0, pclath, cstack
 21682 ;; Tracked objects:
 21683 ;;		On entry : 0/0
 21684 ;;		On exit  : 0/0
 21685 ;;		Unchanged: 0/0
 21686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21691 ;;Total ram usage:        0 bytes
 21692 ;; Hardware stack levels used:    1
 21693 ;; Hardware stack levels required when called:    7
 21694 ;; This function calls:
 21695 ;;		_i2c1_driver_startRX
 21696 ;; This function is called by:
 21697 ;;		_i2c_ISR
 21698 ;;		i1_i2c_ISR
 21699 ;; This function uses a non-reentrant model
 21700 ;;
 21701                           
 21702                           
 21703                           ;psect for function _do_I2C_RCEN
 21704  20DE                     _do_I2C_RCEN:	
 21705                           
 21706                           ;Skip over the trampoline to the duplicate function for level 1
 21707  20DE  1C7E               	btfss	126,0
 21708  20DF  28E2               	goto	l7642
 21709  20E0  31AF  2FCE         	ljmp	i1l6794
 21710  20E2                     _do_I2C_RCEN$intlevel0:	
 21711  20E2                     l7642:	
 21712                           ;incstack = 0
 21713                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 21714                           
 21715                           
 21716                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
 21717  20E2  0022               	movlb	2	; select bank2
 21718  20E3  11A0               	bcf	_i2c_status^(0+256),3
 21719                           
 21720                           ;i2c_master.c: 295: i2c1_driver_startRX();
 21721  20E4  31AF  276F         	fcall	_i2c1_driver_startRX
 21722                           
 21723                           ;i2c_master.c: 296: return I2C_RX;
 21724  20E6  3004               	movlw	4
 21725  20E7  0008               	return
 21726  20E8                     __end_of_do_I2C_RCEN:	
 21727                           
 21728                           	psect	text88
 21729  2111                     __ptext88:	
 21730 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 21731 ;; Defined at:
 21732 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 21733 ;; Parameters:    Size  Location     Type
 21734 ;;		None
 21735 ;; Auto vars:     Size  Location     Type
 21736 ;;		None
 21737 ;; Return value:  Size  Location     Type
 21738 ;;                  1    wreg      enum E8364
 21739 ;; Registers used:
 21740 ;;		wreg, status,2, status,0, pclath, cstack
 21741 ;; Tracked objects:
 21742 ;;		On entry : 0/0
 21743 ;;		On exit  : 0/0
 21744 ;;		Unchanged: 0/0
 21745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21750 ;;Total ram usage:        0 bytes
 21751 ;; Hardware stack levels used:    1
 21752 ;; Hardware stack levels required when called:    7
 21753 ;; This function calls:
 21754 ;;		_i2c1_driver_TXData
 21755 ;; This function is called by:
 21756 ;;		_i2c_ISR
 21757 ;;		i1_i2c_ISR
 21758 ;; This function uses a non-reentrant model
 21759 ;;
 21760                           
 21761                           
 21762                           ;psect for function _do_I2C_SEND_ADR_WRITE
 21763  2111                     _do_I2C_SEND_ADR_WRITE:	
 21764                           
 21765                           ;Skip over the trampoline to the duplicate function for level 1
 21766  2111  1C7E               	btfss	126,0
 21767  2112  2915               	goto	l7634
 21768  2113  31AF  2FF9         	ljmp	i1l8942
 21769  2115                     _do_I2C_SEND_ADR_WRITE$intlevel0:	
 21770  2115                     l7634:	
 21771                           ;incstack = 0
 21772                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 21773                           
 21774                           
 21775                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
 21776  2115  0022               	movlb	2	; select bank2
 21777  2116  15A0               	bsf	_i2c_status^(0+256),3
 21778                           
 21779                           ;i2c_master.c: 288: i2c1_driver_TXData(i2c_status.address << 1);
 21780  2117  3521               	lslf	(_i2c_status^(0+256)+1),w
 21781  2118  31AF  27E0         	fcall	_i2c1_driver_TXData
 21782                           
 21783                           ;i2c_master.c: 289: return I2C_TX;
 21784  211A  3003               	movlw	3
 21785  211B  0008               	return
 21786  211C                     __end_of_do_I2C_SEND_ADR_WRITE:	
 21787                           
 21788                           	psect	text89
 21789  213E                     __ptext89:	
 21790 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 21791 ;; Defined at:
 21792 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 21793 ;; Parameters:    Size  Location     Type
 21794 ;;		None
 21795 ;; Auto vars:     Size  Location     Type
 21796 ;;		None
 21797 ;; Return value:  Size  Location     Type
 21798 ;;                  1    wreg      enum E8364
 21799 ;; Registers used:
 21800 ;;		wreg, status,2, status,0, pclath, cstack
 21801 ;; Tracked objects:
 21802 ;;		On entry : 0/0
 21803 ;;		On exit  : 0/0
 21804 ;;		Unchanged: 0/0
 21805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21810 ;;Total ram usage:        0 bytes
 21811 ;; Hardware stack levels used:    1
 21812 ;; Hardware stack levels required when called:    7
 21813 ;; This function calls:
 21814 ;;		_i2c1_driver_TXData
 21815 ;; This function is called by:
 21816 ;;		_i2c_ISR
 21817 ;;		i1_i2c_ISR
 21818 ;; This function uses a non-reentrant model
 21819 ;;
 21820                           
 21821                           
 21822                           ;psect for function _do_I2C_SEND_ADR_READ
 21823  213E                     _do_I2C_SEND_ADR_READ:	
 21824                           
 21825                           ;Skip over the trampoline to the duplicate function for level 1
 21826  213E  1C7E               	btfss	126,0
 21827  213F  2942               	goto	l7626
 21828  2140  31A0  2832         	ljmp	i1l8934
 21829  2142                     _do_I2C_SEND_ADR_READ$intlevel0:	
 21830  2142                     l7626:	
 21831                           ;incstack = 0
 21832                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 21833                           
 21834                           
 21835                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
 21836  2142  0022               	movlb	2	; select bank2
 21837  2143  15A0               	bsf	_i2c_status^(0+256),3
 21838                           
 21839                           ;i2c_master.c: 281: i2c1_driver_TXData(i2c_status.address << 1 | 1);
 21840  2144  1403               	setc
 21841  2145  0D21               	rlf	(_i2c_status^(0+256)+1),w
 21842  2146  31AF  27E0         	fcall	_i2c1_driver_TXData
 21843                           
 21844                           ;i2c_master.c: 282: return I2C_RCEN;
 21845  2148  3005               	movlw	5
 21846  2149  0008               	return
 21847  214A                     __end_of_do_I2C_SEND_ADR_READ:	
 21848                           
 21849                           	psect	text90
 21850  205A                     __ptext90:	
 21851 ;; *************** function _do_I2C_SEND_STOP *****************
 21852 ;; Defined at:
 21853 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 21854 ;; Parameters:    Size  Location     Type
 21855 ;;		None
 21856 ;; Auto vars:     Size  Location     Type
 21857 ;;		None
 21858 ;; Return value:  Size  Location     Type
 21859 ;;                  1    wreg      enum E8364
 21860 ;; Registers used:
 21861 ;;		wreg, status,2, status,0, pclath, cstack
 21862 ;; Tracked objects:
 21863 ;;		On entry : 0/0
 21864 ;;		On exit  : 0/0
 21865 ;;		Unchanged: 0/0
 21866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21871 ;;Total ram usage:        0 bytes
 21872 ;; Hardware stack levels used:    1
 21873 ;; Hardware stack levels required when called:    7
 21874 ;; This function calls:
 21875 ;;		_i2c1_driver_stop
 21876 ;; This function is called by:
 21877 ;;		_do_I2C_DO_ADDRESS_NACK
 21878 ;;		_do_I2C_TX
 21879 ;;		_do_I2C_TX_EMPTY
 21880 ;;		_i2c_ISR
 21881 ;;		i1_i2c_ISR
 21882 ;; This function uses a non-reentrant model
 21883 ;;
 21884                           
 21885                           
 21886                           ;psect for function _do_I2C_SEND_STOP
 21887  205A                     _do_I2C_SEND_STOP:	
 21888                           
 21889                           ;Skip over the trampoline to the duplicate function for level 1
 21890  205A  1C7E               	btfss	126,0
 21891  205B  285E               	goto	l7562
 21892  205C  31AF  2F8F         	ljmp	i1l8524
 21893  205E                     _do_I2C_SEND_STOP$intlevel0:	
 21894  205E                     l7562:	
 21895                           ;incstack = 0
 21896                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 21897                           
 21898                           
 21899                           ;i2c_master.c: 274: i2c1_driver_stop();
 21900  205E  31AF  276C         	fcall	_i2c1_driver_stop
 21901                           
 21902                           ;i2c_master.c: 275: return I2C_IDLE;
 21903  2060  3000               	movlw	0
 21904  2061  0008               	return
 21905  2062                     __end_of_do_I2C_SEND_STOP:	
 21906                           
 21907                           	psect	text91
 21908  2052                     __ptext91:	
 21909 ;; *************** function _do_I2C_SEND_RESTART *****************
 21910 ;; Defined at:
 21911 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 21912 ;; Parameters:    Size  Location     Type
 21913 ;;		None
 21914 ;; Auto vars:     Size  Location     Type
 21915 ;;		None
 21916 ;; Return value:  Size  Location     Type
 21917 ;;                  1    wreg      enum E8364
 21918 ;; Registers used:
 21919 ;;		wreg, status,2, status,0, pclath, cstack
 21920 ;; Tracked objects:
 21921 ;;		On entry : 0/0
 21922 ;;		On exit  : 0/0
 21923 ;;		Unchanged: 0/0
 21924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21929 ;;Total ram usage:        0 bytes
 21930 ;; Hardware stack levels used:    1
 21931 ;; Hardware stack levels required when called:    7
 21932 ;; This function calls:
 21933 ;;		_i2c1_driver_restart
 21934 ;; This function is called by:
 21935 ;;		_do_I2C_DO_ADDRESS_NACK
 21936 ;;		_do_I2C_TX_EMPTY
 21937 ;;		_i2c_ISR
 21938 ;;		i1_i2c_ISR
 21939 ;; This function uses a non-reentrant model
 21940 ;;
 21941                           
 21942                           
 21943                           ;psect for function _do_I2C_SEND_RESTART
 21944  2052                     _do_I2C_SEND_RESTART:	
 21945                           
 21946                           ;Skip over the trampoline to the duplicate function for level 1
 21947  2052  1C7E               	btfss	126,0
 21948  2053  2856               	goto	l7556
 21949  2054  31AF  2F8B         	ljmp	i1l8518
 21950  2056                     _do_I2C_SEND_RESTART$intlevel0:	
 21951  2056                     l7556:	
 21952                           ;incstack = 0
 21953                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 21954                           
 21955                           
 21956                           ;i2c_master.c: 268: i2c1_driver_restart();
 21957  2056  31AF  2769         	fcall	_i2c1_driver_restart
 21958                           
 21959                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
 21960  2058  3001               	movlw	1
 21961  2059  0008               	return
 21962  205A                     __end_of_do_I2C_SEND_RESTART:	
 21963                           
 21964                           	psect	text92
 21965  204A                     __ptext92:	
 21966 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 21967 ;; Defined at:
 21968 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 21969 ;; Parameters:    Size  Location     Type
 21970 ;;		None
 21971 ;; Auto vars:     Size  Location     Type
 21972 ;;		None
 21973 ;; Return value:  Size  Location     Type
 21974 ;;                  1    wreg      enum E8364
 21975 ;; Registers used:
 21976 ;;		wreg, status,2, status,0, pclath, cstack
 21977 ;; Tracked objects:
 21978 ;;		On entry : 0/0
 21979 ;;		On exit  : 0/0
 21980 ;;		Unchanged: 0/0
 21981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21986 ;;Total ram usage:        0 bytes
 21987 ;; Hardware stack levels used:    1
 21988 ;; Hardware stack levels required when called:    7
 21989 ;; This function calls:
 21990 ;;		_i2c1_driver_restart
 21991 ;; This function is called by:
 21992 ;;		_do_I2C_TX
 21993 ;;		_i2c_ISR
 21994 ;;		i1_i2c_ISR
 21995 ;; This function uses a non-reentrant model
 21996 ;;
 21997                           
 21998                           
 21999                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 22000  204A                     _do_I2C_SEND_RESTART_WRITE:	
 22001                           
 22002                           ;Skip over the trampoline to the duplicate function for level 1
 22003  204A  1C7E               	btfss	126,0
 22004  204B  284E               	goto	l7550
 22005  204C  31AF  2F87         	ljmp	i1l8512
 22006  204E                     _do_I2C_SEND_RESTART_WRITE$intlevel0:	
 22007  204E                     l7550:	
 22008                           ;incstack = 0
 22009                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 22010                           
 22011                           
 22012                           ;i2c_master.c: 262: i2c1_driver_restart();
 22013  204E  31AF  2769         	fcall	_i2c1_driver_restart
 22014                           
 22015                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
 22016  2050  3002               	movlw	2
 22017  2051  0008               	return
 22018  2052                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 22019                           
 22020                           	psect	text93
 22021  2042                     __ptext93:	
 22022 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 22023 ;; Defined at:
 22024 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 22025 ;; Parameters:    Size  Location     Type
 22026 ;;		None
 22027 ;; Auto vars:     Size  Location     Type
 22028 ;;		None
 22029 ;; Return value:  Size  Location     Type
 22030 ;;                  1    wreg      enum E8364
 22031 ;; Registers used:
 22032 ;;		wreg, status,2, status,0, pclath, cstack
 22033 ;; Tracked objects:
 22034 ;;		On entry : 0/0
 22035 ;;		On exit  : 0/0
 22036 ;;		Unchanged: 0/0
 22037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22042 ;;Total ram usage:        0 bytes
 22043 ;; Hardware stack levels used:    1
 22044 ;; Hardware stack levels required when called:    7
 22045 ;; This function calls:
 22046 ;;		_i2c1_driver_restart
 22047 ;; This function is called by:
 22048 ;;		_do_I2C_TX
 22049 ;;		_i2c_ISR
 22050 ;;		i1_i2c_ISR
 22051 ;; This function uses a non-reentrant model
 22052 ;;
 22053                           
 22054                           
 22055                           ;psect for function _do_I2C_SEND_RESTART_READ
 22056  2042                     _do_I2C_SEND_RESTART_READ:	
 22057                           
 22058                           ;Skip over the trampoline to the duplicate function for level 1
 22059  2042  1C7E               	btfss	126,0
 22060  2043  2846               	goto	l7544
 22061  2044  31AF  2F83         	ljmp	i1l8506
 22062  2046                     _do_I2C_SEND_RESTART_READ$intlevel0:	
 22063  2046                     l7544:	
 22064                           ;incstack = 0
 22065                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 22066                           
 22067                           
 22068                           ;i2c_master.c: 256: i2c1_driver_restart();
 22069  2046  31AF  2769         	fcall	_i2c1_driver_restart
 22070                           
 22071                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
 22072  2048  3001               	movlw	1
 22073  2049  0008               	return
 22074  204A                     __end_of_do_I2C_SEND_RESTART_READ:	
 22075                           
 22076                           	psect	text94
 22077  20A6                     __ptext94:	
 22078 ;; *************** function _do_I2C_IDLE *****************
 22079 ;; Defined at:
 22080 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 22081 ;; Parameters:    Size  Location     Type
 22082 ;;		None
 22083 ;; Auto vars:     Size  Location     Type
 22084 ;;		None
 22085 ;; Return value:  Size  Location     Type
 22086 ;;                  1    wreg      enum E8364
 22087 ;; Registers used:
 22088 ;;		wreg, status,2
 22089 ;; Tracked objects:
 22090 ;;		On entry : 0/0
 22091 ;;		On exit  : 0/0
 22092 ;;		Unchanged: 0/0
 22093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22098 ;;Total ram usage:        0 bytes
 22099 ;; Hardware stack levels used:    1
 22100 ;; Hardware stack levels required when called:    6
 22101 ;; This function calls:
 22102 ;;		Nothing
 22103 ;; This function is called by:
 22104 ;;		_i2c_ISR
 22105 ;;		i1_i2c_ISR
 22106 ;; This function uses a non-reentrant model
 22107 ;;
 22108                           
 22109                           
 22110                           ;psect for function _do_I2C_IDLE
 22111  20A6                     _do_I2C_IDLE:	
 22112                           
 22113                           ;Skip over the trampoline to the duplicate function for level 1
 22114  20A6  1C7E               	btfss	126,0
 22115  20A7  28AA               	goto	l7618
 22116  20A8  31AF  2FBF         	ljmp	i1l6770
 22117  20AA                     _do_I2C_IDLE$intlevel0:	
 22118  20AA                     l7618:	
 22119                           ;incstack = 0
 22120                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 22121                           
 22122                           
 22123                           ;i2c_master.c: 249: i2c_status.busy = 0;
 22124  20AA  0022               	movlb	2	; select bank2
 22125  20AB  1020               	bcf	_i2c_status^(0+256),0
 22126                           
 22127                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 22128  20AC  01AB               	clrf	(_i2c_status^(0+256)+11)
 22129                           
 22130                           ;i2c_master.c: 251: return I2C_RESET;
 22131  20AD  300E               	movlw	14
 22132  20AE  0008               	return
 22133  20AF                     __end_of_do_I2C_IDLE:	
 22134                           
 22135                           	psect	text95
 22136  2106                     __ptext95:	
 22137 ;; *************** function _do_I2C_RESET *****************
 22138 ;; Defined at:
 22139 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 22140 ;; Parameters:    Size  Location     Type
 22141 ;;		None
 22142 ;; Auto vars:     Size  Location     Type
 22143 ;;		None
 22144 ;; Return value:  Size  Location     Type
 22145 ;;                  1    wreg      enum E8364
 22146 ;; Registers used:
 22147 ;;		wreg, status,2, status,0, pclath, cstack
 22148 ;; Tracked objects:
 22149 ;;		On entry : 0/0
 22150 ;;		On exit  : 0/0
 22151 ;;		Unchanged: 0/0
 22152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22157 ;;Total ram usage:        0 bytes
 22158 ;; Hardware stack levels used:    1
 22159 ;; Hardware stack levels required when called:    7
 22160 ;; This function calls:
 22161 ;;		_i2c1_driver_resetBus
 22162 ;; This function is called by:
 22163 ;;		_i2c_ISR
 22164 ;;		i1_i2c_ISR
 22165 ;; This function uses a non-reentrant model
 22166 ;;
 22167                           
 22168                           
 22169                           ;psect for function _do_I2C_RESET
 22170  2106                     _do_I2C_RESET:	
 22171                           
 22172                           ;Skip over the trampoline to the duplicate function for level 1
 22173  2106  1C7E               	btfss	126,0
 22174  2107  290A               	goto	l7608
 22175  2108  31AF  2FF2         	ljmp	i1l6760
 22176  210A                     _do_I2C_RESET$intlevel0:	
 22177  210A                     l7608:	
 22178                           ;incstack = 0
 22179                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 22180                           
 22181                           
 22182                           ;i2c_master.c: 241: i2c1_driver_resetBus();
 22183  210A  31AF  2737         	fcall	_i2c1_driver_resetBus
 22184                           
 22185                           ;i2c_master.c: 242: i2c_status.busy = 0;
 22186  210C  0022               	movlb	2	; select bank2
 22187  210D  1020               	bcf	_i2c_status^(0+256),0
 22188                           
 22189                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 22190  210E  01AB               	clrf	(_i2c_status^(0+256)+11)
 22191                           
 22192                           ;i2c_master.c: 244: return I2C_RESET;
 22193  210F  300E               	movlw	14
 22194  2110  0008               	return
 22195  2111                     __end_of_do_I2C_RESET:	
 22196                           
 22197                           	psect	text96
 22198  0800                     __ptext96:	
 22199 ;; *************** function _do_I2C_TX_EMPTY *****************
 22200 ;; Defined at:
 22201 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 22202 ;; Parameters:    Size  Location     Type
 22203 ;;		None
 22204 ;; Auto vars:     Size  Location     Type
 22205 ;;		None
 22206 ;; Return value:  Size  Location     Type
 22207 ;;                  1    wreg      enum E8364
 22208 ;; Registers used:
 22209 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22210 ;; Tracked objects:
 22211 ;;		On entry : 0/0
 22212 ;;		On exit  : 0/0
 22213 ;;		Unchanged: 0/0
 22214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22218 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22219 ;;Total ram usage:        1 bytes
 22220 ;; Hardware stack levels used:    1
 22221 ;; Hardware stack levels required when called:    8
 22222 ;; This function calls:
 22223 ;;		_do_I2C_SEND_RESTART
 22224 ;;		_do_I2C_SEND_STOP
 22225 ;;		_mssp1_setIRQ
 22226 ;;		_returnReset
 22227 ;;		_returnStop
 22228 ;; This function is called by:
 22229 ;;		_i2c_ISR
 22230 ;;		i1_i2c_ISR
 22231 ;; This function uses a non-reentrant model
 22232 ;;
 22233                           
 22234                           
 22235                           ;psect for function _do_I2C_TX_EMPTY
 22236  0800                     _do_I2C_TX_EMPTY:	
 22237                           
 22238                           ;Skip over the trampoline to the duplicate function for level 1
 22239  0800  1C7E               	btfss	126,0
 22240  0801  2804               	goto	l7728
 22241  0802  31A5  2D94         	ljmp	i1l9028
 22242  0804                     _do_I2C_TX_EMPTY$intlevel0:	
 22243  0804                     l7728:	
 22244                           ;incstack = 0
 22245                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22246                           
 22247                           
 22248                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 22249  0804  0022               	movlb	2	; select bank2
 22250  0805  1520               	bsf	_i2c_status^(0+256),2
 22251                           
 22252                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 22253  0806  2811               	goto	l7746
 22254  0807                     l7730:	
 22255                           ;i2c_master.c: 386: {
 22256                           ;i2c_master.c: 387: case i2c_restart_read:
 22257                           
 22258                           
 22259                           ;i2c_master.c: 388: case i2c_restart_write:
 22260                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 22261  0807  31A0  2052         	fcall	_do_I2C_SEND_RESTART
 22262  0809  0008               	return
 22263  080A                     l7734:	
 22264                           ;i2c_master.c: 390: case i2c_continue:
 22265                           
 22266                           
 22267                           ;i2c_master.c: 391: mssp1_setIRQ();
 22268  080A  31AF  2775         	fcall	_mssp1_setIRQ
 22269                           
 22270                           ;i2c_master.c: 392: return I2C_TX;
 22271  080C  3003               	movlw	3
 22272  080D  0008               	return
 22273  080E                     l7740:	
 22274                           ;i2c_master.c: 394: case i2c_stop:
 22275                           
 22276                           ;i2c_master.c: 393: default:
 22277                           
 22278                           
 22279                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 22280  080E  31A0  205A         	fcall	_do_I2C_SEND_STOP
 22281                           
 22282                           ;i2c_master.c: 396: }
 22283  0810  0008               	return
 22284  0811                     l7746:	
 22285  0811  0022               	movlb	2	; select bank2
 22286  0812  0838               	movf	(low ((_i2c_status| (0+256)+24)))^0,w
 22287  0813  0020               	movlb	0	; select bank0
 22288  0814  00B1               	movwf	??_do_I2C_TX_EMPTY
 22289  0815  0831               	movf	??_do_I2C_TX_EMPTY,w
 22290  0816  00B1               	movwf	returnReset@p
 22291  0817  300C               	movlw	12
 22292  0818  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 22293  0819  0086               	movwf	6
 22294  081A  3001               	movlw	1	; select bank2/3
 22295  081B  0087               	movwf	7
 22296  081C  3F41               	moviw [1]fsr1
 22297  081D  008A               	movwf	10
 22298  081E  3F40               	moviw [0]fsr1
 22299  081F  000A               	callw
 22300  0820  3188               	pagesel	$
 22301                           
 22302                           ; Switch size 1, requested type "space"
 22303                           ; Number of cases is 4, Range of values is 1 to 4
 22304                           ; switch strategies available:
 22305                           ; Name         Instructions Cycles
 22306                           ; simple_byte           13     7 (average)
 22307                           ; direct_byte           17     9 (fixed)
 22308                           ; jumptable            263     9 (fixed)
 22309                           ;	Chosen strategy is simple_byte
 22310  0821  3A01               	xorlw	1	; case 1
 22311  0822  1903               	skipnz
 22312  0823  280E               	goto	l7740
 22313  0824  3A03               	xorlw	3	; case 2
 22314  0825  1903               	skipnz
 22315  0826  2807               	goto	l7730
 22316  0827  3A01               	xorlw	1	; case 3
 22317  0828  1903               	skipnz
 22318  0829  2807               	goto	l7730
 22319  082A  3A07               	xorlw	7	; case 4
 22320  082B  1903               	skipnz
 22321  082C  280A               	goto	l7734
 22322  082D  280E               	goto	l7740
 22323  082E  0008               	return
 22324  082F                     __end_of_do_I2C_TX_EMPTY:	
 22325                           
 22326                           	psect	text97
 22327  2F75                     __ptext97:	
 22328 ;; *************** function _mssp1_setIRQ *****************
 22329 ;; Defined at:
 22330 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 22331 ;; Parameters:    Size  Location     Type
 22332 ;;		None
 22333 ;; Auto vars:     Size  Location     Type
 22334 ;;		None
 22335 ;; Return value:  Size  Location     Type
 22336 ;;                  1    wreg      void 
 22337 ;; Registers used:
 22338 ;;		None
 22339 ;; Tracked objects:
 22340 ;;		On entry : 0/0
 22341 ;;		On exit  : 0/0
 22342 ;;		Unchanged: 0/0
 22343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22348 ;;Total ram usage:        0 bytes
 22349 ;; Hardware stack levels used:    1
 22350 ;; Hardware stack levels required when called:    6
 22351 ;; This function calls:
 22352 ;;		Nothing
 22353 ;; This function is called by:
 22354 ;;		_do_I2C_TX_EMPTY
 22355 ;; This function uses a non-reentrant model
 22356 ;;
 22357                           
 22358                           
 22359                           ;psect for function _mssp1_setIRQ
 22360  2F75                     _mssp1_setIRQ:	
 22361                           
 22362                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
 22363                           
 22364                           ;incstack = 0
 22365                           ; Regs used in _mssp1_setIRQ: []
 22366  2F75  0020               	movlb	0	; select bank0
 22367  2F76  1591               	bsf	17,3	;volatile
 22368  2F77  0008               	return
 22369  2F78                     __end_of_mssp1_setIRQ:	
 22370                           
 22371                           	psect	text98
 22372  2189                     __ptext98:	
 22373 ;; *************** function _i2c1_driver_isNACK *****************
 22374 ;; Defined at:
 22375 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 22376 ;; Parameters:    Size  Location     Type
 22377 ;;		None
 22378 ;; Auto vars:     Size  Location     Type
 22379 ;;		None
 22380 ;; Return value:  Size  Location     Type
 22381 ;;		None               void
 22382 ;; Registers used:
 22383 ;;		wreg, status,2, status,0
 22384 ;; Tracked objects:
 22385 ;;		On entry : 0/0
 22386 ;;		On exit  : 0/0
 22387 ;;		Unchanged: 0/0
 22388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22391 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22392 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22393 ;;Total ram usage:        1 bytes
 22394 ;; Hardware stack levels used:    1
 22395 ;; Hardware stack levels required when called:    6
 22396 ;; This function calls:
 22397 ;;		Nothing
 22398 ;; This function is called by:
 22399 ;;		_do_I2C_TX
 22400 ;;		_i2c_ISR
 22401 ;; This function uses a non-reentrant model
 22402 ;;
 22403                           
 22404                           
 22405                           ;psect for function _i2c1_driver_isNACK
 22406  2189                     _i2c1_driver_isNACK:	
 22407                           
 22408                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 22409                           
 22410                           ;incstack = 0
 22411                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 22412  2189  0024               	movlb	4	; select bank4
 22413  218A  0816               	movf	22,w	;volatile
 22414  218B  39BF               	andlw	-65
 22415  218C  3840               	iorlw	64
 22416  218D  0096               	movwf	22	;volatile
 22417  218E  0E16               	swapf	22,w	;volatile
 22418  218F  0C89               	rrf	9,f
 22419  2190  0C89               	rrf	9,f
 22420  2191  3901               	andlw	1
 22421  2192  0020               	movlb	0	; select bank0
 22422  2193  00B1               	movwf	??_i2c1_driver_isNACK
 22423  2194  0C31               	rrf	??_i2c1_driver_isNACK,w
 22424  2195  0008               	return
 22425  2196                     __end_of_i2c1_driver_isNACK:	
 22426                           
 22427                           	psect	text99
 22428  2FE0                     __ptext99:	
 22429 ;; *************** function _i2c1_driver_TXData *****************
 22430 ;; Defined at:
 22431 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 22432 ;; Parameters:    Size  Location     Type
 22433 ;;  d               1    wreg     unsigned char 
 22434 ;; Auto vars:     Size  Location     Type
 22435 ;;  d               1   17[BANK0 ] unsigned char 
 22436 ;; Return value:  Size  Location     Type
 22437 ;;                  1    wreg      void 
 22438 ;; Registers used:
 22439 ;;		wreg
 22440 ;; Tracked objects:
 22441 ;;		On entry : 0/0
 22442 ;;		On exit  : 0/0
 22443 ;;		Unchanged: 0/0
 22444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22446 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22448 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22449 ;;Total ram usage:        1 bytes
 22450 ;; Hardware stack levels used:    1
 22451 ;; Hardware stack levels required when called:    6
 22452 ;; This function calls:
 22453 ;;		Nothing
 22454 ;; This function is called by:
 22455 ;;		_do_I2C_SEND_ADR_READ
 22456 ;;		_do_I2C_SEND_ADR_WRITE
 22457 ;;		_do_I2C_TX
 22458 ;; This function uses a non-reentrant model
 22459 ;;
 22460                           
 22461                           
 22462                           ;psect for function _i2c1_driver_TXData
 22463  2FE0                     _i2c1_driver_TXData:	
 22464                           
 22465                           ;incstack = 0
 22466                           ; Regs used in _i2c1_driver_TXData: [wreg]
 22467                           ;i2c1_driver_TXData@d stored from wreg
 22468  2FE0  0020               	movlb	0	; select bank0
 22469  2FE1  00B1               	movwf	i2c1_driver_TXData@d
 22470                           
 22471                           ;i2c1_driver.c: 188: SSP1BUF = d;
 22472  2FE2  0831               	movf	i2c1_driver_TXData@d,w
 22473  2FE3  0024               	movlb	4	; select bank4
 22474  2FE4  0091               	movwf	17	;volatile
 22475  2FE5  0008               	return
 22476  2FE6                     __end_of_i2c1_driver_TXData:	
 22477                           
 22478                           	psect	text100
 22479  2F72                     __ptext100:	
 22480 ;; *************** function _i2c1_driver_getRXData *****************
 22481 ;; Defined at:
 22482 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 22483 ;; Parameters:    Size  Location     Type
 22484 ;;		None
 22485 ;; Auto vars:     Size  Location     Type
 22486 ;;		None
 22487 ;; Return value:  Size  Location     Type
 22488 ;;                  1    wreg      unsigned char 
 22489 ;; Registers used:
 22490 ;;		wreg
 22491 ;; Tracked objects:
 22492 ;;		On entry : 0/0
 22493 ;;		On exit  : 0/0
 22494 ;;		Unchanged: 0/0
 22495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22500 ;;Total ram usage:        0 bytes
 22501 ;; Hardware stack levels used:    1
 22502 ;; Hardware stack levels required when called:    6
 22503 ;; This function calls:
 22504 ;;		Nothing
 22505 ;; This function is called by:
 22506 ;;		_do_I2C_RX
 22507 ;; This function uses a non-reentrant model
 22508 ;;
 22509                           
 22510                           
 22511                           ;psect for function _i2c1_driver_getRXData
 22512  2F72                     _i2c1_driver_getRXData:	
 22513                           
 22514                           ;i2c1_driver.c: 173: return SSP1BUF;
 22515                           
 22516                           ;incstack = 0
 22517                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 22518  2F72  0024               	movlb	4	; select bank4
 22519  2F73  0811               	movf	17,w	;volatile
 22520  2F74  0008               	return
 22521  2F75                     __end_of_i2c1_driver_getRXData:	
 22522                           
 22523                           	psect	text101
 22524  2FA7                     __ptext101:	
 22525 ;; *************** function _i2c1_driver_sendNACK *****************
 22526 ;; Defined at:
 22527 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 22528 ;; Parameters:    Size  Location     Type
 22529 ;;		None
 22530 ;; Auto vars:     Size  Location     Type
 22531 ;;		None
 22532 ;; Return value:  Size  Location     Type
 22533 ;;                  1    wreg      void 
 22534 ;; Registers used:
 22535 ;;		None
 22536 ;; Tracked objects:
 22537 ;;		On entry : 0/0
 22538 ;;		On exit  : 0/0
 22539 ;;		Unchanged: 0/0
 22540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22545 ;;Total ram usage:        0 bytes
 22546 ;; Hardware stack levels used:    1
 22547 ;; Hardware stack levels required when called:    6
 22548 ;; This function calls:
 22549 ;;		Nothing
 22550 ;; This function is called by:
 22551 ;;		_do_I2C_DO_NACK_STOP
 22552 ;;		_do_I2C_DO_NACK_RESTART
 22553 ;; This function uses a non-reentrant model
 22554 ;;
 22555                           
 22556                           
 22557                           ;psect for function _i2c1_driver_sendNACK
 22558  2FA7                     _i2c1_driver_sendNACK:	
 22559                           
 22560                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 22561                           
 22562                           ;incstack = 0
 22563                           ; Regs used in _i2c1_driver_sendNACK: []
 22564  2FA7  0024               	movlb	4	; select bank4
 22565  2FA8  1696               	bsf	22,5	;volatile
 22566                           
 22567                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 22568  2FA9  1616               	bsf	22,4	;volatile
 22569  2FAA  0008               	return
 22570  2FAB                     __end_of_i2c1_driver_sendNACK:	
 22571                           
 22572                           	psect	text102
 22573  2F37                     __ptext102:	
 22574 ;; *************** function _i2c1_driver_resetBus *****************
 22575 ;; Defined at:
 22576 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 22577 ;; Parameters:    Size  Location     Type
 22578 ;;		None
 22579 ;; Auto vars:     Size  Location     Type
 22580 ;;		None
 22581 ;; Return value:  Size  Location     Type
 22582 ;;                  1    wreg      void 
 22583 ;; Registers used:
 22584 ;;		None
 22585 ;; Tracked objects:
 22586 ;;		On entry : 0/0
 22587 ;;		On exit  : 0/0
 22588 ;;		Unchanged: 0/0
 22589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22594 ;;Total ram usage:        0 bytes
 22595 ;; Hardware stack levels used:    1
 22596 ;; Hardware stack levels required when called:    6
 22597 ;; This function calls:
 22598 ;;		Nothing
 22599 ;; This function is called by:
 22600 ;;		_do_I2C_RESET
 22601 ;; This function uses a non-reentrant model
 22602 ;;
 22603                           
 22604                           
 22605                           ;psect for function _i2c1_driver_resetBus
 22606  2F37                     _i2c1_driver_resetBus:	
 22607                           
 22608                           ;incstack = 0
 22609                           ; Regs used in _i2c1_driver_resetBus: []
 22610  2F37  0008               	return
 22611  2F38                     __end_of_i2c1_driver_resetBus:	
 22612                           
 22613                           	psect	text103
 22614  2F6F                     __ptext103:	
 22615 ;; *************** function _i2c1_driver_startRX *****************
 22616 ;; Defined at:
 22617 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 22618 ;; Parameters:    Size  Location     Type
 22619 ;;		None
 22620 ;; Auto vars:     Size  Location     Type
 22621 ;;		None
 22622 ;; Return value:  Size  Location     Type
 22623 ;;                  1    wreg      void 
 22624 ;; Registers used:
 22625 ;;		None
 22626 ;; Tracked objects:
 22627 ;;		On entry : 0/0
 22628 ;;		On exit  : 0/0
 22629 ;;		Unchanged: 0/0
 22630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22635 ;;Total ram usage:        0 bytes
 22636 ;; Hardware stack levels used:    1
 22637 ;; Hardware stack levels required when called:    6
 22638 ;; This function calls:
 22639 ;;		Nothing
 22640 ;; This function is called by:
 22641 ;;		_do_I2C_RCEN
 22642 ;; This function uses a non-reentrant model
 22643 ;;
 22644                           
 22645                           
 22646                           ;psect for function _i2c1_driver_startRX
 22647  2F6F                     _i2c1_driver_startRX:	
 22648                           
 22649                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
 22650                           
 22651                           ;incstack = 0
 22652                           ; Regs used in _i2c1_driver_startRX: []
 22653  2F6F  0024               	movlb	4	; select bank4
 22654  2F70  1596               	bsf	22,3	;volatile
 22655  2F71  0008               	return
 22656  2F72                     __end_of_i2c1_driver_startRX:	
 22657                           
 22658                           	psect	text104
 22659  2FDA                     __ptext104:	
 22660 ;; *************** function _returnReset *****************
 22661 ;; Defined at:
 22662 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 22663 ;; Parameters:    Size  Location     Type
 22664 ;;  p               1   17[BANK0 ] PTR void 
 22665 ;;		 -> NULL(0), 
 22666 ;; Auto vars:     Size  Location     Type
 22667 ;;		None
 22668 ;; Return value:  Size  Location     Type
 22669 ;;                  1    wreg      enum E8198
 22670 ;; Registers used:
 22671 ;;		wreg
 22672 ;; Tracked objects:
 22673 ;;		On entry : 0/0
 22674 ;;		On exit  : 0/0
 22675 ;;		Unchanged: 0/0
 22676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22677 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22680 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22681 ;;Total ram usage:        1 bytes
 22682 ;; Hardware stack levels used:    1
 22683 ;; Hardware stack levels required when called:    6
 22684 ;; This function calls:
 22685 ;;		Nothing
 22686 ;; This function is called by:
 22687 ;;		_i2c_open
 22688 ;;		_do_I2C_DO_ADDRESS_NACK
 22689 ;;		_do_I2C_TX
 22690 ;;		_do_I2C_RX
 22691 ;;		_do_I2C_TX_EMPTY
 22692 ;;		i1_do_I2C_DO_ADDRESS_NACK
 22693 ;;		i1_do_I2C_TX
 22694 ;;		i1_do_I2C_RX
 22695 ;;		i1_do_I2C_TX_EMPTY
 22696 ;; This function uses a non-reentrant model
 22697 ;;
 22698                           
 22699                           
 22700                           ;psect for function _returnReset
 22701  2FDA                     _returnReset:	
 22702                           
 22703                           ;Skip over the trampoline to the duplicate function for level 1
 22704  2FDA  1C7E               	btfss	126,0
 22705  2FDB  2FDE               	goto	l7584
 22706  2FDC  31AF  2F3A         	ljmp	i1l8546
 22707  2FDE                     _returnReset$intlevel0:	
 22708  2FDE                     l7584:	
 22709                           ;incstack = 0
 22710                           ; Regs used in _returnReset: [wreg]
 22711                           
 22712                           
 22713                           ;i2c_master.c: 450: return i2c_reset_link;
 22714  2FDE  3005               	movlw	5
 22715  2FDF  0008               	return
 22716  2FE0                     __end_of_returnReset:	
 22717                           
 22718                           	psect	text105
 22719  2FD4                     __ptext105:	
 22720 ;; *************** function _returnStop *****************
 22721 ;; Defined at:
 22722 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 22723 ;; Parameters:    Size  Location     Type
 22724 ;;  p               1   17[BANK0 ] PTR void 
 22725 ;;		 -> NULL(0), 
 22726 ;; Auto vars:     Size  Location     Type
 22727 ;;		None
 22728 ;; Return value:  Size  Location     Type
 22729 ;;                  1    wreg      enum E8198
 22730 ;; Registers used:
 22731 ;;		wreg
 22732 ;; Tracked objects:
 22733 ;;		On entry : 0/0
 22734 ;;		On exit  : 0/0
 22735 ;;		Unchanged: 0/0
 22736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22737 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22740 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22741 ;;Total ram usage:        1 bytes
 22742 ;; Hardware stack levels used:    1
 22743 ;; Hardware stack levels required when called:    6
 22744 ;; This function calls:
 22745 ;;		Nothing
 22746 ;; This function is called by:
 22747 ;;		_i2c_open
 22748 ;;		_setCallBack
 22749 ;;		_do_I2C_DO_ADDRESS_NACK
 22750 ;;		_do_I2C_TX
 22751 ;;		_do_I2C_RX
 22752 ;;		_do_I2C_TX_EMPTY
 22753 ;;		i1_do_I2C_DO_ADDRESS_NACK
 22754 ;;		i1_do_I2C_TX
 22755 ;;		i1_do_I2C_RX
 22756 ;;		i1_do_I2C_TX_EMPTY
 22757 ;; This function uses a non-reentrant model
 22758 ;;
 22759                           
 22760                           
 22761                           ;psect for function _returnStop
 22762  2FD4                     _returnStop:	
 22763                           
 22764                           ;Skip over the trampoline to the duplicate function for level 1
 22765  2FD4  1C7E               	btfss	126,0
 22766  2FD5  2FD8               	goto	l7580
 22767  2FD6  31AF  2F38         	ljmp	i1l8542
 22768  2FD8                     _returnStop$intlevel0:	
 22769  2FD8                     l7580:	
 22770                           ;incstack = 0
 22771                           ; Regs used in _returnStop: [wreg]
 22772                           
 22773                           
 22774                           ;i2c_master.c: 445: return i2c_stop;
 22775  2FD8  3001               	movlw	1
 22776  2FD9  0008               	return
 22777  2FDA                     __end_of_returnStop:	
 22778                           
 22779                           	psect	text106
 22780  2F6C                     __ptext106:	
 22781 ;; *************** function _i2c1_driver_stop *****************
 22782 ;; Defined at:
 22783 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 22784 ;; Parameters:    Size  Location     Type
 22785 ;;		None
 22786 ;; Auto vars:     Size  Location     Type
 22787 ;;		None
 22788 ;; Return value:  Size  Location     Type
 22789 ;;                  1    wreg      void 
 22790 ;; Registers used:
 22791 ;;		None
 22792 ;; Tracked objects:
 22793 ;;		On entry : 0/0
 22794 ;;		On exit  : 0/0
 22795 ;;		Unchanged: 0/0
 22796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22801 ;;Total ram usage:        0 bytes
 22802 ;; Hardware stack levels used:    1
 22803 ;; Hardware stack levels required when called:    6
 22804 ;; This function calls:
 22805 ;;		Nothing
 22806 ;; This function is called by:
 22807 ;;		_do_I2C_SEND_STOP
 22808 ;; This function uses a non-reentrant model
 22809 ;;
 22810                           
 22811                           
 22812                           ;psect for function _i2c1_driver_stop
 22813  2F6C                     _i2c1_driver_stop:	
 22814                           
 22815                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
 22816                           
 22817                           ;incstack = 0
 22818                           ; Regs used in _i2c1_driver_stop: []
 22819  2F6C  0024               	movlb	4	; select bank4
 22820  2F6D  1516               	bsf	22,2	;volatile
 22821  2F6E  0008               	return
 22822  2F6F                     __end_of_i2c1_driver_stop:	
 22823                           
 22824                           	psect	text107
 22825  2F69                     __ptext107:	
 22826 ;; *************** function _i2c1_driver_restart *****************
 22827 ;; Defined at:
 22828 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 22829 ;; Parameters:    Size  Location     Type
 22830 ;;		None
 22831 ;; Auto vars:     Size  Location     Type
 22832 ;;		None
 22833 ;; Return value:  Size  Location     Type
 22834 ;;                  1    wreg      void 
 22835 ;; Registers used:
 22836 ;;		None
 22837 ;; Tracked objects:
 22838 ;;		On entry : 0/0
 22839 ;;		On exit  : 0/0
 22840 ;;		Unchanged: 0/0
 22841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22846 ;;Total ram usage:        0 bytes
 22847 ;; Hardware stack levels used:    1
 22848 ;; Hardware stack levels required when called:    6
 22849 ;; This function calls:
 22850 ;;		Nothing
 22851 ;; This function is called by:
 22852 ;;		_do_I2C_SEND_RESTART_READ
 22853 ;;		_do_I2C_SEND_RESTART_WRITE
 22854 ;;		_do_I2C_SEND_RESTART
 22855 ;; This function uses a non-reentrant model
 22856 ;;
 22857                           
 22858                           
 22859                           ;psect for function _i2c1_driver_restart
 22860  2F69                     _i2c1_driver_restart:	
 22861                           
 22862                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
 22863                           
 22864                           ;incstack = 0
 22865                           ; Regs used in _i2c1_driver_restart: []
 22866  2F69  0024               	movlb	4	; select bank4
 22867  2F6A  1496               	bsf	22,1	;volatile
 22868  2F6B  0008               	return
 22869  2F6C                     __end_of_i2c1_driver_restart:	
 22870                           
 22871                           	psect	text108
 22872  2FA3                     __ptext108:	
 22873 ;; *************** function _i2c1_driver_sendACK *****************
 22874 ;; Defined at:
 22875 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 22876 ;; Parameters:    Size  Location     Type
 22877 ;;		None
 22878 ;; Auto vars:     Size  Location     Type
 22879 ;;		None
 22880 ;; Return value:  Size  Location     Type
 22881 ;;                  1    wreg      void 
 22882 ;; Registers used:
 22883 ;;		None
 22884 ;; Tracked objects:
 22885 ;;		On entry : 0/0
 22886 ;;		On exit  : 0/0
 22887 ;;		Unchanged: 0/0
 22888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22893 ;;Total ram usage:        0 bytes
 22894 ;; Hardware stack levels used:    1
 22895 ;; Hardware stack levels required when called:    6
 22896 ;; This function calls:
 22897 ;;		Nothing
 22898 ;; This function is called by:
 22899 ;;		_do_I2C_DO_ACK
 22900 ;;		_do_I2C_RX
 22901 ;; This function uses a non-reentrant model
 22902 ;;
 22903                           
 22904                           
 22905                           ;psect for function _i2c1_driver_sendACK
 22906  2FA3                     _i2c1_driver_sendACK:	
 22907                           
 22908                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 22909                           
 22910                           ;incstack = 0
 22911                           ; Regs used in _i2c1_driver_sendACK: []
 22912  2FA3  0024               	movlb	4	; select bank4
 22913  2FA4  1296               	bcf	22,5	;volatile
 22914                           
 22915                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 22916  2FA5  1616               	bsf	22,4	;volatile
 22917  2FA6  0008               	return
 22918  2FA7                     __end_of_i2c1_driver_sendACK:	
 22919                           
 22920                           	psect	text109
 22921  2F66                     __ptext109:	
 22922 ;; *************** function _i2c1_driver_start *****************
 22923 ;; Defined at:
 22924 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 22925 ;; Parameters:    Size  Location     Type
 22926 ;;		None
 22927 ;; Auto vars:     Size  Location     Type
 22928 ;;		None
 22929 ;; Return value:  Size  Location     Type
 22930 ;;                  1    wreg      void 
 22931 ;; Registers used:
 22932 ;;		None
 22933 ;; Tracked objects:
 22934 ;;		On entry : 0/0
 22935 ;;		On exit  : 0/0
 22936 ;;		Unchanged: 0/0
 22937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22942 ;;Total ram usage:        0 bytes
 22943 ;; Hardware stack levels used:    1
 22944 ;; Hardware stack levels required when called:    6
 22945 ;; This function calls:
 22946 ;;		Nothing
 22947 ;; This function is called by:
 22948 ;;		_i2c_masterOperation
 22949 ;; This function uses a non-reentrant model
 22950 ;;
 22951                           
 22952                           
 22953                           ;psect for function _i2c1_driver_start
 22954  2F66                     _i2c1_driver_start:	
 22955                           
 22956                           ;i2c1_driver.c: 148: SSP1CON2bits.SEN = 1;
 22957                           
 22958                           ;incstack = 0
 22959                           ; Regs used in _i2c1_driver_start: []
 22960  2F66  0024               	movlb	4	; select bank4
 22961  2F67  1416               	bsf	22,0	;volatile
 22962  2F68  0008               	return
 22963  2F69                     __end_of_i2c1_driver_start:	
 22964                           
 22965                           	psect	text110
 22966  1CCD                     __ptext110:	
 22967 ;; *************** function ___awdiv *****************
 22968 ;; Defined at:
 22969 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 22970 ;; Parameters:    Size  Location     Type
 22971 ;;  divisor         2   23[BANK0 ] int 
 22972 ;;  dividend        2   25[BANK0 ] int 
 22973 ;; Auto vars:     Size  Location     Type
 22974 ;;  quotient        2   30[BANK0 ] int 
 22975 ;;  sign            1   29[BANK0 ] unsigned char 
 22976 ;;  counter         1   28[BANK0 ] unsigned char 
 22977 ;; Return value:  Size  Location     Type
 22978 ;;                  2   23[BANK0 ] int 
 22979 ;; Registers used:
 22980 ;;		wreg, status,2, status,0
 22981 ;; Tracked objects:
 22982 ;;		On entry : 0/0
 22983 ;;		On exit  : 0/0
 22984 ;;		Unchanged: 0/0
 22985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22986 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22987 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22989 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22990 ;;Total ram usage:        9 bytes
 22991 ;; Hardware stack levels used:    1
 22992 ;; Hardware stack levels required when called:    6
 22993 ;; This function calls:
 22994 ;;		Nothing
 22995 ;; This function is called by:
 22996 ;;		_drv_write_DC
 22997 ;;		_calcUpstroke
 22998 ;;		_calcDownstroke
 22999 ;;		_drv_outputSine
 23000 ;; This function uses a non-reentrant model
 23001 ;;
 23002                           
 23003                           
 23004                           ;psect for function ___awdiv
 23005  1CCD                     ___awdiv:	
 23006                           
 23007                           ;incstack = 0
 23008                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 23009  1CCD  0020               	movlb	0	; select bank0
 23010  1CCE  01BD               	clrf	___awdiv@sign
 23011  1CCF  1FB8               	btfss	___awdiv@divisor+1,7
 23012  1CD0  2CD8               	goto	l8242
 23013  1CD1  09B7               	comf	___awdiv@divisor,f
 23014  1CD2  09B8               	comf	___awdiv@divisor+1,f
 23015  1CD3  0AB7               	incf	___awdiv@divisor,f
 23016  1CD4  1903               	skipnz
 23017  1CD5  0AB8               	incf	___awdiv@divisor+1,f
 23018  1CD6  01BD               	clrf	___awdiv@sign
 23019  1CD7  0ABD               	incf	___awdiv@sign,f
 23020  1CD8                     l8242:	
 23021  1CD8  1FBA               	btfss	___awdiv@dividend+1,7
 23022  1CD9  2CE3               	goto	l8248
 23023  1CDA  09B9               	comf	___awdiv@dividend,f
 23024  1CDB  09BA               	comf	___awdiv@dividend+1,f
 23025  1CDC  0AB9               	incf	___awdiv@dividend,f
 23026  1CDD  1903               	skipnz
 23027  1CDE  0ABA               	incf	___awdiv@dividend+1,f
 23028  1CDF  3001               	movlw	1
 23029  1CE0  00BB               	movwf	??___awdiv
 23030  1CE1  083B               	movf	??___awdiv,w
 23031  1CE2  06BD               	xorwf	___awdiv@sign,f
 23032  1CE3                     l8248:	
 23033  1CE3  01BE               	clrf	___awdiv@quotient
 23034  1CE4  01BF               	clrf	___awdiv@quotient+1
 23035  1CE5  0837               	movf	___awdiv@divisor,w
 23036  1CE6  0438               	iorwf	___awdiv@divisor+1,w
 23037  1CE7  1903               	btfsc	3,2
 23038  1CE8  2D12               	goto	l8270
 23039  1CE9  01BC               	clrf	___awdiv@counter
 23040  1CEA  0ABC               	incf	___awdiv@counter,f
 23041  1CEB                     l8258:	
 23042  1CEB  1BB8               	btfsc	___awdiv@divisor+1,7
 23043  1CEC  2CF7               	goto	l8260
 23044  1CED  3001               	movlw	1
 23045  1CEE                     u8195:	
 23046  1CEE  35B7               	lslf	___awdiv@divisor,f
 23047  1CEF  0DB8               	rlf	___awdiv@divisor+1,f
 23048  1CF0  0B89               	decfsz	9,f
 23049  1CF1  2CEE               	goto	u8195
 23050  1CF2  3001               	movlw	1
 23051  1CF3  00BB               	movwf	??___awdiv
 23052  1CF4  083B               	movf	??___awdiv,w
 23053  1CF5  07BC               	addwf	___awdiv@counter,f
 23054  1CF6  2CEB               	goto	l8258
 23055  1CF7                     l8260:	
 23056  1CF7  3001               	movlw	1
 23057  1CF8                     u8215:	
 23058  1CF8  35BE               	lslf	___awdiv@quotient,f
 23059  1CF9  0DBF               	rlf	___awdiv@quotient+1,f
 23060  1CFA  0B89               	decfsz	9,f
 23061  1CFB  2CF8               	goto	u8215
 23062  1CFC  0838               	movf	___awdiv@divisor+1,w
 23063  1CFD  023A               	subwf	___awdiv@dividend+1,w
 23064  1CFE  1D03               	skipz
 23065  1CFF  2D02               	goto	u8225
 23066  1D00  0837               	movf	___awdiv@divisor,w
 23067  1D01  0239               	subwf	___awdiv@dividend,w
 23068  1D02                     u8225:	
 23069  1D02  1C03               	skipc
 23070  1D03  2D09               	goto	l8266
 23071  1D04  0837               	movf	___awdiv@divisor,w
 23072  1D05  02B9               	subwf	___awdiv@dividend,f
 23073  1D06  0838               	movf	___awdiv@divisor+1,w
 23074  1D07  3BBA               	subwfb	___awdiv@dividend+1,f
 23075  1D08  143E               	bsf	___awdiv@quotient,0
 23076  1D09                     l8266:	
 23077  1D09  3001               	movlw	1
 23078  1D0A                     u8235:	
 23079  1D0A  36B8               	lsrf	___awdiv@divisor+1,f
 23080  1D0B  0CB7               	rrf	___awdiv@divisor,f
 23081  1D0C  0B89               	decfsz	9,f
 23082  1D0D  2D0A               	goto	u8235
 23083  1D0E  3001               	movlw	1
 23084  1D0F  02BC               	subwf	___awdiv@counter,f
 23085  1D10  1D03               	btfss	3,2
 23086  1D11  2CF7               	goto	l8260
 23087  1D12                     l8270:	
 23088  1D12  083D               	movf	___awdiv@sign,w
 23089  1D13  1903               	btfsc	3,2
 23090  1D14  2D1A               	goto	l8274
 23091  1D15  09BE               	comf	___awdiv@quotient,f
 23092  1D16  09BF               	comf	___awdiv@quotient+1,f
 23093  1D17  0ABE               	incf	___awdiv@quotient,f
 23094  1D18  1903               	skipnz
 23095  1D19  0ABF               	incf	___awdiv@quotient+1,f
 23096  1D1A                     l8274:	
 23097  1D1A  083F               	movf	___awdiv@quotient+1,w
 23098  1D1B  00B8               	movwf	?___awdiv+1
 23099  1D1C  083E               	movf	___awdiv@quotient,w
 23100  1D1D  00B7               	movwf	?___awdiv
 23101  1D1E  0008               	return
 23102  1D1F                     __end_of___awdiv:	
 23103                           
 23104                           	psect	text111
 23105  1505                     __ptext111:	
 23106 ;; *************** function _calcHeaterPins *****************
 23107 ;; Defined at:
 23108 ;;		line 239 in file "main.c"
 23109 ;; Parameters:    Size  Location     Type
 23110 ;;		None
 23111 ;; Auto vars:     Size  Location     Type
 23112 ;;		None
 23113 ;; Return value:  Size  Location     Type
 23114 ;;                  1    wreg      void 
 23115 ;; Registers used:
 23116 ;;		wreg, status,2, status,0
 23117 ;; Tracked objects:
 23118 ;;		On entry : 0/0
 23119 ;;		On exit  : 0/0
 23120 ;;		Unchanged: 0/0
 23121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23124 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23125 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23126 ;;Total ram usage:        4 bytes
 23127 ;; Hardware stack levels used:    1
 23128 ;; Hardware stack levels required when called:    6
 23129 ;; This function calls:
 23130 ;;		Nothing
 23131 ;; This function is called by:
 23132 ;;		_doMove
 23133 ;; This function uses a non-reentrant model
 23134 ;;
 23135                           
 23136                           
 23137                           ;psect for function _calcHeaterPins
 23138  1505                     _calcHeaterPins:	
 23139                           
 23140                           ;main.c: 240: first_top = moveVector_downs & moveMask;
 23141                           
 23142                           ;incstack = 0
 23143                           ; Regs used in _calcHeaterPins: [wreg+status,2+status,0]
 23144  1505  0021               	movlb	1	; select bank1
 23145  1506  0858               	movf	_moveMask^(0+128),w
 23146  1507  0560               	andwf	_moveVector_downs^(0+128),w
 23147  1508  0022               	movlb	2	; select bank2
 23148  1509  00D2               	movwf	_first_top^(0+256)
 23149  150A  0021               	movlb	1	; select bank1
 23150  150B  0859               	movf	(_moveMask+1)^(0+128),w
 23151  150C  0561               	andwf	(_moveVector_downs+1)^(0+128),w
 23152  150D  0022               	movlb	2	; select bank2
 23153  150E  00D3               	movwf	(_first_top+1)^(0+256)
 23154  150F  0021               	movlb	1	; select bank1
 23155  1510  085A               	movf	(_moveMask+2)^(0+128),w
 23156  1511  0562               	andwf	(_moveVector_downs+2)^(0+128),w
 23157  1512  0022               	movlb	2	; select bank2
 23158  1513  00D4               	movwf	(_first_top+2)^(0+256)
 23159  1514  0021               	movlb	1	; select bank1
 23160  1515  085B               	movf	(_moveMask+3)^(0+128),w
 23161  1516  0563               	andwf	(_moveVector_downs+3)^(0+128),w
 23162  1517  0022               	movlb	2	; select bank2
 23163  1518  00D5               	movwf	(_first_top+3)^(0+256)
 23164                           
 23165                           ;main.c: 241: first_bottom = (~moveVector_downs) & moveMask;
 23166  1519  0021               	movlb	1	; select bank1
 23167  151A  0960               	comf	_moveVector_downs^(0+128),w
 23168  151B  0020               	movlb	0	; select bank0
 23169  151C  00B1               	movwf	??_calcHeaterPins
 23170  151D  0021               	movlb	1	; select bank1
 23171  151E  0961               	comf	(_moveVector_downs+1)^(0+128),w
 23172  151F  0020               	movlb	0	; select bank0
 23173  1520  00B2               	movwf	??_calcHeaterPins+1
 23174  1521  0021               	movlb	1	; select bank1
 23175  1522  0962               	comf	(_moveVector_downs+2)^(0+128),w
 23176  1523  0020               	movlb	0	; select bank0
 23177  1524  00B3               	movwf	??_calcHeaterPins+2
 23178  1525  0021               	movlb	1	; select bank1
 23179  1526  0963               	comf	(_moveVector_downs+3)^(0+128),w
 23180  1527  0020               	movlb	0	; select bank0
 23181  1528  00B4               	movwf	??_calcHeaterPins+3
 23182  1529  0021               	movlb	1	; select bank1
 23183  152A  0858               	movf	_moveMask^(0+128),w
 23184  152B  0020               	movlb	0	; select bank0
 23185  152C  0531               	andwf	??_calcHeaterPins,w
 23186  152D  0022               	movlb	2	; select bank2
 23187  152E  00D6               	movwf	_first_bottom^(0+256)
 23188  152F  0021               	movlb	1	; select bank1
 23189  1530  0859               	movf	(_moveMask+1)^(0+128),w
 23190  1531  0020               	movlb	0	; select bank0
 23191  1532  0532               	andwf	??_calcHeaterPins+1,w
 23192  1533  0022               	movlb	2	; select bank2
 23193  1534  00D7               	movwf	(_first_bottom+1)^(0+256)
 23194  1535  0021               	movlb	1	; select bank1
 23195  1536  085A               	movf	(_moveMask+2)^(0+128),w
 23196  1537  0020               	movlb	0	; select bank0
 23197  1538  0533               	andwf	??_calcHeaterPins+2,w
 23198  1539  0022               	movlb	2	; select bank2
 23199  153A  00D8               	movwf	(_first_bottom+2)^(0+256)
 23200  153B  0021               	movlb	1	; select bank1
 23201  153C  085B               	movf	(_moveMask+3)^(0+128),w
 23202  153D  0020               	movlb	0	; select bank0
 23203  153E  0534               	andwf	??_calcHeaterPins+3,w
 23204  153F  0022               	movlb	2	; select bank2
 23205  1540  00D9               	movwf	(_first_bottom+3)^(0+256)
 23206                           
 23207                           ;main.c: 242: second_top = moveVector_ups & moveMask;
 23208  1541  0021               	movlb	1	; select bank1
 23209  1542  0858               	movf	_moveMask^(0+128),w
 23210  1543  0564               	andwf	_moveVector_ups^(0+128),w
 23211  1544  0022               	movlb	2	; select bank2
 23212  1545  00DA               	movwf	_second_top^(0+256)
 23213  1546  0021               	movlb	1	; select bank1
 23214  1547  0859               	movf	(_moveMask+1)^(0+128),w
 23215  1548  0565               	andwf	(_moveVector_ups+1)^(0+128),w
 23216  1549  0022               	movlb	2	; select bank2
 23217  154A  00DB               	movwf	(_second_top+1)^(0+256)
 23218  154B  0021               	movlb	1	; select bank1
 23219  154C  085A               	movf	(_moveMask+2)^(0+128),w
 23220  154D  0566               	andwf	(_moveVector_ups+2)^(0+128),w
 23221  154E  0022               	movlb	2	; select bank2
 23222  154F  00DC               	movwf	(_second_top+2)^(0+256)
 23223  1550  0021               	movlb	1	; select bank1
 23224  1551  085B               	movf	(_moveMask+3)^(0+128),w
 23225  1552  0567               	andwf	(_moveVector_ups+3)^(0+128),w
 23226  1553  0022               	movlb	2	; select bank2
 23227  1554  00DD               	movwf	(_second_top+3)^(0+256)
 23228                           
 23229                           ;main.c: 243: second_bottom = (~moveVector_ups) & moveMask;
 23230  1555  0021               	movlb	1	; select bank1
 23231  1556  0964               	comf	_moveVector_ups^(0+128),w
 23232  1557  0020               	movlb	0	; select bank0
 23233  1558  00B1               	movwf	??_calcHeaterPins
 23234  1559  0021               	movlb	1	; select bank1
 23235  155A  0965               	comf	(_moveVector_ups+1)^(0+128),w
 23236  155B  0020               	movlb	0	; select bank0
 23237  155C  00B2               	movwf	??_calcHeaterPins+1
 23238  155D  0021               	movlb	1	; select bank1
 23239  155E  0966               	comf	(_moveVector_ups+2)^(0+128),w
 23240  155F  0020               	movlb	0	; select bank0
 23241  1560  00B3               	movwf	??_calcHeaterPins+2
 23242  1561  0021               	movlb	1	; select bank1
 23243  1562  0967               	comf	(_moveVector_ups+3)^(0+128),w
 23244  1563  0020               	movlb	0	; select bank0
 23245  1564  00B4               	movwf	??_calcHeaterPins+3
 23246  1565  0021               	movlb	1	; select bank1
 23247  1566  0858               	movf	_moveMask^(0+128),w
 23248  1567  0020               	movlb	0	; select bank0
 23249  1568  0531               	andwf	??_calcHeaterPins,w
 23250  1569  0022               	movlb	2	; select bank2
 23251  156A  00CE               	movwf	_second_bottom^(0+256)
 23252  156B  0021               	movlb	1	; select bank1
 23253  156C  0859               	movf	(_moveMask+1)^(0+128),w
 23254  156D  0020               	movlb	0	; select bank0
 23255  156E  0532               	andwf	??_calcHeaterPins+1,w
 23256  156F  0022               	movlb	2	; select bank2
 23257  1570  00CF               	movwf	(_second_bottom+1)^(0+256)
 23258  1571  0021               	movlb	1	; select bank1
 23259  1572  085A               	movf	(_moveMask+2)^(0+128),w
 23260  1573  0020               	movlb	0	; select bank0
 23261  1574  0533               	andwf	??_calcHeaterPins+2,w
 23262  1575  0022               	movlb	2	; select bank2
 23263  1576  00D0               	movwf	(_second_bottom+2)^(0+256)
 23264  1577  0021               	movlb	1	; select bank1
 23265  1578  085B               	movf	(_moveMask+3)^(0+128),w
 23266  1579  0020               	movlb	0	; select bank0
 23267  157A  0534               	andwf	??_calcHeaterPins+3,w
 23268  157B  0022               	movlb	2	; select bank2
 23269  157C  00D1               	movwf	(_second_bottom+3)^(0+256)
 23270  157D  0008               	return
 23271  157E                     __end_of_calcHeaterPins:	
 23272                           
 23273                           	psect	text112
 23274  2F63                     __ptext112:	
 23275 ;; *************** function _TMR4_StartTimer *****************
 23276 ;; Defined at:
 23277 ;;		line 86 in file "mcc_generated_files/tmr4.c"
 23278 ;; Parameters:    Size  Location     Type
 23279 ;;		None
 23280 ;; Auto vars:     Size  Location     Type
 23281 ;;		None
 23282 ;; Return value:  Size  Location     Type
 23283 ;;                  1    wreg      void 
 23284 ;; Registers used:
 23285 ;;		None
 23286 ;; Tracked objects:
 23287 ;;		On entry : 0/0
 23288 ;;		On exit  : 0/0
 23289 ;;		Unchanged: 0/0
 23290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23295 ;;Total ram usage:        0 bytes
 23296 ;; Hardware stack levels used:    1
 23297 ;; Hardware stack levels required when called:    6
 23298 ;; This function calls:
 23299 ;;		Nothing
 23300 ;; This function is called by:
 23301 ;;		_doMove
 23302 ;; This function uses a non-reentrant model
 23303 ;;
 23304                           
 23305                           
 23306                           ;psect for function _TMR4_StartTimer
 23307  2F63                     _TMR4_StartTimer:	
 23308                           
 23309                           ;tmr4.c: 89: T4CONbits.TMR4ON = 1;
 23310                           
 23311                           ;incstack = 0
 23312                           ; Regs used in _TMR4_StartTimer: []
 23313  2F63  0028               	movlb	8	; select bank8
 23314  2F64  1517               	bsf	23,2	;volatile
 23315  2F65  0008               	return
 23316  2F66                     __end_of_TMR4_StartTimer:	
 23317                           
 23318                           	psect	text113
 23319  2F60                     __ptext113:	
 23320 ;; *************** function _TMR2_StartTimer *****************
 23321 ;; Defined at:
 23322 ;;		line 85 in file "mcc_generated_files/tmr2.c"
 23323 ;; Parameters:    Size  Location     Type
 23324 ;;		None
 23325 ;; Auto vars:     Size  Location     Type
 23326 ;;		None
 23327 ;; Return value:  Size  Location     Type
 23328 ;;                  1    wreg      void 
 23329 ;; Registers used:
 23330 ;;		None
 23331 ;; Tracked objects:
 23332 ;;		On entry : 0/0
 23333 ;;		On exit  : 0/0
 23334 ;;		Unchanged: 0/0
 23335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23340 ;;Total ram usage:        0 bytes
 23341 ;; Hardware stack levels used:    1
 23342 ;; Hardware stack levels required when called:    6
 23343 ;; This function calls:
 23344 ;;		Nothing
 23345 ;; This function is called by:
 23346 ;;		_doMove
 23347 ;; This function uses a non-reentrant model
 23348 ;;
 23349                           
 23350                           
 23351                           ;psect for function _TMR2_StartTimer
 23352  2F60                     _TMR2_StartTimer:	
 23353                           
 23354                           ;tmr2.c: 88: T2CONbits.TMR2ON = 1;
 23355                           
 23356                           ;incstack = 0
 23357                           ; Regs used in _TMR2_StartTimer: []
 23358  2F60  0020               	movlb	0	; select bank0
 23359  2F61  151F               	bsf	31,2	;volatile
 23360  2F62  0008               	return
 23361  2F63                     __end_of_TMR2_StartTimer:	
 23362                           
 23363                           	psect	text114
 23364  2F5D                     __ptext114:	
 23365 ;; *************** function _TMR0_StartTimer *****************
 23366 ;; Defined at:
 23367 ;;		line 85 in file "mcc_generated_files/tmr0.c"
 23368 ;; Parameters:    Size  Location     Type
 23369 ;;		None
 23370 ;; Auto vars:     Size  Location     Type
 23371 ;;		None
 23372 ;; Return value:  Size  Location     Type
 23373 ;;                  1    wreg      void 
 23374 ;; Registers used:
 23375 ;;		None
 23376 ;; Tracked objects:
 23377 ;;		On entry : 0/0
 23378 ;;		On exit  : 0/0
 23379 ;;		Unchanged: 0/0
 23380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23385 ;;Total ram usage:        0 bytes
 23386 ;; Hardware stack levels used:    1
 23387 ;; Hardware stack levels required when called:    6
 23388 ;; This function calls:
 23389 ;;		Nothing
 23390 ;; This function is called by:
 23391 ;;		_doMove
 23392 ;; This function uses a non-reentrant model
 23393 ;;
 23394                           
 23395                           
 23396                           ;psect for function _TMR0_StartTimer
 23397  2F5D                     _TMR0_StartTimer:	
 23398                           
 23399                           ;tmr0.c: 88: T0CON0bits.T0EN = 1;
 23400                           
 23401                           ;incstack = 0
 23402                           ; Regs used in _TMR0_StartTimer: []
 23403  2F5D  0020               	movlb	0	; select bank0
 23404  2F5E  1797               	bsf	23,7	;volatile
 23405  2F5F  0008               	return
 23406  2F60                     __end_of_TMR0_StartTimer:	
 23407                           
 23408                           	psect	text115
 23409  23F8                     __ptext115:	
 23410 ;; *************** function _LEDsOn *****************
 23411 ;; Defined at:
 23412 ;;		line 6 in file "LEDcomm.c"
 23413 ;; Parameters:    Size  Location     Type
 23414 ;;  LEDpins         4   36[BANK0 ] unsigned long 
 23415 ;;  topOrBottom     2   40[BANK0 ] int 
 23416 ;; Auto vars:     Size  Location     Type
 23417 ;;		None
 23418 ;; Return value:  Size  Location     Type
 23419 ;;                  1    wreg      void 
 23420 ;; Registers used:
 23421 ;;		wreg, status,2, status,0, pclath, cstack
 23422 ;; Tracked objects:
 23423 ;;		On entry : 0/0
 23424 ;;		On exit  : 0/0
 23425 ;;		Unchanged: 0/0
 23426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23427 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23429 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23430 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23431 ;;Total ram usage:       10 bytes
 23432 ;; Hardware stack levels used:    1
 23433 ;; Hardware stack levels required when called:    8
 23434 ;; This function calls:
 23435 ;;		_send_2length_2bytes_IK
 23436 ;; This function is called by:
 23437 ;;		_LED_test_openshort
 23438 ;;		_doMove
 23439 ;;		_setHeaterToggle
 23440 ;;		_timedActiveHeatOn
 23441 ;;		_demoSequence
 23442 ;; This function uses a non-reentrant model
 23443 ;;
 23444                           
 23445                           
 23446                           ;psect for function _LEDsOn
 23447  23F8                     _LEDsOn:	
 23448                           
 23449                           ;LEDcomm.c: 7: send_2length_2bytes_IK((unsigned int)((LEDpins>>16) & 0xFFFF),(unsigned i
      +                          nt)LEDpins, 1, topOrBottom);
 23450                           
 23451                           ;incstack = 0
 23452                           ; Regs used in _LEDsOn: [wreg+status,2+status,0+pclath+cstack]
 23453  23F8  0020               	movlb	0	; select bank0
 23454  23F9  0844               	movf	LEDsOn@LEDpins,w
 23455  23FA  00CA               	movwf	??_LEDsOn
 23456  23FB  0845               	movf	LEDsOn@LEDpins+1,w
 23457  23FC  00CB               	movwf	??_LEDsOn+1
 23458  23FD  0846               	movf	LEDsOn@LEDpins+2,w
 23459  23FE  00CC               	movwf	??_LEDsOn+2
 23460  23FF  0847               	movf	LEDsOn@LEDpins+3,w
 23461  2400  00CD               	movwf	??_LEDsOn+3
 23462  2401  3010               	movlw	16
 23463  2402                     u8065:	
 23464  2402  36CD               	lsrf	??_LEDsOn+3,f
 23465  2403  0CCC               	rrf	??_LEDsOn+2,f
 23466  2404  0CCB               	rrf	??_LEDsOn+1,f
 23467  2405  0CCA               	rrf	??_LEDsOn,f
 23468  2406  0B89               	decfsz	9,f
 23469  2407  2C02               	goto	u8065
 23470  2408  084B               	movf	??_LEDsOn+1,w
 23471  2409  00BD               	movwf	send_2length_2bytes_IK@data1+1
 23472  240A  084A               	movf	??_LEDsOn,w
 23473  240B  00BC               	movwf	send_2length_2bytes_IK@data1
 23474  240C  0845               	movf	LEDsOn@LEDpins+1,w
 23475  240D  00BF               	movwf	send_2length_2bytes_IK@data2+1
 23476  240E  0844               	movf	LEDsOn@LEDpins,w
 23477  240F  00BE               	movwf	send_2length_2bytes_IK@data2
 23478  2410  01C0               	clrf	send_2length_2bytes_IK@latch_start
 23479  2411  0AC0               	incf	send_2length_2bytes_IK@latch_start,f
 23480  2412  0849               	movf	LEDsOn@topOrBottom+1,w
 23481  2413  00C2               	movwf	send_2length_2bytes_IK@topOrBottom+1
 23482  2414  0848               	movf	LEDsOn@topOrBottom,w
 23483  2415  00C1               	movwf	send_2length_2bytes_IK@topOrBottom
 23484  2416  31A2  2266         	fcall	_send_2length_2bytes_IK
 23485  2418  0008               	return
 23486  2419                     __end_of_LEDsOn:	
 23487                           
 23488                           	psect	text116
 23489  2266                     __ptext116:	
 23490 ;; *************** function _send_2length_2bytes_IK *****************
 23491 ;; Defined at:
 23492 ;;		line 70 in file "LEDcomm.c"
 23493 ;; Parameters:    Size  Location     Type
 23494 ;;  data1           2   28[BANK0 ] unsigned int 
 23495 ;;  data2           2   30[BANK0 ] unsigned int 
 23496 ;;  latch_start     1   32[BANK0 ] unsigned char 
 23497 ;;  topOrBottom     2   33[BANK0 ] int 
 23498 ;; Auto vars:     Size  Location     Type
 23499 ;;		None
 23500 ;; Return value:  Size  Location     Type
 23501 ;;                  1    wreg      void 
 23502 ;; Registers used:
 23503 ;;		wreg, status,2, status,0, pclath, cstack
 23504 ;; Tracked objects:
 23505 ;;		On entry : 0/0
 23506 ;;		On exit  : 0/0
 23507 ;;		Unchanged: 0/0
 23508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23509 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23512 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23513 ;;Total ram usage:        8 bytes
 23514 ;; Hardware stack levels used:    1
 23515 ;; Hardware stack levels required when called:    7
 23516 ;; This function calls:
 23517 ;;		_send_2bytes_latchless_IK
 23518 ;;		_send_last_2bytes_IK
 23519 ;; This function is called by:
 23520 ;;		_LEDsOn
 23521 ;;		_LEDsPwr
 23522 ;;		_LED_setBrightnessRange
 23523 ;;		_LED_test_openshort
 23524 ;;		_LED_readConfig
 23525 ;; This function uses a non-reentrant model
 23526 ;;
 23527                           
 23528                           
 23529                           ;psect for function _send_2length_2bytes_IK
 23530  2266                     _send_2length_2bytes_IK:	
 23531                           
 23532                           ;LEDcomm.c: 71: send_2bytes_latchless_IK( data1);
 23533                           
 23534                           ;incstack = 0
 23535                           ; Regs used in _send_2length_2bytes_IK: [wreg+status,2+status,0+pclath+cstack]
 23536  2266  0020               	movlb	0	; select bank0
 23537  2267  083D               	movf	send_2length_2bytes_IK@data1+1,w
 23538  2268  00B2               	movwf	send_2bytes_latchless_IK@data+1
 23539  2269  083C               	movf	send_2length_2bytes_IK@data1,w
 23540  226A  00B1               	movwf	send_2bytes_latchless_IK@data
 23541  226B  31A5  25E9  31A2   	fcall	_send_2bytes_latchless_IK
 23542                           
 23543                           ;LEDcomm.c: 72: send_last_2bytes_IK( data2, latch_start, topOrBottom);
 23544  226E  0020               	movlb	0	; select bank0
 23545  226F  083F               	movf	send_2length_2bytes_IK@data2+1,w
 23546  2270  00B2               	movwf	send_last_2bytes_IK@data+1
 23547  2271  083E               	movf	send_2length_2bytes_IK@data2,w
 23548  2272  00B1               	movwf	send_last_2bytes_IK@data
 23549  2273  0840               	movf	send_2length_2bytes_IK@latch_start,w
 23550  2274  00C3               	movwf	??_send_2length_2bytes_IK
 23551  2275  0843               	movf	??_send_2length_2bytes_IK,w
 23552  2276  00B3               	movwf	send_last_2bytes_IK@latch_start
 23553  2277  0842               	movf	send_2length_2bytes_IK@topOrBottom+1,w
 23554  2278  00B5               	movwf	send_last_2bytes_IK@topOrBottom+1
 23555  2279  0841               	movf	send_2length_2bytes_IK@topOrBottom,w
 23556  227A  00B4               	movwf	send_last_2bytes_IK@topOrBottom
 23557  227B  319D  25C4         	fcall	_send_last_2bytes_IK
 23558  227D  0008               	return
 23559  227E                     __end_of_send_2length_2bytes_IK:	
 23560                           
 23561                           	psect	text117
 23562  1DC4                     __ptext117:	
 23563 ;; *************** function _send_last_2bytes_IK *****************
 23564 ;; Defined at:
 23565 ;;		line 19 in file "LEDcomm.c"
 23566 ;; Parameters:    Size  Location     Type
 23567 ;;  data            2   17[BANK0 ] unsigned int 
 23568 ;;  latch_start     1   19[BANK0 ] unsigned char 
 23569 ;;  topOrBottom     2   20[BANK0 ] int 
 23570 ;; Auto vars:     Size  Location     Type
 23571 ;;  j               2   26[BANK0 ] int 
 23572 ;; Return value:  Size  Location     Type
 23573 ;;                  1    wreg      void 
 23574 ;; Registers used:
 23575 ;;		wreg, status,2, status,0
 23576 ;; Tracked objects:
 23577 ;;		On entry : 0/0
 23578 ;;		On exit  : 0/0
 23579 ;;		Unchanged: 0/0
 23580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23581 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23582 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23583 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23584 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23585 ;;Total ram usage:       11 bytes
 23586 ;; Hardware stack levels used:    1
 23587 ;; Hardware stack levels required when called:    6
 23588 ;; This function calls:
 23589 ;;		Nothing
 23590 ;; This function is called by:
 23591 ;;		_send_2length_2bytes_IK
 23592 ;; This function uses a non-reentrant model
 23593 ;;
 23594                           
 23595                           
 23596                           ;psect for function _send_last_2bytes_IK
 23597  1DC4                     _send_last_2bytes_IK:	
 23598                           
 23599                           ;LEDcomm.c: 22: if (topOrBottom == 1){do { LATBbits.LATB4 = 0; } while(0);} else do { LA
      +                          TCbits.LATC0 = 0; } while(0);
 23600                           
 23601                           ;incstack = 0
 23602                           ; Regs used in _send_last_2bytes_IK: [wreg+status,2+status,0]
 23603  1DC4  0020               	movlb	0	; select bank0
 23604  1DC5  0334               	decf	send_last_2bytes_IK@topOrBottom,w
 23605  1DC6  0435               	iorwf	send_last_2bytes_IK@topOrBottom+1,w
 23606  1DC7  1D03               	btfss	3,2
 23607  1DC8  2DCC               	goto	l216
 23608  1DC9  0022               	movlb	2	; select bank2
 23609  1DCA  120D               	bcf	13,4	;volatile
 23610  1DCB  2DCE               	goto	l7844
 23611  1DCC                     l216:	
 23612  1DCC  0022               	movlb	2	; select bank2
 23613  1DCD  100E               	bcf	14,0	;volatile
 23614  1DCE                     l7844:	
 23615                           
 23616                           ;LEDcomm.c: 24: for(int j = 15; j>=0; j--){
 23617  1DCE  300F               	movlw	15
 23618  1DCF  0020               	movlb	0	; select bank0
 23619  1DD0  00BA               	movwf	send_last_2bytes_IK@j
 23620  1DD1  3000               	movlw	0
 23621  1DD2  00BB               	movwf	send_last_2bytes_IK@j+1
 23622  1DD3  1BBB               	btfsc	send_last_2bytes_IK@j+1,7
 23623  1DD4  2E0F               	goto	l237
 23624  1DD5                     l220:	
 23625                           ;LEDcomm.c: 26: do { LATAbits.LATA2 = 0; } while(0);
 23626                           
 23627  1DD5  0022               	movlb	2	; select bank2
 23628  1DD6  110C               	bcf	12,2	;volatile
 23629                           
 23630                           ;LEDcomm.c: 28: if (data & 1 << j){
 23631  1DD7  3001               	movlw	1
 23632  1DD8  0020               	movlb	0	; select bank0
 23633  1DD9  00B6               	movwf	??_send_last_2bytes_IK
 23634  1DDA  3000               	movlw	0
 23635  1DDB  00B7               	movwf	??_send_last_2bytes_IK+1
 23636  1DDC  0A3A               	incf	send_last_2bytes_IK@j,w
 23637  1DDD  2DE0               	goto	u7344
 23638  1DDE                     u7345:	
 23639  1DDE  35B6               	lslf	??_send_last_2bytes_IK,f
 23640  1DDF  0DB7               	rlf	??_send_last_2bytes_IK+1,f
 23641  1DE0                     u7344:	
 23642  1DE0  0B89               	decfsz	9,f
 23643  1DE1  2DDE               	goto	u7345
 23644  1DE2  0831               	movf	send_last_2bytes_IK@data,w
 23645  1DE3  0536               	andwf	??_send_last_2bytes_IK,w
 23646  1DE4  00B8               	movwf	??_send_last_2bytes_IK+2
 23647  1DE5  0832               	movf	send_last_2bytes_IK@data+1,w
 23648  1DE6  0537               	andwf	??_send_last_2bytes_IK+1,w
 23649  1DE7  00B9               	movwf	??_send_last_2bytes_IK+3
 23650  1DE8  0838               	movf	??_send_last_2bytes_IK+2,w
 23651  1DE9  0439               	iorwf	??_send_last_2bytes_IK+3,w
 23652  1DEA  1903               	btfsc	3,2
 23653  1DEB  2DEF               	goto	l226
 23654                           
 23655                           ;LEDcomm.c: 29: do { LATCbits.LATC2 = 1; } while(0);
 23656  1DEC  0022               	movlb	2	; select bank2
 23657  1DED  150E               	bsf	14,2	;volatile
 23658                           
 23659                           ;LEDcomm.c: 30: }
 23660  1DEE  2DF1               	goto	l7852
 23661  1DEF                     l226:	
 23662                           ;LEDcomm.c: 31: else do { LATCbits.LATC2 = 0; } while(0);
 23663                           
 23664  1DEF  0022               	movlb	2	; select bank2
 23665  1DF0  110E               	bcf	14,2	;volatile
 23666  1DF1                     l7852:	
 23667                           
 23668                           ;LEDcomm.c: 33: if( j == latch_start) {
 23669  1DF1  0020               	movlb	0	; select bank0
 23670  1DF2  0833               	movf	send_last_2bytes_IK@latch_start,w
 23671  1DF3  00B6               	movwf	??_send_last_2bytes_IK
 23672  1DF4  01B7               	clrf	??_send_last_2bytes_IK+1
 23673  1DF5  083B               	movf	send_last_2bytes_IK@j+1,w
 23674  1DF6  0637               	xorwf	??_send_last_2bytes_IK+1,w
 23675  1DF7  1D03               	skipz
 23676  1DF8  2DFB               	goto	u7365
 23677  1DF9  083A               	movf	send_last_2bytes_IK@j,w
 23678  1DFA  0636               	xorwf	??_send_last_2bytes_IK,w
 23679  1DFB                     u7365:	
 23680  1DFB  1D03               	skipz
 23681  1DFC  2E06               	goto	l235
 23682                           
 23683                           ;LEDcomm.c: 35: if (topOrBottom == 1){do { LATBbits.LATB4 = 1; } while(0);} else do { LA
      +                          TCbits.LATC0 = 1; } while(0);
 23684  1DFD  0334               	decf	send_last_2bytes_IK@topOrBottom,w
 23685  1DFE  0435               	iorwf	send_last_2bytes_IK@topOrBottom+1,w
 23686  1DFF  1D03               	btfss	3,2
 23687  1E00  2E04               	goto	l233
 23688  1E01  0022               	movlb	2	; select bank2
 23689  1E02  160D               	bsf	13,4	;volatile
 23690  1E03  2E06               	goto	l235
 23691  1E04                     l233:	
 23692  1E04  0022               	movlb	2	; select bank2
 23693  1E05  140E               	bsf	14,0	;volatile
 23694  1E06                     l235:	
 23695                           ;LEDcomm.c: 37: }
 23696                           ;LEDcomm.c: 39: do { LATAbits.LATA2 = 1; } while(0);
 23697                           
 23698  1E06  0022               	movlb	2	; select bank2
 23699  1E07  150C               	bsf	12,2	;volatile
 23700  1E08  30FF               	movlw	255
 23701  1E09  0020               	movlb	0	; select bank0
 23702  1E0A  07BA               	addwf	send_last_2bytes_IK@j,f
 23703  1E0B  30FF               	movlw	255
 23704  1E0C  3DBB               	addwfc	send_last_2bytes_IK@j+1,f
 23705  1E0D  1FBB               	btfss	send_last_2bytes_IK@j+1,7
 23706  1E0E  2DD5               	goto	l220
 23707  1E0F                     l237:	
 23708                           ;LEDcomm.c: 41: }
 23709                           ;LEDcomm.c: 43: do { LATAbits.LATA2 = 0; } while(0);
 23710                           
 23711  1E0F  0022               	movlb	2	; select bank2
 23712  1E10  110C               	bcf	12,2	;volatile
 23713                           
 23714                           ;LEDcomm.c: 44: if (topOrBottom == 1){do { LATBbits.LATB4 = 0; } while(0);} else do { LA
      +                          TCbits.LATC0 = 0; } while(0);
 23715  1E11  0020               	movlb	0	; select bank0
 23716  1E12  0334               	decf	send_last_2bytes_IK@topOrBottom,w
 23717  1E13  0435               	iorwf	send_last_2bytes_IK@topOrBottom+1,w
 23718  1E14  1D03               	btfss	3,2
 23719  1E15  2E19               	goto	l243
 23720  1E16  0022               	movlb	2	; select bank2
 23721  1E17  120D               	bcf	13,4	;volatile
 23722  1E18  0008               	return
 23723  1E19                     l243:	
 23724  1E19  0022               	movlb	2	; select bank2
 23725  1E1A  100E               	bcf	14,0	;volatile
 23726  1E1B  0008               	return
 23727  1E1C                     __end_of_send_last_2bytes_IK:	
 23728                           
 23729                           	psect	text118
 23730  25E9                     __ptext118:	
 23731 ;; *************** function _send_2bytes_latchless_IK *****************
 23732 ;; Defined at:
 23733 ;;		line 49 in file "LEDcomm.c"
 23734 ;; Parameters:    Size  Location     Type
 23735 ;;  data            2   17[BANK0 ] unsigned int 
 23736 ;; Auto vars:     Size  Location     Type
 23737 ;;  j               2   23[BANK0 ] int 
 23738 ;; Return value:  Size  Location     Type
 23739 ;;                  1    wreg      void 
 23740 ;; Registers used:
 23741 ;;		wreg, status,2, status,0
 23742 ;; Tracked objects:
 23743 ;;		On entry : 0/0
 23744 ;;		On exit  : 0/0
 23745 ;;		Unchanged: 0/0
 23746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23747 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23748 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23749 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23750 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23751 ;;Total ram usage:        8 bytes
 23752 ;; Hardware stack levels used:    1
 23753 ;; Hardware stack levels required when called:    6
 23754 ;; This function calls:
 23755 ;;		Nothing
 23756 ;; This function is called by:
 23757 ;;		_send_2length_2bytes_IK
 23758 ;; This function uses a non-reentrant model
 23759 ;;
 23760                           
 23761                           
 23762                           ;psect for function _send_2bytes_latchless_IK
 23763  25E9                     _send_2bytes_latchless_IK:	
 23764                           
 23765                           ;incstack = 0
 23766                           ; Regs used in _send_2bytes_latchless_IK: [wreg+status,2+status,0]
 23767                           ;LEDcomm.c: 51: do { LATBbits.LATB4 = 0; } while(0);
 23768  25E9  0022               	movlb	2	; select bank2
 23769  25EA  120D               	bcf	13,4	;volatile
 23770                           
 23771                           ;LEDcomm.c: 53: for(int j = 15; j>=0; j--){
 23772  25EB  300F               	movlw	15
 23773  25EC  0020               	movlb	0	; select bank0
 23774  25ED  00B7               	movwf	send_2bytes_latchless_IK@j
 23775  25EE  3000               	movlw	0
 23776  25EF  00B8               	movwf	send_2bytes_latchless_IK@j+1
 23777  25F0  1BB8               	btfsc	send_2bytes_latchless_IK@j+1,7
 23778  25F1  2E16               	goto	l262
 23779  25F2                     l252:	
 23780                           ;LEDcomm.c: 54: do { LATAbits.LATA2 = 0; } while(0);
 23781                           
 23782  25F2  0022               	movlb	2	; select bank2
 23783  25F3  110C               	bcf	12,2	;volatile
 23784                           
 23785                           ;LEDcomm.c: 56: if (data & 1 << j){
 23786  25F4  3001               	movlw	1
 23787  25F5  0020               	movlb	0	; select bank0
 23788  25F6  00B3               	movwf	??_send_2bytes_latchless_IK
 23789  25F7  3000               	movlw	0
 23790  25F8  00B4               	movwf	??_send_2bytes_latchless_IK+1
 23791  25F9  0A37               	incf	send_2bytes_latchless_IK@j,w
 23792  25FA  2DFD               	goto	u7414
 23793  25FB                     u7415:	
 23794  25FB  35B3               	lslf	??_send_2bytes_latchless_IK,f
 23795  25FC  0DB4               	rlf	??_send_2bytes_latchless_IK+1,f
 23796  25FD                     u7414:	
 23797  25FD  0B89               	decfsz	9,f
 23798  25FE  2DFB               	goto	u7415
 23799  25FF  0831               	movf	send_2bytes_latchless_IK@data,w
 23800  2600  0533               	andwf	??_send_2bytes_latchless_IK,w
 23801  2601  00B5               	movwf	??_send_2bytes_latchless_IK+2
 23802  2602  0832               	movf	send_2bytes_latchless_IK@data+1,w
 23803  2603  0534               	andwf	??_send_2bytes_latchless_IK+1,w
 23804  2604  00B6               	movwf	??_send_2bytes_latchless_IK+3
 23805  2605  0835               	movf	??_send_2bytes_latchless_IK+2,w
 23806  2606  0436               	iorwf	??_send_2bytes_latchless_IK+3,w
 23807  2607  1903               	btfsc	3,2
 23808  2608  2E0C               	goto	l258
 23809                           
 23810                           ;LEDcomm.c: 57: do { LATCbits.LATC2 = 1; } while(0);
 23811  2609  0022               	movlb	2	; select bank2
 23812  260A  150E               	bsf	14,2	;volatile
 23813                           
 23814                           ;LEDcomm.c: 58: }
 23815  260B  2E0E               	goto	l260
 23816  260C                     l258:	
 23817                           ;LEDcomm.c: 59: else do { LATCbits.LATC2 = 0; } while(0);
 23818                           
 23819  260C  0022               	movlb	2	; select bank2
 23820  260D  110E               	bcf	14,2	;volatile
 23821  260E                     l260:	
 23822                           ;LEDcomm.c: 62: do { LATAbits.LATA2 = 1; } while(0);
 23823                           
 23824  260E  150C               	bsf	12,2	;volatile
 23825  260F  30FF               	movlw	255
 23826  2610  0020               	movlb	0	; select bank0
 23827  2611  07B7               	addwf	send_2bytes_latchless_IK@j,f
 23828  2612  30FF               	movlw	255
 23829  2613  3DB8               	addwfc	send_2bytes_latchless_IK@j+1,f
 23830  2614  1FB8               	btfss	send_2bytes_latchless_IK@j+1,7
 23831  2615  2DF2               	goto	l252
 23832  2616                     l262:	
 23833                           ;LEDcomm.c: 64: }
 23834                           ;LEDcomm.c: 66: do { LATAbits.LATA2 = 0; } while(0);
 23835                           
 23836  2616  0022               	movlb	2	; select bank2
 23837  2617  110C               	bcf	12,2	;volatile
 23838  2618  0008               	return
 23839  2619                     __end_of_send_2bytes_latchless_IK:	
 23840                           
 23841                           	psect	text119
 23842  224E                     __ptext119:	
 23843 ;; *************** function _SYSTEM_Initialize *****************
 23844 ;; Defined at:
 23845 ;;		line 77 in file "mcc_generated_files/mcc.c"
 23846 ;; Parameters:    Size  Location     Type
 23847 ;;		None
 23848 ;; Auto vars:     Size  Location     Type
 23849 ;;		None
 23850 ;; Return value:  Size  Location     Type
 23851 ;;                  1    wreg      void 
 23852 ;; Registers used:
 23853 ;;		wreg, status,2, status,0, pclath, cstack
 23854 ;; Tracked objects:
 23855 ;;		On entry : 0/0
 23856 ;;		On exit  : 0/0
 23857 ;;		Unchanged: 0/0
 23858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23863 ;;Total ram usage:        0 bytes
 23864 ;; Hardware stack levels used:    1
 23865 ;; Hardware stack levels required when called:    8
 23866 ;; This function calls:
 23867 ;;		_EUSART_Initialize
 23868 ;;		_OSCILLATOR_Initialize
 23869 ;;		_PIN_MANAGER_Initialize
 23870 ;;		_PMD_Initialize
 23871 ;;		_TMR0_Initialize
 23872 ;;		_TMR2_Initialize
 23873 ;;		_TMR4_Initialize
 23874 ;;		_WDT_Initialize
 23875 ;; This function is called by:
 23876 ;;		_main
 23877 ;; This function uses a non-reentrant model
 23878 ;;
 23879                           
 23880                           
 23881                           ;psect for function _SYSTEM_Initialize
 23882  224E                     _SYSTEM_Initialize:	
 23883                           
 23884                           ;mcc.c: 80: PMD_Initialize();
 23885                           
 23886                           ;incstack = 0
 23887                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 23888  224E  31A0  203A  31A2   	fcall	_PMD_Initialize
 23889                           
 23890                           ;mcc.c: 81: PIN_MANAGER_Initialize();
 23891  2251  31A6  2679  31A2   	fcall	_PIN_MANAGER_Initialize
 23892                           
 23893                           ;mcc.c: 82: OSCILLATOR_Initialize();
 23894  2254  31A0  20D4  31A2   	fcall	_OSCILLATOR_Initialize
 23895                           
 23896                           ;mcc.c: 83: WDT_Initialize();
 23897  2257  31AF  279F  31A2   	fcall	_WDT_Initialize
 23898                           
 23899                           ;mcc.c: 84: TMR4_Initialize();
 23900  225A  31A1  21E7  31A2   	fcall	_TMR4_Initialize
 23901                           
 23902                           ;mcc.c: 85: TMR2_Initialize();
 23903  225D  31A1  21D5  31A2   	fcall	_TMR2_Initialize
 23904                           
 23905                           ;mcc.c: 86: TMR0_Initialize();
 23906  2260  31A2  220D  31A2   	fcall	_TMR0_Initialize
 23907                           
 23908                           ;mcc.c: 87: EUSART_Initialize();
 23909  2263  31A2  2297         	fcall	_EUSART_Initialize
 23910  2265  0008               	return
 23911  2266                     __end_of_SYSTEM_Initialize:	
 23912                           
 23913                           	psect	text120
 23914  2F9F                     __ptext120:	
 23915 ;; *************** function _WDT_Initialize *****************
 23916 ;; Defined at:
 23917 ;;		line 104 in file "mcc_generated_files/mcc.c"
 23918 ;; Parameters:    Size  Location     Type
 23919 ;;		None
 23920 ;; Auto vars:     Size  Location     Type
 23921 ;;		None
 23922 ;; Return value:  Size  Location     Type
 23923 ;;                  1    wreg      void 
 23924 ;; Registers used:
 23925 ;;		wreg
 23926 ;; Tracked objects:
 23927 ;;		On entry : 0/0
 23928 ;;		On exit  : 0/0
 23929 ;;		Unchanged: 0/0
 23930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23935 ;;Total ram usage:        0 bytes
 23936 ;; Hardware stack levels used:    1
 23937 ;; Hardware stack levels required when called:    6
 23938 ;; This function calls:
 23939 ;;		Nothing
 23940 ;; This function is called by:
 23941 ;;		_SYSTEM_Initialize
 23942 ;; This function uses a non-reentrant model
 23943 ;;
 23944                           
 23945                           
 23946                           ;psect for function _WDT_Initialize
 23947  2F9F                     _WDT_Initialize:	
 23948                           
 23949                           ;mcc.c: 107: WDTCON = 0x16;
 23950                           
 23951                           ;incstack = 0
 23952                           ; Regs used in _WDT_Initialize: [wreg]
 23953  2F9F  3016               	movlw	22
 23954  2FA0  0021               	movlb	1	; select bank1
 23955  2FA1  0097               	movwf	23	;volatile
 23956  2FA2  0008               	return
 23957  2FA3                     __end_of_WDT_Initialize:	
 23958                           
 23959                           	psect	text121
 23960  21E7                     __ptext121:	
 23961 ;; *************** function _TMR4_Initialize *****************
 23962 ;; Defined at:
 23963 ;;		line 63 in file "mcc_generated_files/tmr4.c"
 23964 ;; Parameters:    Size  Location     Type
 23965 ;;		None
 23966 ;; Auto vars:     Size  Location     Type
 23967 ;;		None
 23968 ;; Return value:  Size  Location     Type
 23969 ;;                  1    wreg      void 
 23970 ;; Registers used:
 23971 ;;		wreg, status,2, status,0, pclath, cstack
 23972 ;; Tracked objects:
 23973 ;;		On entry : 0/0
 23974 ;;		On exit  : 0/0
 23975 ;;		Unchanged: 0/0
 23976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23981 ;;Total ram usage:        0 bytes
 23982 ;; Hardware stack levels used:    1
 23983 ;; Hardware stack levels required when called:    7
 23984 ;; This function calls:
 23985 ;;		_TMR4_SetInterruptHandler
 23986 ;; This function is called by:
 23987 ;;		_SYSTEM_Initialize
 23988 ;; This function uses a non-reentrant model
 23989 ;;
 23990                           
 23991                           
 23992                           ;psect for function _TMR4_Initialize
 23993  21E7                     _TMR4_Initialize:	
 23994                           
 23995                           ;tmr4.c: 68: PR4 = 0xF3;
 23996                           
 23997                           ;incstack = 0
 23998                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
 23999  21E7  30F3               	movlw	243
 24000  21E8  0028               	movlb	8	; select bank8
 24001  21E9  0096               	movwf	22	;volatile
 24002                           
 24003                           ;tmr4.c: 71: TMR4 = 0x00;
 24004  21EA  0195               	clrf	21	;volatile
 24005                           
 24006                           ;tmr4.c: 74: PIR2bits.TMR4IF = 0;
 24007  21EB  0020               	movlb	0	; select bank0
 24008  21EC  1092               	bcf	18,1	;volatile
 24009                           
 24010                           ;tmr4.c: 77: PIE2bits.TMR4IE = 1;
 24011  21ED  0021               	movlb	1	; select bank1
 24012  21EE  1492               	bsf	18,1	;volatile
 24013                           
 24014                           ;tmr4.c: 80: TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandler);
 24015  21EF  30CA               	movlw	low _TMR4_DefaultInterruptHandler
 24016  21F0  0020               	movlb	0	; select bank0
 24017  21F1  00B1               	movwf	TMR4_SetInterruptHandler@InterruptHandler
 24018  21F2  3020               	movlw	high _TMR4_DefaultInterruptHandler
 24019  21F3  00B2               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
 24020  21F4  31A0  209D         	fcall	_TMR4_SetInterruptHandler
 24021                           
 24022                           ;tmr4.c: 83: T4CON = 0x7F;
 24023  21F6  307F               	movlw	127
 24024  21F7  0028               	movlb	8	; select bank8
 24025  21F8  0097               	movwf	23	;volatile
 24026  21F9  0008               	return
 24027  21FA                     __end_of_TMR4_Initialize:	
 24028                           
 24029                           	psect	text122
 24030  209D                     __ptext122:	
 24031 ;; *************** function _TMR4_SetInterruptHandler *****************
 24032 ;; Defined at:
 24033 ;;		line 131 in file "mcc_generated_files/tmr4.c"
 24034 ;; Parameters:    Size  Location     Type
 24035 ;;  InterruptHan    2   17[BANK0 ] PTR FTN()void 
 24036 ;;		 -> TMR4_DefaultInterruptHandler(1), 
 24037 ;; Auto vars:     Size  Location     Type
 24038 ;;		None
 24039 ;; Return value:  Size  Location     Type
 24040 ;;                  1    wreg      void 
 24041 ;; Registers used:
 24042 ;;		wreg
 24043 ;; Tracked objects:
 24044 ;;		On entry : 0/0
 24045 ;;		On exit  : 0/0
 24046 ;;		Unchanged: 0/0
 24047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24048 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24051 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24052 ;;Total ram usage:        2 bytes
 24053 ;; Hardware stack levels used:    1
 24054 ;; Hardware stack levels required when called:    6
 24055 ;; This function calls:
 24056 ;;		Nothing
 24057 ;; This function is called by:
 24058 ;;		_TMR4_Initialize
 24059 ;; This function uses a non-reentrant model
 24060 ;;
 24061                           
 24062                           
 24063                           ;psect for function _TMR4_SetInterruptHandler
 24064  209D                     _TMR4_SetInterruptHandler:	
 24065                           
 24066                           ;tmr4.c: 132: TMR4_InterruptHandler = InterruptHandler;
 24067                           
 24068                           ;incstack = 0
 24069                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
 24070  209D  0020               	movlb	0	; select bank0
 24071  209E  0832               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
 24072  209F  0023               	movlb	3	; select bank3
 24073  20A0  00E7               	movwf	(_TMR4_InterruptHandler+1)^(0+384)
 24074  20A1  0020               	movlb	0	; select bank0
 24075  20A2  0831               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
 24076  20A3  0023               	movlb	3	; select bank3
 24077  20A4  00E6               	movwf	_TMR4_InterruptHandler^(0+384)
 24078  20A5  0008               	return
 24079  20A6                     __end_of_TMR4_SetInterruptHandler:	
 24080                           
 24081                           	psect	text123
 24082  21D5                     __ptext123:	
 24083 ;; *************** function _TMR2_Initialize *****************
 24084 ;; Defined at:
 24085 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 24086 ;; Parameters:    Size  Location     Type
 24087 ;;		None
 24088 ;; Auto vars:     Size  Location     Type
 24089 ;;		None
 24090 ;; Return value:  Size  Location     Type
 24091 ;;                  1    wreg      void 
 24092 ;; Registers used:
 24093 ;;		wreg, status,2, status,0, pclath, cstack
 24094 ;; Tracked objects:
 24095 ;;		On entry : 0/0
 24096 ;;		On exit  : 0/0
 24097 ;;		Unchanged: 0/0
 24098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24103 ;;Total ram usage:        0 bytes
 24104 ;; Hardware stack levels used:    1
 24105 ;; Hardware stack levels required when called:    7
 24106 ;; This function calls:
 24107 ;;		_TMR2_SetInterruptHandler
 24108 ;; This function is called by:
 24109 ;;		_SYSTEM_Initialize
 24110 ;; This function uses a non-reentrant model
 24111 ;;
 24112                           
 24113                           
 24114                           ;psect for function _TMR2_Initialize
 24115  21D5                     _TMR2_Initialize:	
 24116                           
 24117                           ;tmr2.c: 67: PR2 = 0x0F;
 24118                           
 24119                           ;incstack = 0
 24120                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 24121  21D5  300F               	movlw	15
 24122  21D6  0020               	movlb	0	; select bank0
 24123  21D7  009E               	movwf	30	;volatile
 24124                           
 24125                           ;tmr2.c: 70: TMR2 = 0x00;
 24126  21D8  019D               	clrf	29	;volatile
 24127                           
 24128                           ;tmr2.c: 73: PIR1bits.TMR2IF = 0;
 24129  21D9  1091               	bcf	17,1	;volatile
 24130                           
 24131                           ;tmr2.c: 76: PIE1bits.TMR2IE = 1;
 24132  21DA  0021               	movlb	1	; select bank1
 24133  21DB  1491               	bsf	17,1	;volatile
 24134                           
 24135                           ;tmr2.c: 79: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 24136  21DC  3082               	movlw	low _TMR2_DefaultInterruptHandler
 24137  21DD  0020               	movlb	0	; select bank0
 24138  21DE  00B1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 24139  21DF  3020               	movlw	high _TMR2_DefaultInterruptHandler
 24140  21E0  00B2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 24141  21E1  31A0  2094         	fcall	_TMR2_SetInterruptHandler
 24142                           
 24143                           ;tmr2.c: 82: T2CON = 0x4E;
 24144  21E3  304E               	movlw	78
 24145  21E4  0020               	movlb	0	; select bank0
 24146  21E5  009F               	movwf	31	;volatile
 24147  21E6  0008               	return
 24148  21E7                     __end_of_TMR2_Initialize:	
 24149                           
 24150                           	psect	text124
 24151  2094                     __ptext124:	
 24152 ;; *************** function _TMR2_SetInterruptHandler *****************
 24153 ;; Defined at:
 24154 ;;		line 130 in file "mcc_generated_files/tmr2.c"
 24155 ;; Parameters:    Size  Location     Type
 24156 ;;  InterruptHan    2   17[BANK0 ] PTR FTN()void 
 24157 ;;		 -> TMR2_DefaultInterruptHandler(1), 
 24158 ;; Auto vars:     Size  Location     Type
 24159 ;;		None
 24160 ;; Return value:  Size  Location     Type
 24161 ;;                  1    wreg      void 
 24162 ;; Registers used:
 24163 ;;		wreg
 24164 ;; Tracked objects:
 24165 ;;		On entry : 0/0
 24166 ;;		On exit  : 0/0
 24167 ;;		Unchanged: 0/0
 24168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24169 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24172 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24173 ;;Total ram usage:        2 bytes
 24174 ;; Hardware stack levels used:    1
 24175 ;; Hardware stack levels required when called:    6
 24176 ;; This function calls:
 24177 ;;		Nothing
 24178 ;; This function is called by:
 24179 ;;		_TMR2_Initialize
 24180 ;; This function uses a non-reentrant model
 24181 ;;
 24182                           
 24183                           
 24184                           ;psect for function _TMR2_SetInterruptHandler
 24185  2094                     _TMR2_SetInterruptHandler:	
 24186                           
 24187                           ;tmr2.c: 131: TMR2_InterruptHandler = InterruptHandler;
 24188                           
 24189                           ;incstack = 0
 24190                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
 24191  2094  0020               	movlb	0	; select bank0
 24192  2095  0832               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
 24193  2096  0023               	movlb	3	; select bank3
 24194  2097  00E9               	movwf	(_TMR2_InterruptHandler+1)^(0+384)
 24195  2098  0020               	movlb	0	; select bank0
 24196  2099  0831               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
 24197  209A  0023               	movlb	3	; select bank3
 24198  209B  00E8               	movwf	_TMR2_InterruptHandler^(0+384)
 24199  209C  0008               	return
 24200  209D                     __end_of_TMR2_SetInterruptHandler:	
 24201                           
 24202                           	psect	text125
 24203  220D                     __ptext125:	
 24204 ;; *************** function _TMR0_Initialize *****************
 24205 ;; Defined at:
 24206 ;;		line 59 in file "mcc_generated_files/tmr0.c"
 24207 ;; Parameters:    Size  Location     Type
 24208 ;;		None
 24209 ;; Auto vars:     Size  Location     Type
 24210 ;;		None
 24211 ;; Return value:  Size  Location     Type
 24212 ;;                  1    wreg      void 
 24213 ;; Registers used:
 24214 ;;		wreg, status,2, status,0, pclath, cstack
 24215 ;; Tracked objects:
 24216 ;;		On entry : 0/0
 24217 ;;		On exit  : 0/0
 24218 ;;		Unchanged: 0/0
 24219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24224 ;;Total ram usage:        0 bytes
 24225 ;; Hardware stack levels used:    1
 24226 ;; Hardware stack levels required when called:    7
 24227 ;; This function calls:
 24228 ;;		_TMR0_SetInterruptHandler
 24229 ;; This function is called by:
 24230 ;;		_SYSTEM_Initialize
 24231 ;; This function uses a non-reentrant model
 24232 ;;
 24233                           
 24234                           
 24235                           ;psect for function _TMR0_Initialize
 24236  220D                     _TMR0_Initialize:	
 24237                           
 24238                           ;tmr0.c: 64: T0CON1 = 0x58;
 24239                           
 24240                           ;incstack = 0
 24241                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 24242  220D  3058               	movlw	88
 24243  220E  0020               	movlb	0	; select bank0
 24244  220F  0098               	movwf	24	;volatile
 24245                           
 24246                           ;tmr0.c: 67: TMR0H = 0x61;
 24247  2210  3061               	movlw	97
 24248  2211  0096               	movwf	22	;volatile
 24249                           
 24250                           ;tmr0.c: 70: TMR0L = 0x00;
 24251  2212  0195               	clrf	21	;volatile
 24252                           
 24253                           ;tmr0.c: 73: PIR0bits.TMR0IF = 0;
 24254  2213  1290               	bcf	16,5	;volatile
 24255                           
 24256                           ;tmr0.c: 76: PIE0bits.TMR0IE = 1;
 24257  2214  0021               	movlb	1	; select bank1
 24258  2215  1690               	bsf	16,5	;volatile
 24259                           
 24260                           ;tmr0.c: 79: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 24261  2216  3016               	movlw	low _TMR0_DefaultInterruptHandler
 24262  2217  0020               	movlb	0	; select bank0
 24263  2218  00B1               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 24264  2219  3027               	movlw	high _TMR0_DefaultInterruptHandler
 24265  221A  00B2               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 24266  221B  31A0  208B         	fcall	_TMR0_SetInterruptHandler
 24267                           
 24268                           ;tmr0.c: 82: T0CON0 = 0x89;
 24269  221D  3089               	movlw	137
 24270  221E  0020               	movlb	0	; select bank0
 24271  221F  0097               	movwf	23	;volatile
 24272  2220  0008               	return
 24273  2221                     __end_of_TMR0_Initialize:	
 24274                           
 24275                           	psect	text126
 24276  208B                     __ptext126:	
 24277 ;; *************** function _TMR0_SetInterruptHandler *****************
 24278 ;; Defined at:
 24279 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 24280 ;; Parameters:    Size  Location     Type
 24281 ;;  InterruptHan    2   17[BANK0 ] PTR FTN()void 
 24282 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 24283 ;; Auto vars:     Size  Location     Type
 24284 ;;		None
 24285 ;; Return value:  Size  Location     Type
 24286 ;;                  1    wreg      void 
 24287 ;; Registers used:
 24288 ;;		wreg
 24289 ;; Tracked objects:
 24290 ;;		On entry : 0/0
 24291 ;;		On exit  : 0/0
 24292 ;;		Unchanged: 0/0
 24293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24294 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24297 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24298 ;;Total ram usage:        2 bytes
 24299 ;; Hardware stack levels used:    1
 24300 ;; Hardware stack levels required when called:    6
 24301 ;; This function calls:
 24302 ;;		Nothing
 24303 ;; This function is called by:
 24304 ;;		_TMR0_Initialize
 24305 ;; This function uses a non-reentrant model
 24306 ;;
 24307                           
 24308                           
 24309                           ;psect for function _TMR0_SetInterruptHandler
 24310  208B                     _TMR0_SetInterruptHandler:	
 24311                           
 24312                           ;tmr0.c: 133: TMR0_InterruptHandler = InterruptHandler;
 24313                           
 24314                           ;incstack = 0
 24315                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 24316  208B  0020               	movlb	0	; select bank0
 24317  208C  0832               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 24318  208D  0023               	movlb	3	; select bank3
 24319  208E  00EB               	movwf	(_TMR0_InterruptHandler+1)^(0+384)
 24320  208F  0020               	movlb	0	; select bank0
 24321  2090  0831               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 24322  2091  0023               	movlb	3	; select bank3
 24323  2092  00EA               	movwf	_TMR0_InterruptHandler^(0+384)
 24324  2093  0008               	return
 24325  2094                     __end_of_TMR0_SetInterruptHandler:	
 24326                           
 24327                           	psect	text127
 24328  203A                     __ptext127:	
 24329 ;; *************** function _PMD_Initialize *****************
 24330 ;; Defined at:
 24331 ;;		line 110 in file "mcc_generated_files/mcc.c"
 24332 ;; Parameters:    Size  Location     Type
 24333 ;;		None
 24334 ;; Auto vars:     Size  Location     Type
 24335 ;;		None
 24336 ;; Return value:  Size  Location     Type
 24337 ;;                  1    wreg      void 
 24338 ;; Registers used:
 24339 ;;		status,2
 24340 ;; Tracked objects:
 24341 ;;		On entry : 0/0
 24342 ;;		On exit  : 0/0
 24343 ;;		Unchanged: 0/0
 24344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24349 ;;Total ram usage:        0 bytes
 24350 ;; Hardware stack levels used:    1
 24351 ;; Hardware stack levels required when called:    6
 24352 ;; This function calls:
 24353 ;;		Nothing
 24354 ;; This function is called by:
 24355 ;;		_SYSTEM_Initialize
 24356 ;; This function uses a non-reentrant model
 24357 ;;
 24358                           
 24359                           
 24360                           ;psect for function _PMD_Initialize
 24361  203A                     _PMD_Initialize:	
 24362                           
 24363                           ;mcc.c: 113: PMD0 = 0x00;
 24364                           
 24365                           ;incstack = 0
 24366                           ; Regs used in _PMD_Initialize: [status,2]
 24367  203A  0032               	movlb	18	; select bank18
 24368  203B  0191               	clrf	17	;volatile
 24369                           
 24370                           ;mcc.c: 115: PMD1 = 0x00;
 24371  203C  0192               	clrf	18	;volatile
 24372                           
 24373                           ;mcc.c: 117: PMD2 = 0x00;
 24374  203D  0193               	clrf	19	;volatile
 24375                           
 24376                           ;mcc.c: 119: PMD3 = 0x00;
 24377  203E  0194               	clrf	20	;volatile
 24378                           
 24379                           ;mcc.c: 121: PMD4 = 0x00;
 24380  203F  0195               	clrf	21	;volatile
 24381                           
 24382                           ;mcc.c: 123: PMD5 = 0x00;
 24383  2040  0196               	clrf	22	;volatile
 24384  2041  0008               	return
 24385  2042                     __end_of_PMD_Initialize:	
 24386                           
 24387                           	psect	text128
 24388  2679                     __ptext128:	
 24389 ;; *************** function _PIN_MANAGER_Initialize *****************
 24390 ;; Defined at:
 24391 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 24392 ;; Parameters:    Size  Location     Type
 24393 ;;		None
 24394 ;; Auto vars:     Size  Location     Type
 24395 ;;		None
 24396 ;; Return value:  Size  Location     Type
 24397 ;;                  1    wreg      void 
 24398 ;; Registers used:
 24399 ;;		wreg, status,2, status,0
 24400 ;; Tracked objects:
 24401 ;;		On entry : 0/0
 24402 ;;		On exit  : 0/0
 24403 ;;		Unchanged: 0/0
 24404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24409 ;;Total ram usage:        0 bytes
 24410 ;; Hardware stack levels used:    1
 24411 ;; Hardware stack levels required when called:    6
 24412 ;; This function calls:
 24413 ;;		Nothing
 24414 ;; This function is called by:
 24415 ;;		_SYSTEM_Initialize
 24416 ;; This function uses a non-reentrant model
 24417 ;;
 24418                           
 24419                           
 24420                           ;psect for function _PIN_MANAGER_Initialize
 24421  2679                     _PIN_MANAGER_Initialize:	
 24422                           
 24423                           ;pin_manager.c: 57: LATA = 0x00;
 24424                           
 24425                           ;incstack = 0
 24426                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 24427  2679  0022               	movlb	2	; select bank2
 24428  267A  018C               	clrf	12	;volatile
 24429                           
 24430                           ;pin_manager.c: 58: LATB = 0x00;
 24431  267B  018D               	clrf	13	;volatile
 24432                           
 24433                           ;pin_manager.c: 59: LATC = 0x00;
 24434  267C  018E               	clrf	14	;volatile
 24435                           
 24436                           ;pin_manager.c: 64: TRISA = 0x33;
 24437  267D  3033               	movlw	51
 24438  267E  0021               	movlb	1	; select bank1
 24439  267F  008C               	movwf	12	;volatile
 24440                           
 24441                           ;pin_manager.c: 65: TRISB = 0x60;
 24442  2680  3060               	movlw	96
 24443  2681  008D               	movwf	13	;volatile
 24444                           
 24445                           ;pin_manager.c: 66: TRISC = 0xF8;
 24446  2682  30F8               	movlw	248
 24447  2683  008E               	movwf	14	;volatile
 24448                           
 24449                           ;pin_manager.c: 71: ANSELC = 0x00;
 24450  2684  0023               	movlb	3	; select bank3
 24451  2685  018E               	clrf	14	;volatile
 24452                           
 24453                           ;pin_manager.c: 72: ANSELB = 0x00;
 24454  2686  018D               	clrf	13	;volatile
 24455                           
 24456                           ;pin_manager.c: 73: ANSELA = 0x00;
 24457  2687  018C               	clrf	12	;volatile
 24458                           
 24459                           ;pin_manager.c: 78: WPUB = 0x00;
 24460  2688  0024               	movlb	4	; select bank4
 24461  2689  018D               	clrf	13	;volatile
 24462                           
 24463                           ;pin_manager.c: 79: WPUA = 0x00;
 24464  268A  018C               	clrf	12	;volatile
 24465                           
 24466                           ;pin_manager.c: 80: WPUC = 0xC8;
 24467  268B  30C8               	movlw	200
 24468  268C  008E               	movwf	14	;volatile
 24469                           
 24470                           ;pin_manager.c: 85: ODCONA = 0x00;
 24471  268D  0025               	movlb	5	; select bank5
 24472  268E  018C               	clrf	12	;volatile
 24473                           
 24474                           ;pin_manager.c: 86: ODCONB = 0x00;
 24475  268F  018D               	clrf	13	;volatile
 24476                           
 24477                           ;pin_manager.c: 87: ODCONC = 0x00;
 24478  2690  018E               	clrf	14	;volatile
 24479                           
 24480                           ;pin_manager.c: 94: SSP1DATPPSbits.SSP1DATPPS = 0x0D;
 24481  2691  003C               	movlb	28	; select bank28
 24482  2692  0821               	movf	33,w	;volatile
 24483  2693  39E0               	andlw	-32
 24484  2694  380D               	iorlw	13
 24485  2695  00A1               	movwf	33	;volatile
 24486                           
 24487                           ;pin_manager.c: 95: SSP1CLKPPSbits.SSP1CLKPPS = 0x0E;
 24488  2696  0820               	movf	32,w	;volatile
 24489  2697  39E0               	andlw	-32
 24490  2698  380E               	iorlw	14
 24491  2699  00A0               	movwf	32	;volatile
 24492                           
 24493                           ;pin_manager.c: 96: RXPPSbits.RXPPS = 0x17;
 24494  269A  0824               	movf	36,w	;volatile
 24495  269B  39E0               	andlw	-32
 24496  269C  3817               	iorlw	23
 24497  269D  00A4               	movwf	36	;volatile
 24498                           
 24499                           ;pin_manager.c: 97: RB7PPSbits.RB7PPS = 0x14;
 24500  269E  003D               	movlb	29	; select bank29
 24501  269F  081F               	movf	31,w	;volatile
 24502  26A0  39E0               	andlw	-32
 24503  26A1  3814               	iorlw	20
 24504  26A2  009F               	movwf	31	;volatile
 24505                           
 24506                           ;pin_manager.c: 98: RB6PPSbits.RB6PPS = 0x18;
 24507  26A3  081E               	movf	30,w	;volatile
 24508  26A4  39E0               	andlw	-32
 24509  26A5  3818               	iorlw	24
 24510  26A6  009E               	movwf	30	;volatile
 24511                           
 24512                           ;pin_manager.c: 99: RB5PPSbits.RB5PPS = 0x19;
 24513  26A7  081D               	movf	29,w	;volatile
 24514  26A8  39E0               	andlw	-32
 24515  26A9  3819               	iorlw	25
 24516  26AA  009D               	movwf	29	;volatile
 24517  26AB  0008               	return
 24518  26AC                     __end_of_PIN_MANAGER_Initialize:	
 24519                           
 24520                           	psect	text129
 24521  20D4                     __ptext129:	
 24522 ;; *************** function _OSCILLATOR_Initialize *****************
 24523 ;; Defined at:
 24524 ;;		line 90 in file "mcc_generated_files/mcc.c"
 24525 ;; Parameters:    Size  Location     Type
 24526 ;;		None
 24527 ;; Auto vars:     Size  Location     Type
 24528 ;;		None
 24529 ;; Return value:  Size  Location     Type
 24530 ;;                  1    wreg      void 
 24531 ;; Registers used:
 24532 ;;		wreg, status,2
 24533 ;; Tracked objects:
 24534 ;;		On entry : 0/0
 24535 ;;		On exit  : 0/0
 24536 ;;		Unchanged: 0/0
 24537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24542 ;;Total ram usage:        0 bytes
 24543 ;; Hardware stack levels used:    1
 24544 ;; Hardware stack levels required when called:    6
 24545 ;; This function calls:
 24546 ;;		Nothing
 24547 ;; This function is called by:
 24548 ;;		_SYSTEM_Initialize
 24549 ;; This function uses a non-reentrant model
 24550 ;;
 24551                           
 24552                           
 24553                           ;psect for function _OSCILLATOR_Initialize
 24554  20D4                     _OSCILLATOR_Initialize:	
 24555                           
 24556                           ;mcc.c: 93: OSCCON1 = 0x62;
 24557                           
 24558                           ;incstack = 0
 24559                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 24560  20D4  3062               	movlw	98
 24561  20D5  0032               	movlb	18	; select bank18
 24562  20D6  0099               	movwf	25	;volatile
 24563                           
 24564                           ;mcc.c: 95: OSCCON3 = 0x00;
 24565  20D7  019B               	clrf	27	;volatile
 24566                           
 24567                           ;mcc.c: 97: OSCEN = 0x00;
 24568  20D8  019D               	clrf	29	;volatile
 24569                           
 24570                           ;mcc.c: 99: OSCFRQ = 0x03;
 24571  20D9  3003               	movlw	3
 24572  20DA  009F               	movwf	31	;volatile
 24573                           
 24574                           ;mcc.c: 101: OSCTUNE = 0x20;
 24575  20DB  3020               	movlw	32
 24576  20DC  009E               	movwf	30	;volatile
 24577  20DD  0008               	return
 24578  20DE                     __end_of_OSCILLATOR_Initialize:	
 24579                           
 24580                           	psect	text130
 24581  2297                     __ptext130:	
 24582 ;; *************** function _EUSART_Initialize *****************
 24583 ;; Defined at:
 24584 ;;		line 72 in file "mcc_generated_files/eusart.c"
 24585 ;; Parameters:    Size  Location     Type
 24586 ;;		None
 24587 ;; Auto vars:     Size  Location     Type
 24588 ;;		None
 24589 ;; Return value:  Size  Location     Type
 24590 ;;                  1    wreg      void 
 24591 ;; Registers used:
 24592 ;;		wreg, status,2
 24593 ;; Tracked objects:
 24594 ;;		On entry : 0/0
 24595 ;;		On exit  : 0/0
 24596 ;;		Unchanged: 0/0
 24597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24601 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24602 ;;Total ram usage:        1 bytes
 24603 ;; Hardware stack levels used:    1
 24604 ;; Hardware stack levels required when called:    6
 24605 ;; This function calls:
 24606 ;;		Nothing
 24607 ;; This function is called by:
 24608 ;;		_SYSTEM_Initialize
 24609 ;; This function uses a non-reentrant model
 24610 ;;
 24611                           
 24612                           
 24613                           ;psect for function _EUSART_Initialize
 24614  2297                     _EUSART_Initialize:	
 24615                           
 24616                           ;eusart.c: 75: PIE1bits.RCIE = 0;
 24617                           
 24618                           ;incstack = 0
 24619                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
 24620  2297  0021               	movlb	1	; select bank1
 24621  2298  1291               	bcf	17,5	;volatile
 24622                           
 24623                           ;eusart.c: 76: PIE1bits.TXIE = 0;
 24624  2299  1211               	bcf	17,4	;volatile
 24625                           
 24626                           ;eusart.c: 80: BAUD1CON = 0x08;
 24627  229A  3008               	movlw	8
 24628  229B  0023               	movlb	3	; select bank3
 24629  229C  009F               	movwf	31	;volatile
 24630                           
 24631                           ;eusart.c: 83: RC1STA = 0x90;
 24632  229D  3090               	movlw	144
 24633  229E  009D               	movwf	29	;volatile
 24634                           
 24635                           ;eusart.c: 86: TX1STA = 0x24;
 24636  229F  3024               	movlw	36
 24637  22A0  009E               	movwf	30	;volatile
 24638                           
 24639                           ;eusart.c: 89: SP1BRGL = 0x19;
 24640  22A1  3019               	movlw	25
 24641  22A2  009B               	movwf	27	;volatile
 24642                           
 24643                           ;eusart.c: 92: SP1BRGH = 0x00;
 24644  22A3  019C               	clrf	28	;volatile
 24645                           
 24646                           ;eusart.c: 96: eusartTxHead = 0;
 24647  22A4  01FD               	clrf	_eusartTxHead	;volatile
 24648                           
 24649                           ;eusart.c: 97: eusartTxTail = 0;
 24650  22A5  0020               	movlb	0	; select bank0
 24651  22A6  01D9               	clrf	_eusartTxTail	;volatile
 24652                           
 24653                           ;eusart.c: 98: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 24654  22A7  3008               	movlw	8
 24655  22A8  00B1               	movwf	??_EUSART_Initialize
 24656  22A9  0831               	movf	??_EUSART_Initialize,w
 24657  22AA  00DE               	movwf	_eusartTxBufferRemaining	;volatile
 24658                           
 24659                           ;eusart.c: 100: eusartRxHead = 0;
 24660  22AB  01D8               	clrf	_eusartRxHead	;volatile
 24661                           
 24662                           ;eusart.c: 101: eusartRxTail = 0;
 24663  22AC  01D7               	clrf	_eusartRxTail	;volatile
 24664                           
 24665                           ;eusart.c: 102: eusartRxCount = 0;
 24666  22AD  01D6               	clrf	_eusartRxCount	;volatile
 24667                           
 24668                           ;eusart.c: 105: PIE1bits.RCIE = 1;
 24669  22AE  0021               	movlb	1	; select bank1
 24670  22AF  1691               	bsf	17,5	;volatile
 24671  22B0  0008               	return
 24672  22B1                     __end_of_EUSART_Initialize:	
 24673                           
 24674                           	psect	text131
 24675  23B7                     __ptext131:	
 24676 ;; *************** function _EUSART_Read *****************
 24677 ;; Defined at:
 24678 ;;		line 108 in file "mcc_generated_files/eusart.c"
 24679 ;; Parameters:    Size  Location     Type
 24680 ;;		None
 24681 ;; Auto vars:     Size  Location     Type
 24682 ;;  readValue       1   18[BANK0 ] unsigned char 
 24683 ;; Return value:  Size  Location     Type
 24684 ;;                  1    wreg      unsigned char 
 24685 ;; Registers used:
 24686 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 24687 ;; Tracked objects:
 24688 ;;		On entry : 0/0
 24689 ;;		On exit  : 0/0
 24690 ;;		Unchanged: 0/0
 24691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24693 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24694 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24695 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24696 ;;Total ram usage:        2 bytes
 24697 ;; Hardware stack levels used:    1
 24698 ;; Hardware stack levels required when called:    6
 24699 ;; This function calls:
 24700 ;;		Nothing
 24701 ;; This function is called by:
 24702 ;;		_main
 24703 ;;		_getch
 24704 ;; This function uses a non-reentrant model
 24705 ;;
 24706                           
 24707                           
 24708                           ;psect for function _EUSART_Read
 24709  23B7                     _EUSART_Read:	
 24710                           
 24711                           ;eusart.c: 110: uint8_t readValue = 0;
 24712                           
 24713                           ;incstack = 0
 24714                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 24715  23B7  0020               	movlb	0	; select bank0
 24716  23B8  01B2               	clrf	EUSART_Read@readValue
 24717  23B9                     l6962:	
 24718                           ;eusart.c: 113: {
 24719                           
 24720                           ;eusart.c: 112: while(0 == eusartRxCount)
 24721                           
 24722  23B9  0856               	movf	_eusartRxCount,w	;volatile
 24723  23BA  1903               	btfsc	3,2
 24724  23BB  2BB9               	goto	l6962
 24725                           
 24726                           ;eusart.c: 114: }
 24727                           ;eusart.c: 116: readValue = eusartRxBuffer[eusartRxTail++];
 24728  23BC  0857               	movf	_eusartRxTail,w
 24729  23BD  3EA0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 24730  23BE  0086               	movwf	6
 24731  23BF  3001               	movlw	1	; select bank3/4
 24732  23C0  0087               	movwf	7
 24733  23C1  0801               	movf	1,w
 24734  23C2  00B1               	movwf	??_EUSART_Read
 24735  23C3  0831               	movf	??_EUSART_Read,w
 24736  23C4  00B2               	movwf	EUSART_Read@readValue
 24737  23C5  3001               	movlw	1
 24738  23C6  00B1               	movwf	??_EUSART_Read
 24739  23C7  0831               	movf	??_EUSART_Read,w
 24740  23C8  07D7               	addwf	_eusartRxTail,f	;volatile
 24741                           
 24742                           ;eusart.c: 117: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 24743  23C9  3008               	movlw	8
 24744  23CA  0257               	subwf	_eusartRxTail,w	;volatile
 24745  23CB  1803               	btfsc	3,0
 24746                           
 24747                           ;eusart.c: 118: {
 24748                           ;eusart.c: 119: eusartRxTail = 0;
 24749  23CC  01D7               	clrf	_eusartRxTail	;volatile
 24750                           
 24751                           ;eusart.c: 120: }
 24752                           ;eusart.c: 121: PIE1bits.RCIE = 0;
 24753  23CD  0021               	movlb	1	; select bank1
 24754  23CE  1291               	bcf	17,5	;volatile
 24755                           
 24756                           ;eusart.c: 122: eusartRxCount--;
 24757  23CF  3001               	movlw	1
 24758  23D0  0020               	movlb	0	; select bank0
 24759  23D1  02D6               	subwf	_eusartRxCount,f	;volatile
 24760                           
 24761                           ;eusart.c: 123: PIE1bits.RCIE = 1;
 24762  23D2  0021               	movlb	1	; select bank1
 24763  23D3  1691               	bsf	17,5	;volatile
 24764                           
 24765                           ;eusart.c: 125: return readValue;
 24766  23D4  0020               	movlb	0	; select bank0
 24767  23D5  0832               	movf	EUSART_Read@readValue,w
 24768  23D6  0008               	return
 24769  23D7                     __end_of_EUSART_Read:	
 24770                           
 24771                           	psect	intentry
 24772  0004                     __pintentry:	
 24773 ;; *************** function _INTERRUPT_InterruptManager *****************
 24774 ;; Defined at:
 24775 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 24776 ;; Parameters:    Size  Location     Type
 24777 ;;		None
 24778 ;; Auto vars:     Size  Location     Type
 24779 ;;		None
 24780 ;; Return value:  Size  Location     Type
 24781 ;;                  1    wreg      void 
 24782 ;; Registers used:
 24783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24784 ;; Tracked objects:
 24785 ;;		On entry : 0/0
 24786 ;;		On exit  : 0/0
 24787 ;;		Unchanged: 0/0
 24788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24791 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24792 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24793 ;;Total ram usage:        1 bytes
 24794 ;; Hardware stack levels used:    1
 24795 ;; Hardware stack levels required when called:    5
 24796 ;; This function calls:
 24797 ;;		Absolute function
 24798 ;;		_EUSART_Receive_ISR
 24799 ;;		_EUSART_Transmit_ISR
 24800 ;;		_TMR0_ISR
 24801 ;;		_TMR2_ISR
 24802 ;;		_TMR4_ISR
 24803 ;;		_i2c_busCollisionISR
 24804 ;;		i1_i2c_ISR
 24805 ;; This function is called by:
 24806 ;;		Interrupt level 1
 24807 ;; This function uses a non-reentrant model
 24808 ;;
 24809                           
 24810  0004                     _INTERRUPT_InterruptManager:	
 24811                           
 24812                           ;incstack = 0
 24813  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 24814                           
 24815                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24816  0005  3180               	pagesel	$
 24817  0006  0020               	movlb	0	; select bank0
 24818  0007  087F               	movf	127,w
 24819  0008  00FC               	movwf	??_INTERRUPT_InterruptManager
 24820                           
 24821                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 24822  0009  0021               	movlb	1	; select bank1
 24823  000A  1E90               	btfss	16,5	;volatile
 24824  000B  2813               	goto	i1l376
 24825  000C  0020               	movlb	0	; select bank0
 24826  000D  1E90               	btfss	16,5	;volatile
 24827  000E  2813               	goto	i1l376
 24828                           
 24829                           ;interrupt_manager.c: 55: {
 24830                           ;interrupt_manager.c: 56: TMR0_ISR();
 24831  000F  31A1  2162  3180   	fcall	_TMR0_ISR
 24832                           
 24833                           ;interrupt_manager.c: 57: }
 24834  0012  2855               	goto	i1l392
 24835  0013                     i1l376:	
 24836                           
 24837                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1)
 24838  0013  1F0B               	btfss	11,6	;volatile
 24839  0014  2855               	goto	i1l392
 24840                           
 24841                           ;interrupt_manager.c: 59: {
 24842                           ;interrupt_manager.c: 60: if(PIE1bits.BCL1IE == 1 && PIR1bits.BCL1IF == 1)
 24843  0015  0021               	movlb	1	; select bank1
 24844  0016  1D11               	btfss	17,2	;volatile
 24845  0017  2822               	goto	i1l379
 24846  0018  0020               	movlb	0	; select bank0
 24847  0019  1D11               	btfss	17,2	;volatile
 24848  001A  2822               	goto	i1l379
 24849                           
 24850                           ;interrupt_manager.c: 61: {
 24851                           ;interrupt_manager.c: 62: i2c1_driver_busCollisionISR();
 24852  001B  0021               	movlb	1	; select bank1
 24853  001C  0869               	movf	(_i2c1_driver_busCollisionISR+1)^(0+128),w
 24854  001D  008A               	movwf	10
 24855  001E  0868               	movf	_i2c1_driver_busCollisionISR^(0+128),w
 24856  001F  000A               	callw
 24857  0020  3180               	pagesel	$
 24858                           
 24859                           ;interrupt_manager.c: 63: }
 24860  0021  2855               	goto	i1l392
 24861  0022                     i1l379:	
 24862                           
 24863                           ;interrupt_manager.c: 64: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
 24864  0022  0021               	movlb	1	; select bank1
 24865  0023  1D91               	btfss	17,3	;volatile
 24866  0024  282F               	goto	i1l381
 24867  0025  0020               	movlb	0	; select bank0
 24868  0026  1D91               	btfss	17,3	;volatile
 24869  0027  282F               	goto	i1l381
 24870                           
 24871                           ;interrupt_manager.c: 65: {
 24872                           ;interrupt_manager.c: 66: i2c1_driver_i2cISR();
 24873  0028  0022               	movlb	2	; select bank2
 24874  0029  0869               	movf	(_i2c1_driver_i2cISR+1)^(0+256),w
 24875  002A  008A               	movwf	10
 24876  002B  0868               	movf	_i2c1_driver_i2cISR^(0+256),w
 24877  002C  000A               	callw
 24878  002D  3180               	pagesel	$
 24879                           
 24880                           ;interrupt_manager.c: 67: }
 24881  002E  2855               	goto	i1l392
 24882  002F                     i1l381:	
 24883                           
 24884                           ;interrupt_manager.c: 68: else if(PIE2bits.TMR4IE == 1 && PIR2bits.TMR4IF == 1)
 24885  002F  0021               	movlb	1	; select bank1
 24886  0030  1C92               	btfss	18,1	;volatile
 24887  0031  2839               	goto	i1l383
 24888  0032  0020               	movlb	0	; select bank0
 24889  0033  1C92               	btfss	18,1	;volatile
 24890  0034  2839               	goto	i1l383
 24891                           
 24892                           ;interrupt_manager.c: 69: {
 24893                           ;interrupt_manager.c: 70: TMR4_ISR();
 24894  0035  31A1  217C  3180   	fcall	_TMR4_ISR
 24895                           
 24896                           ;interrupt_manager.c: 71: }
 24897  0038  2855               	goto	i1l392
 24898  0039                     i1l383:	
 24899                           
 24900                           ;interrupt_manager.c: 72: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 24901  0039  0021               	movlb	1	; select bank1
 24902  003A  1C91               	btfss	17,1	;volatile
 24903  003B  2843               	goto	i1l385
 24904  003C  0020               	movlb	0	; select bank0
 24905  003D  1C91               	btfss	17,1	;volatile
 24906  003E  2843               	goto	i1l385
 24907                           
 24908                           ;interrupt_manager.c: 73: {
 24909                           ;interrupt_manager.c: 74: TMR2_ISR();
 24910  003F  31A1  216F  3180   	fcall	_TMR2_ISR
 24911                           
 24912                           ;interrupt_manager.c: 75: }
 24913  0042  2855               	goto	i1l392
 24914  0043                     i1l385:	
 24915                           
 24916                           ;interrupt_manager.c: 76: else if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 24917  0043  0021               	movlb	1	; select bank1
 24918  0044  1E91               	btfss	17,5	;volatile
 24919  0045  284D               	goto	i1l387
 24920  0046  0020               	movlb	0	; select bank0
 24921  0047  1E91               	btfss	17,5	;volatile
 24922  0048  284D               	goto	i1l387
 24923                           
 24924                           ;interrupt_manager.c: 77: {
 24925                           ;interrupt_manager.c: 78: EUSART_Receive_ISR();
 24926  0049  31A2  22E6  3180   	fcall	_EUSART_Receive_ISR
 24927                           
 24928                           ;interrupt_manager.c: 79: }
 24929  004C  2855               	goto	i1l392
 24930  004D                     i1l387:	
 24931                           
 24932                           ;interrupt_manager.c: 80: else if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 24933  004D  0021               	movlb	1	; select bank1
 24934  004E  1E11               	btfss	17,4	;volatile
 24935  004F  2855               	goto	i1l392
 24936  0050  0020               	movlb	0	; select bank0
 24937  0051  1E11               	btfss	17,4	;volatile
 24938  0052  2855               	goto	i1l392
 24939                           
 24940                           ;interrupt_manager.c: 81: {
 24941                           ;interrupt_manager.c: 82: EUSART_Transmit_ISR();
 24942  0053  31A3  231E         	fcall	_EUSART_Transmit_ISR
 24943  0055                     i1l392:	
 24944                           ;interrupt_manager.c: 89: else
 24945                           ;interrupt_manager.c: 90: {
 24946                           
 24947                           ;interrupt_manager.c: 87: }
 24948                           ;interrupt_manager.c: 88: }
 24949                           
 24950                           ;interrupt_manager.c: 84: else
 24951                           ;interrupt_manager.c: 85: {
 24952                           
 24953                           ;interrupt_manager.c: 83: }
 24954                           
 24955  0055  087C               	movf	??_INTERRUPT_InterruptManager,w
 24956  0056  0020               	movlb	0	; select bank0
 24957  0057  00FF               	movwf	127
 24958  0058  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 24959  0059  0009               	retfie
 24960  005A                     __end_of_INTERRUPT_InterruptManager:	
 24961                           
 24962                           	psect	text133
 24963  2397                     __ptext133:	
 24964 ;; *************** function i1_i2c_ISR *****************
 24965 ;; Defined at:
 24966 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 24967 ;; Parameters:    Size  Location     Type
 24968 ;;		None
 24969 ;; Auto vars:     Size  Location     Type
 24970 ;;		None
 24971 ;; Return value:  Size  Location     Type
 24972 ;;                  1    wreg      void 
 24973 ;; Registers used:
 24974 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24975 ;; Tracked objects:
 24976 ;;		On entry : 0/0
 24977 ;;		On exit  : 0/0
 24978 ;;		Unchanged: 0/0
 24979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24982 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24983 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24984 ;;Total ram usage:        1 bytes
 24985 ;; Hardware stack levels used:    1
 24986 ;; Hardware stack levels required when called:    3
 24987 ;; This function calls:
 24988 ;;		i1_do_I2C_DO_ACK
 24989 ;;		i1_do_I2C_DO_ADDRESS_NACK
 24990 ;;		i1_do_I2C_DO_NACK_RESTART
 24991 ;;		i1_do_I2C_DO_NACK_STOP
 24992 ;;		i1_do_I2C_IDLE
 24993 ;;		i1_do_I2C_RCEN
 24994 ;;		i1_do_I2C_RESET
 24995 ;;		i1_do_I2C_RX
 24996 ;;		i1_do_I2C_SEND_ADR_READ
 24997 ;;		i1_do_I2C_SEND_ADR_WRITE
 24998 ;;		i1_do_I2C_SEND_RESTART
 24999 ;;		i1_do_I2C_SEND_RESTART_READ
 25000 ;;		i1_do_I2C_SEND_RESTART_WRITE
 25001 ;;		i1_do_I2C_SEND_STOP
 25002 ;;		i1_do_I2C_TX
 25003 ;;		i1_do_I2C_TX_EMPTY
 25004 ;;		i1_i2c1_driver_isNACK
 25005 ;;		i1_mssp1_clearIRQ
 25006 ;; This function is called by:
 25007 ;; This function uses a non-reentrant model
 25008 ;;
 25009                           
 25010                           
 25011                           ;psect for function i1_i2c_ISR
 25012  2397                     i1_i2c_ISR:	
 25013  2397                     i1l9356:	
 25014                           ;incstack = 0
 25015                           ; Regs used in i1_i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25016                           
 25017                           
 25018                           ;i2c_master.c: 421: mssp1_clearIRQ();
 25019  2397  31AF  275A  31A3   	fcall	i1_mssp1_clearIRQ
 25020                           
 25021                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
 25022  239A  0022               	movlb	2	; select bank2
 25023  239B  1DA0               	btfss	_i2c_status^(0+256),3
 25024  239C  2BA7               	goto	i1l9364
 25025  239D  31A1  2132  31A3   	fcall	i1_i2c1_driver_isNACK
 25026  23A0  1C03               	btfss	3,0
 25027  23A1  2BA7               	goto	i1l9364
 25028                           
 25029                           ;i2c_master.c: 428: {
 25030                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
 25031  23A2  300F               	movlw	15
 25032  23A3  00F5               	movwf	??i1_i2c_ISR
 25033  23A4  0875               	movf	??i1_i2c_ISR,w
 25034  23A5  0022               	movlb	2	; select bank2
 25035  23A6  00AA               	movwf	(_i2c_status^(0+256)+10)
 25036  23A7                     i1l9364:	
 25037                           
 25038                           ;i2c_master.c: 430: }
 25039                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
 25040  23A7  0022               	movlb	2	; select bank2
 25041  23A8  352A               	lslf	(_i2c_status^(0+256)+10),w
 25042  23A9  3E48               	addlw	(low (_fsmStateTable| (0+512)))& (0+255)
 25043  23AA  0086               	movwf	6
 25044  23AB  3002               	movlw	2	; select bank4/5
 25045  23AC  0087               	movwf	7
 25046  23AD  3F41               	moviw [1]fsr1
 25047  23AE  008A               	movwf	10
 25048  23AF  3F40               	moviw [0]fsr1
 25049  23B0  000A               	callw
 25050  23B1  31A3               	pagesel	$
 25051  23B2  00F5               	movwf	??i1_i2c_ISR
 25052  23B3  0875               	movf	??i1_i2c_ISR,w
 25053  23B4  0022               	movlb	2	; select bank2
 25054  23B5  00AA               	movwf	(_i2c_status^(0+256)+10)
 25055  23B6  0008               	return
 25056  23B7                     __end_ofi1_i2c_ISR:	
 25057                           
 25058                           	psect	text134
 25059  2F5A                     __ptext134:	
 25060 ;; *************** function i1_mssp1_clearIRQ *****************
 25061 ;; Defined at:
 25062 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 25063 ;; Parameters:    Size  Location     Type
 25064 ;;		None
 25065 ;; Auto vars:     Size  Location     Type
 25066 ;;		None
 25067 ;; Return value:  Size  Location     Type
 25068 ;;                  1    wreg      void 
 25069 ;; Registers used:
 25070 ;;		None
 25071 ;; Tracked objects:
 25072 ;;		On entry : 0/0
 25073 ;;		On exit  : 0/0
 25074 ;;		Unchanged: 0/0
 25075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25080 ;;Total ram usage:        0 bytes
 25081 ;; Hardware stack levels used:    1
 25082 ;; This function calls:
 25083 ;;		Nothing
 25084 ;; This function is called by:
 25085 ;;		i1_i2c_ISR
 25086 ;; This function uses a non-reentrant model
 25087 ;;
 25088                           
 25089                           
 25090                           ;psect for function i1_mssp1_clearIRQ
 25091  2F5A                     i1_mssp1_clearIRQ:	
 25092                           
 25093                           ;i2c1_driver.c: 55: PIR1bits.SSP1IF = 0;
 25094                           
 25095                           ;incstack = 0
 25096                           ; Regs used in i1_mssp1_clearIRQ: []
 25097  2F5A  0020               	movlb	0	; select bank0
 25098  2F5B  1191               	bcf	17,3	;volatile
 25099  2F5C  0008               	return
 25100  2F5D                     __end_ofi1_mssp1_clearIRQ:	
 25101                           
 25102                           	psect	text135
 25103  1914                     __ptext135:	
 25104 ;; *************** function i1_do_I2C_RX *****************
 25105 ;; Defined at:
 25106 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 25107 ;; Parameters:    Size  Location     Type
 25108 ;;		None
 25109 ;; Auto vars:     Size  Location     Type
 25110 ;;		None
 25111 ;; Return value:  Size  Location     Type
 25112 ;;                  1    wreg      enum E8364
 25113 ;; Registers used:
 25114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25115 ;; Tracked objects:
 25116 ;;		On entry : 0/0
 25117 ;;		On exit  : 0/0
 25118 ;;		Unchanged: 0/0
 25119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25122 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25123 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25124 ;;Total ram usage:        1 bytes
 25125 ;; Hardware stack levels used:    1
 25126 ;; Hardware stack levels required when called:    2
 25127 ;; This function calls:
 25128 ;;		i1_do_I2C_DO_NACK_RESTART
 25129 ;;		i1_do_I2C_DO_NACK_STOP
 25130 ;;		i1_i2c1_driver_getRXData
 25131 ;;		i1_i2c1_driver_sendACK
 25132 ;;		i1_returnReset
 25133 ;;		i1_returnStop
 25134 ;; This function is called by:
 25135 ;; This function uses a non-reentrant model
 25136 ;;
 25137                           
 25138                           
 25139                           ;psect for function i1_do_I2C_RX
 25140  1914                     i1_do_I2C_RX:	
 25141  1914                     i1l9002:	
 25142                           ;incstack = 0
 25143                           ; Regs used in i1_do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25144                           
 25145                           
 25146                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
 25147  1914  31AF  2754  3199   	fcall	i1_i2c1_driver_getRXData
 25148  1917  00F0               	movwf	??i1_do_I2C_RX
 25149  1918  0022               	movlb	2	; select bank2
 25150  1919  0822               	movf	(low ((_i2c_status| (0+256)+2)))^0,w
 25151  191A  0086               	movwf	6
 25152  191B  0823               	movf	((low ((_i2c_status| (0+256)+2))+1))^0,w
 25153  191C  0087               	movwf	7
 25154  191D  0870               	movf	??i1_do_I2C_RX,w
 25155  191E  0081               	movwf	1
 25156  191F  3001               	movlw	1
 25157  1920  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^0,f
 25158  1921  3000               	movlw	0
 25159  1922  3DA3               	addwfc	((low ((_i2c_status| (0+256)+2))+1))^0,f
 25160                           
 25161                           ;i2c_master.c: 360: if(--i2c_status.data_length)
 25162  1923  3001               	movlw	1
 25163  1924  02A4               	subwf	(_i2c_status^(0+256)+4),f
 25164  1925  3000               	movlw	0
 25165  1926  3BA5               	subwfb	((_i2c_status+1)^(0+256)+4),f
 25166  1927  0824               	movf	(_i2c_status^(0+256)+4),w
 25167  1928  0425               	iorwf	((_i2c_status+1)^(0+256)+4),w
 25168  1929  1903               	btfsc	3,2
 25169  192A  292F               	goto	i1l790
 25170                           
 25171                           ;i2c_master.c: 361: {
 25172                           ;i2c_master.c: 362: i2c1_driver_sendACK();
 25173  192B  31AF  277B         	fcall	i1_i2c1_driver_sendACK
 25174                           
 25175                           ;i2c_master.c: 363: return I2C_RCEN;
 25176  192D  3005               	movlw	5
 25177                           
 25178                           ;i2c_master.c: 364: }
 25179  192E  0008               	return
 25180  192F                     i1l790:	
 25181                           
 25182                           ;i2c_master.c: 365: else
 25183                           ;i2c_master.c: 366: {
 25184                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
 25185  192F  1520               	bsf	_i2c_status^(0+256),2
 25186                           
 25187                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 25188  1930  2937               	goto	i1l9026
 25189  1931                     i1l9016:	
 25190                           ;i2c_master.c: 369: {
 25191                           ;i2c_master.c: 370: case i2c_restart_write:
 25192                           
 25193                           
 25194                           ;i2c_master.c: 371: case i2c_restart_read:
 25195                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
 25196  1931  31AF  279B         	fcall	i1_do_I2C_DO_NACK_RESTART
 25197  1933  0008               	return
 25198  1934                     i1l9020:	
 25199                           ;i2c_master.c: 374: case i2c_continue:
 25200                           
 25201                           ;i2c_master.c: 373: default:
 25202                           
 25203                           
 25204                           ;i2c_master.c: 375: case i2c_stop:
 25205                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
 25206  1934  31AF  2797         	fcall	i1_do_I2C_DO_NACK_STOP
 25207                           
 25208                           ;i2c_master.c: 377: }
 25209  1936  0008               	return
 25210  1937                     i1l9026:	
 25211  1937  0022               	movlb	2	; select bank2
 25212  1938  0838               	movf	(low ((_i2c_status| (0+256)+24)))^0,w
 25213  1939  00F0               	movwf	??i1_do_I2C_RX
 25214  193A  0870               	movf	??i1_do_I2C_RX,w
 25215  193B  00F0               	movwf	i1returnReset@p
 25216  193C  300C               	movlw	12
 25217  193D  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 25218  193E  0086               	movwf	6
 25219  193F  3001               	movlw	1	; select bank2/3
 25220  1940  0087               	movwf	7
 25221  1941  3F41               	moviw [1]fsr1
 25222  1942  008A               	movwf	10
 25223  1943  3F40               	moviw [0]fsr1
 25224  1944  000A               	callw
 25225  1945  3199               	pagesel	$
 25226                           
 25227                           ; Switch size 1, requested type "space"
 25228                           ; Number of cases is 4, Range of values is 1 to 4
 25229                           ; switch strategies available:
 25230                           ; Name         Instructions Cycles
 25231                           ; simple_byte           13     7 (average)
 25232                           ; direct_byte           17     9 (fixed)
 25233                           ; jumptable            263     9 (fixed)
 25234                           ;	Chosen strategy is simple_byte
 25235  1946  3A01               	xorlw	1	; case 1
 25236  1947  1903               	skipnz
 25237  1948  2934               	goto	i1l9020
 25238  1949  3A03               	xorlw	3	; case 2
 25239  194A  1903               	skipnz
 25240  194B  2931               	goto	i1l9016
 25241  194C  3A01               	xorlw	1	; case 3
 25242  194D  1903               	skipnz
 25243  194E  2931               	goto	i1l9016
 25244  194F  3A07               	xorlw	7	; case 4
 25245  1950  1903               	skipnz
 25246  1951  2934               	goto	i1l9020
 25247  1952  2934               	goto	i1l9020
 25248  1953  0008               	return
 25249  1954                     __end_ofi1_do_I2C_RX:	
 25250                           
 25251                           	psect	text136
 25252  1BE3                     __ptext136:	
 25253 ;; *************** function i1_do_I2C_TX *****************
 25254 ;; Defined at:
 25255 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 25256 ;; Parameters:    Size  Location     Type
 25257 ;;		None
 25258 ;; Auto vars:     Size  Location     Type
 25259 ;;		None
 25260 ;; Return value:  Size  Location     Type
 25261 ;;                  1    wreg      enum E8364
 25262 ;; Registers used:
 25263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25264 ;; Tracked objects:
 25265 ;;		On entry : 0/0
 25266 ;;		On exit  : 0/0
 25267 ;;		Unchanged: 0/0
 25268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25270 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25271 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25272 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25273 ;;Total ram usage:        4 bytes
 25274 ;; Hardware stack levels used:    1
 25275 ;; Hardware stack levels required when called:    2
 25276 ;; This function calls:
 25277 ;;		i1_do_I2C_SEND_RESTART_READ
 25278 ;;		i1_do_I2C_SEND_RESTART_WRITE
 25279 ;;		i1_do_I2C_SEND_STOP
 25280 ;;		i1_i2c1_driver_TXData
 25281 ;;		i1_i2c1_driver_isNACK
 25282 ;;		i1_returnReset
 25283 ;;		i1_returnStop
 25284 ;; This function is called by:
 25285 ;; This function uses a non-reentrant model
 25286 ;;
 25287                           
 25288                           
 25289                           ;psect for function i1_do_I2C_TX
 25290  1BE3                     i1_do_I2C_TX:	
 25291  1BE3                     i1l8972:	
 25292                           ;incstack = 0
 25293                           ; Regs used in i1_do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25294                           
 25295                           
 25296                           ;i2c_master.c: 335: if(i2c1_driver_isNACK())
 25297  1BE3  31A1  2132  319B   	fcall	i1_i2c1_driver_isNACK
 25298  1BE6  1803               	btfsc	3,0
 25299  1BE7  2BF2               	goto	i1l8990
 25300  1BE8  2C0F               	goto	i1l774
 25301  1BE9                     i1l8976:	
 25302                           ;i2c_master.c: 338: {
 25303                           ;i2c_master.c: 339: case i2c_restart_read:
 25304                           
 25305                           ;i2c_master.c: 336: {
 25306                           ;i2c_master.c: 337: switch(i2c_status.callbackTable[i2c_dataNACK](i2c_status.callbackPay
      +                          load[i2c_dataNACK]))
 25307                           
 25308                           
 25309                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
 25310  1BE9  31AF  2783         	fcall	i1_do_I2C_SEND_RESTART_READ
 25311  1BEB  0008               	return
 25312  1BEC                     i1l8980:	
 25313                           ;i2c_master.c: 341: case i2c_restart_write:
 25314                           
 25315                           
 25316                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
 25317  1BEC  31AF  2787         	fcall	i1_do_I2C_SEND_RESTART_WRITE
 25318  1BEE  0008               	return
 25319  1BEF                     i1l8984:	
 25320                           ;i2c_master.c: 344: case i2c_continue:
 25321                           
 25322                           ;i2c_master.c: 343: default:
 25323                           
 25324                           
 25325                           ;i2c_master.c: 345: case i2c_stop:
 25326                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
 25327  1BEF  31AF  278F         	fcall	i1_do_I2C_SEND_STOP
 25328                           
 25329                           ;i2c_master.c: 347: }
 25330  1BF1  0008               	return
 25331  1BF2                     i1l8990:	
 25332  1BF2  0022               	movlb	2	; select bank2
 25333  1BF3  083B               	movf	(low ((_i2c_status| (0+256)+27)))^0,w
 25334  1BF4  00F1               	movwf	??i1_do_I2C_TX
 25335  1BF5  0871               	movf	??i1_do_I2C_TX,w
 25336  1BF6  00F0               	movwf	i1returnReset@p
 25337  1BF7  3012               	movlw	18
 25338  1BF8  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 25339  1BF9  0086               	movwf	6
 25340  1BFA  3001               	movlw	1	; select bank2/3
 25341  1BFB  0087               	movwf	7
 25342  1BFC  3F41               	moviw [1]fsr1
 25343  1BFD  008A               	movwf	10
 25344  1BFE  3F40               	moviw [0]fsr1
 25345  1BFF  000A               	callw
 25346  1C00  319B               	pagesel	$
 25347                           
 25348                           ; Switch size 1, requested type "space"
 25349                           ; Number of cases is 4, Range of values is 1 to 4
 25350                           ; switch strategies available:
 25351                           ; Name         Instructions Cycles
 25352                           ; simple_byte           13     7 (average)
 25353                           ; direct_byte           17     9 (fixed)
 25354                           ; jumptable            263     9 (fixed)
 25355                           ;	Chosen strategy is simple_byte
 25356  1C01  3A01               	xorlw	1	; case 1
 25357  1C02  1903               	skipnz
 25358  1C03  2BEF               	goto	i1l8984
 25359  1C04  3A03               	xorlw	3	; case 2
 25360  1C05  1903               	skipnz
 25361  1C06  2BE9               	goto	i1l8976
 25362  1C07  3A01               	xorlw	1	; case 3
 25363  1C08  1903               	skipnz
 25364  1C09  2BEC               	goto	i1l8980
 25365  1C0A  3A07               	xorlw	7	; case 4
 25366  1C0B  1903               	skipnz
 25367  1C0C  2BEF               	goto	i1l8984
 25368  1C0D  2BEF               	goto	i1l8984
 25369                           
 25370                           ;i2c_master.c: 348: }
 25371  1C0E  0008               	return
 25372  1C0F                     i1l774:	
 25373                           
 25374                           ;i2c_master.c: 349: else
 25375                           ;i2c_master.c: 350: {
 25376                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
 25377  1C0F  0022               	movlb	2	; select bank2
 25378  1C10  11A0               	bcf	_i2c_status^(0+256),3
 25379                           
 25380                           ;i2c_master.c: 352: i2c1_driver_TXData(*i2c_status.data_ptr++);
 25381  1C11  0823               	movf	((low ((_i2c_status| (0+256)+2))+1))^0,w
 25382  1C12  00F2               	movwf	??i1_do_I2C_TX+1
 25383  1C13  0822               	movf	(low ((_i2c_status| (0+256)+2)))^0,w
 25384  1C14  00F1               	movwf	??i1_do_I2C_TX
 25385  1C15  0AA2               	incf	(low ((_i2c_status| (0+256)+2)))^0,f
 25386  1C16  1903               	skipnz
 25387  1C17  0AA3               	incf	((low ((_i2c_status| (0+256)+2))+1))^0,f
 25388  1C18  0871               	movf	??i1_do_I2C_TX,w
 25389  1C19  0086               	movwf	6
 25390  1C1A  0872               	movf	??i1_do_I2C_TX+1,w
 25391  1C1B  0087               	movwf	7
 25392  1C1C  0801               	movf	1,w
 25393  1C1D  31AF  27BA  319B   	fcall	i1_i2c1_driver_TXData
 25394                           
 25395                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
 25396  1C20  3001               	movlw	1
 25397  1C21  0022               	movlb	2	; select bank2
 25398  1C22  02A4               	subwf	(_i2c_status^(0+256)+4),f
 25399  1C23  3000               	movlw	0
 25400  1C24  3BA5               	subwfb	((_i2c_status+1)^(0+256)+4),f
 25401  1C25  0824               	movf	(_i2c_status^(0+256)+4),w
 25402  1C26  0425               	iorwf	((_i2c_status+1)^(0+256)+4),w
 25403  1C27  1D03               	btfss	3,2
 25404  1C28  2C2B               	goto	i1l8998
 25405  1C29  3006               	movlw	6
 25406  1C2A  2C2C               	goto	L43
 25407  1C2B                     i1l8998:	
 25408  1C2B  3003               	movlw	3
 25409  1C2C                     L43:	
 25410  1C2C  00F3               	movwf	i1_do_I2C_TX$1204
 25411  1C2D  3000               	movlw	0
 25412  1C2E  00F4               	movwf	i1_do_I2C_TX$1204+1
 25413  1C2F  0873               	movf	i1_do_I2C_TX$1204,w
 25414  1C30  0008               	return
 25415  1C31                     __end_ofi1_do_I2C_TX:	
 25416                           
 25417                           	psect	text137
 25418  243B                     __ptext137:	
 25419 ;; *************** function i1_do_I2C_DO_ADDRESS_NACK *****************
 25420 ;; Defined at:
 25421 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 25422 ;; Parameters:    Size  Location     Type
 25423 ;;		None
 25424 ;; Auto vars:     Size  Location     Type
 25425 ;;		None
 25426 ;; Return value:  Size  Location     Type
 25427 ;;                  1    wreg      enum E8364
 25428 ;; Registers used:
 25429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25430 ;; Tracked objects:
 25431 ;;		On entry : 0/0
 25432 ;;		On exit  : 0/0
 25433 ;;		Unchanged: 0/0
 25434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25437 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25438 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25439 ;;Total ram usage:        1 bytes
 25440 ;; Hardware stack levels used:    1
 25441 ;; Hardware stack levels required when called:    2
 25442 ;; This function calls:
 25443 ;;		i1_do_I2C_SEND_RESTART
 25444 ;;		i1_do_I2C_SEND_STOP
 25445 ;;		i1_returnReset
 25446 ;;		i1_returnStop
 25447 ;; This function is called by:
 25448 ;; This function uses a non-reentrant model
 25449 ;;
 25450                           
 25451                           
 25452                           ;psect for function i1_do_I2C_DO_ADDRESS_NACK
 25453  243B                     i1_do_I2C_DO_ADDRESS_NACK:	
 25454  243B                     i1l8956:	
 25455                           ;incstack = 0
 25456                           ; Regs used in i1_do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25457                           
 25458                           
 25459                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
 25460  243B  0022               	movlb	2	; select bank2
 25461  243C  11A0               	bcf	_i2c_status^(0+256),3
 25462                           
 25463                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
 25464  243D  3002               	movlw	2
 25465  243E  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 25466  243F  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 25467  2440  00AB               	movwf	(_i2c_status^(0+256)+11)
 25468                           
 25469                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
 25470  2441  2C48               	goto	i1l8970
 25471  2442                     i1l8960:	
 25472                           ;i2c_master.c: 324: {
 25473                           ;i2c_master.c: 325: case i2c_restart_read:
 25474                           
 25475                           
 25476                           ;i2c_master.c: 326: case i2c_restart_write:
 25477                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
 25478  2442  31AF  278B         	fcall	i1_do_I2C_SEND_RESTART
 25479  2444  0008               	return
 25480  2445                     i1l8964:	
 25481                           ;i2c_master.c: 328: default:
 25482                           
 25483                           
 25484                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
 25485  2445  31AF  278F         	fcall	i1_do_I2C_SEND_STOP
 25486                           
 25487                           ;i2c_master.c: 330: }
 25488  2447  0008               	return
 25489  2448                     i1l8970:	
 25490  2448  0022               	movlb	2	; select bank2
 25491  2449  083A               	movf	(low ((_i2c_status| (0+256)+26)))^0,w
 25492  244A  00F0               	movwf	??i1_do_I2C_DO_ADDRESS_NACK
 25493  244B  0870               	movf	??i1_do_I2C_DO_ADDRESS_NACK,w
 25494  244C  00F0               	movwf	i1returnReset@p
 25495  244D  3010               	movlw	16
 25496  244E  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 25497  244F  0086               	movwf	6
 25498  2450  3001               	movlw	1	; select bank2/3
 25499  2451  0087               	movwf	7
 25500  2452  3F41               	moviw [1]fsr1
 25501  2453  008A               	movwf	10
 25502  2454  3F40               	moviw [0]fsr1
 25503  2455  000A               	callw
 25504  2456  31A4               	pagesel	$
 25505                           
 25506                           ; Switch size 1, requested type "space"
 25507                           ; Number of cases is 2, Range of values is 2 to 3
 25508                           ; switch strategies available:
 25509                           ; Name         Instructions Cycles
 25510                           ; simple_byte            7     4 (average)
 25511                           ; direct_byte           13     9 (fixed)
 25512                           ; jumptable            263     9 (fixed)
 25513                           ;	Chosen strategy is simple_byte
 25514  2457  3A02               	xorlw	2	; case 2
 25515  2458  1903               	skipnz
 25516  2459  2C42               	goto	i1l8960
 25517  245A  3A01               	xorlw	1	; case 3
 25518  245B  1903               	skipnz
 25519  245C  2C42               	goto	i1l8960
 25520  245D  2C45               	goto	i1l8964
 25521  245E  0008               	return
 25522  245F                     __end_ofi1_do_I2C_DO_ADDRESS_NACK:	
 25523                           
 25524                           	psect	text138
 25525  2F9B                     __ptext138:	
 25526 ;; *************** function i1_do_I2C_DO_NACK_RESTART *****************
 25527 ;; Defined at:
 25528 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 25529 ;; Parameters:    Size  Location     Type
 25530 ;;		None
 25531 ;; Auto vars:     Size  Location     Type
 25532 ;;		None
 25533 ;; Return value:  Size  Location     Type
 25534 ;;                  1    wreg      enum E8364
 25535 ;; Registers used:
 25536 ;;		wreg, status,2, status,0, pclath, cstack
 25537 ;; Tracked objects:
 25538 ;;		On entry : 0/0
 25539 ;;		On exit  : 0/0
 25540 ;;		Unchanged: 0/0
 25541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25546 ;;Total ram usage:        0 bytes
 25547 ;; Hardware stack levels used:    1
 25548 ;; Hardware stack levels required when called:    1
 25549 ;; This function calls:
 25550 ;;		i1_i2c1_driver_sendNACK
 25551 ;; This function is called by:
 25552 ;;		i1_do_I2C_RX
 25553 ;; This function uses a non-reentrant model
 25554 ;;
 25555                           
 25556                           
 25557                           ;psect for function i1_do_I2C_DO_NACK_RESTART
 25558  2F9B                     i1_do_I2C_DO_NACK_RESTART:	
 25559  2F9B                     i1l8536:	
 25560                           ;incstack = 0
 25561                           ; Regs used in i1_do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 25562                           
 25563                           
 25564                           ;i2c_master.c: 313: i2c1_driver_sendNACK();
 25565  2F9B  31AF  277F         	fcall	i1_i2c1_driver_sendNACK
 25566                           
 25567                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
 25568  2F9D  3009               	movlw	9
 25569  2F9E  0008               	return
 25570  2F9F                     __end_ofi1_do_I2C_DO_NACK_RESTART:	
 25571                           
 25572                           	psect	text139
 25573  2F97                     __ptext139:	
 25574 ;; *************** function i1_do_I2C_DO_NACK_STOP *****************
 25575 ;; Defined at:
 25576 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 25577 ;; Parameters:    Size  Location     Type
 25578 ;;		None
 25579 ;; Auto vars:     Size  Location     Type
 25580 ;;		None
 25581 ;; Return value:  Size  Location     Type
 25582 ;;                  1    wreg      enum E8364
 25583 ;; Registers used:
 25584 ;;		wreg, status,2, status,0, pclath, cstack
 25585 ;; Tracked objects:
 25586 ;;		On entry : 0/0
 25587 ;;		On exit  : 0/0
 25588 ;;		Unchanged: 0/0
 25589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25594 ;;Total ram usage:        0 bytes
 25595 ;; Hardware stack levels used:    1
 25596 ;; Hardware stack levels required when called:    1
 25597 ;; This function calls:
 25598 ;;		i1_i2c1_driver_sendNACK
 25599 ;; This function is called by:
 25600 ;;		i1_do_I2C_RX
 25601 ;; This function uses a non-reentrant model
 25602 ;;
 25603                           
 25604                           
 25605                           ;psect for function i1_do_I2C_DO_NACK_STOP
 25606  2F97                     i1_do_I2C_DO_NACK_STOP:	
 25607  2F97                     i1l8530:	
 25608                           ;incstack = 0
 25609                           ; Regs used in i1_do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 25610                           
 25611                           
 25612                           ;i2c_master.c: 307: i2c1_driver_sendNACK();
 25613  2F97  31AF  277F         	fcall	i1_i2c1_driver_sendNACK
 25614                           
 25615                           ;i2c_master.c: 308: return I2C_SEND_STOP;
 25616  2F99  300A               	movlw	10
 25617  2F9A  0008               	return
 25618  2F9B                     __end_ofi1_do_I2C_DO_NACK_STOP:	
 25619                           
 25620                           	psect	text140
 25621  2F93                     __ptext140:	
 25622 ;; *************** function i1_do_I2C_DO_ACK *****************
 25623 ;; Defined at:
 25624 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 25625 ;; Parameters:    Size  Location     Type
 25626 ;;		None
 25627 ;; Auto vars:     Size  Location     Type
 25628 ;;		None
 25629 ;; Return value:  Size  Location     Type
 25630 ;;                  1    wreg      enum E8364
 25631 ;; Registers used:
 25632 ;;		wreg, status,2, status,0, pclath, cstack
 25633 ;; Tracked objects:
 25634 ;;		On entry : 0/0
 25635 ;;		On exit  : 0/0
 25636 ;;		Unchanged: 0/0
 25637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25642 ;;Total ram usage:        0 bytes
 25643 ;; Hardware stack levels used:    1
 25644 ;; Hardware stack levels required when called:    1
 25645 ;; This function calls:
 25646 ;;		i1_i2c1_driver_sendACK
 25647 ;; This function is called by:
 25648 ;; This function uses a non-reentrant model
 25649 ;;
 25650                           
 25651                           
 25652                           ;psect for function i1_do_I2C_DO_ACK
 25653  2F93                     i1_do_I2C_DO_ACK:	
 25654  2F93                     i1l8950:	
 25655                           ;incstack = 0
 25656                           ; Regs used in i1_do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 25657                           
 25658                           
 25659                           ;i2c_master.c: 301: i2c1_driver_sendACK();
 25660  2F93  31AF  277B         	fcall	i1_i2c1_driver_sendACK
 25661                           
 25662                           ;i2c_master.c: 302: return I2C_RCEN;
 25663  2F95  3005               	movlw	5
 25664  2F96  0008               	return
 25665  2F97                     __end_ofi1_do_I2C_DO_ACK:	
 25666                           
 25667                           	psect	text141
 25668  2FCE                     __ptext141:	
 25669 ;; *************** function i1_do_I2C_RCEN *****************
 25670 ;; Defined at:
 25671 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 25672 ;; Parameters:    Size  Location     Type
 25673 ;;		None
 25674 ;; Auto vars:     Size  Location     Type
 25675 ;;		None
 25676 ;; Return value:  Size  Location     Type
 25677 ;;                  1    wreg      enum E8364
 25678 ;; Registers used:
 25679 ;;		wreg, status,2, status,0, pclath, cstack
 25680 ;; Tracked objects:
 25681 ;;		On entry : 0/0
 25682 ;;		On exit  : 0/0
 25683 ;;		Unchanged: 0/0
 25684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25689 ;;Total ram usage:        0 bytes
 25690 ;; Hardware stack levels used:    1
 25691 ;; Hardware stack levels required when called:    1
 25692 ;; This function calls:
 25693 ;;		i1_i2c1_driver_startRX
 25694 ;; This function is called by:
 25695 ;; This function uses a non-reentrant model
 25696 ;;
 25697                           
 25698                           
 25699                           ;psect for function i1_do_I2C_RCEN
 25700  2FCE                     i1_do_I2C_RCEN:	
 25701  2FCE                     i1l6794:	
 25702                           ;incstack = 0
 25703                           ; Regs used in i1_do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 25704                           
 25705                           
 25706                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
 25707  2FCE  0022               	movlb	2	; select bank2
 25708  2FCF  11A0               	bcf	_i2c_status^(0+256),3
 25709                           
 25710                           ;i2c_master.c: 295: i2c1_driver_startRX();
 25711  2FD0  31AF  2751         	fcall	i1_i2c1_driver_startRX
 25712                           
 25713                           ;i2c_master.c: 296: return I2C_RX;
 25714  2FD2  3004               	movlw	4
 25715  2FD3  0008               	return
 25716  2FD4                     __end_ofi1_do_I2C_RCEN:	
 25717                           
 25718                           	psect	text142
 25719  2FF9                     __ptext142:	
 25720 ;; *************** function i1_do_I2C_SEND_ADR_WRITE *****************
 25721 ;; Defined at:
 25722 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 25723 ;; Parameters:    Size  Location     Type
 25724 ;;		None
 25725 ;; Auto vars:     Size  Location     Type
 25726 ;;		None
 25727 ;; Return value:  Size  Location     Type
 25728 ;;                  1    wreg      enum E8364
 25729 ;; Registers used:
 25730 ;;		wreg, status,2, status,0, pclath, cstack
 25731 ;; Tracked objects:
 25732 ;;		On entry : 0/0
 25733 ;;		On exit  : 0/0
 25734 ;;		Unchanged: 0/0
 25735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25740 ;;Total ram usage:        0 bytes
 25741 ;; Hardware stack levels used:    1
 25742 ;; Hardware stack levels required when called:    1
 25743 ;; This function calls:
 25744 ;;		i1_i2c1_driver_TXData
 25745 ;; This function is called by:
 25746 ;; This function uses a non-reentrant model
 25747 ;;
 25748                           
 25749                           
 25750                           ;psect for function i1_do_I2C_SEND_ADR_WRITE
 25751  2FF9                     i1_do_I2C_SEND_ADR_WRITE:	
 25752  2FF9                     i1l8942:	
 25753                           ;incstack = 0
 25754                           ; Regs used in i1_do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 25755                           
 25756                           
 25757                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
 25758  2FF9  0022               	movlb	2	; select bank2
 25759  2FFA  15A0               	bsf	_i2c_status^(0+256),3
 25760                           
 25761                           ;i2c_master.c: 288: i2c1_driver_TXData(i2c_status.address << 1);
 25762  2FFB  3521               	lslf	(_i2c_status^(0+256)+1),w
 25763  2FFC  31AF  27BA         	fcall	i1_i2c1_driver_TXData
 25764                           
 25765                           ;i2c_master.c: 289: return I2C_TX;
 25766  2FFE  3003               	movlw	3
 25767  2FFF  0008               	return
 25768  3000                     __end_ofi1_do_I2C_SEND_ADR_WRITE:	
 25769                           
 25770                           	psect	text143
 25771  2032                     __ptext143:	
 25772 ;; *************** function i1_do_I2C_SEND_ADR_READ *****************
 25773 ;; Defined at:
 25774 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 25775 ;; Parameters:    Size  Location     Type
 25776 ;;		None
 25777 ;; Auto vars:     Size  Location     Type
 25778 ;;		None
 25779 ;; Return value:  Size  Location     Type
 25780 ;;                  1    wreg      enum E8364
 25781 ;; Registers used:
 25782 ;;		wreg, status,2, status,0, pclath, cstack
 25783 ;; Tracked objects:
 25784 ;;		On entry : 0/0
 25785 ;;		On exit  : 0/0
 25786 ;;		Unchanged: 0/0
 25787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25792 ;;Total ram usage:        0 bytes
 25793 ;; Hardware stack levels used:    1
 25794 ;; Hardware stack levels required when called:    1
 25795 ;; This function calls:
 25796 ;;		i1_i2c1_driver_TXData
 25797 ;; This function is called by:
 25798 ;; This function uses a non-reentrant model
 25799 ;;
 25800                           
 25801                           
 25802                           ;psect for function i1_do_I2C_SEND_ADR_READ
 25803  2032                     i1_do_I2C_SEND_ADR_READ:	
 25804  2032                     i1l8934:	
 25805                           ;incstack = 0
 25806                           ; Regs used in i1_do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 25807                           
 25808                           
 25809                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
 25810  2032  0022               	movlb	2	; select bank2
 25811  2033  15A0               	bsf	_i2c_status^(0+256),3
 25812                           
 25813                           ;i2c_master.c: 281: i2c1_driver_TXData(i2c_status.address << 1 | 1);
 25814  2034  1403               	setc
 25815  2035  0D21               	rlf	(_i2c_status^(0+256)+1),w
 25816  2036  31AF  27BA         	fcall	i1_i2c1_driver_TXData
 25817                           
 25818                           ;i2c_master.c: 282: return I2C_RCEN;
 25819  2038  3005               	movlw	5
 25820  2039  0008               	return
 25821  203A                     __end_ofi1_do_I2C_SEND_ADR_READ:	
 25822                           
 25823                           	psect	text144
 25824  2F8F                     __ptext144:	
 25825 ;; *************** function i1_do_I2C_SEND_STOP *****************
 25826 ;; Defined at:
 25827 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 25828 ;; Parameters:    Size  Location     Type
 25829 ;;		None
 25830 ;; Auto vars:     Size  Location     Type
 25831 ;;		None
 25832 ;; Return value:  Size  Location     Type
 25833 ;;                  1    wreg      enum E8364
 25834 ;; Registers used:
 25835 ;;		wreg, status,2, status,0, pclath, cstack
 25836 ;; Tracked objects:
 25837 ;;		On entry : 0/0
 25838 ;;		On exit  : 0/0
 25839 ;;		Unchanged: 0/0
 25840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25845 ;;Total ram usage:        0 bytes
 25846 ;; Hardware stack levels used:    1
 25847 ;; Hardware stack levels required when called:    1
 25848 ;; This function calls:
 25849 ;;		i1_i2c1_driver_stop
 25850 ;; This function is called by:
 25851 ;;		i1_do_I2C_DO_ADDRESS_NACK
 25852 ;;		i1_do_I2C_TX
 25853 ;;		i1_do_I2C_TX_EMPTY
 25854 ;; This function uses a non-reentrant model
 25855 ;;
 25856                           
 25857                           
 25858                           ;psect for function i1_do_I2C_SEND_STOP
 25859  2F8F                     i1_do_I2C_SEND_STOP:	
 25860  2F8F                     i1l8524:	
 25861                           ;incstack = 0
 25862                           ; Regs used in i1_do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 25863                           
 25864                           
 25865                           ;i2c_master.c: 274: i2c1_driver_stop();
 25866  2F8F  31AF  274E         	fcall	i1_i2c1_driver_stop
 25867                           
 25868                           ;i2c_master.c: 275: return I2C_IDLE;
 25869  2F91  3000               	movlw	0
 25870  2F92  0008               	return
 25871  2F93                     __end_ofi1_do_I2C_SEND_STOP:	
 25872                           
 25873                           	psect	text145
 25874  2F8B                     __ptext145:	
 25875 ;; *************** function i1_do_I2C_SEND_RESTART *****************
 25876 ;; Defined at:
 25877 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 25878 ;; Parameters:    Size  Location     Type
 25879 ;;		None
 25880 ;; Auto vars:     Size  Location     Type
 25881 ;;		None
 25882 ;; Return value:  Size  Location     Type
 25883 ;;                  1    wreg      enum E8364
 25884 ;; Registers used:
 25885 ;;		wreg, status,2, status,0, pclath, cstack
 25886 ;; Tracked objects:
 25887 ;;		On entry : 0/0
 25888 ;;		On exit  : 0/0
 25889 ;;		Unchanged: 0/0
 25890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25895 ;;Total ram usage:        0 bytes
 25896 ;; Hardware stack levels used:    1
 25897 ;; Hardware stack levels required when called:    1
 25898 ;; This function calls:
 25899 ;;		i1_i2c1_driver_restart
 25900 ;; This function is called by:
 25901 ;;		i1_do_I2C_DO_ADDRESS_NACK
 25902 ;;		i1_do_I2C_TX_EMPTY
 25903 ;; This function uses a non-reentrant model
 25904 ;;
 25905                           
 25906                           
 25907                           ;psect for function i1_do_I2C_SEND_RESTART
 25908  2F8B                     i1_do_I2C_SEND_RESTART:	
 25909  2F8B                     i1l8518:	
 25910                           ;incstack = 0
 25911                           ; Regs used in i1_do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 25912                           
 25913                           
 25914                           ;i2c_master.c: 268: i2c1_driver_restart();
 25915  2F8B  31AF  274B         	fcall	i1_i2c1_driver_restart
 25916                           
 25917                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
 25918  2F8D  3001               	movlw	1
 25919  2F8E  0008               	return
 25920  2F8F                     __end_ofi1_do_I2C_SEND_RESTART:	
 25921                           
 25922                           	psect	text146
 25923  2F87                     __ptext146:	
 25924 ;; *************** function i1_do_I2C_SEND_RESTART_WRITE *****************
 25925 ;; Defined at:
 25926 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 25927 ;; Parameters:    Size  Location     Type
 25928 ;;		None
 25929 ;; Auto vars:     Size  Location     Type
 25930 ;;		None
 25931 ;; Return value:  Size  Location     Type
 25932 ;;                  1    wreg      enum E8364
 25933 ;; Registers used:
 25934 ;;		wreg, status,2, status,0, pclath, cstack
 25935 ;; Tracked objects:
 25936 ;;		On entry : 0/0
 25937 ;;		On exit  : 0/0
 25938 ;;		Unchanged: 0/0
 25939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25944 ;;Total ram usage:        0 bytes
 25945 ;; Hardware stack levels used:    1
 25946 ;; Hardware stack levels required when called:    1
 25947 ;; This function calls:
 25948 ;;		i1_i2c1_driver_restart
 25949 ;; This function is called by:
 25950 ;;		i1_do_I2C_TX
 25951 ;; This function uses a non-reentrant model
 25952 ;;
 25953                           
 25954                           
 25955                           ;psect for function i1_do_I2C_SEND_RESTART_WRITE
 25956  2F87                     i1_do_I2C_SEND_RESTART_WRITE:	
 25957  2F87                     i1l8512:	
 25958                           ;incstack = 0
 25959                           ; Regs used in i1_do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 25960                           
 25961                           
 25962                           ;i2c_master.c: 262: i2c1_driver_restart();
 25963  2F87  31AF  274B         	fcall	i1_i2c1_driver_restart
 25964                           
 25965                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
 25966  2F89  3002               	movlw	2
 25967  2F8A  0008               	return
 25968  2F8B                     __end_ofi1_do_I2C_SEND_RESTART_WRITE:	
 25969                           
 25970                           	psect	text147
 25971  2F83                     __ptext147:	
 25972 ;; *************** function i1_do_I2C_SEND_RESTART_READ *****************
 25973 ;; Defined at:
 25974 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 25975 ;; Parameters:    Size  Location     Type
 25976 ;;		None
 25977 ;; Auto vars:     Size  Location     Type
 25978 ;;		None
 25979 ;; Return value:  Size  Location     Type
 25980 ;;                  1    wreg      enum E8364
 25981 ;; Registers used:
 25982 ;;		wreg, status,2, status,0, pclath, cstack
 25983 ;; Tracked objects:
 25984 ;;		On entry : 0/0
 25985 ;;		On exit  : 0/0
 25986 ;;		Unchanged: 0/0
 25987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25992 ;;Total ram usage:        0 bytes
 25993 ;; Hardware stack levels used:    1
 25994 ;; Hardware stack levels required when called:    1
 25995 ;; This function calls:
 25996 ;;		i1_i2c1_driver_restart
 25997 ;; This function is called by:
 25998 ;;		i1_do_I2C_TX
 25999 ;; This function uses a non-reentrant model
 26000 ;;
 26001                           
 26002                           
 26003                           ;psect for function i1_do_I2C_SEND_RESTART_READ
 26004  2F83                     i1_do_I2C_SEND_RESTART_READ:	
 26005  2F83                     i1l8506:	
 26006                           ;incstack = 0
 26007                           ; Regs used in i1_do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 26008                           
 26009                           
 26010                           ;i2c_master.c: 256: i2c1_driver_restart();
 26011  2F83  31AF  274B         	fcall	i1_i2c1_driver_restart
 26012                           
 26013                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
 26014  2F85  3001               	movlw	1
 26015  2F86  0008               	return
 26016  2F87                     __end_ofi1_do_I2C_SEND_RESTART_READ:	
 26017                           
 26018                           	psect	text148
 26019  2FBF                     __ptext148:	
 26020 ;; *************** function i1_do_I2C_IDLE *****************
 26021 ;; Defined at:
 26022 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 26023 ;; Parameters:    Size  Location     Type
 26024 ;;		None
 26025 ;; Auto vars:     Size  Location     Type
 26026 ;;		None
 26027 ;; Return value:  Size  Location     Type
 26028 ;;                  1    wreg      enum E8364
 26029 ;; Registers used:
 26030 ;;		wreg, status,2
 26031 ;; Tracked objects:
 26032 ;;		On entry : 0/0
 26033 ;;		On exit  : 0/0
 26034 ;;		Unchanged: 0/0
 26035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26040 ;;Total ram usage:        0 bytes
 26041 ;; Hardware stack levels used:    1
 26042 ;; This function calls:
 26043 ;;		Nothing
 26044 ;; This function is called by:
 26045 ;; This function uses a non-reentrant model
 26046 ;;
 26047                           
 26048                           
 26049                           ;psect for function i1_do_I2C_IDLE
 26050  2FBF                     i1_do_I2C_IDLE:	
 26051  2FBF                     i1l6770:	
 26052                           ;incstack = 0
 26053                           ; Regs used in i1_do_I2C_IDLE: [wreg+status,2]
 26054                           
 26055                           
 26056                           ;i2c_master.c: 249: i2c_status.busy = 0;
 26057  2FBF  0022               	movlb	2	; select bank2
 26058  2FC0  1020               	bcf	_i2c_status^(0+256),0
 26059                           
 26060                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 26061  2FC1  01AB               	clrf	(_i2c_status^(0+256)+11)
 26062                           
 26063                           ;i2c_master.c: 251: return I2C_RESET;
 26064  2FC2  300E               	movlw	14
 26065  2FC3  0008               	return
 26066  2FC4                     __end_ofi1_do_I2C_IDLE:	
 26067                           
 26068                           	psect	text149
 26069  2FF2                     __ptext149:	
 26070 ;; *************** function i1_do_I2C_RESET *****************
 26071 ;; Defined at:
 26072 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 26073 ;; Parameters:    Size  Location     Type
 26074 ;;		None
 26075 ;; Auto vars:     Size  Location     Type
 26076 ;;		None
 26077 ;; Return value:  Size  Location     Type
 26078 ;;                  1    wreg      enum E8364
 26079 ;; Registers used:
 26080 ;;		wreg, status,2, status,0, pclath, cstack
 26081 ;; Tracked objects:
 26082 ;;		On entry : 0/0
 26083 ;;		On exit  : 0/0
 26084 ;;		Unchanged: 0/0
 26085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26090 ;;Total ram usage:        0 bytes
 26091 ;; Hardware stack levels used:    1
 26092 ;; Hardware stack levels required when called:    1
 26093 ;; This function calls:
 26094 ;;		i1_i2c1_driver_resetBus
 26095 ;; This function is called by:
 26096 ;; This function uses a non-reentrant model
 26097 ;;
 26098                           
 26099                           
 26100                           ;psect for function i1_do_I2C_RESET
 26101  2FF2                     i1_do_I2C_RESET:	
 26102  2FF2                     i1l6760:	
 26103                           ;incstack = 0
 26104                           ; Regs used in i1_do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 26105                           
 26106                           
 26107                           ;i2c_master.c: 241: i2c1_driver_resetBus();
 26108  2FF2  31AF  2736         	fcall	i1_i2c1_driver_resetBus
 26109                           
 26110                           ;i2c_master.c: 242: i2c_status.busy = 0;
 26111  2FF4  0022               	movlb	2	; select bank2
 26112  2FF5  1020               	bcf	_i2c_status^(0+256),0
 26113                           
 26114                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 26115  2FF6  01AB               	clrf	(_i2c_status^(0+256)+11)
 26116                           
 26117                           ;i2c_master.c: 244: return I2C_RESET;
 26118  2FF7  300E               	movlw	14
 26119  2FF8  0008               	return
 26120  2FF9                     __end_ofi1_do_I2C_RESET:	
 26121                           
 26122                           	psect	text150
 26123  2594                     __ptext150:	
 26124 ;; *************** function i1_do_I2C_TX_EMPTY *****************
 26125 ;; Defined at:
 26126 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 26127 ;; Parameters:    Size  Location     Type
 26128 ;;		None
 26129 ;; Auto vars:     Size  Location     Type
 26130 ;;		None
 26131 ;; Return value:  Size  Location     Type
 26132 ;;                  1    wreg      enum E8364
 26133 ;; Registers used:
 26134 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26135 ;; Tracked objects:
 26136 ;;		On entry : 0/0
 26137 ;;		On exit  : 0/0
 26138 ;;		Unchanged: 0/0
 26139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26142 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26143 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26144 ;;Total ram usage:        1 bytes
 26145 ;; Hardware stack levels used:    1
 26146 ;; Hardware stack levels required when called:    2
 26147 ;; This function calls:
 26148 ;;		i1_do_I2C_SEND_RESTART
 26149 ;;		i1_do_I2C_SEND_STOP
 26150 ;;		i1_mssp1_setIRQ
 26151 ;;		i1_returnReset
 26152 ;;		i1_returnStop
 26153 ;; This function is called by:
 26154 ;; This function uses a non-reentrant model
 26155 ;;
 26156                           
 26157                           
 26158                           ;psect for function i1_do_I2C_TX_EMPTY
 26159  2594                     i1_do_I2C_TX_EMPTY:	
 26160  2594                     i1l9028:	
 26161                           ;incstack = 0
 26162                           ; Regs used in i1_do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26163                           
 26164                           
 26165                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 26166  2594  0022               	movlb	2	; select bank2
 26167  2595  1520               	bsf	_i2c_status^(0+256),2
 26168                           
 26169                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 26170  2596  2DA1               	goto	i1l9046
 26171  2597                     i1l9030:	
 26172                           ;i2c_master.c: 386: {
 26173                           ;i2c_master.c: 387: case i2c_restart_read:
 26174                           
 26175                           
 26176                           ;i2c_master.c: 388: case i2c_restart_write:
 26177                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 26178  2597  31AF  278B         	fcall	i1_do_I2C_SEND_RESTART
 26179  2599  0008               	return
 26180  259A                     i1l9034:	
 26181                           ;i2c_master.c: 390: case i2c_continue:
 26182                           
 26183                           
 26184                           ;i2c_master.c: 391: mssp1_setIRQ();
 26185  259A  31AF  2757         	fcall	i1_mssp1_setIRQ
 26186                           
 26187                           ;i2c_master.c: 392: return I2C_TX;
 26188  259C  3003               	movlw	3
 26189  259D  0008               	return
 26190  259E                     i1l9040:	
 26191                           ;i2c_master.c: 394: case i2c_stop:
 26192                           
 26193                           ;i2c_master.c: 393: default:
 26194                           
 26195                           
 26196                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 26197  259E  31AF  278F         	fcall	i1_do_I2C_SEND_STOP
 26198                           
 26199                           ;i2c_master.c: 396: }
 26200  25A0  0008               	return
 26201  25A1                     i1l9046:	
 26202  25A1  0022               	movlb	2	; select bank2
 26203  25A2  0838               	movf	(low ((_i2c_status| (0+256)+24)))^0,w
 26204  25A3  00F0               	movwf	??i1_do_I2C_TX_EMPTY
 26205  25A4  0870               	movf	??i1_do_I2C_TX_EMPTY,w
 26206  25A5  00F0               	movwf	i1returnReset@p
 26207  25A6  300C               	movlw	12
 26208  25A7  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 26209  25A8  0086               	movwf	6
 26210  25A9  3001               	movlw	1	; select bank2/3
 26211  25AA  0087               	movwf	7
 26212  25AB  3F41               	moviw [1]fsr1
 26213  25AC  008A               	movwf	10
 26214  25AD  3F40               	moviw [0]fsr1
 26215  25AE  000A               	callw
 26216  25AF  31A5               	pagesel	$
 26217                           
 26218                           ; Switch size 1, requested type "space"
 26219                           ; Number of cases is 4, Range of values is 1 to 4
 26220                           ; switch strategies available:
 26221                           ; Name         Instructions Cycles
 26222                           ; simple_byte           13     7 (average)
 26223                           ; direct_byte           17     9 (fixed)
 26224                           ; jumptable            263     9 (fixed)
 26225                           ;	Chosen strategy is simple_byte
 26226  25B0  3A01               	xorlw	1	; case 1
 26227  25B1  1903               	skipnz
 26228  25B2  2D9E               	goto	i1l9040
 26229  25B3  3A03               	xorlw	3	; case 2
 26230  25B4  1903               	skipnz
 26231  25B5  2D97               	goto	i1l9030
 26232  25B6  3A01               	xorlw	1	; case 3
 26233  25B7  1903               	skipnz
 26234  25B8  2D97               	goto	i1l9030
 26235  25B9  3A07               	xorlw	7	; case 4
 26236  25BA  1903               	skipnz
 26237  25BB  2D9A               	goto	i1l9034
 26238  25BC  2D9E               	goto	i1l9040
 26239  25BD  0008               	return
 26240  25BE                     __end_ofi1_do_I2C_TX_EMPTY:	
 26241                           
 26242                           	psect	text151
 26243  2F57                     __ptext151:	
 26244 ;; *************** function i1_mssp1_setIRQ *****************
 26245 ;; Defined at:
 26246 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 26247 ;; Parameters:    Size  Location     Type
 26248 ;;		None
 26249 ;; Auto vars:     Size  Location     Type
 26250 ;;		None
 26251 ;; Return value:  Size  Location     Type
 26252 ;;                  1    wreg      void 
 26253 ;; Registers used:
 26254 ;;		None
 26255 ;; Tracked objects:
 26256 ;;		On entry : 0/0
 26257 ;;		On exit  : 0/0
 26258 ;;		Unchanged: 0/0
 26259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26264 ;;Total ram usage:        0 bytes
 26265 ;; Hardware stack levels used:    1
 26266 ;; This function calls:
 26267 ;;		Nothing
 26268 ;; This function is called by:
 26269 ;;		i1_do_I2C_TX_EMPTY
 26270 ;; This function uses a non-reentrant model
 26271 ;;
 26272                           
 26273                           
 26274                           ;psect for function i1_mssp1_setIRQ
 26275  2F57                     i1_mssp1_setIRQ:	
 26276                           
 26277                           ;i2c1_driver.c: 60: PIR1bits.SSP1IF = 1;
 26278                           
 26279                           ;incstack = 0
 26280                           ; Regs used in i1_mssp1_setIRQ: []
 26281  2F57  0020               	movlb	0	; select bank0
 26282  2F58  1591               	bsf	17,3	;volatile
 26283  2F59  0008               	return
 26284  2F5A                     __end_ofi1_mssp1_setIRQ:	
 26285                           
 26286                           	psect	text152
 26287  2132                     __ptext152:	
 26288 ;; *************** function i1_i2c1_driver_isNACK *****************
 26289 ;; Defined at:
 26290 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 26291 ;; Parameters:    Size  Location     Type
 26292 ;;		None
 26293 ;; Auto vars:     Size  Location     Type
 26294 ;;		None
 26295 ;; Return value:  Size  Location     Type
 26296 ;;		None               void
 26297 ;; Registers used:
 26298 ;;		wreg, status,2, status,0
 26299 ;; Tracked objects:
 26300 ;;		On entry : 0/0
 26301 ;;		On exit  : 0/0
 26302 ;;		Unchanged: 0/0
 26303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26307 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26308 ;;Total ram usage:        1 bytes
 26309 ;; Hardware stack levels used:    1
 26310 ;; This function calls:
 26311 ;;		Nothing
 26312 ;; This function is called by:
 26313 ;;		i1_do_I2C_TX
 26314 ;;		i1_i2c_ISR
 26315 ;; This function uses a non-reentrant model
 26316 ;;
 26317                           
 26318                           
 26319                           ;psect for function i1_i2c1_driver_isNACK
 26320  2132                     i1_i2c1_driver_isNACK:	
 26321                           
 26322                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 26323                           
 26324                           ;incstack = 0
 26325                           ; Regs used in i1_i2c1_driver_isNACK: [wreg+status,2+status,0]
 26326  2132  0024               	movlb	4	; select bank4
 26327  2133  0816               	movf	22,w	;volatile
 26328  2134  39BF               	andlw	-65
 26329  2135  3840               	iorlw	64
 26330  2136  0096               	movwf	22	;volatile
 26331  2137  0E16               	swapf	22,w	;volatile
 26332  2138  0C89               	rrf	9,f
 26333  2139  0C89               	rrf	9,f
 26334  213A  3901               	andlw	1
 26335  213B  00F0               	movwf	??i1_i2c1_driver_isNACK
 26336  213C  0C70               	rrf	??i1_i2c1_driver_isNACK,w
 26337  213D  0008               	return
 26338  213E                     __end_ofi1_i2c1_driver_isNACK:	
 26339                           
 26340                           	psect	text153
 26341  2FBA                     __ptext153:	
 26342 ;; *************** function i1_i2c1_driver_TXData *****************
 26343 ;; Defined at:
 26344 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 26345 ;; Parameters:    Size  Location     Type
 26346 ;;  d               1    wreg     unsigned char 
 26347 ;; Auto vars:     Size  Location     Type
 26348 ;;  d               1    0[COMMON] unsigned char 
 26349 ;; Return value:  Size  Location     Type
 26350 ;;                  1    wreg      void 
 26351 ;; Registers used:
 26352 ;;		wreg
 26353 ;; Tracked objects:
 26354 ;;		On entry : 0/0
 26355 ;;		On exit  : 0/0
 26356 ;;		Unchanged: 0/0
 26357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26361 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26362 ;;Total ram usage:        1 bytes
 26363 ;; Hardware stack levels used:    1
 26364 ;; This function calls:
 26365 ;;		Nothing
 26366 ;; This function is called by:
 26367 ;;		i1_do_I2C_SEND_ADR_READ
 26368 ;;		i1_do_I2C_SEND_ADR_WRITE
 26369 ;;		i1_do_I2C_TX
 26370 ;; This function uses a non-reentrant model
 26371 ;;
 26372                           
 26373                           
 26374                           ;psect for function i1_i2c1_driver_TXData
 26375  2FBA                     i1_i2c1_driver_TXData:	
 26376                           
 26377                           ;incstack = 0
 26378                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 26379                           ;i1i2c1_driver_TXData@d stored from wreg
 26380  2FBA  00F0               	movwf	i1i2c1_driver_TXData@d
 26381                           
 26382                           ;i2c1_driver.c: 188: SSP1BUF = d;
 26383  2FBB  0870               	movf	i1i2c1_driver_TXData@d,w
 26384  2FBC  0024               	movlb	4	; select bank4
 26385  2FBD  0091               	movwf	17	;volatile
 26386  2FBE  0008               	return
 26387  2FBF                     __end_ofi1_i2c1_driver_TXData:	
 26388                           
 26389                           	psect	text154
 26390  2F54                     __ptext154:	
 26391 ;; *************** function i1_i2c1_driver_getRXData *****************
 26392 ;; Defined at:
 26393 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 26394 ;; Parameters:    Size  Location     Type
 26395 ;;		None
 26396 ;; Auto vars:     Size  Location     Type
 26397 ;;		None
 26398 ;; Return value:  Size  Location     Type
 26399 ;;                  1    wreg      unsigned char 
 26400 ;; Registers used:
 26401 ;;		wreg
 26402 ;; Tracked objects:
 26403 ;;		On entry : 0/0
 26404 ;;		On exit  : 0/0
 26405 ;;		Unchanged: 0/0
 26406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26411 ;;Total ram usage:        0 bytes
 26412 ;; Hardware stack levels used:    1
 26413 ;; This function calls:
 26414 ;;		Nothing
 26415 ;; This function is called by:
 26416 ;;		i1_do_I2C_RX
 26417 ;; This function uses a non-reentrant model
 26418 ;;
 26419                           
 26420                           
 26421                           ;psect for function i1_i2c1_driver_getRXData
 26422  2F54                     i1_i2c1_driver_getRXData:	
 26423                           
 26424                           ;i2c1_driver.c: 173: return SSP1BUF;
 26425                           
 26426                           ;incstack = 0
 26427                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 26428  2F54  0024               	movlb	4	; select bank4
 26429  2F55  0811               	movf	17,w	;volatile
 26430  2F56  0008               	return
 26431  2F57                     __end_ofi1_i2c1_driver_getRXData:	
 26432                           
 26433                           	psect	text155
 26434  2F7F                     __ptext155:	
 26435 ;; *************** function i1_i2c1_driver_sendNACK *****************
 26436 ;; Defined at:
 26437 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 26438 ;; Parameters:    Size  Location     Type
 26439 ;;		None
 26440 ;; Auto vars:     Size  Location     Type
 26441 ;;		None
 26442 ;; Return value:  Size  Location     Type
 26443 ;;                  1    wreg      void 
 26444 ;; Registers used:
 26445 ;;		None
 26446 ;; Tracked objects:
 26447 ;;		On entry : 0/0
 26448 ;;		On exit  : 0/0
 26449 ;;		Unchanged: 0/0
 26450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26455 ;;Total ram usage:        0 bytes
 26456 ;; Hardware stack levels used:    1
 26457 ;; This function calls:
 26458 ;;		Nothing
 26459 ;; This function is called by:
 26460 ;;		i1_do_I2C_DO_NACK_STOP
 26461 ;;		i1_do_I2C_DO_NACK_RESTART
 26462 ;; This function uses a non-reentrant model
 26463 ;;
 26464                           
 26465                           
 26466                           ;psect for function i1_i2c1_driver_sendNACK
 26467  2F7F                     i1_i2c1_driver_sendNACK:	
 26468                           
 26469                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 26470                           
 26471                           ;incstack = 0
 26472                           ; Regs used in i1_i2c1_driver_sendNACK: []
 26473  2F7F  0024               	movlb	4	; select bank4
 26474  2F80  1696               	bsf	22,5	;volatile
 26475                           
 26476                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 26477  2F81  1616               	bsf	22,4	;volatile
 26478  2F82  0008               	return
 26479  2F83                     __end_ofi1_i2c1_driver_sendNACK:	
 26480                           
 26481                           	psect	text156
 26482  2F36                     __ptext156:	
 26483 ;; *************** function i1_i2c1_driver_resetBus *****************
 26484 ;; Defined at:
 26485 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 26486 ;; Parameters:    Size  Location     Type
 26487 ;;		None
 26488 ;; Auto vars:     Size  Location     Type
 26489 ;;		None
 26490 ;; Return value:  Size  Location     Type
 26491 ;;                  1    wreg      void 
 26492 ;; Registers used:
 26493 ;;		None
 26494 ;; Tracked objects:
 26495 ;;		On entry : 0/0
 26496 ;;		On exit  : 0/0
 26497 ;;		Unchanged: 0/0
 26498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26503 ;;Total ram usage:        0 bytes
 26504 ;; Hardware stack levels used:    1
 26505 ;; This function calls:
 26506 ;;		Nothing
 26507 ;; This function is called by:
 26508 ;;		i1_do_I2C_RESET
 26509 ;; This function uses a non-reentrant model
 26510 ;;
 26511                           
 26512                           
 26513                           ;psect for function i1_i2c1_driver_resetBus
 26514  2F36                     i1_i2c1_driver_resetBus:	
 26515                           
 26516                           ;incstack = 0
 26517                           ; Regs used in i1_i2c1_driver_resetBus: []
 26518  2F36  0008               	return
 26519  2F37                     __end_ofi1_i2c1_driver_resetBus:	
 26520                           
 26521                           	psect	text157
 26522  2F51                     __ptext157:	
 26523 ;; *************** function i1_i2c1_driver_startRX *****************
 26524 ;; Defined at:
 26525 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 26526 ;; Parameters:    Size  Location     Type
 26527 ;;		None
 26528 ;; Auto vars:     Size  Location     Type
 26529 ;;		None
 26530 ;; Return value:  Size  Location     Type
 26531 ;;                  1    wreg      void 
 26532 ;; Registers used:
 26533 ;;		None
 26534 ;; Tracked objects:
 26535 ;;		On entry : 0/0
 26536 ;;		On exit  : 0/0
 26537 ;;		Unchanged: 0/0
 26538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26543 ;;Total ram usage:        0 bytes
 26544 ;; Hardware stack levels used:    1
 26545 ;; This function calls:
 26546 ;;		Nothing
 26547 ;; This function is called by:
 26548 ;;		i1_do_I2C_RCEN
 26549 ;; This function uses a non-reentrant model
 26550 ;;
 26551                           
 26552                           
 26553                           ;psect for function i1_i2c1_driver_startRX
 26554  2F51                     i1_i2c1_driver_startRX:	
 26555                           
 26556                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
 26557                           
 26558                           ;incstack = 0
 26559                           ; Regs used in i1_i2c1_driver_startRX: []
 26560  2F51  0024               	movlb	4	; select bank4
 26561  2F52  1596               	bsf	22,3	;volatile
 26562  2F53  0008               	return
 26563  2F54                     __end_ofi1_i2c1_driver_startRX:	
 26564                           
 26565                           	psect	text158
 26566  2F3A                     __ptext158:	
 26567 ;; *************** function i1_returnReset *****************
 26568 ;; Defined at:
 26569 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 26570 ;; Parameters:    Size  Location     Type
 26571 ;;  p               1    0[COMMON] PTR void 
 26572 ;;		 -> NULL(0), 
 26573 ;; Auto vars:     Size  Location     Type
 26574 ;;		None
 26575 ;; Return value:  Size  Location     Type
 26576 ;;                  1    wreg      enum E8198
 26577 ;; Registers used:
 26578 ;;		wreg
 26579 ;; Tracked objects:
 26580 ;;		On entry : 0/0
 26581 ;;		On exit  : 0/0
 26582 ;;		Unchanged: 0/0
 26583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26584 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26587 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26588 ;;Total ram usage:        1 bytes
 26589 ;; Hardware stack levels used:    1
 26590 ;; This function calls:
 26591 ;;		Nothing
 26592 ;; This function is called by:
 26593 ;; This function uses a non-reentrant model
 26594 ;;
 26595                           
 26596                           
 26597                           ;psect for function i1_returnReset
 26598  2F3A                     i1_returnReset:	
 26599  2F3A                     i1l8546:	
 26600                           ;incstack = 0
 26601                           ; Regs used in i1_returnReset: [wreg]
 26602                           
 26603                           
 26604                           ;i2c_master.c: 450: return i2c_reset_link;
 26605  2F3A  3005               	movlw	5
 26606  2F3B  0008               	return
 26607  2F3C                     __end_ofi1_returnReset:	
 26608                           
 26609                           	psect	text159
 26610  2F38                     __ptext159:	
 26611 ;; *************** function i1_returnStop *****************
 26612 ;; Defined at:
 26613 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 26614 ;; Parameters:    Size  Location     Type
 26615 ;;  p               1    0[COMMON] PTR void 
 26616 ;;		 -> NULL(0), 
 26617 ;; Auto vars:     Size  Location     Type
 26618 ;;		None
 26619 ;; Return value:  Size  Location     Type
 26620 ;;                  1    wreg      enum E8198
 26621 ;; Registers used:
 26622 ;;		wreg
 26623 ;; Tracked objects:
 26624 ;;		On entry : 0/0
 26625 ;;		On exit  : 0/0
 26626 ;;		Unchanged: 0/0
 26627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26628 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26631 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26632 ;;Total ram usage:        1 bytes
 26633 ;; Hardware stack levels used:    1
 26634 ;; This function calls:
 26635 ;;		Nothing
 26636 ;; This function is called by:
 26637 ;; This function uses a non-reentrant model
 26638 ;;
 26639                           
 26640                           
 26641                           ;psect for function i1_returnStop
 26642  2F38                     i1_returnStop:	
 26643  2F38                     i1l8542:	
 26644                           ;incstack = 0
 26645                           ; Regs used in i1_returnStop: [wreg]
 26646                           
 26647                           
 26648                           ;i2c_master.c: 445: return i2c_stop;
 26649  2F38  3001               	movlw	1
 26650  2F39  0008               	return
 26651  2F3A                     __end_ofi1_returnStop:	
 26652                           
 26653                           	psect	text160
 26654  2F4E                     __ptext160:	
 26655 ;; *************** function i1_i2c1_driver_stop *****************
 26656 ;; Defined at:
 26657 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 26658 ;; Parameters:    Size  Location     Type
 26659 ;;		None
 26660 ;; Auto vars:     Size  Location     Type
 26661 ;;		None
 26662 ;; Return value:  Size  Location     Type
 26663 ;;                  1    wreg      void 
 26664 ;; Registers used:
 26665 ;;		None
 26666 ;; Tracked objects:
 26667 ;;		On entry : 0/0
 26668 ;;		On exit  : 0/0
 26669 ;;		Unchanged: 0/0
 26670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26675 ;;Total ram usage:        0 bytes
 26676 ;; Hardware stack levels used:    1
 26677 ;; This function calls:
 26678 ;;		Nothing
 26679 ;; This function is called by:
 26680 ;;		i1_do_I2C_SEND_STOP
 26681 ;; This function uses a non-reentrant model
 26682 ;;
 26683                           
 26684                           
 26685                           ;psect for function i1_i2c1_driver_stop
 26686  2F4E                     i1_i2c1_driver_stop:	
 26687                           
 26688                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
 26689                           
 26690                           ;incstack = 0
 26691                           ; Regs used in i1_i2c1_driver_stop: []
 26692  2F4E  0024               	movlb	4	; select bank4
 26693  2F4F  1516               	bsf	22,2	;volatile
 26694  2F50  0008               	return
 26695  2F51                     __end_ofi1_i2c1_driver_stop:	
 26696                           
 26697                           	psect	text161
 26698  2F4B                     __ptext161:	
 26699 ;; *************** function i1_i2c1_driver_restart *****************
 26700 ;; Defined at:
 26701 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 26702 ;; Parameters:    Size  Location     Type
 26703 ;;		None
 26704 ;; Auto vars:     Size  Location     Type
 26705 ;;		None
 26706 ;; Return value:  Size  Location     Type
 26707 ;;                  1    wreg      void 
 26708 ;; Registers used:
 26709 ;;		None
 26710 ;; Tracked objects:
 26711 ;;		On entry : 0/0
 26712 ;;		On exit  : 0/0
 26713 ;;		Unchanged: 0/0
 26714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26719 ;;Total ram usage:        0 bytes
 26720 ;; Hardware stack levels used:    1
 26721 ;; This function calls:
 26722 ;;		Nothing
 26723 ;; This function is called by:
 26724 ;;		i1_do_I2C_SEND_RESTART_READ
 26725 ;;		i1_do_I2C_SEND_RESTART_WRITE
 26726 ;;		i1_do_I2C_SEND_RESTART
 26727 ;; This function uses a non-reentrant model
 26728 ;;
 26729                           
 26730                           
 26731                           ;psect for function i1_i2c1_driver_restart
 26732  2F4B                     i1_i2c1_driver_restart:	
 26733                           
 26734                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
 26735                           
 26736                           ;incstack = 0
 26737                           ; Regs used in i1_i2c1_driver_restart: []
 26738  2F4B  0024               	movlb	4	; select bank4
 26739  2F4C  1496               	bsf	22,1	;volatile
 26740  2F4D  0008               	return
 26741  2F4E                     __end_ofi1_i2c1_driver_restart:	
 26742                           
 26743                           	psect	text162
 26744  2F7B                     __ptext162:	
 26745 ;; *************** function i1_i2c1_driver_sendACK *****************
 26746 ;; Defined at:
 26747 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 26748 ;; Parameters:    Size  Location     Type
 26749 ;;		None
 26750 ;; Auto vars:     Size  Location     Type
 26751 ;;		None
 26752 ;; Return value:  Size  Location     Type
 26753 ;;                  1    wreg      void 
 26754 ;; Registers used:
 26755 ;;		None
 26756 ;; Tracked objects:
 26757 ;;		On entry : 0/0
 26758 ;;		On exit  : 0/0
 26759 ;;		Unchanged: 0/0
 26760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26765 ;;Total ram usage:        0 bytes
 26766 ;; Hardware stack levels used:    1
 26767 ;; This function calls:
 26768 ;;		Nothing
 26769 ;; This function is called by:
 26770 ;;		i1_do_I2C_DO_ACK
 26771 ;;		i1_do_I2C_RX
 26772 ;; This function uses a non-reentrant model
 26773 ;;
 26774                           
 26775                           
 26776                           ;psect for function i1_i2c1_driver_sendACK
 26777  2F7B                     i1_i2c1_driver_sendACK:	
 26778                           
 26779                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 26780                           
 26781                           ;incstack = 0
 26782                           ; Regs used in i1_i2c1_driver_sendACK: []
 26783  2F7B  0024               	movlb	4	; select bank4
 26784  2F7C  1296               	bcf	22,5	;volatile
 26785                           
 26786                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 26787  2F7D  1616               	bsf	22,4	;volatile
 26788  2F7E  0008               	return
 26789  2F7F                     __end_ofi1_i2c1_driver_sendACK:	
 26790                           
 26791                           	psect	text163
 26792  2F48                     __ptext163:	
 26793 ;; *************** function _i2c_busCollisionISR *****************
 26794 ;; Defined at:
 26795 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 26796 ;; Parameters:    Size  Location     Type
 26797 ;;		None
 26798 ;; Auto vars:     Size  Location     Type
 26799 ;;		None
 26800 ;; Return value:  Size  Location     Type
 26801 ;;                  1    wreg      void 
 26802 ;; Registers used:
 26803 ;;		status,2, status,0, pclath, cstack
 26804 ;; Tracked objects:
 26805 ;;		On entry : 0/0
 26806 ;;		On exit  : 0/0
 26807 ;;		Unchanged: 0/0
 26808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26813 ;;Total ram usage:        0 bytes
 26814 ;; Hardware stack levels used:    1
 26815 ;; Hardware stack levels required when called:    1
 26816 ;; This function calls:
 26817 ;;		_i2c1_driver_clearBusCollision
 26818 ;; This function is called by:
 26819 ;;		_i2c_open
 26820 ;;		_INTERRUPT_InterruptManager
 26821 ;; This function uses a non-reentrant model
 26822 ;;
 26823                           
 26824                           
 26825                           ;psect for function _i2c_busCollisionISR
 26826  2F48                     _i2c_busCollisionISR:	
 26827                           
 26828                           ;i2c_master.c: 437: i2c1_driver_clearBusCollision();
 26829                           
 26830                           ;incstack = 0
 26831                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 26832  2F48  31AF  2745         	fcall	_i2c1_driver_clearBusCollision
 26833  2F4A  0008               	return
 26834  2F4B                     __end_of_i2c_busCollisionISR:	
 26835                           
 26836                           	psect	text164
 26837  2F45                     __ptext164:	
 26838 ;; *************** function _i2c1_driver_clearBusCollision *****************
 26839 ;; Defined at:
 26840 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 26841 ;; Parameters:    Size  Location     Type
 26842 ;;		None
 26843 ;; Auto vars:     Size  Location     Type
 26844 ;;		None
 26845 ;; Return value:  Size  Location     Type
 26846 ;;                  1    wreg      void 
 26847 ;; Registers used:
 26848 ;;		None
 26849 ;; Tracked objects:
 26850 ;;		On entry : 0/0
 26851 ;;		On exit  : 0/0
 26852 ;;		Unchanged: 0/0
 26853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26858 ;;Total ram usage:        0 bytes
 26859 ;; Hardware stack levels used:    1
 26860 ;; This function calls:
 26861 ;;		Nothing
 26862 ;; This function is called by:
 26863 ;;		_i2c_busCollisionISR
 26864 ;; This function uses a non-reentrant model
 26865 ;;
 26866                           
 26867                           
 26868                           ;psect for function _i2c1_driver_clearBusCollision
 26869  2F45                     _i2c1_driver_clearBusCollision:	
 26870                           
 26871                           ;i2c1_driver.c: 255: PIR1bits.BCL1IF = 0;
 26872                           
 26873                           ;incstack = 0
 26874                           ; Regs used in _i2c1_driver_clearBusCollision: []
 26875  2F45  0020               	movlb	0	; select bank0
 26876  2F46  1111               	bcf	17,2	;volatile
 26877  2F47  0008               	return
 26878  2F48                     __end_of_i2c1_driver_clearBusCollision:	
 26879                           
 26880                           	psect	text165
 26881  217C                     __ptext165:	
 26882 ;; *************** function _TMR4_ISR *****************
 26883 ;; Defined at:
 26884 ;;		line 118 in file "mcc_generated_files/tmr4.c"
 26885 ;; Parameters:    Size  Location     Type
 26886 ;;		None
 26887 ;; Auto vars:     Size  Location     Type
 26888 ;;		None
 26889 ;; Return value:  Size  Location     Type
 26890 ;;                  1    wreg      void 
 26891 ;; Registers used:
 26892 ;;		wreg, status,2, status,0, pclath, cstack
 26893 ;; Tracked objects:
 26894 ;;		On entry : 0/0
 26895 ;;		On exit  : 0/0
 26896 ;;		Unchanged: 0/0
 26897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26902 ;;Total ram usage:        0 bytes
 26903 ;; Hardware stack levels used:    1
 26904 ;; Hardware stack levels required when called:    2
 26905 ;; This function calls:
 26906 ;;		Absolute function
 26907 ;;		_TMR4_DefaultInterruptHandler
 26908 ;; This function is called by:
 26909 ;;		_INTERRUPT_InterruptManager
 26910 ;; This function uses a non-reentrant model
 26911 ;;
 26912                           
 26913                           
 26914                           ;psect for function _TMR4_ISR
 26915  217C                     _TMR4_ISR:	
 26916                           
 26917                           ;tmr4.c: 122: PIR2bits.TMR4IF = 0;
 26918                           
 26919                           ;incstack = 0
 26920                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 26921  217C  0020               	movlb	0	; select bank0
 26922  217D  1092               	bcf	18,1	;volatile
 26923                           
 26924                           ;tmr4.c: 124: if(TMR4_InterruptHandler)
 26925  217E  0023               	movlb	3	; select bank3
 26926  217F  0866               	movf	_TMR4_InterruptHandler^(0+384),w
 26927  2180  0467               	iorwf	(_TMR4_InterruptHandler+1)^(0+384),w
 26928  2181  1903               	btfsc	3,2
 26929  2182  0008               	return
 26930                           
 26931                           ;tmr4.c: 125: {
 26932                           ;tmr4.c: 126: TMR4_InterruptHandler();
 26933  2183  0867               	movf	(_TMR4_InterruptHandler+1)^(0+384),w
 26934  2184  008A               	movwf	10
 26935  2185  0866               	movf	_TMR4_InterruptHandler^(0+384),w
 26936  2186  000A               	callw
 26937  2187  31A1               	pagesel	$
 26938  2188  0008               	return
 26939  2189                     __end_of_TMR4_ISR:	
 26940                           
 26941                           	psect	text166
 26942  20CA                     __ptext166:	
 26943 ;; *************** function _TMR4_DefaultInterruptHandler *****************
 26944 ;; Defined at:
 26945 ;;		line 135 in file "mcc_generated_files/tmr4.c"
 26946 ;; Parameters:    Size  Location     Type
 26947 ;;		None
 26948 ;; Auto vars:     Size  Location     Type
 26949 ;;		None
 26950 ;; Return value:  Size  Location     Type
 26951 ;;                  1    wreg      void 
 26952 ;; Registers used:
 26953 ;;		wreg, status,2, status,0, pclath, cstack
 26954 ;; Tracked objects:
 26955 ;;		On entry : 0/0
 26956 ;;		On exit  : 0/0
 26957 ;;		Unchanged: 0/0
 26958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26963 ;;Total ram usage:        0 bytes
 26964 ;; Hardware stack levels used:    1
 26965 ;; Hardware stack levels required when called:    1
 26966 ;; This function calls:
 26967 ;;		_TMR4_StopTimer
 26968 ;;		_TMR4_WriteTimer
 26969 ;; This function is called by:
 26970 ;;		_TMR4_Initialize
 26971 ;;		_TMR4_ISR
 26972 ;; This function uses a non-reentrant model
 26973 ;;
 26974                           
 26975                           
 26976                           ;psect for function _TMR4_DefaultInterruptHandler
 26977  20CA                     _TMR4_DefaultInterruptHandler:	
 26978                           
 26979                           ;tmr4.c: 138: interpulseWait = 0;
 26980                           
 26981                           ;incstack = 0
 26982                           ; Regs used in _TMR4_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 26983  20CA  0022               	movlb	2	; select bank2
 26984  20CB  01E6               	clrf	_interpulseWait^(0+256)
 26985  20CC  01E7               	clrf	(_interpulseWait+1)^(0+256)
 26986                           
 26987                           ;tmr4.c: 139: TMR4_StopTimer();
 26988  20CD  31AF  2742  31A0   	fcall	_TMR4_StopTimer
 26989                           
 26990                           ;tmr4.c: 140: TMR4_WriteTimer(0);
 26991  20D0  3000               	movlw	0
 26992  20D1  31AF  27B5         	fcall	_TMR4_WriteTimer
 26993  20D3  0008               	return
 26994  20D4                     __end_of_TMR4_DefaultInterruptHandler:	
 26995                           
 26996                           	psect	text167
 26997  2FB5                     __ptext167:	
 26998 ;; *************** function _TMR4_WriteTimer *****************
 26999 ;; Defined at:
 27000 ;;		line 107 in file "mcc_generated_files/tmr4.c"
 27001 ;; Parameters:    Size  Location     Type
 27002 ;;  timerVal        1    wreg     unsigned char 
 27003 ;; Auto vars:     Size  Location     Type
 27004 ;;  timerVal        1    0[COMMON] unsigned char 
 27005 ;; Return value:  Size  Location     Type
 27006 ;;                  1    wreg      void 
 27007 ;; Registers used:
 27008 ;;		wreg
 27009 ;; Tracked objects:
 27010 ;;		On entry : 0/0
 27011 ;;		On exit  : 0/0
 27012 ;;		Unchanged: 0/0
 27013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27015 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27017 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27018 ;;Total ram usage:        1 bytes
 27019 ;; Hardware stack levels used:    1
 27020 ;; This function calls:
 27021 ;;		Nothing
 27022 ;; This function is called by:
 27023 ;;		_TMR4_DefaultInterruptHandler
 27024 ;; This function uses a non-reentrant model
 27025 ;;
 27026                           
 27027                           
 27028                           ;psect for function _TMR4_WriteTimer
 27029  2FB5                     _TMR4_WriteTimer:	
 27030                           
 27031                           ;incstack = 0
 27032                           ; Regs used in _TMR4_WriteTimer: [wreg]
 27033                           ;TMR4_WriteTimer@timerVal stored from wreg
 27034  2FB5  00F0               	movwf	TMR4_WriteTimer@timerVal
 27035                           
 27036                           ;tmr4.c: 110: TMR4 = timerVal;
 27037  2FB6  0870               	movf	TMR4_WriteTimer@timerVal,w
 27038  2FB7  0028               	movlb	8	; select bank8
 27039  2FB8  0095               	movwf	21	;volatile
 27040  2FB9  0008               	return
 27041  2FBA                     __end_of_TMR4_WriteTimer:	
 27042                           
 27043                           	psect	text168
 27044  2F42                     __ptext168:	
 27045 ;; *************** function _TMR4_StopTimer *****************
 27046 ;; Defined at:
 27047 ;;		line 92 in file "mcc_generated_files/tmr4.c"
 27048 ;; Parameters:    Size  Location     Type
 27049 ;;		None
 27050 ;; Auto vars:     Size  Location     Type
 27051 ;;		None
 27052 ;; Return value:  Size  Location     Type
 27053 ;;                  1    wreg      void 
 27054 ;; Registers used:
 27055 ;;		None
 27056 ;; Tracked objects:
 27057 ;;		On entry : 0/0
 27058 ;;		On exit  : 0/0
 27059 ;;		Unchanged: 0/0
 27060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27065 ;;Total ram usage:        0 bytes
 27066 ;; Hardware stack levels used:    1
 27067 ;; This function calls:
 27068 ;;		Nothing
 27069 ;; This function is called by:
 27070 ;;		_TMR4_DefaultInterruptHandler
 27071 ;; This function uses a non-reentrant model
 27072 ;;
 27073                           
 27074                           
 27075                           ;psect for function _TMR4_StopTimer
 27076  2F42                     _TMR4_StopTimer:	
 27077                           
 27078                           ;tmr4.c: 95: T4CONbits.TMR4ON = 0;
 27079                           
 27080                           ;incstack = 0
 27081                           ; Regs used in _TMR4_StopTimer: []
 27082  2F42  0028               	movlb	8	; select bank8
 27083  2F43  1117               	bcf	23,2	;volatile
 27084  2F44  0008               	return
 27085  2F45                     __end_of_TMR4_StopTimer:	
 27086                           
 27087                           	psect	text169
 27088  216F                     __ptext169:	
 27089 ;; *************** function _TMR2_ISR *****************
 27090 ;; Defined at:
 27091 ;;		line 117 in file "mcc_generated_files/tmr2.c"
 27092 ;; Parameters:    Size  Location     Type
 27093 ;;		None
 27094 ;; Auto vars:     Size  Location     Type
 27095 ;;		None
 27096 ;; Return value:  Size  Location     Type
 27097 ;;                  1    wreg      void 
 27098 ;; Registers used:
 27099 ;;		wreg, status,2, status,0, pclath, cstack
 27100 ;; Tracked objects:
 27101 ;;		On entry : 0/0
 27102 ;;		On exit  : 0/0
 27103 ;;		Unchanged: 0/0
 27104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27109 ;;Total ram usage:        0 bytes
 27110 ;; Hardware stack levels used:    1
 27111 ;; Hardware stack levels required when called:    2
 27112 ;; This function calls:
 27113 ;;		Absolute function
 27114 ;;		_TMR2_DefaultInterruptHandler
 27115 ;; This function is called by:
 27116 ;;		_INTERRUPT_InterruptManager
 27117 ;; This function uses a non-reentrant model
 27118 ;;
 27119                           
 27120                           
 27121                           ;psect for function _TMR2_ISR
 27122  216F                     _TMR2_ISR:	
 27123                           
 27124                           ;tmr2.c: 121: PIR1bits.TMR2IF = 0;
 27125                           
 27126                           ;incstack = 0
 27127                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 27128  216F  0020               	movlb	0	; select bank0
 27129  2170  1091               	bcf	17,1	;volatile
 27130                           
 27131                           ;tmr2.c: 123: if(TMR2_InterruptHandler)
 27132  2171  0023               	movlb	3	; select bank3
 27133  2172  0868               	movf	_TMR2_InterruptHandler^(0+384),w
 27134  2173  0469               	iorwf	(_TMR2_InterruptHandler+1)^(0+384),w
 27135  2174  1903               	btfsc	3,2
 27136  2175  0008               	return
 27137                           
 27138                           ;tmr2.c: 124: {
 27139                           ;tmr2.c: 125: TMR2_InterruptHandler();
 27140  2176  0869               	movf	(_TMR2_InterruptHandler+1)^(0+384),w
 27141  2177  008A               	movwf	10
 27142  2178  0868               	movf	_TMR2_InterruptHandler^(0+384),w
 27143  2179  000A               	callw
 27144  217A  31A1               	pagesel	$
 27145  217B  0008               	return
 27146  217C                     __end_of_TMR2_ISR:	
 27147                           
 27148                           	psect	text170
 27149  2082                     __ptext170:	
 27150 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 27151 ;; Defined at:
 27152 ;;		line 134 in file "mcc_generated_files/tmr2.c"
 27153 ;; Parameters:    Size  Location     Type
 27154 ;;		None
 27155 ;; Auto vars:     Size  Location     Type
 27156 ;;		None
 27157 ;; Return value:  Size  Location     Type
 27158 ;;                  1    wreg      void 
 27159 ;; Registers used:
 27160 ;;		wreg, status,2, status,0, pclath, cstack
 27161 ;; Tracked objects:
 27162 ;;		On entry : 0/0
 27163 ;;		On exit  : 0/0
 27164 ;;		Unchanged: 0/0
 27165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27170 ;;Total ram usage:        0 bytes
 27171 ;; Hardware stack levels used:    1
 27172 ;; Hardware stack levels required when called:    1
 27173 ;; This function calls:
 27174 ;;		_TMR2_StopTimer
 27175 ;;		_TMR2_WriteTimer
 27176 ;; This function is called by:
 27177 ;;		_TMR2_Initialize
 27178 ;;		_TMR2_ISR
 27179 ;; This function uses a non-reentrant model
 27180 ;;
 27181                           
 27182                           
 27183                           ;psect for function _TMR2_DefaultInterruptHandler
 27184  2082                     _TMR2_DefaultInterruptHandler:	
 27185                           
 27186                           ;incstack = 0
 27187                           ; Regs used in _TMR2_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 27188                           ;tmr2.c: 138: do { LATCbits.LATC1 = 1; } while(0);
 27189  2082  0022               	movlb	2	; select bank2
 27190  2083  148E               	bsf	14,1	;volatile
 27191                           
 27192                           ;tmr2.c: 141: TMR2_StopTimer();
 27193  2084  31AF  273F  31A0   	fcall	_TMR2_StopTimer
 27194                           
 27195                           ;tmr2.c: 142: TMR2_WriteTimer(0);
 27196  2087  3000               	movlw	0
 27197  2088  31AF  27B0         	fcall	_TMR2_WriteTimer
 27198  208A  0008               	return
 27199  208B                     __end_of_TMR2_DefaultInterruptHandler:	
 27200                           
 27201                           	psect	text171
 27202  2FB0                     __ptext171:	
 27203 ;; *************** function _TMR2_WriteTimer *****************
 27204 ;; Defined at:
 27205 ;;		line 106 in file "mcc_generated_files/tmr2.c"
 27206 ;; Parameters:    Size  Location     Type
 27207 ;;  timerVal        1    wreg     unsigned char 
 27208 ;; Auto vars:     Size  Location     Type
 27209 ;;  timerVal        1    0[COMMON] unsigned char 
 27210 ;; Return value:  Size  Location     Type
 27211 ;;                  1    wreg      void 
 27212 ;; Registers used:
 27213 ;;		wreg
 27214 ;; Tracked objects:
 27215 ;;		On entry : 0/0
 27216 ;;		On exit  : 0/0
 27217 ;;		Unchanged: 0/0
 27218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27220 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27222 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27223 ;;Total ram usage:        1 bytes
 27224 ;; Hardware stack levels used:    1
 27225 ;; This function calls:
 27226 ;;		Nothing
 27227 ;; This function is called by:
 27228 ;;		_TMR2_DefaultInterruptHandler
 27229 ;; This function uses a non-reentrant model
 27230 ;;
 27231                           
 27232                           
 27233                           ;psect for function _TMR2_WriteTimer
 27234  2FB0                     _TMR2_WriteTimer:	
 27235                           
 27236                           ;incstack = 0
 27237                           ; Regs used in _TMR2_WriteTimer: [wreg]
 27238                           ;TMR2_WriteTimer@timerVal stored from wreg
 27239  2FB0  00F0               	movwf	TMR2_WriteTimer@timerVal
 27240                           
 27241                           ;tmr2.c: 109: TMR2 = timerVal;
 27242  2FB1  0870               	movf	TMR2_WriteTimer@timerVal,w
 27243  2FB2  0020               	movlb	0	; select bank0
 27244  2FB3  009D               	movwf	29	;volatile
 27245  2FB4  0008               	return
 27246  2FB5                     __end_of_TMR2_WriteTimer:	
 27247                           
 27248                           	psect	text172
 27249  2F3F                     __ptext172:	
 27250 ;; *************** function _TMR2_StopTimer *****************
 27251 ;; Defined at:
 27252 ;;		line 91 in file "mcc_generated_files/tmr2.c"
 27253 ;; Parameters:    Size  Location     Type
 27254 ;;		None
 27255 ;; Auto vars:     Size  Location     Type
 27256 ;;		None
 27257 ;; Return value:  Size  Location     Type
 27258 ;;                  1    wreg      void 
 27259 ;; Registers used:
 27260 ;;		None
 27261 ;; Tracked objects:
 27262 ;;		On entry : 0/0
 27263 ;;		On exit  : 0/0
 27264 ;;		Unchanged: 0/0
 27265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27270 ;;Total ram usage:        0 bytes
 27271 ;; Hardware stack levels used:    1
 27272 ;; This function calls:
 27273 ;;		Nothing
 27274 ;; This function is called by:
 27275 ;;		_TMR2_DefaultInterruptHandler
 27276 ;; This function uses a non-reentrant model
 27277 ;;
 27278                           
 27279                           
 27280                           ;psect for function _TMR2_StopTimer
 27281  2F3F                     _TMR2_StopTimer:	
 27282                           
 27283                           ;tmr2.c: 94: T2CONbits.TMR2ON = 0;
 27284                           
 27285                           ;incstack = 0
 27286                           ; Regs used in _TMR2_StopTimer: []
 27287  2F3F  0020               	movlb	0	; select bank0
 27288  2F40  111F               	bcf	31,2	;volatile
 27289  2F41  0008               	return
 27290  2F42                     __end_of_TMR2_StopTimer:	
 27291                           
 27292                           	psect	text173
 27293  2162                     __ptext173:	
 27294 ;; *************** function _TMR0_ISR *****************
 27295 ;; Defined at:
 27296 ;;		line 119 in file "mcc_generated_files/tmr0.c"
 27297 ;; Parameters:    Size  Location     Type
 27298 ;;		None
 27299 ;; Auto vars:     Size  Location     Type
 27300 ;;		None
 27301 ;; Return value:  Size  Location     Type
 27302 ;;                  1    wreg      void 
 27303 ;; Registers used:
 27304 ;;		wreg, status,2, status,0, pclath, cstack
 27305 ;; Tracked objects:
 27306 ;;		On entry : 0/0
 27307 ;;		On exit  : 0/0
 27308 ;;		Unchanged: 0/0
 27309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27314 ;;Total ram usage:        0 bytes
 27315 ;; Hardware stack levels used:    1
 27316 ;; Hardware stack levels required when called:    4
 27317 ;; This function calls:
 27318 ;;		Absolute function
 27319 ;;		_TMR0_DefaultInterruptHandler
 27320 ;; This function is called by:
 27321 ;;		_INTERRUPT_InterruptManager
 27322 ;; This function uses a non-reentrant model
 27323 ;;
 27324                           
 27325                           
 27326                           ;psect for function _TMR0_ISR
 27327  2162                     _TMR0_ISR:	
 27328                           
 27329                           ;tmr0.c: 122: PIR0bits.TMR0IF = 0;
 27330                           
 27331                           ;incstack = 0
 27332                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 27333  2162  0020               	movlb	0	; select bank0
 27334  2163  1290               	bcf	16,5	;volatile
 27335                           
 27336                           ;tmr0.c: 123: if(TMR0_InterruptHandler)
 27337  2164  0023               	movlb	3	; select bank3
 27338  2165  086A               	movf	_TMR0_InterruptHandler^(0+384),w
 27339  2166  046B               	iorwf	(_TMR0_InterruptHandler+1)^(0+384),w
 27340  2167  1903               	btfsc	3,2
 27341  2168  0008               	return
 27342                           
 27343                           ;tmr0.c: 124: {
 27344                           ;tmr0.c: 125: TMR0_InterruptHandler();
 27345  2169  086B               	movf	(_TMR0_InterruptHandler+1)^(0+384),w
 27346  216A  008A               	movwf	10
 27347  216B  086A               	movf	_TMR0_InterruptHandler^(0+384),w
 27348  216C  000A               	callw
 27349  216D  31A1               	pagesel	$
 27350  216E  0008               	return
 27351  216F                     __end_of_TMR0_ISR:	
 27352                           
 27353                           	psect	text174
 27354  2716                     __ptext174:	
 27355 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 27356 ;; Defined at:
 27357 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 27358 ;; Parameters:    Size  Location     Type
 27359 ;;		None
 27360 ;; Auto vars:     Size  Location     Type
 27361 ;;		None
 27362 ;; Return value:  Size  Location     Type
 27363 ;;                  1    wreg      void 
 27364 ;; Registers used:
 27365 ;;		wreg, status,2, status,0, pclath, cstack
 27366 ;; Tracked objects:
 27367 ;;		On entry : 0/0
 27368 ;;		On exit  : 0/0
 27369 ;;		Unchanged: 0/0
 27370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27375 ;;Total ram usage:        0 bytes
 27376 ;; Hardware stack levels used:    1
 27377 ;; Hardware stack levels required when called:    3
 27378 ;; This function calls:
 27379 ;;		_TMR0_StopTimer
 27380 ;;		_TMR0_Write8bitTimer
 27381 ;;		i1_LEDsOn
 27382 ;; This function is called by:
 27383 ;;		_TMR0_Initialize
 27384 ;;		_TMR0_ISR
 27385 ;; This function uses a non-reentrant model
 27386 ;;
 27387                           
 27388                           
 27389                           ;psect for function _TMR0_DefaultInterruptHandler
 27390  2716                     _TMR0_DefaultInterruptHandler:	
 27391                           
 27392                           ;tmr0.c: 141: LEDsOn(second_top, 1);
 27393                           
 27394                           ;incstack = 0
 27395                           ; Regs used in _TMR0_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 27396  2716  0022               	movlb	2	; select bank2
 27397  2717  085D               	movf	(_second_top+3)^(0+256),w
 27398  2718  0020               	movlb	0	; select bank0
 27399  2719  00AA               	movwf	i1LEDsOn@LEDpins+3
 27400  271A  0022               	movlb	2	; select bank2
 27401  271B  085C               	movf	(_second_top+2)^(0+256),w
 27402  271C  0020               	movlb	0	; select bank0
 27403  271D  00A9               	movwf	i1LEDsOn@LEDpins+2
 27404  271E  0022               	movlb	2	; select bank2
 27405  271F  085B               	movf	(_second_top+1)^(0+256),w
 27406  2720  0020               	movlb	0	; select bank0
 27407  2721  00A8               	movwf	i1LEDsOn@LEDpins+1
 27408  2722  0022               	movlb	2	; select bank2
 27409  2723  085A               	movf	_second_top^(0+256),w
 27410  2724  0020               	movlb	0	; select bank0
 27411  2725  00A7               	movwf	i1LEDsOn@LEDpins
 27412  2726  3001               	movlw	1
 27413  2727  00AB               	movwf	i1LEDsOn@topOrBottom
 27414  2728  3000               	movlw	0
 27415  2729  00AC               	movwf	i1LEDsOn@topOrBottom+1
 27416  272A  31A3  23D7  31A7   	fcall	i1_LEDsOn
 27417                           
 27418                           ;tmr0.c: 142: LEDsOn(second_bottom,2);
 27419  272D  0022               	movlb	2	; select bank2
 27420  272E  0851               	movf	(_second_bottom+3)^(0+256),w
 27421  272F  0020               	movlb	0	; select bank0
 27422  2730  00AA               	movwf	i1LEDsOn@LEDpins+3
 27423  2731  0022               	movlb	2	; select bank2
 27424  2732  0850               	movf	(_second_bottom+2)^(0+256),w
 27425  2733  0020               	movlb	0	; select bank0
 27426  2734  00A9               	movwf	i1LEDsOn@LEDpins+2
 27427  2735  0022               	movlb	2	; select bank2
 27428  2736  084F               	movf	(_second_bottom+1)^(0+256),w
 27429  2737  0020               	movlb	0	; select bank0
 27430  2738  00A8               	movwf	i1LEDsOn@LEDpins+1
 27431  2739  0022               	movlb	2	; select bank2
 27432  273A  084E               	movf	_second_bottom^(0+256),w
 27433  273B  0020               	movlb	0	; select bank0
 27434  273C  00A7               	movwf	i1LEDsOn@LEDpins
 27435  273D  3002               	movlw	2
 27436  273E  00AB               	movwf	i1LEDsOn@topOrBottom
 27437  273F  3000               	movlw	0
 27438  2740  00AC               	movwf	i1LEDsOn@topOrBottom+1
 27439  2741  31A3  23D7  31A7   	fcall	i1_LEDsOn
 27440                           
 27441                           ;tmr0.c: 144: do { LATCbits.LATC1 = 0; } while(0);
 27442  2744  0022               	movlb	2	; select bank2
 27443  2745  108E               	bcf	14,1	;volatile
 27444                           
 27445                           ;tmr0.c: 145: TMR0_StopTimer();
 27446  2746  31AF  273C  31A7   	fcall	_TMR0_StopTimer
 27447                           
 27448                           ;tmr0.c: 146: TMR0_Write8bitTimer(0);
 27449  2749  3000               	movlw	0
 27450  274A  31AF  27AB         	fcall	_TMR0_Write8bitTimer
 27451  274C  0008               	return
 27452  274D                     __end_of_TMR0_DefaultInterruptHandler:	
 27453                           
 27454                           	psect	text175
 27455  23D7                     __ptext175:	
 27456 ;; *************** function i1_LEDsOn *****************
 27457 ;; Defined at:
 27458 ;;		line 6 in file "LEDcomm.c"
 27459 ;; Parameters:    Size  Location     Type
 27460 ;;  LEDpins         4    7[BANK0 ] unsigned long 
 27461 ;;  topOrBottom     2   11[BANK0 ] int 
 27462 ;; Auto vars:     Size  Location     Type
 27463 ;;		None
 27464 ;; Return value:  Size  Location     Type
 27465 ;;                  1    wreg      void 
 27466 ;; Registers used:
 27467 ;;		wreg, status,2, status,0, pclath, cstack
 27468 ;; Tracked objects:
 27469 ;;		On entry : 0/0
 27470 ;;		On exit  : 0/0
 27471 ;;		Unchanged: 0/0
 27472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27473 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27475 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27476 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27477 ;;Total ram usage:       10 bytes
 27478 ;; Hardware stack levels used:    1
 27479 ;; Hardware stack levels required when called:    2
 27480 ;; This function calls:
 27481 ;;		i1_send_2length_2bytes_IK
 27482 ;; This function is called by:
 27483 ;;		_TMR0_DefaultInterruptHandler
 27484 ;; This function uses a non-reentrant model
 27485 ;;
 27486                           
 27487                           
 27488                           ;psect for function i1_LEDsOn
 27489  23D7                     i1_LEDsOn:	
 27490                           
 27491                           ;LEDcomm.c: 7: send_2length_2bytes_IK((unsigned int)((LEDpins>>16) & 0xFFFF),(unsigned i
      +                          nt)LEDpins, 1, topOrBottom);
 27492                           
 27493                           ;incstack = 0
 27494                           ; Regs used in i1_LEDsOn: [wreg+status,2+status,0+pclath+cstack]
 27495  23D7  0020               	movlb	0	; select bank0
 27496  23D8  0827               	movf	i1LEDsOn@LEDpins,w
 27497  23D9  00AD               	movwf	??i1_LEDsOn
 27498  23DA  0828               	movf	i1LEDsOn@LEDpins+1,w
 27499  23DB  00AE               	movwf	??i1_LEDsOn+1
 27500  23DC  0829               	movf	i1LEDsOn@LEDpins+2,w
 27501  23DD  00AF               	movwf	??i1_LEDsOn+2
 27502  23DE  082A               	movf	i1LEDsOn@LEDpins+3,w
 27503  23DF  00B0               	movwf	??i1_LEDsOn+3
 27504  23E0  3010               	movlw	16
 27505  23E1                     u541_25:	
 27506  23E1  36B0               	lsrf	??i1_LEDsOn+3,f
 27507  23E2  0CAF               	rrf	??i1_LEDsOn+2,f
 27508  23E3  0CAE               	rrf	??i1_LEDsOn+1,f
 27509  23E4  0CAD               	rrf	??i1_LEDsOn,f
 27510  23E5  0B89               	decfsz	9,f
 27511  23E6  2BE1               	goto	u541_25
 27512  23E7  082E               	movf	??i1_LEDsOn+1,w
 27513  23E8  00A1               	movwf	i1send_2length_2bytes_IK@data1+1
 27514  23E9  082D               	movf	??i1_LEDsOn,w
 27515  23EA  00A0               	movwf	i1send_2length_2bytes_IK@data1
 27516  23EB  0828               	movf	i1LEDsOn@LEDpins+1,w
 27517  23EC  00A3               	movwf	i1send_2length_2bytes_IK@data2+1
 27518  23ED  0827               	movf	i1LEDsOn@LEDpins,w
 27519  23EE  00A2               	movwf	i1send_2length_2bytes_IK@data2
 27520  23EF  01A4               	clrf	i1send_2length_2bytes_IK@latch_start
 27521  23F0  0AA4               	incf	i1send_2length_2bytes_IK@latch_start,f
 27522  23F1  082C               	movf	i1LEDsOn@topOrBottom+1,w
 27523  23F2  00A6               	movwf	i1send_2length_2bytes_IK@topOrBottom+1
 27524  23F3  082B               	movf	i1LEDsOn@topOrBottom,w
 27525  23F4  00A5               	movwf	i1send_2length_2bytes_IK@topOrBottom
 27526  23F5  31A2  2236         	fcall	i1_send_2length_2bytes_IK
 27527  23F7  0008               	return
 27528  23F8                     __end_ofi1_LEDsOn:	
 27529                           
 27530                           	psect	text176
 27531  2236                     __ptext176:	
 27532 ;; *************** function i1_send_2length_2bytes_IK *****************
 27533 ;; Defined at:
 27534 ;;		line 70 in file "LEDcomm.c"
 27535 ;; Parameters:    Size  Location     Type
 27536 ;;  data1           2    0[BANK0 ] unsigned int 
 27537 ;;  data2           2    2[BANK0 ] unsigned int 
 27538 ;;  latch_start     1    4[BANK0 ] unsigned char 
 27539 ;;  topOrBottom     2    5[BANK0 ] int 
 27540 ;; Auto vars:     Size  Location     Type
 27541 ;;		None
 27542 ;; Return value:  Size  Location     Type
 27543 ;;                  1    wreg      void 
 27544 ;; Registers used:
 27545 ;;		wreg, status,2, status,0, pclath, cstack
 27546 ;; Tracked objects:
 27547 ;;		On entry : 0/0
 27548 ;;		On exit  : 0/0
 27549 ;;		Unchanged: 0/0
 27550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27551 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27553 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27554 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27555 ;;Total ram usage:        8 bytes
 27556 ;; Hardware stack levels used:    1
 27557 ;; Hardware stack levels required when called:    1
 27558 ;; This function calls:
 27559 ;;		i1_send_2bytes_latchless_IK
 27560 ;;		i1_send_last_2bytes_IK
 27561 ;; This function is called by:
 27562 ;;		i1_LEDsOn
 27563 ;; This function uses a non-reentrant model
 27564 ;;
 27565                           
 27566                           
 27567                           ;psect for function i1_send_2length_2bytes_IK
 27568  2236                     i1_send_2length_2bytes_IK:	
 27569                           
 27570                           ;LEDcomm.c: 71: send_2bytes_latchless_IK( data1);
 27571                           
 27572                           ;incstack = 0
 27573                           ; Regs used in i1_send_2length_2bytes_IK: [wreg+status,2+status,0+pclath+cstack]
 27574  2236  0020               	movlb	0	; select bank0
 27575  2237  0821               	movf	i1send_2length_2bytes_IK@data1+1,w
 27576  2238  00F1               	movwf	i1send_2bytes_latchless_IK@data+1
 27577  2239  0820               	movf	i1send_2length_2bytes_IK@data1,w
 27578  223A  00F0               	movwf	i1send_2bytes_latchless_IK@data
 27579  223B  31A5  2519  31A2   	fcall	i1_send_2bytes_latchless_IK
 27580                           
 27581                           ;LEDcomm.c: 72: send_last_2bytes_IK( data2, latch_start, topOrBottom);
 27582  223E  0020               	movlb	0	; select bank0
 27583  223F  0823               	movf	i1send_2length_2bytes_IK@data2+1,w
 27584  2240  00F1               	movwf	i1send_last_2bytes_IK@data+1
 27585  2241  0822               	movf	i1send_2length_2bytes_IK@data2,w
 27586  2242  00F0               	movwf	i1send_last_2bytes_IK@data
 27587  2243  0824               	movf	i1send_2length_2bytes_IK@latch_start,w
 27588  2244  00FB               	movwf	??i1_send_2length_2bytes_IK
 27589  2245  087B               	movf	??i1_send_2length_2bytes_IK,w
 27590  2246  00F2               	movwf	i1send_last_2bytes_IK@latch_start
 27591  2247  0826               	movf	i1send_2length_2bytes_IK@topOrBottom+1,w
 27592  2248  00F4               	movwf	i1send_last_2bytes_IK@topOrBottom+1
 27593  2249  0825               	movf	i1send_2length_2bytes_IK@topOrBottom,w
 27594  224A  00F3               	movwf	i1send_last_2bytes_IK@topOrBottom
 27595  224B  319A  2269         	fcall	i1_send_last_2bytes_IK
 27596  224D  0008               	return
 27597  224E                     __end_ofi1_send_2length_2bytes_IK:	
 27598                           
 27599                           	psect	text177
 27600  1A69                     __ptext177:	
 27601 ;; *************** function i1_send_last_2bytes_IK *****************
 27602 ;; Defined at:
 27603 ;;		line 19 in file "LEDcomm.c"
 27604 ;; Parameters:    Size  Location     Type
 27605 ;;  data            2    0[COMMON] unsigned int 
 27606 ;;  latch_start     1    2[COMMON] unsigned char 
 27607 ;;  topOrBottom     2    3[COMMON] int 
 27608 ;; Auto vars:     Size  Location     Type
 27609 ;;  send_last_2b    2    9[COMMON] int 
 27610 ;; Return value:  Size  Location     Type
 27611 ;;                  1    wreg      void 
 27612 ;; Registers used:
 27613 ;;		wreg, status,2, status,0
 27614 ;; Tracked objects:
 27615 ;;		On entry : 0/0
 27616 ;;		On exit  : 0/0
 27617 ;;		Unchanged: 0/0
 27618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27619 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27621 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27622 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27623 ;;Total ram usage:       11 bytes
 27624 ;; Hardware stack levels used:    1
 27625 ;; This function calls:
 27626 ;;		Nothing
 27627 ;; This function is called by:
 27628 ;;		i1_send_2length_2bytes_IK
 27629 ;; This function uses a non-reentrant model
 27630 ;;
 27631                           
 27632                           
 27633                           ;psect for function i1_send_last_2bytes_IK
 27634  1A69                     i1_send_last_2bytes_IK:	
 27635                           
 27636                           ;LEDcomm.c: 22: if (topOrBottom == 1){do { LATBbits.LATB4 = 0; } while(0);} else do { LA
      +                          TCbits.LATC0 = 0; } while(0);
 27637                           
 27638                           ;incstack = 0
 27639                           ; Regs used in i1_send_last_2bytes_IK: [wreg+status,2+status,0]
 27640  1A69  0373               	decf	i1send_last_2bytes_IK@topOrBottom,w
 27641  1A6A  0474               	iorwf	i1send_last_2bytes_IK@topOrBottom+1,w
 27642  1A6B  1D03               	btfss	3,2
 27643  1A6C  2A70               	goto	i1l216
 27644  1A6D  0022               	movlb	2	; select bank2
 27645  1A6E  120D               	bcf	13,4	;volatile
 27646  1A6F  2A72               	goto	i1l5682
 27647  1A70                     i1l216:	
 27648  1A70  0022               	movlb	2	; select bank2
 27649  1A71  100E               	bcf	14,0	;volatile
 27650  1A72                     i1l5682:	
 27651                           
 27652                           ;LEDcomm.c: 24: for(int j = 15; j>=0; j--){
 27653  1A72  300F               	movlw	15
 27654  1A73  00F9               	movwf	i1send_last_2bytes_IK@j
 27655  1A74  3000               	movlw	0
 27656  1A75  00FA               	movwf	i1send_last_2bytes_IK@j+1
 27657  1A76  1BFA               	btfsc	i1send_last_2bytes_IK@j+1,7
 27658  1A77  2AA9               	goto	i1l237
 27659  1A78                     i1l220:	
 27660                           ;LEDcomm.c: 26: do { LATAbits.LATA2 = 0; } while(0);
 27661                           
 27662  1A78  110C               	bcf	12,2	;volatile
 27663                           
 27664                           ;LEDcomm.c: 28: if (data & 1 << j){
 27665  1A79  3001               	movlw	1
 27666  1A7A  00F5               	movwf	??i1_send_last_2bytes_IK
 27667  1A7B  3000               	movlw	0
 27668  1A7C  00F6               	movwf	??i1_send_last_2bytes_IK+1
 27669  1A7D  0A79               	incf	i1send_last_2bytes_IK@j,w
 27670  1A7E  2A81               	goto	u464_24
 27671  1A7F                     u464_25:	
 27672  1A7F  35F5               	lslf	??i1_send_last_2bytes_IK,f
 27673  1A80  0DF6               	rlf	??i1_send_last_2bytes_IK+1,f
 27674  1A81                     u464_24:	
 27675  1A81  0B89               	decfsz	9,f
 27676  1A82  2A7F               	goto	u464_25
 27677  1A83  0870               	movf	i1send_last_2bytes_IK@data,w
 27678  1A84  0575               	andwf	??i1_send_last_2bytes_IK,w
 27679  1A85  00F7               	movwf	??i1_send_last_2bytes_IK+2
 27680  1A86  0871               	movf	i1send_last_2bytes_IK@data+1,w
 27681  1A87  0576               	andwf	??i1_send_last_2bytes_IK+1,w
 27682  1A88  00F8               	movwf	??i1_send_last_2bytes_IK+3
 27683  1A89  0877               	movf	??i1_send_last_2bytes_IK+2,w
 27684  1A8A  0478               	iorwf	??i1_send_last_2bytes_IK+3,w
 27685  1A8B  1903               	btfsc	3,2
 27686  1A8C  2A8F               	goto	i1l226
 27687                           
 27688                           ;LEDcomm.c: 29: do { LATCbits.LATC2 = 1; } while(0);
 27689  1A8D  150E               	bsf	14,2	;volatile
 27690                           
 27691                           ;LEDcomm.c: 30: }
 27692  1A8E  2A90               	goto	i1l5690
 27693  1A8F                     i1l226:	
 27694                           ;LEDcomm.c: 31: else do { LATCbits.LATC2 = 0; } while(0);
 27695                           
 27696  1A8F  110E               	bcf	14,2	;volatile
 27697  1A90                     i1l5690:	
 27698                           
 27699                           ;LEDcomm.c: 33: if( j == latch_start) {
 27700  1A90  0872               	movf	i1send_last_2bytes_IK@latch_start,w
 27701  1A91  00F5               	movwf	??i1_send_last_2bytes_IK
 27702  1A92  01F6               	clrf	??i1_send_last_2bytes_IK+1
 27703  1A93  087A               	movf	i1send_last_2bytes_IK@j+1,w
 27704  1A94  0676               	xorwf	??i1_send_last_2bytes_IK+1,w
 27705  1A95  1D03               	skipz
 27706  1A96  2A99               	goto	u466_25
 27707  1A97  0879               	movf	i1send_last_2bytes_IK@j,w
 27708  1A98  0675               	xorwf	??i1_send_last_2bytes_IK,w
 27709  1A99                     u466_25:	
 27710  1A99  1D03               	skipz
 27711  1A9A  2AA2               	goto	i1l235
 27712                           
 27713                           ;LEDcomm.c: 35: if (topOrBottom == 1){do { LATBbits.LATB4 = 1; } while(0);} else do { LA
      +                          TCbits.LATC0 = 1; } while(0);
 27714  1A9B  0373               	decf	i1send_last_2bytes_IK@topOrBottom,w
 27715  1A9C  0474               	iorwf	i1send_last_2bytes_IK@topOrBottom+1,w
 27716  1A9D  1D03               	btfss	3,2
 27717  1A9E  2AA1               	goto	i1l233
 27718  1A9F  160D               	bsf	13,4	;volatile
 27719  1AA0  2AA2               	goto	i1l235
 27720  1AA1                     i1l233:	
 27721  1AA1  140E               	bsf	14,0	;volatile
 27722  1AA2                     i1l235:	
 27723                           ;LEDcomm.c: 37: }
 27724                           ;LEDcomm.c: 39: do { LATAbits.LATA2 = 1; } while(0);
 27725                           
 27726  1AA2  150C               	bsf	12,2	;volatile
 27727  1AA3  30FF               	movlw	255
 27728  1AA4  07F9               	addwf	i1send_last_2bytes_IK@j,f
 27729  1AA5  30FF               	movlw	255
 27730  1AA6  3DFA               	addwfc	i1send_last_2bytes_IK@j+1,f
 27731  1AA7  1FFA               	btfss	i1send_last_2bytes_IK@j+1,7
 27732  1AA8  2A78               	goto	i1l220
 27733  1AA9                     i1l237:	
 27734                           ;LEDcomm.c: 41: }
 27735                           ;LEDcomm.c: 43: do { LATAbits.LATA2 = 0; } while(0);
 27736                           
 27737  1AA9  110C               	bcf	12,2	;volatile
 27738                           
 27739                           ;LEDcomm.c: 44: if (topOrBottom == 1){do { LATBbits.LATB4 = 0; } while(0);} else do { LA
      +                          TCbits.LATC0 = 0; } while(0);
 27740  1AAA  0373               	decf	i1send_last_2bytes_IK@topOrBottom,w
 27741  1AAB  0474               	iorwf	i1send_last_2bytes_IK@topOrBottom+1,w
 27742  1AAC  1D03               	btfss	3,2
 27743  1AAD  2AB0               	goto	i1l243
 27744  1AAE  120D               	bcf	13,4	;volatile
 27745  1AAF  0008               	return
 27746  1AB0                     i1l243:	
 27747  1AB0  100E               	bcf	14,0	;volatile
 27748  1AB1  0008               	return
 27749  1AB2                     __end_ofi1_send_last_2bytes_IK:	
 27750                           
 27751                           	psect	text178
 27752  2519                     __ptext178:	
 27753 ;; *************** function i1_send_2bytes_latchless_IK *****************
 27754 ;; Defined at:
 27755 ;;		line 49 in file "LEDcomm.c"
 27756 ;; Parameters:    Size  Location     Type
 27757 ;;  data            2    0[COMMON] unsigned int 
 27758 ;; Auto vars:     Size  Location     Type
 27759 ;;  send_2bytes_    2    6[COMMON] int 
 27760 ;; Return value:  Size  Location     Type
 27761 ;;                  1    wreg      void 
 27762 ;; Registers used:
 27763 ;;		wreg, status,2, status,0
 27764 ;; Tracked objects:
 27765 ;;		On entry : 0/0
 27766 ;;		On exit  : 0/0
 27767 ;;		Unchanged: 0/0
 27768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27769 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27770 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27771 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27772 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27773 ;;Total ram usage:        8 bytes
 27774 ;; Hardware stack levels used:    1
 27775 ;; This function calls:
 27776 ;;		Nothing
 27777 ;; This function is called by:
 27778 ;;		i1_send_2length_2bytes_IK
 27779 ;; This function uses a non-reentrant model
 27780 ;;
 27781                           
 27782                           
 27783                           ;psect for function i1_send_2bytes_latchless_IK
 27784  2519                     i1_send_2bytes_latchless_IK:	
 27785                           
 27786                           ;incstack = 0
 27787                           ; Regs used in i1_send_2bytes_latchless_IK: [wreg+status,2+status,0]
 27788                           ;LEDcomm.c: 51: do { LATBbits.LATB4 = 0; } while(0);
 27789  2519  0022               	movlb	2	; select bank2
 27790  251A  120D               	bcf	13,4	;volatile
 27791                           
 27792                           ;LEDcomm.c: 53: for(int j = 15; j>=0; j--){
 27793  251B  300F               	movlw	15
 27794  251C  00F6               	movwf	i1send_2bytes_latchless_IK@j
 27795  251D  3000               	movlw	0
 27796  251E  00F7               	movwf	i1send_2bytes_latchless_IK@j+1
 27797  251F  1BF7               	btfsc	i1send_2bytes_latchless_IK@j+1,7
 27798  2520  2D40               	goto	i1l262
 27799  2521                     i1l252:	
 27800                           ;LEDcomm.c: 54: do { LATAbits.LATA2 = 0; } while(0);
 27801                           
 27802  2521  110C               	bcf	12,2	;volatile
 27803                           
 27804                           ;LEDcomm.c: 56: if (data & 1 << j){
 27805  2522  3001               	movlw	1
 27806  2523  00F2               	movwf	??i1_send_2bytes_latchless_IK
 27807  2524  3000               	movlw	0
 27808  2525  00F3               	movwf	??i1_send_2bytes_latchless_IK+1
 27809  2526  0A76               	incf	i1send_2bytes_latchless_IK@j,w
 27810  2527  2D2A               	goto	u471_24
 27811  2528                     u471_25:	
 27812  2528  35F2               	lslf	??i1_send_2bytes_latchless_IK,f
 27813  2529  0DF3               	rlf	??i1_send_2bytes_latchless_IK+1,f
 27814  252A                     u471_24:	
 27815  252A  0B89               	decfsz	9,f
 27816  252B  2D28               	goto	u471_25
 27817  252C  0870               	movf	i1send_2bytes_latchless_IK@data,w
 27818  252D  0572               	andwf	??i1_send_2bytes_latchless_IK,w
 27819  252E  00F4               	movwf	??i1_send_2bytes_latchless_IK+2
 27820  252F  0871               	movf	i1send_2bytes_latchless_IK@data+1,w
 27821  2530  0573               	andwf	??i1_send_2bytes_latchless_IK+1,w
 27822  2531  00F5               	movwf	??i1_send_2bytes_latchless_IK+3
 27823  2532  0874               	movf	??i1_send_2bytes_latchless_IK+2,w
 27824  2533  0475               	iorwf	??i1_send_2bytes_latchless_IK+3,w
 27825  2534  1903               	btfsc	3,2
 27826  2535  2D38               	goto	i1l258
 27827                           
 27828                           ;LEDcomm.c: 57: do { LATCbits.LATC2 = 1; } while(0);
 27829  2536  150E               	bsf	14,2	;volatile
 27830                           
 27831                           ;LEDcomm.c: 58: }
 27832  2537  2D39               	goto	i1l260
 27833  2538                     i1l258:	
 27834                           ;LEDcomm.c: 59: else do { LATCbits.LATC2 = 0; } while(0);
 27835                           
 27836  2538  110E               	bcf	14,2	;volatile
 27837  2539                     i1l260:	
 27838                           ;LEDcomm.c: 62: do { LATAbits.LATA2 = 1; } while(0);
 27839                           
 27840  2539  150C               	bsf	12,2	;volatile
 27841  253A  30FF               	movlw	255
 27842  253B  07F6               	addwf	i1send_2bytes_latchless_IK@j,f
 27843  253C  30FF               	movlw	255
 27844  253D  3DF7               	addwfc	i1send_2bytes_latchless_IK@j+1,f
 27845  253E  1FF7               	btfss	i1send_2bytes_latchless_IK@j+1,7
 27846  253F  2D21               	goto	i1l252
 27847  2540                     i1l262:	
 27848                           ;LEDcomm.c: 64: }
 27849                           ;LEDcomm.c: 66: do { LATAbits.LATA2 = 0; } while(0);
 27850                           
 27851  2540  110C               	bcf	12,2	;volatile
 27852  2541  0008               	return
 27853  2542                     __end_ofi1_send_2bytes_latchless_IK:	
 27854                           
 27855                           	psect	text179
 27856  2FAB                     __ptext179:	
 27857 ;; *************** function _TMR0_Write8bitTimer *****************
 27858 ;; Defined at:
 27859 ;;		line 107 in file "mcc_generated_files/tmr0.c"
 27860 ;; Parameters:    Size  Location     Type
 27861 ;;  timerVal        1    wreg     unsigned char 
 27862 ;; Auto vars:     Size  Location     Type
 27863 ;;  timerVal        1    0[COMMON] unsigned char 
 27864 ;; Return value:  Size  Location     Type
 27865 ;;                  1    wreg      void 
 27866 ;; Registers used:
 27867 ;;		wreg
 27868 ;; Tracked objects:
 27869 ;;		On entry : 0/0
 27870 ;;		On exit  : 0/0
 27871 ;;		Unchanged: 0/0
 27872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27874 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27876 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27877 ;;Total ram usage:        1 bytes
 27878 ;; Hardware stack levels used:    1
 27879 ;; This function calls:
 27880 ;;		Nothing
 27881 ;; This function is called by:
 27882 ;;		_TMR0_DefaultInterruptHandler
 27883 ;; This function uses a non-reentrant model
 27884 ;;
 27885                           
 27886                           
 27887                           ;psect for function _TMR0_Write8bitTimer
 27888  2FAB                     _TMR0_Write8bitTimer:	
 27889                           
 27890                           ;incstack = 0
 27891                           ; Regs used in _TMR0_Write8bitTimer: [wreg]
 27892                           ;TMR0_Write8bitTimer@timerVal stored from wreg
 27893  2FAB  00F0               	movwf	TMR0_Write8bitTimer@timerVal
 27894                           
 27895                           ;tmr0.c: 110: TMR0L = timerVal;
 27896  2FAC  0870               	movf	TMR0_Write8bitTimer@timerVal,w
 27897  2FAD  0020               	movlb	0	; select bank0
 27898  2FAE  0095               	movwf	21	;volatile
 27899  2FAF  0008               	return
 27900  2FB0                     __end_of_TMR0_Write8bitTimer:	
 27901                           
 27902                           	psect	text180
 27903  2F3C                     __ptext180:	
 27904 ;; *************** function _TMR0_StopTimer *****************
 27905 ;; Defined at:
 27906 ;;		line 91 in file "mcc_generated_files/tmr0.c"
 27907 ;; Parameters:    Size  Location     Type
 27908 ;;		None
 27909 ;; Auto vars:     Size  Location     Type
 27910 ;;		None
 27911 ;; Return value:  Size  Location     Type
 27912 ;;                  1    wreg      void 
 27913 ;; Registers used:
 27914 ;;		None
 27915 ;; Tracked objects:
 27916 ;;		On entry : 0/0
 27917 ;;		On exit  : 0/0
 27918 ;;		Unchanged: 0/0
 27919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27924 ;;Total ram usage:        0 bytes
 27925 ;; Hardware stack levels used:    1
 27926 ;; This function calls:
 27927 ;;		Nothing
 27928 ;; This function is called by:
 27929 ;;		_TMR0_DefaultInterruptHandler
 27930 ;; This function uses a non-reentrant model
 27931 ;;
 27932                           
 27933                           
 27934                           ;psect for function _TMR0_StopTimer
 27935  2F3C                     _TMR0_StopTimer:	
 27936                           
 27937                           ;tmr0.c: 94: T0CON0bits.T0EN = 0;
 27938                           
 27939                           ;incstack = 0
 27940                           ; Regs used in _TMR0_StopTimer: []
 27941  2F3C  0020               	movlb	0	; select bank0
 27942  2F3D  1397               	bcf	23,7	;volatile
 27943  2F3E  0008               	return
 27944  2F3F                     __end_of_TMR0_StopTimer:	
 27945                           
 27946                           	psect	text181
 27947  231E                     __ptext181:	
 27948 ;; *************** function _EUSART_Transmit_ISR *****************
 27949 ;; Defined at:
 27950 ;;		line 161 in file "mcc_generated_files/eusart.c"
 27951 ;; Parameters:    Size  Location     Type
 27952 ;;		None
 27953 ;; Auto vars:     Size  Location     Type
 27954 ;;		None
 27955 ;; Return value:  Size  Location     Type
 27956 ;;                  1    wreg      void 
 27957 ;; Registers used:
 27958 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27959 ;; Tracked objects:
 27960 ;;		On entry : 0/0
 27961 ;;		On exit  : 0/0
 27962 ;;		Unchanged: 0/0
 27963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27966 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27967 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27968 ;;Total ram usage:        1 bytes
 27969 ;; Hardware stack levels used:    1
 27970 ;; This function calls:
 27971 ;;		Nothing
 27972 ;; This function is called by:
 27973 ;;		_INTERRUPT_InterruptManager
 27974 ;; This function uses a non-reentrant model
 27975 ;;
 27976                           
 27977                           
 27978                           ;psect for function _EUSART_Transmit_ISR
 27979  231E                     _EUSART_Transmit_ISR:	
 27980                           
 27981                           ;eusart.c: 165: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 27982                           
 27983                           ;incstack = 0
 27984                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 27985  231E  3008               	movlw	8
 27986  231F  0020               	movlb	0	; select bank0
 27987  2320  025E               	subwf	_eusartTxBufferRemaining,w	;volatile
 27988  2321  1803               	skipnc
 27989  2322  2B39               	goto	i1l454
 27990                           
 27991                           ;eusart.c: 166: {
 27992                           ;eusart.c: 167: TX1REG = eusartTxBuffer[eusartTxTail++];
 27993  2323  0859               	movf	_eusartTxTail,w
 27994  2324  3EA8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 27995  2325  0086               	movwf	6
 27996  2326  3001               	movlw	1	; select bank3/4
 27997  2327  0087               	movwf	7
 27998  2328  0801               	movf	1,w
 27999  2329  0023               	movlb	3	; select bank3
 28000  232A  009A               	movwf	26	;volatile
 28001  232B  3001               	movlw	1
 28002  232C  00F0               	movwf	??_EUSART_Transmit_ISR
 28003  232D  0870               	movf	??_EUSART_Transmit_ISR,w
 28004  232E  0020               	movlb	0	; select bank0
 28005  232F  07D9               	addwf	_eusartTxTail,f	;volatile
 28006                           
 28007                           ;eusart.c: 168: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 28008  2330  3008               	movlw	8
 28009  2331  0259               	subwf	_eusartTxTail,w	;volatile
 28010  2332  1803               	btfsc	3,0
 28011                           
 28012                           ;eusart.c: 169: {
 28013                           ;eusart.c: 170: eusartTxTail = 0;
 28014  2333  01D9               	clrf	_eusartTxTail	;volatile
 28015                           
 28016                           ;eusart.c: 171: }
 28017                           ;eusart.c: 172: eusartTxBufferRemaining++;
 28018  2334  3001               	movlw	1
 28019  2335  00F0               	movwf	??_EUSART_Transmit_ISR
 28020  2336  0870               	movf	??_EUSART_Transmit_ISR,w
 28021  2337  07DE               	addwf	_eusartTxBufferRemaining,f	;volatile
 28022                           
 28023                           ;eusart.c: 173: }
 28024  2338  0008               	return
 28025  2339                     i1l454:	
 28026                           
 28027                           ;eusart.c: 174: else
 28028                           ;eusart.c: 175: {
 28029                           ;eusart.c: 176: PIE1bits.TXIE = 0;
 28030  2339  0021               	movlb	1	; select bank1
 28031  233A  1211               	bcf	17,4	;volatile
 28032  233B  0008               	return
 28033  233C                     __end_of_EUSART_Transmit_ISR:	
 28034                           
 28035                           	psect	text182
 28036  22E6                     __ptext182:	
 28037 ;; *************** function _EUSART_Receive_ISR *****************
 28038 ;; Defined at:
 28039 ;;		line 180 in file "mcc_generated_files/eusart.c"
 28040 ;; Parameters:    Size  Location     Type
 28041 ;;		None
 28042 ;; Auto vars:     Size  Location     Type
 28043 ;;		None
 28044 ;; Return value:  Size  Location     Type
 28045 ;;                  1    wreg      void 
 28046 ;; Registers used:
 28047 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28048 ;; Tracked objects:
 28049 ;;		On entry : 0/0
 28050 ;;		On exit  : 0/0
 28051 ;;		Unchanged: 0/0
 28052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28055 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28056 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28057 ;;Total ram usage:        1 bytes
 28058 ;; Hardware stack levels used:    1
 28059 ;; This function calls:
 28060 ;;		Nothing
 28061 ;; This function is called by:
 28062 ;;		_INTERRUPT_InterruptManager
 28063 ;; This function uses a non-reentrant model
 28064 ;;
 28065                           
 28066                           
 28067                           ;psect for function _EUSART_Receive_ISR
 28068  22E6                     _EUSART_Receive_ISR:	
 28069                           
 28070                           ;eusart.c: 183: if(1 == RC1STAbits.OERR)
 28071                           
 28072                           ;incstack = 0
 28073                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 28074  22E6  0023               	movlb	3	; select bank3
 28075  22E7  1C9D               	btfss	29,1	;volatile
 28076  22E8  2AEB               	goto	i1l6938
 28077                           
 28078                           ;eusart.c: 184: {
 28079                           ;eusart.c: 187: RC1STAbits.CREN = 0;
 28080  22E9  121D               	bcf	29,4	;volatile
 28081                           
 28082                           ;eusart.c: 188: RC1STAbits.CREN = 1;
 28083  22EA  161D               	bsf	29,4	;volatile
 28084  22EB                     i1l6938:	
 28085                           
 28086                           ;eusart.c: 189: }
 28087                           ;eusart.c: 192: eusartRxBuffer[eusartRxHead++] = RC1REG;
 28088  22EB  0819               	movf	25,w	;volatile
 28089  22EC  00F0               	movwf	??_EUSART_Receive_ISR
 28090  22ED  0020               	movlb	0	; select bank0
 28091  22EE  0858               	movf	_eusartRxHead,w
 28092  22EF  3EA0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 28093  22F0  0086               	movwf	6
 28094  22F1  3001               	movlw	1	; select bank3/4
 28095  22F2  0087               	movwf	7
 28096  22F3  0870               	movf	??_EUSART_Receive_ISR,w
 28097  22F4  0081               	movwf	1
 28098  22F5  3001               	movlw	1
 28099  22F6  00F0               	movwf	??_EUSART_Receive_ISR
 28100  22F7  0870               	movf	??_EUSART_Receive_ISR,w
 28101  22F8  07D8               	addwf	_eusartRxHead,f	;volatile
 28102                           
 28103                           ;eusart.c: 193: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 28104  22F9  3008               	movlw	8
 28105  22FA  0258               	subwf	_eusartRxHead,w	;volatile
 28106  22FB  1803               	btfsc	3,0
 28107                           
 28108                           ;eusart.c: 194: {
 28109                           ;eusart.c: 195: eusartRxHead = 0;
 28110  22FC  01D8               	clrf	_eusartRxHead	;volatile
 28111                           
 28112                           ;eusart.c: 196: }
 28113                           ;eusart.c: 197: eusartRxCount++;
 28114  22FD  3001               	movlw	1
 28115  22FE  00F0               	movwf	??_EUSART_Receive_ISR
 28116  22FF  0870               	movf	??_EUSART_Receive_ISR,w
 28117  2300  07D6               	addwf	_eusartRxCount,f	;volatile
 28118  2301  0008               	return
 28119  2302                     __end_of_EUSART_Receive_ISR:	
 28120  007E                     btemp	set	126	;btemp
 28121  007E                     int$flags	set	126
 28122  007E                     wtemp0	set	126


Data Sizes:
    Strings     489
    Constant    804
    Data        44
    BSS         246
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     46      63
    BANK1            80     56      80
    BANK2            80      1      77
    BANK3            80      9      76
    BANK4            80      0      72
    BANK5            80     28      68
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           80      0       0
    BANK24           16      0       0
    BANK25            0      0       0

Pointer List with Targets:

    i2c_ISR$2996	PTR const FTN()enum E8364 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S1001$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    mssp1_waitForEvent@timeout	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_53(CODE[2]), STR_52(CODE[2]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_53(CODE[2]), STR_52(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> STR_53(CODE[2]), STR_52(CODE[2]), NULL(NULL[0]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_53(CODE[2]), STR_52(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> floor@expon(COMMON[2]), trunc@expon(BANK1[2]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_53(CODE[2]), STR_52(CODE[2]), 

    strtok@sp	PTR unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    stricmp@s2	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_78(CODE[10]), STR_77(CODE[5]), STR_76(CODE[5]), STR_75(CODE[7]), 
		 -> STR_74(CODE[8]), STR_73(CODE[5]), STR_72(CODE[5]), STR_71(CODE[11]), 
		 -> STR_70(CODE[13]), STR_69(CODE[7]), STR_68(CODE[8]), STR_67(CODE[10]), 
		 -> STR_66(CODE[11]), STR_65(CODE[15]), STR_64(CODE[14]), STR_63(CODE[12]), 
		 -> STR_62(CODE[8]), STR_61(CODE[8]), STR_60(CODE[2]), STR_59(CODE[5]), 
		 -> STR_58(CODE[5]), STR_57(CODE[2]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), 

    stricmp@s1	PTR const unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_80(CODE[23]), STR_79(CODE[3]), STR_51(CODE[17]), STR_50(CODE[18]), 
		 -> STR_49(CODE[18]), STR_48(CODE[28]), STR_47(CODE[9]), STR_46(CODE[9]), 
		 -> STR_45(CODE[25]), STR_44(CODE[11]), STR_43(CODE[8]), STR_42(CODE[8]), 
		 -> STR_41(CODE[8]), STR_40(CODE[31]), STR_39(CODE[11]), STR_38(CODE[8]), 
		 -> STR_37(CODE[8]), STR_36(CODE[8]), STR_35(CODE[26]), STR_34(CODE[30]), 
		 -> STR_33(CODE[3]), STR_32(CODE[3]), STR_31(CODE[3]), STR_30(CODE[2]), 
		 -> STR_29(CODE[4]), STR_28(CODE[2]), STR_27(CODE[4]), STR_26(CODE[3]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[3]), STR_22(CODE[3]), 
		 -> STR_21(CODE[3]), STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[4]), 
		 -> STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[16]), 
		 -> STR_5(CODE[3]), STR_4(CODE[16]), STR_3(CODE[2]), STR_2(CODE[4]), 
		 -> STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), 

    execCmd@s	PTR struct CMD_STRUCT size(1) Largest target is 21
		 -> cmd_struct(BANK3[21]), 

    parseCmd@s	PTR struct CMD_STRUCT size(1) Largest target is 21
		 -> cmd_struct(BANK3[21]), 

    sp__strtok	PTR unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    parseCmd@cmdString	PTR unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), 

    parseCmd@p	PTR unsigned char  size(1) Largest target is 20
		 -> readdata(BANK3[20]), NULL(NULL[0]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E8364[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 40
		 -> drv_read@reg(BANK0[1]), drv_read@buff(BANK0[1]), drv_fifo_downstroke(BANK5[40]), drv_fifo_upstroke(BANK4[40]), 
		 -> drv_write@buff(BANK0[2]), 

    S1001$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S1001$callbackTable	PTR FTN(PTR void ,)enum E8198[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E8198[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S1001$data_ptr	PTR unsigned char  size(2) Largest target is 40
		 -> drv_read@reg(BANK0[1]), drv_read@buff(BANK0[1]), drv_fifo_downstroke(BANK5[40]), drv_fifo_upstroke(BANK4[40]), 
		 -> drv_write@buff(BANK0[2]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 40
		 -> drv_read@reg(BANK0[1]), drv_read@buff(BANK0[1]), drv_fifo_downstroke(BANK5[40]), drv_fifo_upstroke(BANK4[40]), 
		 -> drv_write@buff(BANK0[2]), 

    i2c1_driver_setI2cISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_ISR(), 

    i2c1_driver_setBusCollisionISR@f	PTR void  size(2) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    i1_i2c_ISR->i1_do_I2C_TX
    i1_do_I2C_TX->i1_i2c1_driver_TXData
    i1_do_I2C_TX->i1_i2c1_driver_isNACK
    i1_do_I2C_TX->i1_returnReset
    i1_do_I2C_TX->i1_returnStop
    i1_do_I2C_SEND_ADR_WRITE->i1_i2c1_driver_TXData
    i1_do_I2C_SEND_ADR_READ->i1_i2c1_driver_TXData
    _TMR4_DefaultInterruptHandler->_TMR4_WriteTimer
    _TMR2_DefaultInterruptHandler->_TMR2_WriteTimer
    i1_LEDsOn->i1_send_2length_2bytes_IK
    i1_send_2length_2bytes_IK->i1_send_last_2bytes_IK

Critical Paths under _main in BANK0

    _parseCmd->_strtok
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _stricmp->_toupper
    _atoi->___wmul
    _main_initialize->_LED_setBrightnessRange
    _main_initialize->_LEDsPwr
    _drv_init->_calcDownstroke
    _drv_init->_calcUpstroke
    _drv_init->_drv_write
    _i2c_open->_i2c1_driver_setBusCollisionISR
    _i2c_open->_i2c1_driver_setI2cISR
    _drv_reset->_drv_write
    _execCmd->_setDrvPiezoOnTime
    _timedActiveHeatOn->_LEDsOn
    _setLEDPwr->_LEDsPwr
    _LEDsPwr->_send_2length_2bytes_IK
    _setLEDBrightnessRange->_LED_setBrightnessRange
    _setHeaterToggle->_LEDsOn
    _setH2OnTime->___ftmul
    _setH1OffTime->___ftmul
    _setDrvPiezoOnTime->___ftmul
    ___ftmul->___awtoft
    _setDrvPeak->_calcDownstroke
    _setDrvPeak->_calcUpstroke
    _round->_trunc
    ___fttol->___ftmul
    ___altoft->___ftpack
    ___ftneg->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___awdiv
    _setDrvGain->_drv_write
    _LED_test_openshort->_LEDsOn
    _LED_testComm->_LED_setBrightnessRange
    _LED_setBrightnessRange->_send_2length_2bytes_IK
    _doMove->_LEDsOn
    _drv_write_wvfrm->_i2c_masterOperation
    _drv_write_DC->_drv_write
    _printf->___llmod
    _putch->_EUSART_Write
    ___llmod->___lldiv
    _i2c_poller->_i2c_ISR
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_isNACK
    _do_I2C_TX->_returnReset
    _do_I2C_TX->_returnStop
    _do_I2C_SEND_ADR_WRITE->_i2c1_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c1_driver_TXData
    ___awdiv->___wmul
    _LEDsOn->_send_2length_2bytes_IK
    _send_2length_2bytes_IK->_send_last_2bytes_IK
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR0_DefaultInterruptHandler->i1_LEDsOn
    i1_LEDsOn->i1_send_2length_2bytes_IK

Critical Paths under _main in BANK1

    _main->_execCmd
    _main_initialize->_drv_init
    _drv_init->_calcDownstroke
    _drv_init->_calcUpstroke
    _execCmd->_commCheck
    _execCmd->_setDrvPeak
    _zeroPosition->_printf
    _timedActiveHeatOn->_printf
    _stop->_printf
    _setMoveMask->_printf
    _setLEDPwr->_printf
    _setLEDBrightnessRange->_printf
    _setHeaterToggle->_printf
    _setHeaterPreTime->_printf
    _setHeaterPostTime->_printf
    _setH2OnTime->___fttol
    _setH1OffTime->___fttol
    _setDrvPiezoOnTime->___fttol
    _setDrvPeak->_calcDownstroke
    _setDrvPeak->_calcUpstroke
    _calcUpstroke->_round
    _calcDownstroke->_round
    _round->_trunc
    _trunc->___fttol
    ___fttol->___ftadd
    ___ftadd->___ftmul
    _setDrvGain->_printf
    _setActive->_printf
    _getPosition->_printf
    _getMoveMask->_printf
    _getActive->_printf
    _commCheck->_LED_testComm
    _drv_read->_printf
    _LED_test_openshort->_printf
    _LED_testComm->_LED_readConfig
    _LED_readConfig->_LED_getData
    _LED_getData->_printf
    _doRelMove->_doMove
    _getMotionStatus->_printf
    _doAbsMove->_doMove
    _doMove->_drv_write_DC
    _drv_write->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _main_initialize->_drv_init
    _drv_init->_calcDownstroke
    _drv_init->_calcUpstroke
    _setDrvPeak->_calcDownstroke
    _setDrvPeak->_calcUpstroke

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_doAbsMove

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  425874
                                              0 BANK2      1     1      0
                        _EUSART_Read
                  _SYSTEM_Initialize
                          _doAbsMove
                          _doRelMove
                            _execCmd
                    _main_initialize
                           _parseCmd
 ---------------------------------------------------------------------------------
 (1) _parseCmd                                             6     5      1    8490
                                             37 BANK0      6     5      1
                               _atoi
                            _stricmp
                             _strtok
 ---------------------------------------------------------------------------------
 (2) _strtok                                               6     4      2    1446
                                             31 BANK0      6     4      2
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (3) _strspn                                               7     5      2     529
                                             24 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              7     5      2     529
                                             24 BANK0      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strchr                                               7     3      4     344
                                             17 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _stricmp                                              6     4      2    2508
                                             19 BANK0      6     4      2
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _toupper                                              2     2      0      67
                                             17 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2    2554
                                             23 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                             17 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _main_initialize                                      0     0      0   81387
             _LED_setBrightnessRange
                            _LEDsPwr
                _TMR0_Load8bitPeriod
            _TMR2_LoadPeriodRegister
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           _drv_init
 ---------------------------------------------------------------------------------
 (2) _drv_init                                             5     1      4   60466
                                             53 BANK1      1     1      0
                                              5 BANK3      4     0      4
                     _calcDownstroke
                       _calcUpstroke
                          _drv_reset
                          _drv_write
                           _i2c_open
                     _i2c_setAddress
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddress                                       2     2      0      22
                                             17 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             3     3      0     216
                                             19 BANK0      3     3      0
                   _i2c1_driver_open
     _i2c1_driver_setBusCollisionISR
              _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_setI2cISR                                2     0      2      86
                                             17 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_setBusCollisionISR                       2     0      2      86
                                             17 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _drv_reset                                            1     1      0    8231
                                             21 BANK1      1     1      0
                          _drv_write
 ---------------------------------------------------------------------------------
 (1) _execCmd                                              1     1      0  285309
                                             55 BANK1      1     1      0
                          _commCheck
                             _doMove
                          _getActive
                    _getMotionStatus
                        _getMoveMask
                        _getPosition
                             _printf
                          _setActive
                         _setDrvGain
                         _setDrvPeak
                  _setDrvPiezoOnTime
                       _setH1OffTime
                        _setH2OnTime
                  _setHeaterPostTime
                   _setHeaterPreTime
                    _setHeaterToggle
              _setLEDBrightnessRange
                          _setLEDPwr
                        _setMoveMask
                       _startAbsMove
                       _startRelMove
                               _stop
                  _timedActiveHeatOn
                       _zeroPosition
 ---------------------------------------------------------------------------------
 (2) _zeroPosition                                        12    10      2    5858
                                             41 BANK0      2     2      0
                                             21 BANK1     10     8      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _timedActiveHeatOn                                   13     7      6   10847
                                             21 BANK1     13     7      6
                             _LEDsOn
                             _printf
 ---------------------------------------------------------------------------------
 (2) _stop                                                 2     0      2    5728
                                             21 BANK1      2     0      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _startRelMove                                         4     0      4     172
                                             17 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _startAbsMove                                         3     1      2      86
                                             17 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _setMoveMask                                          8     4      4    6006
                                             41 BANK0      4     4      0
                                             21 BANK1      4     0      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setLEDPwr                                            4     0      4    9016
                                             21 BANK1      4     0      4
                            _LEDsPwr
                             _printf
 ---------------------------------------------------------------------------------
 (2) _LEDsPwr                                             14    10      4    3072
                                             36 BANK0     10     6      4
                                              0 BANK1      4     4      0
             _send_2length_2bytes_IK
 ---------------------------------------------------------------------------------
 (2) _setLEDBrightnessRange                                4     0      4    9361
                                             21 BANK1      4     0      4
             _LED_setBrightnessRange
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setHeaterToggle                                      8     4      4   10810
                                             21 BANK1      8     4      4
                             _LEDsOn
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setHeaterPreTime                                     2     0      2    5836
                                             21 BANK1      2     0      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setHeaterPostTime                                    2     0      2    5836
                                             21 BANK1      2     0      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setH2OnTime                                          2     0      2   20246
                                             37 BANK1      2     0      2
                _TMR0_Load8bitPeriod
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setH1OffTime                                         2     0      2   20246
                                             37 BANK1      2     0      2
            _TMR2_LoadPeriodRegister
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                             _printf
 ---------------------------------------------------------------------------------
 (2) _TMR2_LoadPeriodRegister                              1     1      0      22
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setDrvPiezoOnTime                                    4     2      2   20246
                                             44 BANK0      2     2      0
                                             37 BANK1      2     0      2
                _TMR0_Load8bitPeriod
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4600
                                             38 BANK0      6     0      6
                                              0 BANK1     10    10      0
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _TMR0_Load8bitPeriod                                  1     1      0      22
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setDrvPeak                                           2     0      2   49386
                                             53 BANK1      2     0      2
                     _calcDownstroke
                       _calcUpstroke
                             _printf
 ---------------------------------------------------------------------------------
 (3) _calcUpstroke                                         8     6      2   18876
                                             45 BANK0      1     1      0
                                             51 BANK1      2     0      2
                                              0 BANK3      5     5      0
                            ___awdiv
                           ___awtoft
                            ___fttol
                             ___wmul
                              _round
 ---------------------------------------------------------------------------------
 (3) _calcDownstroke                                       8     6      2   24674
                                             45 BANK0      1     1      0
                                             51 BANK1      2     0      2
                                              0 BANK3      5     5      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftneg
                            ___fttol
                             ___wmul
                              _round
 ---------------------------------------------------------------------------------
 (4) _round                                                6     3      3   10969
                                             45 BANK1      6     3      3
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftneg
                             ___wmul (ARG)
                              _trunc
 ---------------------------------------------------------------------------------
 (5) _trunc                                                9     6      3    4887
                                             44 BANK0      1     1      0
                                             37 BANK1      8     5      3
                           ___altoft
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                6     2      4     566
                                             17 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4    1121
                                             23 BANK1     14    10      4
                           ___altoft (ARG)
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___altoft                                             8     4      4    2802
                                             25 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     390
                                             38 BANK0      3     0      3
                           ___altoft (ARG)
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                           ___ftpack (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             13     7      6    5377
                                             10 BANK1     13     7      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2086
                                             17 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             6     3      3    3290
                                             32 BANK0      6     3      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2464
                                             17 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _setDrvGain                                           5     3      2   14113
                                             21 BANK1      5     3      2
                          _drv_write
                             _printf
 ---------------------------------------------------------------------------------
 (2) _setActive                                           12     8      4    6006
                                             21 BANK1     12     8      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _getPosition                                          6     4      2    5898
                                             41 BANK0      4     4      0
                                             21 BANK1      2     0      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _getMoveMask                                          8     6      2    5827
                                             41 BANK0      4     4      0
                                             21 BANK1      4     2      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _getActive                                            8     6      2    5827
                                             41 BANK0      4     4      0
                                             21 BANK1      4     2      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _commCheck                                            3     1      2   39535
                                             52 BANK1      3     1      2
                       _LED_testComm
                 _LED_test_openshort
                           _drv_read
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drv_read                                             6     4      2    7596
                                             41 BANK0      4     4      0
                                             21 BANK1      2     0      2
                _i2c_masterOperation
                      _i2c_setBuffer
                             _printf
 ---------------------------------------------------------------------------------
 (3) _LED_test_openshort                                   7     3      4   13851
                                             21 BANK1      7     3      4
                             _LEDsOn
                             _printf
             _send_2length_2bytes_IK
 ---------------------------------------------------------------------------------
 (3) _LED_testComm                                        10     8      2   12360
                                             42 BANK1     10     8      2
                     _LED_readConfig
             _LED_setBrightnessRange
 ---------------------------------------------------------------------------------
 (2) _LED_setBrightnessRange                              14    10      4    3417
                                             36 BANK0     10     6      4
                                              0 BANK1      4     4      0
             _send_2length_2bytes_IK
 ---------------------------------------------------------------------------------
 (4) _LED_readConfig                                       5     1      4    8594
                                             41 BANK0      1     1      0
                                             38 BANK1      4     0      4
                        _LED_getData
             _send_2length_2bytes_IK
 ---------------------------------------------------------------------------------
 (5) _LED_getData                                         17    13      4    6068
                                             21 BANK1     17    13      4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _doRelMove                                           18    18      0   27906
                                             35 BANK1     18    18      0
                             _doMove
                    _getMotionStatus
                             _printf
 ---------------------------------------------------------------------------------
 (2) _getMotionStatus                                      2     0      2    5728
                                             21 BANK1      2     0      2
                             _printf
 ---------------------------------------------------------------------------------
 (1) _doAbsMove                                           36    36      0   22500
                                             35 BANK1      8     8      0
                                              0 BANK5     28    28      0
                             _doMove
                             _printf
 ---------------------------------------------------------------------------------
 (2) _doMove                                               7     5      2   16190
                                             28 BANK1      7     5      2
                             _LEDsOn
                    _TMR0_StartTimer
                    _TMR2_StartTimer
                    _TMR4_StartTimer
                     _calcHeaterPins
                       _drv_write_DC
                    _drv_write_wvfrm
 ---------------------------------------------------------------------------------
 (3) _drv_write_wvfrm                                      1     1      0    1767
                                             26 BANK0      1     1      0
                _i2c_masterOperation
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _drv_write_DC                                         7     3      4    9545
                                             21 BANK1      7     3      4
                            ___awdiv
                          _drv_write
 ---------------------------------------------------------------------------------
 (3) _drv_write                                            5     4      1    8231
                                             41 BANK0      5     4      1
                _i2c_masterOperation
                      _i2c_setBuffer
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              29    23      6    5728
                                              0 BANK1     21    15      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      93
                                             19 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         2     2      0      62
                                             17 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___llmod                                             10     2      8     386
                                             31 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     395
                                             17 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) _i2c_setBuffer                                        4     0      4     632
                                             17 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  3     3      0    1104
                                             23 BANK0      3     3      0
                  _i2c1_driver_start
                         _i2c_poller
                 _mssp1_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp1_IRQisEnabled                                   2     2      0       0
                                             17 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0    1036
                            _i2c_ISR
                 _mssp1_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp1_waitForEvent                                   1     1      0      42
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              1     1      0     994
                                             22 BANK0      1     1      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp1_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      1     1      0     216
                                             17 BANK0      1     1      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (8) _mssp1_setIRQ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            4     4      0     284
                                             18 BANK0      4     4      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_isNACK                                   1     1      0       0
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_TXData                                   1     1      0      31
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            1     1      0     216
                                             17 BANK0      1     1      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
              _i2c1_driver_getRXData
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_resetBus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               1     1      0     216
                                             17 BANK0      1     1      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           1     0      1       0
                                             17 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          1     0      1     216
                                             17 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_sendACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1061
                                             23 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _calcHeaterPins                                       4     4      0       0
                                             17 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LEDsOn                                              10     4      6    4804
                                             36 BANK0     10     4      6
             _send_2length_2bytes_IK
 ---------------------------------------------------------------------------------
 (3) _send_2length_2bytes_IK                               8     1      7    2387
                                             28 BANK0      8     1      7
           _send_2bytes_latchless_IK
                _send_last_2bytes_IK
 ---------------------------------------------------------------------------------
 (4) _send_last_2bytes_IK                                 11     6      5     516
                                             17 BANK0     11     6      5
 ---------------------------------------------------------------------------------
 (4) _send_2bytes_latchless_IK                             8     6      2     207
                                             17 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     258
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0      86
           _TMR4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2      86
                                             17 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      86
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      86
                                             17 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      86
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      86
                                             17 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                             17 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0    1512
                                             12 COMMON     1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
                           _TMR2_ISR
                           _TMR4_ISR
                _i2c_busCollisionISR *
                          i1_i2c_ISR *
 ---------------------------------------------------------------------------------
 (12) i1_i2c_ISR                                           1     1      0     690
                                              5 COMMON     1     1      0
                    i1_do_I2C_DO_ACK *
           i1_do_I2C_DO_ADDRESS_NACK *
           i1_do_I2C_DO_NACK_RESTART *
              i1_do_I2C_DO_NACK_STOP *
                      i1_do_I2C_IDLE *
                      i1_do_I2C_RCEN *
                     i1_do_I2C_RESET *
                        i1_do_I2C_RX *
             i1_do_I2C_SEND_ADR_READ *
            i1_do_I2C_SEND_ADR_WRITE *
              i1_do_I2C_SEND_RESTART *
         i1_do_I2C_SEND_RESTART_READ *
        i1_do_I2C_SEND_RESTART_WRITE *
                 i1_do_I2C_SEND_STOP *
                        i1_do_I2C_TX *
                  i1_do_I2C_TX_EMPTY *
               i1_i2c1_driver_isNACK
                   i1_mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (13) i1_mssp1_clearIRQ                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX_EMPTY                                   1     1      0     140
                                              0 COMMON     1     1      0
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                     i1_mssp1_setIRQ
                      i1_returnReset *
                       i1_returnStop *
 ---------------------------------------------------------------------------------
 (14) i1_mssp1_setIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_TX                                         4     4      0     208
                                              1 COMMON     4     4      0
         i1_do_I2C_SEND_RESTART_READ
        i1_do_I2C_SEND_RESTART_WRITE
                 i1_do_I2C_SEND_STOP
               i1_i2c1_driver_TXData
               i1_i2c1_driver_isNACK
                      i1_returnReset *
                       i1_returnStop *
 ---------------------------------------------------------------------------------
 (13) i1_i2c1_driver_isNACK                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART_READ                          0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_WRITE                             0     0      0      31
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_SEND_ADR_READ                              0     0      0      31
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_TXData                                1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RX                                         1     1      0     140
                                              0 COMMON     1     1      0
           i1_do_I2C_DO_NACK_RESTART
              i1_do_I2C_DO_NACK_STOP
            i1_i2c1_driver_getRXData
              i1_i2c1_driver_sendACK
                      i1_returnReset *
                       i1_returnStop *
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_STOP                               0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_DO_NACK_RESTART                            0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (15) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RESET                                      0     0      0       0
             i1_i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_resetBus                              0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_RCEN                                       0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ADDRESS_NACK                            1     1      0     140
                                              0 COMMON     1     1      0
              i1_do_I2C_SEND_RESTART
                 i1_do_I2C_SEND_STOP
                      i1_returnReset *
                       i1_returnStop *
 ---------------------------------------------------------------------------------
 (14) i1_returnStop                                        1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_returnReset                                       1     0      1     140
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_STOP                                  0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (15) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i1_do_I2C_SEND_RESTART                               0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (15) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_do_I2C_DO_ACK                                     0     0      0       0
              i1_i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_sendACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (13) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR4_ISR                                            0     0      0      22
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _TMR4_DefaultInterruptHandler                        0     0      0      22
                     _TMR4_StopTimer
                    _TMR4_WriteTimer
 ---------------------------------------------------------------------------------
 (14) _TMR4_WriteTimer                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) _TMR4_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR2_ISR                                            0     0      0      22
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _TMR2_DefaultInterruptHandler                        0     0      0      22
                     _TMR2_StopTimer
                    _TMR2_WriteTimer
 ---------------------------------------------------------------------------------
 (14) _TMR2_WriteTimer                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) _TMR2_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     778
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _TMR0_DefaultInterruptHandler                        0     0      0     778
                     _TMR0_StopTimer
                _TMR0_Write8bitTimer
                           i1_LEDsOn
 ---------------------------------------------------------------------------------
 (14) i1_LEDsOn                                           10     4      6     756
                                              7 BANK0     10     4      6
           i1_send_2length_2bytes_IK
 ---------------------------------------------------------------------------------
 (15) i1_send_2length_2bytes_IK                            8     1      7     586
                                             11 COMMON     1     1      0
                                              0 BANK0      7     0      7
         i1_send_2bytes_latchless_IK
              i1_send_last_2bytes_IK
 ---------------------------------------------------------------------------------
 (16) i1_send_last_2bytes_IK                              11     6      5     278
                                              0 COMMON    11     6      5
 ---------------------------------------------------------------------------------
 (16) i1_send_2bytes_latchless_IK                          8     6      2     116
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (14) _TMR0_Write8bitTimer                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) _TMR0_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
     _WDT_Initialize
   _doAbsMove
     _doMove
       _LEDsOn
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _TMR0_StartTimer
       _TMR2_StartTimer
       _TMR4_StartTimer
       _calcHeaterPins
       _drv_write_DC
         ___awdiv
           ___wmul (ARG)
         _drv_write
           _i2c_masterOperation
             _i2c1_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c1_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _returnReset *
                   _returnStop *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c1_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c1_driver_startRX
                 _do_I2C_RESET *
                   _i2c1_driver_resetBus
                 _do_I2C_RX *
                   _do_I2C_DO_NACK_RESTART
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP
                     _i2c1_driver_sendNACK
                   _i2c1_driver_getRXData
                   _i2c1_driver_sendACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_SEND_ADR_READ *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _do_I2C_TX *
                   _do_I2C_SEND_RESTART_READ
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _i2c1_driver_TXData
                   _i2c1_driver_isNACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_TX_EMPTY *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _mssp1_setIRQ
                   _returnReset *
                   _returnStop *
                 _i2c1_driver_isNACK *
                 _mssp1_clearIRQ *
               _mssp1_waitForEvent
             _mssp1_IRQisEnabled
           _i2c_setBuffer
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _EUSART_Write
       _drv_write_wvfrm
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
         _i2c_setBuffer
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       _putch
         _EUSART_Write
   _doRelMove
     _doMove
       _LEDsOn
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _TMR0_StartTimer
       _TMR2_StartTimer
       _TMR4_StartTimer
       _calcHeaterPins
       _drv_write_DC
         ___awdiv
           ___wmul (ARG)
         _drv_write
           _i2c_masterOperation
             _i2c1_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c1_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _returnReset *
                   _returnStop *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c1_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c1_driver_startRX
                 _do_I2C_RESET *
                   _i2c1_driver_resetBus
                 _do_I2C_RX *
                   _do_I2C_DO_NACK_RESTART
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP
                     _i2c1_driver_sendNACK
                   _i2c1_driver_getRXData
                   _i2c1_driver_sendACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_SEND_ADR_READ *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _do_I2C_TX *
                   _do_I2C_SEND_RESTART_READ
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _i2c1_driver_TXData
                   _i2c1_driver_isNACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_TX_EMPTY *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _mssp1_setIRQ
                   _returnReset *
                   _returnStop *
                 _i2c1_driver_isNACK *
                 _mssp1_clearIRQ *
               _mssp1_waitForEvent
             _mssp1_IRQisEnabled
           _i2c_setBuffer
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _EUSART_Write
       _drv_write_wvfrm
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
         _i2c_setBuffer
     _getMotionStatus
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       _putch
         _EUSART_Write
   _execCmd
     _commCheck
       _LED_testComm
         _LED_readConfig
           _LED_getData
             _printf
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               _putch
                 _EUSART_Write
           _send_2length_2bytes_IK
             _send_2bytes_latchless_IK
             _send_last_2bytes_IK
         _LED_setBrightnessRange
           _send_2length_2bytes_IK
             _send_2bytes_latchless_IK
             _send_last_2bytes_IK
       _LED_test_openshort
         _LEDsOn
           _send_2length_2bytes_IK
             _send_2bytes_latchless_IK
             _send_last_2bytes_IK
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _EUSART_Write
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _drv_read
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
         _i2c_setBuffer
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _EUSART_Write
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _doMove
       _LEDsOn
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _TMR0_StartTimer
       _TMR2_StartTimer
       _TMR4_StartTimer
       _calcHeaterPins
       _drv_write_DC
         ___awdiv
           ___wmul (ARG)
         _drv_write
           _i2c_masterOperation
             _i2c1_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c1_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _returnReset *
                   _returnStop *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c1_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c1_driver_startRX
                 _do_I2C_RESET *
                   _i2c1_driver_resetBus
                 _do_I2C_RX *
                   _do_I2C_DO_NACK_RESTART
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP
                     _i2c1_driver_sendNACK
                   _i2c1_driver_getRXData
                   _i2c1_driver_sendACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_SEND_ADR_READ *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _do_I2C_TX *
                   _do_I2C_SEND_RESTART_READ
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _i2c1_driver_TXData
                   _i2c1_driver_isNACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_TX_EMPTY *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _mssp1_setIRQ
                   _returnReset *
                   _returnStop *
                 _i2c1_driver_isNACK *
                 _mssp1_clearIRQ *
               _mssp1_waitForEvent
             _mssp1_IRQisEnabled
           _i2c_setBuffer
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _EUSART_Write
       _drv_write_wvfrm
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
         _i2c_setBuffer
     _getActive
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _getMotionStatus
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _getMoveMask
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _getPosition
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       _putch
         _EUSART_Write
     _setActive
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setDrvGain
       _drv_write
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
         _i2c_setBuffer
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _EUSART_Write
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setDrvPeak
       _calcDownstroke
         ___awdiv
           ___wmul (ARG)
         ___awtoft
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
         ___wmul
         _round
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftadd (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
             _frexp (ARG)
       _calcUpstroke
         ___awdiv
           ___wmul (ARG)
         ___awtoft
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
         ___wmul
         _round
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftadd (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
             _frexp (ARG)
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setDrvPiezoOnTime
       _TMR0_Load8bitPeriod
       ___awtoft
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul (ARG)
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setH1OffTime
       _TMR2_LoadPeriodRegister
       ___awtoft
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul (ARG)
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setH2OnTime
       _TMR0_Load8bitPeriod
       ___awtoft
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul (ARG)
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setHeaterPostTime
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setHeaterPreTime
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setHeaterToggle
       _LEDsOn
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setLEDBrightnessRange
       _LED_setBrightnessRange
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setLEDPwr
       _LEDsPwr
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _setMoveMask
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _startAbsMove
     _startRelMove
     _stop
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _timedActiveHeatOn
       _LEDsOn
         _send_2length_2bytes_IK
           _send_2bytes_latchless_IK
           _send_last_2bytes_IK
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
     _zeroPosition
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _EUSART_Write
   _main_initialize
     _LED_setBrightnessRange
       _send_2length_2bytes_IK
         _send_2bytes_latchless_IK
         _send_last_2bytes_IK
     _LEDsPwr
       _send_2length_2bytes_IK
         _send_2bytes_latchless_IK
         _send_last_2bytes_IK
     _TMR0_Load8bitPeriod
     _TMR2_LoadPeriodRegister
     ___awtoft
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul (ARG)
     _drv_init
       _calcDownstroke
         ___awdiv
           ___wmul (ARG)
         ___awtoft
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
         ___wmul
         _round
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftadd (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
             _frexp (ARG)
       _calcUpstroke
         ___awdiv
           ___wmul (ARG)
         ___awtoft
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
         ___wmul
         _round
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftadd (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
             _frexp (ARG)
       _drv_reset
         _drv_write
           _i2c_masterOperation
             _i2c1_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c1_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _returnReset *
                   _returnStop *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c1_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c1_driver_startRX
                 _do_I2C_RESET *
                   _i2c1_driver_resetBus
                 _do_I2C_RX *
                   _do_I2C_DO_NACK_RESTART
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP
                     _i2c1_driver_sendNACK
                   _i2c1_driver_getRXData
                   _i2c1_driver_sendACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_SEND_ADR_READ *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _do_I2C_TX *
                   _do_I2C_SEND_RESTART_READ
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _i2c1_driver_TXData
                   _i2c1_driver_isNACK
                   _returnReset *
                   _returnStop *
                 _do_I2C_TX_EMPTY *
                   _do_I2C_SEND_RESTART
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP
                     _i2c1_driver_stop
                   _mssp1_setIRQ
                   _returnReset *
                   _returnStop *
                 _i2c1_driver_isNACK *
                 _mssp1_clearIRQ *
               _mssp1_waitForEvent
             _mssp1_IRQisEnabled
           _i2c_setBuffer
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _EUSART_Write
       _drv_write
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _returnReset *
                 _returnStop *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 _do_I2C_DO_NACK_RESTART
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData
                 _i2c1_driver_sendACK
                 _returnReset *
                 _returnStop *
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 _do_I2C_SEND_RESTART_READ
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                 _returnReset *
                 _returnStop *
               _do_I2C_TX_EMPTY *
                 _do_I2C_SEND_RESTART
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP
                   _i2c1_driver_stop
                 _mssp1_setIRQ
                 _returnReset *
                 _returnStop *
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
         _i2c_setBuffer
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _EUSART_Write
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setAddress
   _parseCmd
     _atoi
       ___wmul
       _isdigit
     _stricmp
       _toupper
     _strtok
       _strcspn
         _strchr
       _strspn
         _strchr

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _TMR0_ISR *
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
       _TMR0_StopTimer
       _TMR0_Write8bitTimer
       i1_LEDsOn
         i1_send_2length_2bytes_IK
           i1_send_2bytes_latchless_IK
           i1_send_last_2bytes_IK
   _TMR2_ISR *
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
       _TMR2_StopTimer
       _TMR2_WriteTimer
   _TMR4_ISR *
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
       _TMR4_StopTimer
       _TMR4_WriteTimer
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision
   i1_i2c_ISR *
     i1_do_I2C_DO_ACK *
       i1_i2c1_driver_sendACK
     i1_do_I2C_DO_ADDRESS_NACK *
       i1_do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       i1_do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       i1_returnReset *
       i1_returnStop *
     i1_do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     i1_do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     i1_do_I2C_IDLE *
     i1_do_I2C_RCEN *
       i1_i2c1_driver_startRX
     i1_do_I2C_RESET *
       i1_i2c1_driver_resetBus
     i1_do_I2C_RX *
       i1_do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       i1_do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       i1_i2c1_driver_getRXData
       i1_i2c1_driver_sendACK
       i1_returnReset *
       i1_returnStop *
     i1_do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     i1_do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     i1_do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     i1_do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     i1_do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     i1_do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     i1_do_I2C_TX *
       i1_do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       i1_do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       i1_do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       i1_i2c1_driver_TXData
       i1_i2c1_driver_isNACK
       i1_returnReset *
       i1_returnStop *
     i1_do_I2C_TX_EMPTY *
       i1_do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       i1_do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       i1_mssp1_setIRQ
       i1_returnReset *
       i1_returnStop *
     i1_i2c1_driver_isNACK *
     i1_mssp1_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2E      3F       5       78.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     38      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      1      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      48      13       90.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0     1C2      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50     1C      44      16       85.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     1C2      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              50      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23              50      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24              10      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25               0      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Oct 04 09:42:15 2018

        i1send_last_2bytes_IK@topOrBottom 0073                              returnReset@p 0031  
                            ___altoft@exp 003F          __end_of_TMR2_SetInterruptHandler 209D  
                                       pc 0002              __end_ofdrv2665@drv_fifo_sine 187A  
                  setLEDBrightnessRange@r 00B5             _do_I2C_SEND_RESTART$intlevel0 2056  
                       ??_getMotionStatus 0049                               __CFG_CP$OFF 0000  
                           ___altoft@sign 0040                              ___awdiv@sign 003D  
                    __size_of_do_I2C_IDLE 0009                       _do_I2C_SEND_RESTART 2052  
                            _startAbsMove 21C4                      __size_of_do_I2C_RCEN 000A  
                     ___wmul@multiplicand 0033                    i1send_last_2bytes_IK@j 0079  
                    __end_ofi1_returnStop 2F3A                              ___ftadd@exp1 00B6  
                            ___ftadd@exp2 00B5                               i1_do_I2C_RX 1914  
                             i1_do_I2C_TX 1BE3                               __CFG_LVP$ON 0000  
                            ___ftadd@sign 00B4                                       l220 1DD5  
                                     l310 1702                                       l216 1DCC  
                                     l320 175E                                       l208 1F40  
                                     l233 1E04                                       l226 1DEF  
                                     l314 170B                                       l243 1E19  
                                     l235 1E06                                       l260 260E  
                                     l252 25F2                                       l237 1E0F  
                                     l262 2616                                       l258 260C  
                                     l442 24B4                                       l287 1630  
                                     l529 211F                                       l774 1E4D  
                                     l790 1A43                                       _PR2 001E  
                                     _PR4 0416                              __CFG_CPD$OFF 0000  
                i1_do_I2C_DO_NACK_RESTART 2F9B              __size_of_i2c_masterOperation 0024  
                    _returnStop$intlevel0 2FD8                   __size_of_PMD_Initialize 0008  
                         _TMR2_Initialize 21D5                     __size_of_do_I2C_RESET 000B  
                                     wreg 0009                              _startRelMove 22CB  
                         _setHeaterToggle 1675                     __end_ofi1_returnReset 2F3C  
                         ?i1_mssp1_setIRQ 0070                        i1_i2c1_driver_stop 2F4E  
         i2c1_driver_setBusCollisionISR@f 0031                                      S9572 2000  
                setLEDBrightnessRange@tOB 00B7                         setDrvGain@setGain 00B8  
                            ?_EUSART_Read 0070                                      l1140 0899  
                                    l1143 08B3                                      l1137 0866  
                                    l1252 0914                                      l1255 093B  
                                    l2207 22B1                                      l1622 0DD9  
                                    l1624 0DBA                                      l1640 0EC5  
                                    l1625 0E10                                      l1722 230B  
                                    l1619 0DB8                                      l1905 122E  
                                    l1906 1236                             i1returnStop@p 0070  
                                    l6110 21C2                                      l1929 0D2F  
                                    l6050 21B2                                      l6130 2626  
                                    l6122 2674                                      l6116 264E  
                                    l6134 2644                                      l6118 2656  
                                    l8000 17E9                                      l6128 261E  
                                    l1898 121B                                      l8004 17F7  
                                    l1989 17E6                                      l8030 1704  
                                    l8110 0CE8                                      l8014 26ED  
                                    l8040 1731                                      l8120 0D0A  
                                    l8130 0D2B                                      l8122 0D0E  
                                    l8116 0CFB                                      l6700 1AFA  
                                    l9100 062B                                      l8222 2305  
                                    l8134 0D41                                      l8118 0D05  
                                    l6710 26B7                                      l6702 1AFB  
                                    l8072 2470                                      l8400 2750  
                                    l8320 163F                                      l8128 0D21  
                                    l9200 0427                                      l9120 0676  
                                    l9112 0658                                      l9104 063A  
                                    l8242 1CD8                                      l8074 2476  
                                    l8322 164B                                      l8330 166E  
                                    l8138 0D53                                      l9210 048B  
                                    l9202 043B                                      l6714 26DA  
                                    l8260 1CF7                                      l7604 24C9  
                                    l8148 0D6E                                      l8092 0CBF  
                                    l9220 0520                                      l9212 04A8  
                                    l9204 044F                                      l6708 26AF  
                                    l9140 06C1                                      l9132 06A3  
                                    l9124 0685                                      l9116 0667  
                                    l9108 0649                                      l8270 1D12  
                                    l7550 204E                                      l7702 1A25  
                                    l8078 2480                                      l9310 0166  
                                    l8190 07AB                                      l8326 1667  
                                    l8430 19F7                                      l9230 0569  
                                    l9222 053D                                      l9214 04C5  
                                    l9206 0463                                      l8248 1CE3  
                                    l7608 210A                                      l7544 2046  
                                    l7720 1A48                                      l8184 077C  
                                    l8336 14A2                                      l8088 0CB8  
                                    l8168 1D3C                                      l9232 0574  
                                    l9224 0548                                      l9216 04E2  
                                    l9208 0477                                      l9160 070C  
                                    l9152 06EE                                      l9144 06D0  
                                    l9136 06B2                                      l9128 0694  
                                    l9080 05E0                                      l9072 05BD  
                                    l8274 1D1A                                      l8266 1D09  
                                    l8258 1CEB                                      l7730 0807  
                                    l7618 20AA                                      l7562 205E  
                                    l7626 2142                                      l7634 2115  
                                    l7642 20E2                                      l7650 2066  
                                    l9330 019E                                      l9314 0178  
                                    l9306 00F4                                      l8098 0CCE  
                                    l8450 0BC4                                      l9234 057C  
                                    l9226 0553                                      l9218 0503  
                                    l9170 0738                                      l7580 2FD8  
                                    l7740 080E                                      l7556 2056  
                                    l7660 25CB                                      l7716 1A45  
                                    l7804 1D82                                      l8620 2543  
                                    l8196 07EF                                      l8188 07A2  
                                    l8700 19C6                                      l9228 055E  
                                    l9236 0584                                      l6692 1AD7  
                                    l6684 1AC0                                      l9164 0722  
                                    l9156 06FD                                      l9148 06DF  
                                    l9092 060D                                      l9084 05EF  
                                    l9076 05D1                                      l7734 080A  
                                    l7574 2076                                      l7670 25D1  
                                    l7726 1A4B                                      l7814 1DB0  
                                    l7806 1D90                                      l7830 196B  
                                    l7590 24A9                                      l7910 0E30  
                                    l9342 02E2                                      l8622 254C  
                                    l8630 2567                                      l8438 1A15  
                                    l8286 2424                                      l9190 03D5  
                                    l6678 1ABB                                      l9174 074A  
                                    l7584 2FDE                                      l7728 0804  
                                    l7568 206E                                      l7664 25CE  
                                    l7656 25C2                                      l7680 1E29  
                                    l7672 1E20                                      l9336 01AE  
                                    l8624 2555                                      l9256 0EE7  
                                    l8480 0C4F                                      l8472 0C39  
                                    l8456 0BE1                                      l8640 13B3  
                                    l9192 03E9                                      l9168 0731  
                                    l9096 061C                                      l9088 05FE  
                                    l6962 23B9                                      l7746 0811  
                                    l7690 1E2F                                      l7818 1DBB  
                                    l7834 1983                                      l7922 0E63  
                                    l7906 0E1F                                      l9258 0EF7  
                                    l7770 11F1                                      l9194 03F4  
                                    l9186 03A0                                      l9178 075D  
                                    l7852 1DF1                                      l7844 1DCE  
                                    l7684 1E2C                                      l7676 1E26  
                                    l7764 24E1                                      l7756 24D0  
                                    l7828 195D                                      l7932 0E71  
                                    l7916 0E36                                      l8388 2287  
                                    l8628 255E                                      l9276 0F72  
                                    l8484 0C5D                                      l8468 0C2B  
                                    l8644 13FB                                      l9196 03FF  
                                    l9188 03C0                                      l9444 12D6  
                                    l7838 198E                                      l7926 0E6B  
                                    l7934 0D99                                      l9294 0FF8  
                                    l7774 11F8                                      l9198 0413  
                                    l8902 1257                                      l9470 12D3  
                                    l9454 12FD                                      l7880 0DB5  
                                    l8584 087C                                      l9288 0F9D  
                                    l8664 27FA                                      l8816 145C  
                                    l8824 1482                                      l7784 1220  
                                    l7776 1202                                      l7960 2799  
                                    l8648 140D                                      l8920 127C  
                                    l8904 124F                                      l9464 131A  
                                    l9456 1302              TMR0_Load8bitPeriod@periodVal 0031  
                                    l7698 1E6E                                      l8818 1478  
                                    l8690 19A7                                      l8682 199B  
                                    l7786 1228                                      l7778 1207  
                                    l7962 27A9                                      l8930 12B9  
                                    l8922 1280                                      l8914 1274  
                                    l8906 125C                                      l7948 2127  
                                    l7892 0DEA                                      l7884 0DBC  
                                    l8684 199E                                      l7972 1792  
                                    l8780 16E7                                      l8836 1366  
                                    l8844 1396                                      l8924 12A9  
                                    l9468 12CF                                      l8862 1B8C  
                                    l9574 19B8                                      l8686 19A0  
                                    l7990 17C2                                      l8774 16AC  
                                    l8838 138C                                      l8790 08D8  
                                    l8856 1B50                                      l8880 1BD9  
                                    l8688 19A2                                      l7992 17D0  
                                    l8890 0A35                                      l8874 1B9D  
                                    l8698 19B3                           __end_of_LEDsPwr 1F93  
                                    l8894 0A7E                                      l7998 17DD  
                                    l8798 0911                                      STR_1 302E  
                                    STR_2 302E                                      STR_3 2863  
                                    l8898 0ACB                       drv_init@output_gain 01E2  
                                    STR_4 28FE                                      STR_5 3038  
                                    STR_6 28EE                                      STR_7 3038  
                                    STR_8 3038                                      STR_9 3038  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PMD0 0911  
                                    _PMD1 0912                                      _PMD2 0913  
                                    _PMD3 0914                                      _PMD4 0915  
                                    _PMD5 0916                                      u7115 1216  
                                    u7205 1D85                                      u7135 1223  
                                    u7225 1D91                                      u7305 1984  
                                    u7235 1DA5                                      u7245 1DB1  
                                    u7414 25FD                                      u7415 25FB  
                                    u8215 1CF8                                      u7175 123D  
                                    u7095 11FD                                      u8135 230C  
                                    u7344 1DE0                                      u8400 14FE  
                                    u7345 1DDE                                      u8065 2402  
                                    u8225 1D02                                      u7505 0E59  
                                    u8145 2311                                      u8235 1D0A  
                                    u7275 1960                                      u7365 1DFB  
                                    u8085 0796                                      u7605 1799  
                    ?_do_I2C_SEND_RESTART 0070                                      u7295 1979  
                                    u8095 07BC                                      u9400 0F44  
                                    u8370 14E0                                      u8195 1CEE  
                                    u8435 276F                                      u8371 14DE  
                                    u7635 17C3                                      u8275 1F39  
                                    u8380 14E1                                      u8445 1594  
                                    u8605 0C65                                      u8525 0BF4  
                                    u8285 1F4E                                      u9510 015C  
                                    u9430 0FB4                                      u7734 171E  
                                    u8390 14FD                                      u8710 168A  
                                    u7735 171C                                      u7575 279E  
                                    u8535 0C0A                                      u8295 1F76  
                                    u9600 028C                                      u9520 015D  
                                    u9440 0FBE                                      u7744 173E  
                                    u8625 0870                                      u9425 0F9B  
                                    u7745 173C                                      u7665 17DE  
                                    u8465 097E                                      u9610 028D  
                                    u9450 0FBF                                      u8810 1451  
                                    u8730 16C0                                      u8650 13CC  
                                    u8635 08A7                                      u9603 0288  
                                    u9515 0158                                      u9435 0FB0  
                                    u8555 0C3A                                      u8715 1686  
                                    u9700 0361                                      u9380 0F39  
                                    u8820 146A                                      u7925 0CFC  
                                    u8565 0C41                                      u8645 13B1  
                                    u9710 0362                                      u9630 02B0  
                                    u9390 0F43                                      u8910 1BB9  
                                    u9535 0176                                      u9375 0F20  
                                    u8815 144D                                      u8735 16BC  
                                    u8655 13C8                                      u9624 0295  
                                    u9560 01FB                                      u9625 0293  
                                    u9465 0FF6                                      u9385 0F35  
                                    u8825 1466                                      u9570 01FC  
                                    u9490 0114                                      u8850 1354  
                                    u9635 02AC                                      u9563 01F7  
                                    u9555 01AC                                      u8915 1BB4  
                                    u7955 0D0F                                      u8595 0C5E  
                                    u8835 133C                                      u8675 140B  
                                    u9660 0315                                      u8780 142F  
                                    u8860 1377                                      u9645 02E0  
                                    u9485 00F2                                      u8773 092F  
                                    u9670 0327                                      u9590 0220  
                                    u9655 02F3                                      u9495 0110  
                                    u8695 27CF                                      u7895 0CE9  
                                    u8855 1350                                      u9680 0328  
                                    u9584 0205                                      u8880 1B6C  
                                    u9665 0311                                      u9585 0203  
                                    u8785 142B                                      u7985 0D22  
                                    u8865 1373                                      u9690 034F  
                                    u9595 021C                                      u8955 0AC4  
                                    u8885 1B67                                      u9695 034B  
                                    _TMR2 001D                                      u9955 1324  
                                    _TMR4 0415                                      _WPUA 020C  
                                    _WPUB 020D                                      _WPUC 020E  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
       __size_of_do_I2C_SEND_RESTART_READ 0008                       ?i1_i2c1_driver_stop 0070  
               ?_do_I2C_SEND_RESTART_READ 0070                                      _atoi 124D  
                                    _main 12BE                              ___ftpack@arg 0031  
               __size_of_do_I2C_SEND_STOP 0008                    __size_of_do_I2C_DO_ACK 0008  
                            ___ftpack@exp 0034                           _TMR0_StartTimer 2F5D  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                                      _stop 24F2  
                       ??i1_do_I2C_DO_ACK 0070                             __CFG_BOREN$ON 0000  
                            ?_LED_getData 00B5                   i1_i2c1_driver_getRXData 2F54  
                   ?_do_I2C_SEND_ADR_READ 0070                             __CFG_BORV$LOW 0000  
         ??_i2c1_driver_clearBusCollision 0070                                      start 005A  
                        _setHeaterPreTime 2196                     __size_of_zeroPosition 0075  
                           _i2c_setBuffer 2221                    LED_test_openshort@type 00B5  
                 ??_setLEDBrightnessRange 004E                             __CFG_CSWEN$ON 0000  
                           __CFG_MCLRE$ON 0000                ??_TMR4_SetInterruptHandler 0033  
                            ___ftmul@cntr 00A8                  _send_2bytes_latchless_IK 25E9  
                         __end_of_i2c_ISR 24F2                              ___ftmul@sign 00A9  
                      timedActiveHeatOn@t 00C0                  ??_do_I2C_DO_NACK_RESTART 0031  
                           i1_do_I2C_IDLE 2FBF                           _drv_write_wvfrm 227E  
                            ___fttol@exp1 00C4                              ?_setH2OnTime 00C5  
                           i1_do_I2C_RCEN 2FCE                              ___fttol@lval 00C0  
                 __end_of_TMR0_Initialize 2221                              _do_I2C_RESET 2106  
                          i1returnReset@p 0070              __size_of_TMR0_Write8bitTimer 0005  
          ??_TMR0_DefaultInterruptHandler 007C                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 000A             __end_of_OSCILLATOR_Initialize 20DE  
                    ??i1_i2c1_driver_stop 0070                                     ?_atoi 0037  
                __end_of_i2c1_driver_open 2106                                     ?_main 0070  
                         __end_of___awdiv 1D1F                  __end_of_i2c1_driver_stop 2F6F  
                         __end_of___ftadd 0D94                                     STR_10 302A  
                                   STR_11 3038                                     STR_20 3038  
                                   STR_12 303B                                     STR_21 3038  
                                   STR_13 3038                                     STR_30 2863  
                                   STR_22 3038                                     STR_14 3038  
                                   STR_23 3038                                     STR_15 3038  
                                   STR_31 3041                                     STR_32 3038  
                                   STR_16 3038                                     STR_24 303B  
                                   STR_40 2828                                     STR_25 3038  
                                   STR_17 3038                                     STR_41 29CE  
                                   STR_33 303E                             __CFG_WDTE$OFF 0000  
                                   STR_50 28CB                                     STR_18 3038  
                                   STR_42 29C6                                     STR_26 303B  
                                   STR_34 2847                      send_last_2bytes_IK@j 003A  
                                   STR_19 3038                                     STR_43 29D6  
                                   STR_27 302E                                     STR_51 28DD  
                                   STR_35 2881                                     STR_28 2863  
                                   STR_52 29DC                                     STR_44 2975  
                                   STR_60 3046                                     STR_36 29CE  
                                   STR_53 29DC                                     STR_29 302E  
                                   STR_37 29C6                                     STR_61 29A6  
                                   STR_45 289B                                     STR_54 301E  
                                   STR_38 29D6                                     STR_62 29AE  
                                   STR_46 299D                                     STR_70 293A  
                                   STR_55 3022                                     STR_47 2994  
                                   STR_39 2975                                     STR_71 296A  
                                   STR_63 2953                                     STR_56 3026  
                                   STR_72 3000                                     STR_64 292C  
                                   STR_80 28B4                                     STR_48 2865  
                                   STR_57 3024                                     STR_73 300A  
                                   STR_65 291D                                     STR_49 28CB  
                                   STR_58 3005                                     STR_74 29BE  
                                   STR_66 295F                                     STR_59 300F  
                                   STR_75 29DE                                     STR_67 2980  
                                   STR_76 3019                                     STR_68 29B6  
                                   STR_77 3014                                     STR_69 29E5  
                                   STR_78 298A                                     STR_79 28C8  
                         __end_of___ftneg 20B8                           __end_of___lldiv 1DC4  
                                   ?_stop 00B5                                     u10107 1754  
                                   u10027 12C5                                     u10117 0873  
                                   u10037 1FA7                                     u10127 08AA  
                                   u10047 1FB3                                     u10137 2123  
                                   u10057 1FC2                                     u10067 1FD7  
                         __end_of___ftmul 0C90                                     u10077 1FEB  
                                   u10087 0932                                     u10097 19F8  
                         ___awdiv@divisor 0037                           __end_of___llmod 1997  
                         __end_of___fttol 1800                                     _T2CON 001F  
                                   _T4CON 0417                __end_of_i2c1_driver_TXData 2FE6  
                          __CFG_DEBUG$OFF 0000                          __end_ofi1_LEDsOn 23F8  
                                   i1l220 1A78                                     i1l216 1A70  
                                   i1l233 1AA1                                     i1l226 1A8F  
                                   i1l243 1AB0                                     i1l235 1AA2  
                                   i1l260 2539                                     i1l252 2521  
                                   i1l237 1AA9                                     i1l262 2540  
                                   i1l258 2538                                     i1l381 002F  
                                   i1l454 2339                                     i1l383 0039  
                                   i1l392 0055                                     i1l376 0013  
                                   i1l385 0043                                     i1l387 004D  
                                   i1l379 0022                                     i1l774 1C0F  
                                   i1l790 192F                           ___awdiv@counter 003C  
                        __end_of_LEDpower 3046                                     _OSCEN 091D  
                                   _TMR0H 0016                                     _TMR0L 0015  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                        __end_ofsin@coeff_a 291D  
                      __end_ofsin@coeff_b 2953         __size_of_TMR0_SetInterruptHandler 0009  
           i1send_2length_2bytes_IK@data1 0020             i1send_2length_2bytes_IK@data2 0022  
                         _TMR4_Initialize 21E7                 ?_TMR0_SetInterruptHandler 0031  
                             i2c_open@ret 0034                          __end_of_TMR0_ISR 216F  
                        __end_of_TMR2_ISR 217C                          __end_of_TMR4_ISR 2189  
                         __end_of_execCmd 0597                        __size_ofi1_i2c_ISR 0020  
                           ___awtoft@sign 0045                __end_of_i2c1_driver_isNACK 2196  
                         __end_of_dpowers 2828                            _WDT_Initialize 2F9F  
                                   _frexp 26E0                                     _errno 015E  
                       _timedActiveHeatOn 08C0                           __end_of_isdigit 21B4  
            ?i1_do_I2C_SEND_RESTART_WRITE 0070                ?_do_I2C_SEND_RESTART_WRITE 0070  
                           ___ftpack@sign 0035                                     atoi@a 003C  
                                   atoi@s 003E                                     _putch 2FE6  
                                   _round 1E75                     ??_do_I2C_SEND_RESTART 0031  
                                   _trunc 1D1F                 send_2bytes_latchless_IK@j 0037  
                       ?i1_mssp1_clearIRQ 0070    __end_of_i2c1_driver_setBusCollisionISR 20C1  
 __size_of_i2c1_driver_setBusCollisionISR 0009            _i2c1_driver_setBusCollisionISR 20B8  
                            _zeroPosition 13A3                                     pclath 000A  
                      setDrvPiezoOnTime@t 00C5                   __size_of_mssp1_clearIRQ 0003  
                    i1_i2c1_driver_TXData 2FBA                        ?_timedActiveHeatOn 00B5  
      __end_ofi1_send_2bytes_latchless_IK 2542                i1_send_2bytes_latchless_IK 2519  
                    setLEDPwr@topOrBottom 00B7                            _i2c_setAddress 207A  
                  ?_do_I2C_SEND_ADR_WRITE 0070                                     status 0003  
                      ??i1_mssp1_clearIRQ 0070                                     wtemp0 007E  
                         _TMR2_StartTimer 2F60                           __end_of_stricmp 26E0  
        __size_of_TMR2_LoadPeriodRegister 0005                           __end_of_strcspn 2649  
                         __end_of_toupper 21C4                         ??_main_initialize 004E  
                          ?_i2c_setBuffer 0031                     __size_of_calcUpstroke 007B  
                     _send_last_2bytes_IK 1DC4                      i1_i2c1_driver_isNACK 2132  
                       _setHeaterPostTime 21FA                       ??_timedActiveHeatOn 00BB  
                           _fsmStateTable 0248                           __initialization 005C  
          __size_ofi1_do_I2C_SEND_RESTART 0004                                _i2c_poller 2127  
           __end_ofi1_do_I2C_SEND_RESTART 2F8F                            _remainingSteps 013E  
                            __end_of_atoi 12BE                                _i2c_status 0120  
                          ?i1_do_I2C_IDLE 0070                              __end_of_main 1330  
                      ?_setHeaterPostTime 00B5                            ?i1_do_I2C_RCEN 0070  
                            __end_of_stop 2519                 LED_readConfig@topOrBottom 00C6  
              __end_ofi1_do_I2C_SEND_STOP 2F93                          __end_of_i2c_open 1B49  
                          ??_EUSART_Write 0031                   __end_of_TMR2_Initialize 21E7  
                           ?_setH1OffTime 00C5               ?_INTERRUPT_InterruptManager 0070  
                           ?_LED_testComm 00CA                   __end_of_setHeaterToggle 16F2  
                          i1_do_I2C_RESET 2FF2                             _do_I2C_DO_ACK 2062  
                                  ??_atoi 0039                  _TMR2_SetInterruptHandler 2094  
                                  ??_main 016C                             ___fttol@sign1 00BF  
                     ??_setHeaterPostTime 0049                                    ??_stop 0049  
           __size_of_i2c1_driver_sendNACK 0004                           _TMR2_WriteTimer 2FB0  
                    ?_send_last_2bytes_IK 0031                             ?_drv_write_DC 00B5  
                               ??_LEDsPwr 0048                    __end_of_WDT_Initialize 2FA3  
           __size_of_i2c1_driver_resetBus 0001                               drv_read@reg 004B  
                      setHeaterPostTime@t 00B5                 __end_of_timedActiveHeatOn 0968  
                 ?_do_I2C_DO_ADDRESS_NACK 0070                              ?_setMoveMask 00B5  
                      setHeaterToggle@num 00B5                          _piezo_on_time_ms 00EA  
                 __end_of_TMR0_StartTimer 2F60                             _drv_fifo_sine 187A  
                                  ?_frexp 0031                          __end_of___altoft 27C1  
                        ___llmod@dividend 0043                      __size_of_getMoveMask 004D  
                        ___awdiv@dividend 0039                          __end_of___awtoft 243B  
                                  _ANSELA 018C                                    ?_putch 0070  
                                  _ANSELB 018D                                    _ANSELC 018E  
                  __end_of_i2c_setAddress 2082                          __end_of___ftpack 124D  
                                  ?_round 00CD                        __CFG_RSTOSC$HFINT1 0000  
                                  _T0CON0 0017                                    _T0CON1 0018  
                                  ?_trunc 00C5                              _calcUpstroke 157E  
                 ?i1_do_I2C_SEND_ADR_READ 0070                      drv2665@drv_fifo_sine 1800  
                   ?i1_i2c1_driver_TXData 0070                                    _RC1REG 0199  
                                  _RC1STA 019D                                    _ODCONA 028C  
                                  _ODCONB 028D                                    _ODCONC 028E  
                                  i1l9002 1914                                    i1l9020 1934  
                                  i1l9030 2597                 ??i1_i2c1_driver_getRXData 0070  
                                  i1l9040 259E                                    i1l9016 1931  
                                  i1l5690 1A90                                    i1l5682 1A72  
                                  i1l9034 259A                                    i1l9026 1937  
                                  i1l9028 2594                                    i1l9046 25A1  
                                  i1l6760 2FF2                                    i1l8512 2F87  
                                  i1l6770 2FBF                                    i1l8506 2F83  
                                  i1l8530 2F97                                    i1l8524 2F8F  
                                  i1l8542 2F38                                    i1l8518 2F8B  
                                  i1l8536 2F9B                                    i1l6938 22EB  
                                  i1l8546 2F3A                                    i1l6794 2FCE  
                                  i1l9364 23A7                                    i1l9356 2397  
                                  i1l8934 2032                                    i1l8942 2FF9  
                                  i1l8950 2F93                   TMR4_WriteTimer@timerVal 0070  
                                  i1l8960 2442                                    i1l8970 2448  
                                  i1l8964 2445                                    i1l8956 243B  
                                  i1l8980 1BEC                                    i1l8972 1BE3  
                                  i1l8990 1BF2                                    i1l8984 1BEF  
                                  i1l8976 1BE9                                    i1l8998 1C2B  
                                  _LEDsOn 23F8             ??i1_do_I2C_SEND_RESTART_WRITE 0070  
                                  u541_25 23E1                                    u471_24 252A  
                                  u471_25 2528                                    u464_24 1A81  
                                  u464_25 1A7F                                    u466_25 1A99  
                                  _OSCFRQ 091F                    ??_do_I2C_SEND_ADR_READ 0032  
                         drv_write_DC@val 00B5                                    _TX1REG 019A  
                    __size_of_getPosition 003F                                    _WDTCON 0097  
                                  _TX1STA 019E                                 ??_i2c_ISR 0036  
             __size_of_LED_test_openshort 007C                 __end_of_setHeaterPostTime 220D  
                         _TMR4_StartTimer 2F63                   __end_of_drv_write_wvfrm 2297  
                   ?i1_i2c1_driver_isNACK 0070                            __CFG_PWRTE$OFF 0000  
           LED_test_openshort@topOrBottom 00B7                     _i2c1_driver_getRXData 2F72  
                     LED_getData@readData 00C0                   __size_of_LED_readConfig 0029  
                     _do_I2C_RX$intlevel0 1A25                     __size_ofi1_returnStop 0002  
             __end_of_do_I2C_DO_NACK_STOP 2072                         __end_ofi1_i2c_ISR 23B7  
                                  ___wmul 2302                                 ??___awdiv 003B  
   __end_of_i2c1_driver_clearBusCollision 2F48    __size_of_i2c1_driver_clearBusCollision 0003  
           _i2c1_driver_clearBusCollision 2F45                                 ??___ftadd 00B0  
                          __CFG_STVREN$ON 0000                                    _doMove 082F  
                               ??___ftneg 0049                                 ??___lldiv 0039  
                               ??___ftmul 00A0                                 ??___llmod 0047  
                               ??___fttol 00BB               i1send_2bytes_latchless_IK@j 0076  
         __size_of_do_I2C_DO_NACK_RESTART 0008                         startAbsMove@steps 0031  
                          ??_setH1OffTime 004C                          __end_of_drv_init 2000  
                        __end_of_drv_read 1A21                    __end_ofi1_do_I2C_RESET 2FF9  
                        __end_of_drv_sine 11E4                   ?_send_2length_2bytes_IK 003C  
                     _EUSART_Transmit_ISR 231E                            ??_LED_testComm 00CC  
                        ?_TMR0_Initialize 0070                   __end_of_TMR4_Initialize 21FA  
                        ___awdiv@quotient 003E                            ?_do_I2C_DO_ACK 0070  
                        __end_of_parseCmd 0768                                    _printf 0D94  
                                  _strchr 22B1                                    _strtok 1AB2  
                                  _strspn 2649                                 ??_execCmd 004E  
                   ___ftmul@f3_as_product 00A5                    i2c1_driver_setI2cISR@f 0031  
                   i2c_setAddress@address 0032      __end_of_TMR4_DefaultInterruptHandler 20D4  
   __size_of_TMR4_DefaultInterruptHandler 000A              _TMR4_DefaultInterruptHandler 20CA  
                   ??_send_last_2bytes_IK 0036               __end_of_i2c1_driver_sendACK 2FA7  
                          _PMD_Initialize 203A            __end_of_do_I2C_DO_ADDRESS_NACK 25E9  
                         _TMR4_WriteTimer 2FB5                            ??_drv_write_DC 00B9  
                               ??_isdigit 0031                           ?_WDT_Initialize 0070  
             __end_of_i2c1_driver_restart 2F6C                              ?_returnReset 0031  
                 timedActiveHeatOn@onTime 00B5             _do_I2C_DO_NACK_STOP$intlevel0 206E  
                   _i2c1_driver_setI2cISR 20C1               __end_of_i2c1_driver_startRX 2F72  
                                  round@f 00D0                        LEDsPwr@topOrBottom 0046  
                                  round@x 00CD         __size_ofi1_do_I2C_DO_ADDRESS_NACK 0024  
          __end_ofi1_do_I2C_SEND_ADR_READ 203A                   __end_of_TMR2_StartTimer 2F63  
TMR4_SetInterruptHandler@InterruptHandler 0031  TMR2_SetInterruptHandler@InterruptHandler 0031  
TMR0_SetInterruptHandler@InterruptHandler 0031                 ?i1_do_I2C_DO_ADDRESS_NACK 0070  
                     _calcDownstroke$2994 01DD             timedActiveHeatOn@topOrBorBoth 00B9  
                                  trunc@i 00C8                                    trunc@x 00C5  
                               ??_stricmp 0035                                 ??_strcspn 003A  
                               ??_toupper 0031                      ?_EUSART_Transmit_ISR 0070  
                         ?_i2c_setAddress 0070                         i1_do_I2C_TX_EMPTY 2594  
                    __size_of_EUSART_Read 0020                         _SYSTEM_Initialize 224E  
          __size_ofi1_send_last_2bytes_IK 0049                   __end_of__initialization 00DC  
                              ___altoft@c 0039             __end_ofi1_send_last_2bytes_IK 1AB2  
                         ??_i2c_setBuffer 0035            _do_I2C_SEND_ADR_READ$intlevel0 2142  
                        _do_I2C_SEND_STOP 205A                              i1_returnStop 2F38  
                              ___ftadd@f1 00AA                                ___ftadd@f2 00AD  
                         _getMotionStatus 2542                     i1_do_I2C_DO_NACK_STOP 2F97  
                      __size_of_do_I2C_RX 0048                        __size_of_do_I2C_TX 0059  
                      ?i1_do_I2C_TX_EMPTY 0070                        ?_SYSTEM_Initialize 0070  
                      __size_of_doAbsMove 02B8                          _moveVector_downs 00E0  
              __end_of_mssp1_IRQisEnabled 20F2                       _i2c_masterOperation 245F  
                __size_of_do_I2C_TX_EMPTY 002F                                ___ftneg@f1 0046  
                              ___awtoft@c 0040                                 ?i1_LEDsOn 0027  
                         ??i1_do_I2C_IDLE 0070                           ??i1_do_I2C_RCEN 0070  
                              ___ftmul@f1 0046                                ___ftmul@f2 0049  
              __end_of_mssp1_waitForEvent 2127                      __size_of_LED_getData 0087  
                              ___fttol@f1 00B7                               ?_i2c_poller 0070  
                          __pcstackCOMMON 0070                ??i1_do_I2C_DO_NACK_RESTART 0070  
                     _do_I2C_TX$intlevel0 1E20                       ??i1_do_I2C_TX_EMPTY 0070  
          __end_of_send_2length_2bytes_IK 227E                              __pidataBANK0 11E4  
                            __pidataBANK1 2FEC                              __pidataBANK2 0002  
                            __pidataBANK4 18F4                       ??_SYSTEM_Initialize 0033  
                              _absCommand 004E                                 ?_TMR0_ISR 0070  
                               ?_TMR2_ISR 0070                        __size_of_doRelMove 013A  
                               ?_TMR4_ISR 0070                   __end_of_TMR2_WriteTimer 2FB5  
                   i1_i2c1_driver_sendACK 2F7B                             __end_of_frexp 2716  
                   i1i2c1_driver_TXData@d 0070                           ?i1_do_I2C_RESET 0070  
                           __end_of_putch 2FEC                             __end_of_round 1ED0  
                           __end_of_trunc 1D71                          ?_TMR2_Initialize 0070  
                   i1_i2c1_driver_restart 2F4B         __size_ofi1_send_2length_2bytes_IK 0018  
                  __end_of_PMD_Initialize 2042                          ?_setHeaterToggle 00B5  
                    __size_of_setH2OnTime 004E                 ?i1_send_2length_2bytes_IK 0020  
                      __size_of_getActive 004D                              ?i1_do_I2C_RX 0070  
                            ?i1_do_I2C_TX 0070                     i1_i2c1_driver_startRX 2F51  
                        ??i1_mssp1_setIRQ 0070                      ?_i2c_masterOperation 0070  
            ??i1_do_I2C_SEND_RESTART_READ 0070                        __size_of_commCheck 00C7  
                __end_of_setHeaterPreTime 21A5                              LED_getData@j 00C4  
           ?_TMR4_DefaultInterruptHandler 0070                __size_of_timedActiveHeatOn 00A8  
                         i1_do_I2C_DO_ACK 2F93               __end_of_TMR0_Load8bitPeriod 2FC9  
               __end_ofi1_do_I2C_TX_EMPTY 25BE                          ?_TMR0_StartTimer 0070  
                  _do_I2C_DO_NACK_RESTART 2072                    ??i1_i2c1_driver_TXData 0070  
                          _do_I2C_TX$1204 0034                                   ??_frexp 0035  
                 __end_of_TMR4_StartTimer 2F66                 __end_of_SYSTEM_Initialize 2266  
                   ??_EUSART_Transmit_ISR 0070                                   ??_putch 0033  
                                 ??_round 004D                                   ??_trunc 004C  
                          _mssp1_clearIRQ 2F78                                __pbssBANK0 004E  
                              __pbssBANK1 00D8                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                              __pbssBANK5 02A0                   __size_of_calcHeaterPins 0079  
                     _TMR0_Write8bitTimer 2FAB                ??_send_2bytes_latchless_IK 0033  
                    __end_of_EUSART_Write 24CC                                   ?_LEDsOn 0044  
                          _moveVector_ups 00E4                   _TMR2_LoadPeriodRegister 2FC9  
                               ?_i2c_open 0070                   drv_write_DC@duration_ms 00B7  
                              _activeMask 00DC                  ??i1_i2c1_driver_sendNACK 0070  
                         drv2665@drv_sine 1000                        __size_of_drv_reset 000A  
                  ??i1_i2c1_driver_isNACK 0070                __size_of_setHeaterPostTime 0013  
                      __size_of_drv_write 0024               __size_of_EUSART_Receive_ISR 001C  
                   _TMR4_InterruptHandler 01E6                        __size_of_setLEDPwr 001E  
                  ?_i2c1_driver_getRXData 0070                  ??i1_i2c1_driver_resetBus 0070  
                        ?_drv_write_wvfrm 0070                              drv_read@buff 004C  
                              ??i1_LEDsOn 002D                     _do_I2C_IDLE$intlevel0 20AA  
                          _SSP1DATPPSbits 0E21              __size_of_i2c_busCollisionISR 0003  
                              __pmaintext 12BE                                doAbsMove@i 00C5  
                           ??_do_I2C_IDLE 0031                        __size_of_setActive 0076  
                           ??_do_I2C_RCEN 0031          __end_of_TMR0_SetInterruptHandler 2094  
                 __size_of_TMR0_StopTimer 0003            __size_of_setLEDBrightnessRange 001E  
                                 ?___wmul 0031             __end_of_setLEDBrightnessRange 235A  
                              ??_TMR0_ISR 007C                           __CFG_PPS1WAY$ON 0000  
                              _cmd_struct 01B4                                ??_TMR2_ISR 0071  
                                 ?_doMove 00BC                                ??_TMR4_ISR 0071  
                         ??_do_I2C_DO_ACK 0031                                __pintentry 0004  
                 __end_of_TMR4_WriteTimer 2FBA                         startRelMove@steps 0031  
                   setHeaterToggle@topOrB 00B7                      ?_TMR0_Write8bitTimer 0070  
                               ?___altoft 0039                          ?_TMR4_Initialize 0070  
                     i2c_setBuffer@buffer 0031                                 ?___awtoft 0040  
                               ?___ftpack 0031                            _SSP1CLKPPSbits 0E20  
                                 ?_printf 00A0                           ?_PMD_Initialize 0070  
                                 ?_strchr 0031            ?_i2c1_driver_clearBusCollision 0070  
                                 ?_strtok 003F                                   ?_strspn 0038  
                   ??_i2c_masterOperation 0037                         ?_i2c1_driver_open 0070  
                       __end_of_do_I2C_RX 1A69                         __end_of_do_I2C_TX 1E75  
                       ?_i2c1_driver_stop 0070                             _eusartRxCount 0056  
                       __end_of_doAbsMove 0398                  ?i1_do_I2C_SEND_ADR_WRITE 0070  
                         calcDownstroke@i 01E0                                   _SP1BRGH 019C  
                                 _SP1BRGL 019B                    ?_i2c1_driver_setI2cISR 0031  
                                 _LEDsPwr 1F2F                        ??_i2c1_driver_open 0031  
                      ??_i2c1_driver_stop 0031                                   _OSCCON1 0919  
                                 _OSCCON3 091B                             ?_mssp1_setIRQ 0070  
                         _main_initialize 0ADB                                   _NVMADRH 0892  
                                 _NVMADRL 0891                                   _NVMDATH 0894  
                                 _OSCTUNE 091E                                   _NVMDATL 0893  
                                 _NVMCON2 0896                                   _SSP1ADD 0212  
                                 _SSP1BUF 0211                    __end_of_mssp1_clearIRQ 2F7B  
                                 _SSP1MSK 0213                   __end_of_getMotionStatus 256B  
                     startRelMove@verbose 0033                   __size_of_TMR2_StopTimer 0003  
                     __size_of_i2c_poller 000B                              setH2OnTime@t 00C5  
                 __size_of_calcDownstroke 00AC                          ?_TMR2_StartTimer 0070  
                 ??_do_I2C_SEND_ADR_WRITE 0032       _do_I2C_SEND_RESTART_WRITE$intlevel0 204E  
                       __end_of_doRelMove 1000               ??_do_I2C_SEND_RESTART_WRITE 0031  
                    __size_of_setMoveMask 0073                      __end_of_setH1OffTime 1C7F  
                  ?i1_do_I2C_DO_NACK_STOP 0070                        _i2c1_driver_TXData 2FE0  
                    __end_of_LED_testComm 1505                                ??_i2c_open 0033  
                               ?_drv_init 01E2                                 ?_drv_read 00B5  
                         __size_of_LEDsOn 0021                        _i2c1_driver_i2cISR 0168  
             ?i1_send_2bytes_latchless_IK 0070         LED_setBrightnessRange@topOrBottom 0046  
                       __end_of_getActive 1B96                                   _i2c_ISR 24CC  
                               ?_parseCmd 0045                         __end_of_commCheck 0ADB  
                    __end_of_drv_write_DC 2784                     _returnReset$intlevel0 2FDE  
                   _do_I2C_RCEN$intlevel0 20E2                        _i2c1_driver_isNACK 2189  
                     ?_i2c1_driver_TXData 0070                              drv_write@reg 004B  
              ??_TMR2_SetInterruptHandler 0033                            _LED_readConfig 256B  
        _do_I2C_DO_ADDRESS_NACK$intlevel0 25C2                        __end_of_TMR0_RANGE 3038  
                      __end_of_TMR2_RANGE 3035                    ?i1_i2c1_driver_sendACK 0070  
                              doRelMove@j 00D3                   __size_of_TMR4_StopTimer 0003  
                  __size_ofi1_returnReset 0002                                   ___awdiv 1CCD  
                                 ___ftadd 0C90                                   ___ftneg 20AF  
                                 ___lldiv 1D71                 __size_ofi1_mssp1_clearIRQ 0003  
                         __size_of___wmul 001C                                   ___ftmul 0BA7  
                                 ___llmod 1954                                   ___fttol 1779  
                   ??_TMR0_Write8bitTimer 0070                           __size_of_doMove 0091  
                  ?i1_i2c1_driver_restart 0070                          ?_TMR2_WriteTimer 0070  
                       ??_do_I2C_TX_EMPTY 0031                                ??___altoft 003D  
                     ?_i2c1_driver_isNACK 0070                                   _cmdRead 0162  
                  ?i1_i2c1_driver_startRX 0070                                ??___awtoft 0043  
                              ??___ftpack 0036                   __end_ofi1_do_I2C_DO_ACK 2F97  
                                 __ptext1 0597                                   __ptext2 1AB2  
                                 __ptext3 2649                                   __ptext4 2619  
                                 __ptext5 22B1                                   __ptext6 26AC  
                                 __ptext7 21B4                                   __ptext8 124D  
                                 __ptext9 21A5               __size_ofi1_i2c1_driver_stop 0003  
                     __end_of_do_I2C_IDLE 20AF                           __size_of_printf 0132  
                     __end_of_do_I2C_RCEN 20E8                         __end_of_drv_reset 20FC  
                                 _execCmd 0398                           __size_of_strchr 001A  
                         __size_of_strtok 004B                           __size_of_strspn 0030  
                       __end_of_drv_write 24A7                                   _dpowers 2800  
                ??_LED_setBrightnessRange 0048                     _OSCILLATOR_Initialize 20D4  
                                 _readIdx 0052                                 _T2CONbits 001F  
                                 doMove@t 00BF                                   _isdigit 21A5  
                          setActive@onOff 00B7                         __end_of_setLEDPwr 2378  
             __end_of_do_I2C_SEND_RESTART 205A                            ??_mssp1_setIRQ 0031  
                               _T4CONbits 0417                      ??_i2c1_driver_TXData 0031  
                ??_PIN_MANAGER_Initialize 0031         __size_of_TMR4_SetInterruptHandler 0009  
               ?_TMR4_SetInterruptHandler 0031                    i2c_masterOperation@ret 0039  
                      calcUpstroke@maxVal 00D3                        i1_do_I2C_SEND_STOP 2F8F  
                 __end_ofdrv2665@drv_sine 10F2                         __end_of_setActive 148E  
                         ?_mssp1_clearIRQ 0070                _do_I2C_SEND_STOP$intlevel0 205E  
              __size_ofi1_do_I2C_TX_EMPTY 002A                 ??_TMR2_LoadPeriodRegister 0031  
                _do_I2C_SEND_RESTART_READ 2042                __size_of_SYSTEM_Initialize 0018  
                              _setDrvGain 1997                         setActive@probeNum 00B5  
                                 clrloop0 214B                          ?_TMR4_StartTimer 0070  
                              _setDrvPeak 2378                                   _stricmp 26AC  
                                 _strcspn 2619                                   _toupper 21B4  
                    __size_of_returnReset 0006                      end_of_initialization 00DC  
                    drv_init@idle_timeout 01E4                      ??_i2c1_driver_isNACK 0031  
          ??_TMR4_DefaultInterruptHandler 0071                                _second_top 015A  
                              getActive@i 00B7               TMR0_Write8bitTimer@timerVal 0070  
                              ??_drv_init 00D5                                ??_drv_read 0049  
                            setLEDPwr@pwr 00B5                                   init_ram 2156  
            __end_of_i2c1_driver_sendNACK 2FAB                       ?i1_do_I2C_SEND_STOP 0070  
                                 initloop 2157           __size_ofi1_i2c1_driver_sendNACK 0004  
                              ??_parseCmd 0046                    __end_of_LED_readConfig 2594  
                       _EUSART_Initialize 2297              __end_of_i2c1_driver_resetBus 2F38  
                         ___lldiv@divisor 0031           __size_ofi1_i2c1_driver_resetBus 0001  
                         ___lldiv@counter 003E                        ?_EUSART_Initialize 0070  
                                 printf@c 00B4                                   printf@f 00A0  
                              _motionType 0055                 _do_I2C_SEND_RESTART_WRITE 204A  
                       LEDsOn@topOrBottom 0048                          ?_TMR4_WriteTimer 0070  
                   i1_do_I2C_SEND_RESTART 2F8B          __end_ofi1_do_I2C_DO_ADDRESS_NACK 245F  
         __end_ofi1_do_I2C_SEND_ADR_WRITE 3000                       ??_EUSART_Initialize 0031  
                        ??_WDT_Initialize 0031                                 i1_i2c_ISR 2397  
                    ??i1_do_I2C_SEND_STOP 0070                                   strspn@i 003C  
                              _returnStop 2FD4                   __end_of_main_initialize 0BA7  
                _TMR0_SetInterruptHandler 208B                                 _PORTCbits 000E  
                __end_of_do_I2C_SEND_STOP 2062        __end_ofi1_do_I2C_SEND_RESTART_READ 2F87  
              i1_do_I2C_SEND_RESTART_READ 2F83                      __size_ofi1_do_I2C_RX 0040  
                    __size_ofi1_do_I2C_TX 004E                          ??_i2c_setAddress 0031  
                           ??_getMoveMask 0049                     __size_of_EUSART_Write 0025  
                           i1_returnReset 2F3A                               returnStop@p 0031  
                        ?_getMotionStatus 00B5                             ??_getPosition 0049  
                     LED_test_openshort@j 00BA                          __CFG_FEXTOSC$OFF 0000  
                          _calcHeaterPins 1505          __end_of_send_2bytes_latchless_IK 2619  
              __end_of_LED_test_openshort 1675                   TMR2_WriteTimer@timerVal 0070  
                               _RXPPSbits 0E24                 __end_of_EUSART_Initialize 22B1  
          send_last_2bytes_IK@latch_start 0033               LED_setBrightnessRange@range 0044  
                          __end_of_LEDsOn 2419          __end_ofi1_send_2length_2bytes_IK 224E  
                         ?_LED_readConfig 00C6             __size_of_do_I2C_SEND_ADR_READ 000C  
                        ??i1_do_I2C_RESET 0070                               ___ftmul@exp 00A4  
                            ??_i2c_poller 0037                            _TMR0_StopTimer 2F3C  
                             _do_I2C_IDLE 20A6                               _do_I2C_RCEN 20DE  
                       __size_ofi1_LEDsOn 0021                   LED_testComm@topOrBottom 00CA  
    __end_of_TMR2_DefaultInterruptHandler 208B     __size_of_TMR2_DefaultInterruptHandler 0009  
            _TMR2_DefaultInterruptHandler 2082               __end_of_send_last_2bytes_IK 1E1C  
                           ?_startAbsMove 0031                            __end_of___wmul 231E  
                          __end_of_doMove 08C0                              _EUSART_Write 24A7  
                       __size_of_TMR0_ISR 000D                                ?i1_i2c_ISR 0070  
                       __size_of_TMR2_ISR 000D                         __size_of_TMR4_ISR 000D  
                      _mssp1_IRQisEnabled 20E8                    i1_i2c1_driver_sendNACK 2F7F  
                        ?i1_do_I2C_DO_ACK 0070                    ?_OSCILLATOR_Initialize 0070  
            __size_of_do_I2C_DO_NACK_STOP 0008          TMR2_LoadPeriodRegister@periodVal 0031  
                          __end_of_printf 0EC6                        _mssp1_waitForEvent 211C  
     __size_ofi1_send_2bytes_latchless_IK 0029                    i1_i2c1_driver_resetBus 2F36  
                          __end_of_strchr 22CB           __size_of_LED_setBrightnessRange 0098  
                 ?_do_I2C_DO_NACK_RESTART 0070                            __end_of_strtok 1AFD  
                          __end_of_strspn 2679                         setHeaterPreTime@t 00B5  
                     start_initialization 005C                             ?_startRelMove 0031  
                       ?_setHeaterPreTime 00B5                       _i2c_busCollisionISR 2F48  
                   __size_of_setH1OffTime 004E                  __size_of_TMR0_Initialize 0014  
         __size_of_PIN_MANAGER_Initialize 0033                       ?_mssp1_IRQisEnabled 0070  
                          ?i1_returnReset 0070                  ?i1_i2c1_driver_getRXData 0070  
                  __end_of_calcHeaterPins 157E                     __size_of_LED_testComm 0077  
                          _TMR2_StopTimer 2F3F                             ??_EUSART_Read 0031  
                          _calcDownstroke 0968       __end_ofi1_do_I2C_SEND_RESTART_WRITE 2F8B  
             i1_do_I2C_SEND_RESTART_WRITE 2F87                              _first_bottom 0156  
                      ??_setHeaterPreTime 0049                               ?_setDrvGain 00B5  
                             ?_setDrvPeak 00D5                       ?_mssp1_waitForEvent 0070  
                           _second_bottom 014E                               putch@txData 0033  
                      __end_of_i2c_poller 2132              __size_of_i2c1_driver_sendACK 0004  
                         i2c_open@address 0035                       __end_of_getMoveMask 1BE3  
                 i2c_setBuffer@bufferSize 0033                                  ??_LEDsOn 004A  
                 ??_i2c1_driver_getRXData 0031                     __size_of_drv_write_DC 0037  
                              frexp@value 0031              __size_of_i2c1_driver_restart 0003  
            __size_of_i2c1_driver_startRX 0003                           ___llmod@divisor 003F  
                           ??_LED_getData 00B9                           ___llmod@counter 0048  
                   __end_of_i2c_setBuffer 2236                       __end_of_getPosition 2800  
                       __size_of_i2c_open 004C                    __end_of_TMR0_StopTimer 2F3F  
                     _heater_post_time_ms 016A                     i1_send_last_2bytes_IK 1A69  
     LED_setBrightnessRange@LED_configReg 00A0                      ?_i2c_busCollisionISR 0070  
                        __CFG_LPBOREN$OFF 0000                      __end_of_mssp1_setIRQ 2F78  
                            _drv_peak_val 00EE                      ??_mssp1_IRQisEnabled 0031  
                        i1_do_I2C_TX$1204 0073                                LEDsPwr@pwr 0044  
                          _TMR4_StopTimer 2F42                          ??_PMD_Initialize 0031  
                   __end_ofi1_do_I2C_IDLE 2FC4                     __end_ofi1_do_I2C_RCEN 2FD4  
                                ??___wmul 0035                    ?i1_do_I2C_SEND_RESTART 0070  
                    ??_mssp1_waitForEvent 0031                             ??_setH2OnTime 004C  
                                ??_doMove 00BE                          i1_mssp1_clearIRQ 2F5A  
                          ??_startAbsMove 0033                             ?_do_I2C_RESET 0070  
                             __pdataBANK0 005A                               __pdataBANK1 00EA  
                             __pdataBANK2 016A                               __pdataBANK4 0248  
                    calcDownstroke@maxVal 00D3                 _do_I2C_TX_EMPTY$intlevel0 0804  
                            _setH1OffTime 1C31             ?_TMR2_DefaultInterruptHandler 0070  
                             ?_returnStop 0031                         _setDrvPiezoOnTime 1ED0  
                            _LED_testComm 148E                                  ??_printf 00A6  
                 ??_i2c1_driver_setI2cISR 0033                          ?_main_initialize 0070  
                                ??_strchr 0035            i1send_2bytes_latchless_IK@data 0070  
          __end_of_do_I2C_DO_NACK_RESTART 207A                                  ??_strtok 0041  
                                ??_strspn 003A                         __size_of___altoft 003D  
                    _i2c1_driver_sendNACK 2FA7                         __size_of___awtoft 0022  
                       __size_of___ftpack 0065                        ?_setDrvPiezoOnTime 00C5  
                             __pbssBIGRAM 2790               __end_of_EUSART_Transmit_ISR 233C  
                          ??_startRelMove 0035                  i1_do_I2C_DO_ADDRESS_NACK 243B  
                  __end_of_TMR2_StopTimer 2F42                            setDrvGain@gain 00B5  
                             __pbssCOMMON 007D                    __end_of_calcDownstroke 0A14  
                                ?_LEDsPwr 0044                                 ___latbits 0003  
                    _i2c1_driver_resetBus 2F37                              _drv_write_DC 274D  
                           __pcstackBANK0 0020                             __pcstackBANK1 00A0  
                           __pcstackBANK2 016C                             __pcstackBANK3 01DD  
                           __pcstackBANK5 02C8         __size_ofi1_do_I2C_DO_NACK_RESTART 0004  
                __size_of_TMR2_Initialize 0012                                 _do_I2C_RX 1A21  
               ?i1_do_I2C_DO_NACK_RESTART 0070                                 _do_I2C_TX 1E1C  
                         ?_calcHeaterPins 0070                   ??i1_do_I2C_DO_NACK_STOP 0070  
                               _doAbsMove 00E0                  __size_of_setHeaterToggle 007D  
                            _isdigit$2365 0031                       ??_setDrvPiezoOnTime 004C  
                           ?_zeroPosition 00B5                             LEDsOn@LEDpins 0044  
          __size_of_do_I2C_SEND_ADR_WRITE 000B             __size_ofi1_i2c1_driver_TXData 0005  
              __end_of_EUSART_Receive_ISR 2302             __end_of_do_I2C_SEND_ADR_WRITE 211C  
              __size_of_EUSART_Initialize 001A                 __size_of_i2c1_driver_open 000A  
                              sin@coeff_a 290E                                sin@coeff_b 2947  
                            doMove@t_1662 00C1                 __size_of_i2c1_driver_stop 0003  
                                ?_i2c_ISR 0070           _do_I2C_SEND_ADR_WRITE$intlevel0 2115  
        __size_ofi1_do_I2C_SEND_ADR_WRITE 0007                       __end_of_EUSART_Read 23D7  
            __size_of_TMR0_Load8bitPeriod 0005                                 _doRelMove 0EC6  
                         _do_I2C_TX_EMPTY 0800                         parseCmd@cmdString 0047  
                   _TMR0_InterruptHandler 01EA                                 __pnvBANK0 005E  
                               __pnvBANK3 01E6                    _LED_setBrightnessRange 0768  
                 ??i1_i2c1_driver_sendACK 0070                  __size_of_TMR0_StartTimer 0003  
                       __size_of_drv_init 006D                         __size_of_drv_read 0047  
                         ?_TMR0_StopTimer 0070                    __end_of_TMR4_StopTimer 2F45  
                   ??_i2c_busCollisionISR 0070             __size_ofi1_i2c1_driver_isNACK 000C  
                  _PIN_MANAGER_Initialize 2679                   ??i1_i2c1_driver_restart 0070  
                               _getActive 1B49                         __size_of_parseCmd 01D1  
                            setDrvPeak@pk 00D5                       __end_of_drv_address 3049  
                    EUSART_Read@readValue 0032                   ??i1_i2c1_driver_startRX 0070  
        __end_of_TMR4_SetInterruptHandler 20A6                            ??_do_I2C_RESET 0031  
                i1_send_2length_2bytes_IK 2236                       __end_of_LED_getData 1779  
                                ?___awdiv 0037                                 __ptext100 2F72  
                               __ptext101 2FA7                                 __ptext110 1CCD  
                               __ptext102 2F37                                 __ptext111 1505  
                               __ptext103 2F6F                                 __ptext120 2F9F  
                               __ptext112 2F63                                 __ptext104 2FDA  
                               __ptext121 21E7                                 __ptext113 2F60  
                               __ptext105 2FD4                                 __ptext130 2297  
                               __ptext122 209D                                 __ptext114 2F5D  
                               __ptext106 2F6C                                 __ptext131 23B7  
                               __ptext123 21D5                                 __ptext115 23F8  
                               __ptext107 2F69                                 __ptext140 2F93  
                               __ptext124 2094                                 __ptext116 2266  
                               __ptext108 2FA3                                 __ptext141 2FCE  
                               __ptext133 2397                                 __ptext125 220D  
                               __ptext117 1DC4                                 __ptext109 2F66  
                                ?___ftadd 00AA                                 __ptext150 2594  
                               __ptext142 2FF9                                 __ptext134 2F5A  
                               __ptext126 208B                                 __ptext118 25E9  
                               __ptext151 2F57                                 __ptext143 2032  
                               __ptext135 1914                                 __ptext127 203A  
                               __ptext119 224E                                 __ptext160 2F4E  
                               __ptext152 2132                                 __ptext144 2F8F  
                               __ptext136 1BE3                                 __ptext128 2679  
                               __ptext161 2F4B                                 __ptext153 2FBA  
                               __ptext145 2F8B                                 __ptext137 243B  
                               __ptext129 20D4                                 __ptext170 2082  
                               __ptext162 2F7B                                 __ptext154 2F54  
                               __ptext146 2F87                                 __ptext138 2F9B  
                               __ptext171 2FB0                                 __ptext163 2F48  
                               __ptext155 2F7F                                 __ptext147 2F83  
                               __ptext139 2F97                                 __ptext180 2F3C  
                               __ptext172 2F3F                                 __ptext164 2F45  
                               __ptext156 2F36                                 __ptext148 2FBF  
                               __ptext181 231E                                 __ptext173 2162  
                               __ptext165 217C                                 __ptext157 2F51  
                               __ptext149 2FF2                                 __ptext182 22E6  
                               __ptext174 2716                                 __ptext166 20CA  
                               __ptext158 2F3A                                 __ptext175 23D7  
                               __ptext167 2FB5                                 __ptext159 2F38  
                               __ptext176 2236                                 __ptext168 2F42  
                               __ptext177 1A69                                 __ptext169 216F  
                               __ptext178 2519                                 __ptext179 2FAB  
             __end_of_i2c_masterOperation 2483                                  ?___ftneg 0046  
                                ?___lldiv 0031                                  ?___ftmul 0046  
                                ?___llmod 003F                                  ?___fttol 00B7  
                               _commCheck 0A14                 __end_of_setDrvPiezoOnTime 1F2F  
                ??_do_I2C_DO_ADDRESS_NACK 0031                         _calcUpstroke$2993 01DD  
             _i2c1_driver_busCollisionISR 00E8                              _eusartRxHead 0058  
                     __size_of_setDrvGain 0043         __size_of_send_2bytes_latchless_IK 0030  
                            _eusartTxHead 007D                       __size_of_setDrvPeak 001F  
                            _eusartRxTail 0057                 ?_send_2bytes_latchless_IK 0031  
                __size_of_drv_write_wvfrm 0019                              _eusartTxTail 0059  
                         doAbsMove@i_1677 00C9                           doAbsMove@i_1679 00C7  
                   __end_of_do_I2C_DO_ACK 206A                     _setLEDBrightnessRange 233C  
                             ??i1_i2c_ISR 0075              ??_INTERRUPT_InterruptManager 007C  
                               __pswtext1 2000                ??_do_I2C_SEND_RESTART_READ 0031  
                   ?_i2c1_driver_sendNACK 0070           __end_ofi1_i2c1_driver_getRXData 2F57  
                 _eusartTxBufferRemaining 005E                                  ?_execCmd 0070  
                ??i1_do_I2C_SEND_ADR_READ 0071                          ??_mssp1_clearIRQ 0031  
                                _BAUD1CON 019F                       __end_of_setH2OnTime 1CCD  
                         ??i1_returnReset 0071                                  ?_isdigit 0070  
                  LED_testComm@readResult 00CE                           ?_TMR2_StopTimer 0070  
                   ?_i2c1_driver_resetBus 0070        __size_of_do_I2C_SEND_RESTART_WRITE 0008  
                         ?_calcDownstroke 00D3                                 _first_top 0152  
                             _getMoveMask 1B96                   send_last_2bytes_IK@data 0031  
                           ??_setMoveMask 0049                     __end_of_drv_fifo_sine 18F4  
                               _drv_reset 20F2                         parseCmd@paramIter 0048  
                              ?_do_I2C_RX 0070                                ?_do_I2C_TX 0070  
                __size_of_TMR4_Initialize 0013                                 _drv_write 2483  
                              ?_doAbsMove 0070                         _i2c1_driver_start 2F66  
                          ??_zeroPosition 00B7               send_2length_2bytes_IK@data1 003C  
             send_2length_2bytes_IK@data2 003E                                 _setLEDPwr 235A  
                          __size_of_frexp 0036            send_last_2bytes_IK@topOrBottom 0034  
                                ?_stricmp 0033                                  ?_strcspn 0038  
                                ?_toupper 0070                             ?_calcUpstroke 00D3  
                             _getPosition 27C1                   __size_ofi1_mssp1_setIRQ 0003  
                          __size_of_putch 0006                            __size_of_round 005B  
                          __size_of_trunc 0052                         _i2c_ISR$intlevel0 24D0  
                      ?_i2c1_driver_start 0070                            _eusartRxBuffer 01A0  
                           zeroPosition@i 0049                                 _setActive 1418  
                       ??_TMR0_Initialize 0033                            _eusartTxBuffer 01A8  
                          ___wmul@product 0035                                  _LATAbits 010C  
                                _LATBbits 010D                                  _LATCbits 010E  
                  ?i1_send_last_2bytes_IK 0070                                ?_doRelMove 0070  
                ??_send_2length_2bytes_IK 0043                       __size_of_returnStop 0006  
               i1send_last_2bytes_IK@data 0070                                 clear_ram0 214A  
                                _PIE0bits 0090                                  _PIE1bits 0091  
                                _PIE2bits 0092                  __size_of_TMR2_StartTimer 0003  
             __end_of_TMR0_Write8bitTimer 2FB0                           ?_TMR4_StopTimer 0070  
                     ??_i2c1_driver_start 0031                                  i1_LEDsOn 23D7  
                           setH1OffTime@t 00C5       __size_of_INTERRUPT_InterruptManager 0056  
                                _LEDpower 3044                ??_TMR0_SetInterruptHandler 0033  
                                _PIR0bits 0010                                  _PIR1bits 0011  
                                _PIR2bits 0012                                ?_getActive 00B5  
                  _currentPositions_steps 2790                        _heater_pre_time_ms 00EC  
                LED_testComm@oldConfigReg 00D0                                  _SSP1CON1 0215  
                                _SSP1CON2 0216                                  _TMR0_ISR 2162  
                                _TMR2_ISR 216F                                  _TMR4_ISR 217C  
                              ?_commCheck 00D4                                  _SSP1STAT 0214  
              __end_ofi1_i2c1_driver_stop 2F51                         ___wmul@multiplier 0031  
                       ?_do_I2C_SEND_STOP 0070               ?i1_do_I2C_SEND_RESTART_READ 0070  
                              printf@flag 00B2                                printf@prec 00AC  
          ??_TMR2_DefaultInterruptHandler 0071         __size_of_TMR2_SetInterruptHandler 0009  
                __size_of_TMR2_WriteTimer 0005                 __end_of_i2c1_driver_start 2F69  
                           ??_returnReset 0032                        ??_do_I2C_SEND_STOP 0031  
               ?_TMR2_SetInterruptHandler 0031               __size_of_i2c1_driver_TXData 0006  
                              ?_drv_reset 0070                         _drv_fifo_upstroke 0220  
                        __size_of_LEDsPwr 0064         __end_of_do_I2C_SEND_RESTART_WRITE 2052  
                              ?_drv_write 0049                            ??_calcUpstroke 004D  
                             _EUSART_Read 23B7                   __end_of_do_I2C_TX_EMPTY 082F  
                       doAbsMove@allThere 00C3         send_2length_2bytes_IK@latch_start 0040  
     i1send_2length_2bytes_IK@latch_start 0024                                ?_setLEDPwr 00B5  
                        ??_LED_readConfig 0049                      __end_of_startAbsMove 21D5  
            __size_of_do_I2C_SEND_RESTART 0008               __size_of_i2c1_driver_isNACK 000D  
                  LED_getData@topOrBottom 00B5                   _do_I2C_DO_ACK$intlevel0 2066  
                                _i2c_open 1AFD                                ?_setActive 00B5  
                     __end_of_setMoveMask 13A3                             ?i1_returnStop 0070  
                   __size_of_mssp1_setIRQ 0003                         ??_TMR2_Initialize 0033  
                             _drv_address 3048                         ??_setHeaterToggle 00B9  
                     _do_I2C_DO_NACK_STOP 206A                                 frexp@eptr 0034  
                             _LED_getData 16F2                          __size_of_i2c_ISR 0026  
                         i1LEDsOn@LEDpins 0027                  __size_of_TMR4_StartTimer 0003  
                           drv_write@data 0049                             drv_write_DC@i 00BA  
                           drv_write@buff 004C                      __end_of_startRelMove 22E6  
                            ?_do_I2C_IDLE 0070                              ?_do_I2C_RCEN 0070  
                      _LED_test_openshort 15F9                   ?i1_i2c1_driver_sendNACK 0070  
                 ??_OSCILLATOR_Initialize 0031                __size_of_setDrvPiezoOnTime 005F  
                             _setH2OnTime 1C7F                    ?_setLEDBrightnessRange 00B5  
                       ??_TMR0_StartTimer 0031                       _i2c1_driver_sendACK 2FA3  
                        __size_of___awdiv 0052                          __size_of___ftadd 0104  
                        __size_of___ftneg 0009           __size_of_do_I2C_DO_ADDRESS_NACK 002B  
        i1send_last_2bytes_IK@latch_start 0072                          __size_of___lldiv 0053  
                                ___altoft 2784                          __size_of___ftmul 00E9  
                     i2c1_driver_TXData@d 0031                          __size_of___llmod 0043  
                        __size_of___fttol 0087                    ??_i2c1_driver_sendNACK 0031  
                                ___awtoft 2419                   ?i1_i2c1_driver_resetBus 0070  
                                ___ftpack 11E8          ??_i2c1_driver_setBusCollisionISR 0033  
         ?_i2c1_driver_setBusCollisionISR 0031                             ??i1_do_I2C_RX 0070  
                           ??i1_do_I2C_TX 0071        _do_I2C_SEND_RESTART_READ$intlevel0 2046  
                     _i2c1_driver_restart 2F69                                 parseCmd@p 004A  
                               parseCmd@s 0045               __size_ofi1_do_I2C_SEND_STOP 0004  
                           LEDsPwr@pwrAll 00A0                  _TMR4_SetInterruptHandler 209D  
                    ?_do_I2C_DO_NACK_STOP 0070                       _i2c1_driver_startRX 2F6F  
                     ?_LED_test_openshort 00B5              __end_of_do_I2C_SEND_ADR_READ 214A  
                  ??_i2c1_driver_resetBus 0031           __size_ofi1_do_I2C_SEND_ADR_READ 0008  
                    _demoHeaterToggle_bot 01B0                          __size_of_execCmd 01FF  
                ?_TMR2_LoadPeriodRegister 0070                      _demoHeaterToggle_top 0142  
                              _T0CON0bits 0017                         ??_drv_write_wvfrm 003A  
                __size_of_TMR4_WriteTimer 0005                          __size_of_isdigit 000F  
                                _demoLong 005A                              _mssp1_setIRQ 2F75  
                             ??_do_I2C_RX 0031                               ??_do_I2C_TX 0032  
                             ??_doAbsMove 02C8                                  __ptext10 0ADB  
                                __ptext11 1F93                                  __ptext20 08C0  
                                __ptext12 207A                                  __ptext21 24F2  
                                __ptext13 1AFD                                  __ptext30 21FA  
                                __ptext22 22CB                                  __ptext14 20C1  
                                __ptext31 1C7F                                  __ptext23 21C4  
                                __ptext15 20B8                                  __ptext40 1E75  
                                __ptext32 1C31                                  __ptext24 1330  
                                __ptext16 20FC                                  __ptext41 1D1F  
                                __ptext33 2FC9                                  __ptext25 235A  
                                __ptext17 20F2                                  __ptext50 1997  
                                __ptext42 26E0                                  __ptext34 1ED0  
                                __ptext26 1F2F                                  __ptext18 0398  
                                __ptext51 1418                                  __ptext43 1779  
                                __ptext35 0BA7                                  __ptext27 233C  
                                __ptext19 13A3                                  __ptext60 256B  
                                __ptext52 27C1                                  __ptext44 2784  
                                __ptext36 2FC4                                  __ptext28 1675  
                                __ptext61 16F2                                  __ptext53 1B96  
                                __ptext45 20AF                                  __ptext37 2378  
                                __ptext29 2196                                  __ptext70 2FE6  
                                __ptext62 0EC6                                  __ptext54 1B49  
                                __ptext46 0C90                                  __ptext38 157E  
                                __ptext71 24A7                                  __ptext63 2542  
                                __ptext55 0A14                                  __ptext47 2302  
                                __ptext39 0968                                  __ptext80 2F78  
                                __ptext72 1954                                  __ptext64 00E0  
                                __ptext56 19DA                                  __ptext48 2419  
                                __ptext81 1A21                                  __ptext73 1D71  
                                __ptext65 082F                                  __ptext57 15F9  
                                __ptext49 11E8                                  __ptext90 205A  
                                __ptext82 1E1C                                  __ptext74 2221  
                                __ptext66 227E                                  __ptext58 148E  
                                __ptext91 2052                                  __ptext83 25BE  
                                __ptext75 245F                                  __ptext67 274D  
                                __ptext59 0768                                  __ptext92 204A  
                                __ptext84 2072                                  __ptext76 20E8  
                                __ptext68 2483                                  __ptext93 2042  
                                __ptext85 206A                                  __ptext77 2127  
                                __ptext69 0D94                                  __ptext94 20A6  
                                __ptext86 2062                                  __ptext78 211C  
                                __ptext95 2106                                  __ptext87 20DE  
                                __ptext79 24CC                                  __ptext96 0800  
                                __ptext88 2111                                  __ptext97 2F75  
                                __ptext89 213E                                  __ptext98 2189  
                                __ptext99 2FE0                              _SSP1CON1bits 0215  
                            _SSP1CON2bits 0216                              ??_setDrvGain 00B7  
                            ??_setDrvPeak 004E                  __end_ofi1_mssp1_clearIRQ 2F5D  
            send_2bytes_latchless_IK@data 0031                      ?_i2c1_driver_sendACK 0070  
                    __end_of_do_I2C_RESET 2111                       i1LEDsOn@topOrBottom 002B  
                        __size_of_stricmp 0034                          __size_of_strcspn 0030  
                        __size_of_toupper 0010                            ??i1_returnStop 0071  
                 i1_do_I2C_SEND_ADR_WRITE 2FF9                      ?_i2c1_driver_restart 0070  
                     __end_of_returnReset 2FE0                                  _drv_init 1F93  
                                _drv_read 19DA                                  _drv_sine 10F2  
                        _i2c1_driver_open 20FC                                trunc@expon 00CB  
                       ??_TMR4_Initialize 0033                          _i2c1_driver_stop 2F6C  
                           __size_of_atoi 0071                             __size_of_main 0072  
                    ?_i2c1_driver_startRX 0070                                  _errorOut 0164  
                    ??_LED_test_openshort 00B9                                  _readdata 01C9  
          __size_of_i2c1_driver_getRXData 0003                               ??_doRelMove 00C3  
                           __size_of_stop 0027             __end_of_i2c1_driver_getRXData 2F75  
                                _parseCmd 0597           __size_of_send_2length_2bytes_IK 0018  
    __end_of_TMR0_DefaultInterruptHandler 274D     __size_of_TMR0_DefaultInterruptHandler 0037  
            _TMR0_DefaultInterruptHandler 2716                  __size_of_getMotionStatus 0029  
               __size_of_setHeaterPreTime 000F                   ??i1_do_I2C_SEND_RESTART 0070  
        __size_ofi1_i2c1_driver_getRXData 0003                                  _moveMask 00D8  
                 i2c_masterOperation@read 0038                               ??_getActive 0049  
                              _RC1STAbits 019D      __size_ofi1_do_I2C_SEND_RESTART_WRITE 0004  
          __end_ofi1_i2c1_driver_sendNACK 2F83                                _RB5PPSbits 0E9D  
                        setMoveMask@onOff 00B7                                _RB6PPSbits 0E9E  
                                int$flags 007E                ??i1_do_I2C_DO_ADDRESS_NACK 0070  
                              _RB7PPSbits 0E9F                                  atoi@sign 003B  
                             ??_commCheck 00D6          __end_ofi1_do_I2C_DO_NACK_RESTART 2F9F  
                       _LED_configReg_bot 0146            __end_ofi1_i2c1_driver_resetBus 2F37  
                    __end_of_zeroPosition 1418                         _LED_configReg_top 014A  
                       ??_TMR2_StartTimer 0031        __end_of_INTERRUPT_InterruptManager 005A  
              _INTERRUPT_InterruptManager 0004                                 printf@val 00AE  
                            _SSP1STATbits 0214                        __end_of_setDrvGain 19DA  
        __end_of_do_I2C_SEND_RESTART_READ 204A                        __end_of_setDrvPeak 2397  
                            ??_returnStop 0032                                  execCmd@s 00D7  
                   ??_do_I2C_DO_NACK_STOP 0031                          ??_calcHeaterPins 0031  
                     _TMR0_Load8bitPeriod 2FC4                 mssp1_waitForEvent@timeout 0031  
          __size_of_i2c1_driver_setI2cISR 0009             __end_of_i2c1_driver_setI2cISR 20CA  
                              _INTCONbits 000B              __size_of_send_last_2bytes_IK 0058  
                             _NVMCON1bits 0895                __size_of_i2c1_driver_start 0003  
                             ??_drv_reset 00B5                               _setMoveMask 1330  
                     __end_ofi1_do_I2C_RX 1954                            __pstringtext10 290E  
                          __pstringtext11 2947                            __pstringtext20 28EE  
                          __pstringtext12 2828                       __end_ofi1_do_I2C_TX 1C31  
                          __pstringtext21 28FE                            __pstringtext13 2847  
                          __pstringtext30 298A                            __pstringtext22 291D  
                          __pstringtext14 2865                            __pstringtext31 2994  
                          __pstringtext23 292C                            __pstringtext15 2881  
                          __pstringtext40 29DE                            __pstringtext32 299D  
                          __pstringtext24 293A                            __pstringtext16 289B  
                          __pstringtext41 29E5                            __pstringtext33 29A6  
                          __pstringtext25 2953                            __pstringtext17 28B4  
                          __pstringtext50 3026                            __pstringtext42 3000  
                          __pstringtext34 29AE                            __pstringtext26 295F  
                          __pstringtext18 28CB                            __pstringtext51 302A  
                          __pstringtext43 3005                            __pstringtext35 29B6  
                          __pstringtext27 296A                            __pstringtext19 28DD  
                          __pstringtext52 302E                            __pstringtext44 300A  
                          __pstringtext36 29BE                            __pstringtext28 2975  
                          __pstringtext53 3038                            __pstringtext45 300F  
                          __pstringtext37 29C6                            __pstringtext29 2980  
                          __pstringtext54 303B                            __pstringtext46 3014  
                          __pstringtext38 29CE                            __pstringtext55 303E  
                          __pstringtext47 3019                            __pstringtext39 29D6  
                          __pstringtext56 3041                            __pstringtext48 301E  
                          __pstringtext57 3046                            __pstringtext49 3022  
                          __pstringtext58 0000                                  isdigit@c 0032  
                             ??_drv_write 004A                  __size_ofi1_do_I2C_DO_ACK 0004  
                             ??_setLEDPwr 004E                     ??_i2c1_driver_sendACK 0031  
                        ?_do_I2C_TX_EMPTY 0070                            i1_mssp1_setIRQ 2F57  
                 __size_of_WDT_Initialize 0004                    _do_I2C_DO_ADDRESS_NACK 25BE  
          __size_ofi1_do_I2C_DO_NACK_STOP 0004                                  intlevel1 0000  
           __end_ofi1_do_I2C_DO_NACK_STOP 2F9B                    _do_I2C_RESET$intlevel0 210A  
                        ??_TMR0_StopTimer 0070                     ??_i2c1_driver_restart 0031  
                       ??_TMR2_WriteTimer 0070                   ?_LED_setBrightnessRange 0044  
                             ??_setActive 00B9                                 strchr@chr 0033  
                   ??_i2c1_driver_startRX 0031                                 strchr@ptr 0031  
              ??i1_send_2length_2bytes_IK 007B                          ___lldiv@dividend 0035  
                 ?_PIN_MANAGER_Initialize 0070                   __size_of_i2c_setAddress 0008  
                    ?_TMR0_Load8bitPeriod 0070              ??i1_send_2bytes_latchless_IK 0072  
                  i1_do_I2C_SEND_ADR_READ 2032                         __CFG_CLKOUTEN$OFF 0000  
                               stricmp@s1 0038                                 stricmp@s2 0033  
                               strcspn@s1 003E                                 strcspn@s2 0038  
                      __end_of_returnStop 2FDA                              getMoveMask@i 00B7  
                     _drv_fifo_downstroke 02A0       __size_ofi1_do_I2C_SEND_RESTART_READ 0004  
          __size_ofi1_i2c1_driver_sendACK 0004             ?_TMR0_DefaultInterruptHandler 0070  
           __end_ofi1_i2c1_driver_sendACK 2F7F               __size_of_mssp1_IRQisEnabled 000A  
          __size_ofi1_i2c1_driver_restart 0003                                  printf@ap 00B3  
           __end_ofi1_i2c1_driver_restart 2F4E                        _EUSART_Receive_ISR 22E6  
             __size_of_mssp1_waitForEvent 000B                   drv_write_wvfrm@upOrDown 003A  
          __size_ofi1_i2c1_driver_startRX 0003                      __end_of_calcUpstroke 15F9  
            __end_ofi1_i2c1_driver_TXData 2FBF             __end_ofi1_i2c1_driver_startRX 2F54  
                       ??_TMR4_StartTimer 0031                          ??_TMR2_StopTimer 0070  
                          _interpulseWait 0166           __end_of_TMR2_LoadPeriodRegister 2FCE  
                        ??_calcDownstroke 004D                             __pstringtext1 1000  
                           __pstringtext2 10F2                             __pstringtext3 1800  
                           __pstringtext4 187A                             __pstringtext5 2800  
                           __pstringtext6 3032                             __pstringtext7 3035  
                           __pstringtext8 3044                             __pstringtext9 3048  
                 __size_ofi1_do_I2C_RESET 0007                    _send_2length_2bytes_IK 2266  
                     ?_EUSART_Receive_ISR 0070              __end_ofi1_i2c1_driver_isNACK 213E  
                              _TMR0_RANGE 3035                          ___lldiv@quotient 003A  
                         _TMR0_Initialize 220D                                  stricmp@r 0037  
                              _TMR2_RANGE 3032                                  strcspn@i 003C  
       send_2length_2bytes_IK@topOrBottom 0041       i1send_2length_2bytes_IK@topOrBottom 0025  
                  __size_of_i2c_setBuffer 0015                              ?_getMoveMask 00B5  
                   __size_of_startAbsMove 0011                                  toupper@c 0032  
                  __end_ofi1_mssp1_setIRQ 2F5A                               _returnReset 2FDA  
                                strtok@s1 0044                                  strtok@s2 003F  
                                strspn@s1 003E                                  strspn@s2 0038  
        _do_I2C_DO_NACK_RESTART$intlevel0 2076                                  strtok@sp 0054  
               ??i1_do_I2C_SEND_ADR_WRITE 0071                  __size_of_main_initialize 00CC  
          __end_of_LED_setBrightnessRange 0800                              getPosition@a 00B5  
                            ?_getPosition 00B5                    __size_ofi1_do_I2C_IDLE 0005  
                  __size_ofi1_do_I2C_RCEN 0006                   ??i1_send_last_2bytes_IK 0075  
                      EUSART_Write@txData 0032              __size_of_EUSART_Transmit_ISR 001E  
          __end_of_PIN_MANAGER_Initialize 26AC               __end_of_i2c_busCollisionISR 2F4B  
                        ??_TMR4_StopTimer 0070                         ??_TMR4_WriteTimer 0070  
                           calcUpstroke@i 01E0                     __size_of_startRelMove 001B  
                   ??_TMR0_Load8bitPeriod 0031                       setMoveMask@probeNum 00B5  
                             _verboseMove 0160                      ??_EUSART_Receive_ISR 0070  
                   _TMR2_InterruptHandler 01E8                     _do_I2C_SEND_ADR_WRITE 2111  
                    _do_I2C_SEND_ADR_READ 213E  
