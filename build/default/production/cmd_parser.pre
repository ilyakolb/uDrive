
# 1 "cmd_parser.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 43 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdio.h"
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 29 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\errno.h"
extern int errno;

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\conio.h"
extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 23
extern char * cgets(char *);
extern void cputs(const char *);

# 88 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 180
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdlib.h"
typedef unsigned short wchar_t;

# 15
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 53
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 86 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdlib.h"
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 14 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\string.h"
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);




extern void * __builtin_memcpy(void *, const void *, size_t);
#pragma intrinsic(__builtin_memcpy)

# 36
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 15 "cmd_parser.h"
typedef enum {CMD_NONE, CMD_ABS, CMD_REL, CMD_P,
CMD_S, CMD_SETA, CMD_SETM, CMD_ZERO,
CMD_DRV_PEAK, CMD_DRV_GAIN, CMD_DRV_PIEZOONTIME,
CMD_HEATER_PRETIME, CMD_HEATER_POSTTIME, CMD_HEATER_GAIN, CMD_HEATER_PWR,
CMD_HEATER_TOGGLE, CMD_HEATER_TIMED,
CMD_GET_ACTIVE, CMD_GET_MOVABLE, CMD_MOTION_STATUS, CMD_DOMOVE, CMD_COMM_CHECK,
CMD_PING
} cmd_list;
int errorOut;
typedef union {
char paramString[10];
int paramI;
unsigned long paramL;
} param;

struct CMD_STRUCT{
cmd_list c;
param p1;
param p2;
};

int execCmd (struct CMD_STRUCT *s);
void parseCmd(char cmdString[], struct CMD_STRUCT *s);

# 42
int doMove(void);
int startRelMove(int steps);
int startAbsMove(int steps);
int stop(void);
int zeroPosition(void);
int getPosition(int a);

# 52
int setDrvPeak(int);
int setDrvGain(int);
int setDrvPiezoOnTime(int);

# 59
int setHeaterPreTime(int);
int setHeaterPostTime(int);
int setLEDBrightnessRange(int gain, int topOrBottom);
int setLEDPwr(int pwr, int topOrBottom);
int setHeaterToggle(int num, int topOrB);
int timedActiveHeatOn(long onTime, int topOrB);

# 68
int setActive(int probeNum, int onOff);
int setMoveMask(int probeNum, int onOff);
int getActive(void);
int getMoveMask(void);
int getMotionStatus(void);
int commCheck(void);

# 5 "cmd_parser.c"
void parseCmd(char cmdString[], struct CMD_STRUCT *s){
int paramIter = 0;
for (char *p = strtok(cmdString," "); p != (0); p = strtok((0), " ")){

if (paramIter == 0){
if(stricmp(p, "rel") == 0)
s->c = CMD_REL;
else if(stricmp(p, "abs") == 0)
s->c = CMD_ABS;
else if(stricmp(p, "pos") == 0)
s->c = CMD_P;
else if(stricmp(p,"s") == 0)
s->c = CMD_S;
else if(stricmp(p,"setA") == 0)
s->c = CMD_SETA;
else if(stricmp(p,"setM") == 0)
s->c = CMD_SETM;
else if(stricmp(p,"z") == 0)
s->c = CMD_ZERO;
else if(stricmp(p,"drvPeak") == 0)
s->c = CMD_DRV_PEAK;
else if(stricmp(p,"drvGain") == 0)
s->c = CMD_DRV_GAIN;
else if(stricmp(p,"piezoontime") == 0)
s->c = CMD_DRV_PIEZOONTIME;
else if(stricmp(p,"heaterpretime") == 0)
s->c = CMD_HEATER_PRETIME;
else if(stricmp(p,"heaterposttime") == 0)
s->c = CMD_HEATER_POSTTIME;
else if(stricmp(p,"ledgain") == 0)
s->c = CMD_HEATER_GAIN;
else if(stricmp(p,"ledpwr") == 0)
s->c = CMD_HEATER_PWR;
else if(stricmp(p,"toggleheater") == 0)
s->c = CMD_HEATER_TOGGLE;
else if(stricmp(p,"timeheater") == 0)
s->c = CMD_HEATER_TIMED;
else if(stricmp(p,"getA") == 0)
s->c = CMD_GET_ACTIVE;
else if(stricmp(p,"getM") == 0)
s->c = CMD_GET_MOVABLE;
else if(stricmp(p,"mstatus") == 0)
s->c = CMD_MOTION_STATUS;
else if(stricmp(p,"domove") == 0)
s->c = CMD_DOMOVE;
else if(stricmp(p,"comm") == 0)
s->c = CMD_COMM_CHECK;
else if(stricmp(p,"ping") == 0)
s->c = CMD_PING;


else
s->c = CMD_NONE;
}
else if(paramIter == 1){
s->p1.paramI = atoi(p);
}
else if(paramIter == 2){

s->p2.paramI = atoi(p);
}

paramIter++;
}
}


int execCmd (struct CMD_STRUCT *s){
errorOut = 1;

switch(s->c){
case CMD_REL: errorOut = startRelMove(s->p1.paramI); break;
case CMD_ABS: errorOut = startAbsMove(s->p1.paramI); break;
case CMD_P: errorOut = getPosition(s->p1.paramI); break;
case CMD_ZERO: errorOut = zeroPosition(); break;


case CMD_DRV_PEAK: errorOut = setDrvPeak(s->p1.paramI); break;
case CMD_DRV_GAIN: errorOut = setDrvGain(s->p1.paramI); break;
case CMD_DRV_PIEZOONTIME: errorOut = setDrvPiezoOnTime(s->p1.paramI); break;


case CMD_HEATER_PRETIME: errorOut = setHeaterPreTime(s->p1.paramI); break;
case CMD_HEATER_POSTTIME: errorOut = setHeaterPostTime(s->p1.paramI); break;
case CMD_HEATER_GAIN: errorOut = setLEDBrightnessRange(s->p1.paramI, s->p2.paramI); break;
case CMD_HEATER_PWR: errorOut = setLEDPwr(s->p1.paramI, s->p2.paramI); break;
case CMD_HEATER_TOGGLE: errorOut = setHeaterToggle(s->p1.paramI, s->p2.paramI); break;
case CMD_HEATER_TIMED: errorOut = timedActiveHeatOn(s->p1.paramL, s->p2.paramI); break;


case CMD_SETA: errorOut = setActive(s->p1.paramI, s->p2.paramI); break;
case CMD_SETM: errorOut = setMoveMask(s->p1.paramI, s->p2.paramI); break;
case CMD_GET_ACTIVE: errorOut = getActive(); break;
case CMD_GET_MOVABLE: errorOut = getMoveMask(); break;
case CMD_MOTION_STATUS: errorOut = getMotionStatus(); break;
case CMD_DOMOVE: errorOut = doMove(); break;
case CMD_COMM_CHECK: errorOut = commCheck(); break;
case CMD_PING: printf("!\n"); break;
default: printf("UNRECOGNIZED COMMAND!\n");

# 110
}

return errorOut;
}
